trigger: none
pr: none

pool:
  name: azsdk-pool
  demands: ImageOverride -equals ubuntu-24.04

variables:
  cachefile: verify-links-cache.txt

jobs:
- job: CheckLinks
  displayName: Check and Cache Links
  timeoutInMinutes: 720
  steps:
  - pwsh: |
      $reposToClone = @(
        "azure-rest-api-specs",
        "azure-sdk",
        "azure-sdk-for-android",
        "azure-sdk-for-c",
        "azure-sdk-for-cpp",
        "azure-sdk-for-go",
        "azure-sdk-for-ios",
        "azure-sdk-for-java",
        "azure-sdk-for-js",
        "azure-sdk-for-net",
        "azure-sdk-for-python",
        "azure-sdk-for-rust"
      )
      foreach ($repo in $reposToClone) {
        git clone https://github.com/Azure/${repo}.git --depth 1 --single-branch --branch main
      }

    workingDirectory: $(Pipeline.Workspace)
    displayName: 'Clone repos to optimize github link checking'

  - task: PowerShell@2
    displayName: 'azure-sdk link check'
    condition: succeededOrFailed()
    inputs:
      pwsh: true
      filePath: eng/common/scripts/Verify-Links.ps1
      arguments: >
        -urls "https://azure.github.io/azure-sdk/index.html"
        -ignoreLinksFile "./eng/pipelines/githubio-linkcheck-ignore-links.txt"
        -inputCacheFile "$(cachefile)"
        -outputCacheFile "$(cachefile)"
        -localGithubClonedRoot "$(Pipeline.Workspace)"
        -requestTimeoutSec 60 # For the nightly link checks increase timeout to handle some of the links that are redirects and can take longer

  - task: PowerShell@2
    displayName: 'azure-sdk link check with caching'
    condition: succeededOrFailed()
    inputs:
      pwsh: true
      filePath: eng/common/scripts/Verify-Links.ps1
      arguments: >
        -urls "https://azure.github.io/azure-sdk/index.html"
        -ignoreLinksFile "./eng/pipelines/githubio-linkcheck-ignore-links.txt"
        -inputCacheFile "$(cachefile)"
        -outputCacheFile "$(cachefile)"

  - task: PowerShell@2
    displayName: 'java link check'
    condition: succeededOrFailed()
    inputs:
      pwsh: true
      filePath: eng/common/scripts/Verify-Links.ps1
      arguments: >
        -urls "https://azure.github.io/azure-sdk-for-java/index.html"
        -ignoreLinksFile "./eng/pipelines/githubio-linkcheck-ignore-links.txt"
        -inputCacheFile "$(cachefile)"
        -outputCacheFile "$(cachefile)"

  - task: PowerShell@2
    displayName: 'js link check'
    condition: succeededOrFailed()
    inputs:
      pwsh: true
      filePath: eng/common/scripts/Verify-Links.ps1
      arguments: >
        -urls "https://azure.github.io/azure-sdk-for-js/index.html"
        -ignoreLinksFile "./eng/pipelines/githubio-linkcheck-ignore-links.txt"
        -inputCacheFile "$(cachefile)"
        -outputCacheFile "$(cachefile)"

  - task: PowerShell@2
    displayName: 'net link check'
    condition: succeededOrFailed()
    inputs:
      pwsh: true
      filePath: eng/common/scripts/Verify-Links.ps1
      arguments: >
        -urls "https://azure.github.io/azure-sdk-for-net/index.html"
        -ignoreLinksFile "./eng/pipelines/githubio-linkcheck-ignore-links.txt"
        -inputCacheFile "$(cachefile)"
        -outputCacheFile "$(cachefile)"

  - task: PowerShell@2
    displayName: 'python link check'
    condition: succeededOrFailed()
    inputs:
      pwsh: true
      filePath: eng/common/scripts/Verify-Links.ps1
      arguments: >
        -urls "https://azure.github.io/azure-sdk-for-python/index.html"
        -ignoreLinksFile "./eng/pipelines/githubio-linkcheck-ignore-links.txt"
        -inputCacheFile "$(cachefile)"
        -outputCacheFile "$(cachefile)"

  - task: PowerShell@2
    displayName: 'tools link check'
    condition: succeededOrFailed()
    inputs:
      pwsh: true
      filePath: eng/common/scripts/Verify-Links.ps1
      arguments: >
        -urls (Get-ChildItem -Path ./eng/common -Recurse -Include *.md)
        -rootUrl "file://$(System.DefaultWorkingDirectory)"
        -ignoreLinksFile "./eng/pipelines/githubio-linkcheck-ignore-links.txt"
        -inputCacheFile "$(cachefile)"
        -outputCacheFile "$(cachefile)"

  - publish: $(cachefile)
    artifact: verify-links-cache.txt
    condition: succeededOrFailed()
    displayName: Upload verified links

  - task: AzurePowerShell@5
    displayName: 'Upload cache file to blob container'
    condition: succeededOrFailed()
    inputs:
      azureSubscription: 'Azure SDK Artifacts'
      ScriptType: 'InlineScript'
      azurePowerShellVersion: LatestVersion
      pwsh: true
      Inline: |
        azcopy copy '$(cachefile)' 'https://azuresdkartifacts.blob.core.windows.net/verify-links-cache'
    env:
      AZCOPY_AUTO_LOGIN_TYPE: 'PSCRED'
