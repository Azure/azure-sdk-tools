@page "{id}/{revisionId?}"
@model APIViewWeb.Pages.Assemblies.ReviewPageModel
@{
    Layout = "ReviewLayout";
    ViewData["Title"] = Model.Review.DisplayName;
}

@if (Model.Review.UpdateAvailable)
{
    <div class="alert alert-warning" role="alert" asp-resource="@Model.Review" asp-requirement="@ReviewOwnerRequirement.Instance">
        <form asp-page-handler="RefreshModel" class=".form-inline" method="post" asp-route-id="@Model.Review.ReviewId">
            Your code review uses older format and can be updated
            <button type="submit" class="btn btn-link">Update model</button>
        </form>
    </div>
}

<div class="row">
    <div class="col my-2">
        <div class="dropdown float-left mr-2">
            <a class="btn btn-sm btn-outline-secondary dropdown-toggle" href="#" role="button" data-toggle="dropdown">
                @Model.Revision.DisplayName
            </a>

            <div class="dropdown-menu">
                @foreach (var revision in Model.Review.Revisions.Reverse())
                {
                    var colorCss =  revision.IsApproved ? "text-success" : "";
                    <a class="dropdown-item @colorCss" asp-route-id="@Model.Review.ReviewId" asp-route-revisionId="@revision.RevisionId" asp-route-doc="@Model.ShowDocumentation">
                        @revision.DisplayName
                    </a>
                }
            </div>
        </div>

        @if (Model.PreviousRevisions.Any())
        {
            <div class="btn-group float-left">
                @if (Model.DiffRevisionId != null)
                {
                    <a class="btn btn-sm btn-outline-secondary active" asp-route-diffRevisionId="" asp-route-doc="@Model.ShowDocumentation">Diff with @Model.DiffRevision?.DisplayName</a>
                }
                else
                {
                    <a class="btn btn-sm btn-outline-secondary" asp-all-route-data=@Model.GetRoutingData(diffRevisionId: Model.PreviousRevisions.Last().RevisionId, showDocumentation: Model.ShowDocumentation, showDiffOnly: Model.ShowDiffOnly)>Diff</a>
                }
                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>

                <div class="dropdown-menu">
                    @foreach (var revision in Model.PreviousRevisions.Reverse())
                    {
                        var colorCss = revision.IsApproved ? "text-success" : "";
                        <a class="dropdown-item @colorCss" active-if="@(Model.DiffRevisionId == revision.RevisionId)" asp-all-route-data=@Model.GetRoutingData(diffRevisionId: revision.RevisionId, showDocumentation: Model.ShowDocumentation, showDiffOnly: Model.ShowDiffOnly)>
                            @revision.DisplayName
                        </a>
                    }
                </div>
            </div>
        }

        <form asp-resource="@Model.Review" asp-requirement="@ReviewOwnerRequirement.Instance" class="form-inline float-right ml-2" method="post" asp-page-handler="ToggleClosed">
            <input type="submit" class="btn btn-sm btn-secondary" value="@(Model.Review.IsClosed ? "Reopen": "Close")" />
        </form>

        <div class="float-right">
            <form asp-resource="@Model.Review" class="form-inline float-left ml-2" method="post" asp-page-handler="ToggleSubscribed">
                @if (Model.Review.GetUserEmail(User) != null)
                {
                    if (Model.Review.IsUserSubscribed(User))
                    {
                        <input type="submit" class="btn btn-sm btn-outline-secondary" value="Unsubscribe" />
                    }
                    else
                    {
                        <input type="submit" class="btn btn-sm btn-primary" value="Subscribe" />
                    }
                }
                else
                {
                    <input type="submit" class="btn btn-sm btn-primary" title="Link a microsoft.com email to your Github account to subscribe" disabled value="Subscribe" />
                }
            </form>
        </div>
        <div class="dropdown d-inline-block float-right ml-2">
            <a class="btn btn-sm btn-outline-secondary dropdown-toggle" href="#" role="button" data-toggle="dropdown">
                💬 @Model.ActiveConversations / @Model.TotalActiveConversations
            </a>
            <div class="dropdown-menu dropdown-menu-right">
                <span class="dropdown-item"><b>@Model.ActiveConversations</b> active revision threads.</span>
                <span class="dropdown-item"><b>@Model.TotalActiveConversations</b> total active threads.</span>
                <span class="dropdown-item checkbox">
                    <label>
                        <input type="checkbox" checked="checked" id="show-comments-checkbox">
                        Show comments
                    </label>
                </span>
                <span class="dropdown-item" id="show-documentation-component">
                    <input asp-for="@Model.ShowDocumentation" class="show-doc-checkbox">
                    <a class="text-dark show-document" asp-all-route-data=@Model.GetRoutingData(diffRevisionId: Model.DiffRevisionId, showDocumentation: !Model.ShowDocumentation, showDiffOnly: Model.ShowDiffOnly)>
                        <label>Show documentation</label>
                    </a>
                </span>
                @if (!String.IsNullOrEmpty(Model.DiffRevisionId))
                {
                    <span class="dropdown-item">
                        <input asp-for="@Model.ShowDiffOnly" class="show-diffonly-checkbox">
                        <a class="text-dark show-diffonly" asp-all-route-data=@Model.GetRoutingData(diffRevisionId: Model.DiffRevisionId, showDocumentation: Model.ShowDocumentation, showDiffOnly: !Model.ShowDiffOnly)>
                            <label>Show only diff</label>
                        </a>
                    </span>
                }
            </div>
        </div>
        <div class="float-right">
            <form asp-resource="@Model.Review" class="form-inline float-left ml-2" asp-page-handler="ToggleApproval" method="post" asp-requirement="@ApproverRequirement.Instance">
                <input type="hidden" name="revisionId" value="@Model.Revision.RevisionId" />
                @if (Model.DiffRevision == null || Model.DiffRevision.Approvers.Count > 0)
                {
                    <input type="submit" class="btn btn-sm btn-secondary" value="@(Model.Revision.Approvers.Contains(User.GetGitHubLogin()) ? "Revert Approval" : "Approve")" />
                }
                else
                {

                    <input type="submit" class="btn btn-sm btn-secondary" disabled title="API review cannot be approved when comparing against unapproved revision." value="@(Model.Revision.Approvers.Contains(User.GetGitHubLogin()) ? "Revert Approval" : "Approve")" />
                }
            </form>
        </div>

        <div class="float-right ml-2">
            <label>Approval Status:</label>
            @if (Model.Revision.Approvers.Count > 0)
            {
                foreach (var approver in Model.Revision.Approvers)
                {
                    <label class="font-weight-bolder text-success">✔️@approver</label>
                }
            }
            else
            {
                <label class="font-weight-bolder text-danger">Pending</label>
            }
        </div>
    </div>
</div>
<div class="row" data-review-id="@Model.Review.ReviewId" data-revision-id="@Model.Revision.RevisionId" data-language="@Model.Review.Language">
    <div id="review-left" class="col-lg-2 col">
        <div class="namespace-view">
            @if (Model.CodeFile != null)
            {
                <partial name="Shared/Navigation" model=" Model.CodeFile.Navigation" />
            }
        </div>
    </div>

    <div id="review-right" class="col-10">
        <table class="code-window border rounded-1">
            <tbody>
                @foreach (var line in Model.Lines)
                {
                    <partial name="_CodeLine" model="@line" />
                }
            </tbody>

        </table>
    </div>
</div>
<partial name="_CommentFormPartial" /> 