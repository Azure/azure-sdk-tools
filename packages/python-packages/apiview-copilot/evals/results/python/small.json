[
    {
        "testcase": "few_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the __init__ method and instead implement a separate from_connection_string class method.",
                    "comment": "The constructor should not accept a connection string per the guideline. Instead, a factory method (from_connection_string) must be provided if supported.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 171,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Using 'list' as an attribute name shadows the built-in list type and may be ambiguous. A more descriptive name such as 'captions' would better convey its intent.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Remove PeopleResult from the aio sub-namespace and define it only once in the shared models namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespace per the guidelines. Reuse the model from azure.ai.vision.imageanalysis.models.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from __init__ and instead provide a separate factory classmethod (e.g. from_connection_string) that accepts a connection string.",
                    "comment": "According to the SDK guidelines, the constructor must not accept a connection string. Use a factory method to create a client from a connection string (python_design.html#python-client-connection-string).",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 171,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar items: List[DenseCaption]",
                    "comment": "Avoid using built-in names such as 'list' for attribute identifiers. Renaming to 'items' (or a similar descriptive term) prevents shadowing the Python built-in and enhances readability.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Remove the PeopleResult model from the aio sub-namespace and define it only once in the main models namespace.",
                    "comment": "Models should not be duplicated between the sync and aio namespaces. PeopleResult is defined under the aio namespace, which violates the guideline (python_design.html#python-models-async).",
                    "source": "guideline"
                }
            ]
        },
        "expected_comments": 2,
        "comments_found": 3,
        "valid_generic_comments": 1,
        "true_positives": 2,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 100,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "similarity": 5,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE accurately reflects the guidelines provided in the CONTEXT without adding unsupported information or omitting any critical details. It addresses both guidelines thoroughly and correctly.",
        "overall_score": 100
    },
    {
        "testcase": "many_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from __init__ and add a separate factory method (e.g. from_connection_string) to create the client.",
                    "comment": "The __init__ method accepts a connection_string parameter, which violates the guideline that the constructor must not take a connection string.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 30,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "Insert a '*' after the required parameters to enforce keyword-only optional arguments, e.g.,\n\ndef analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., ...):",
                    "comment": "Optional parameters in analyze_from_url must be keyword-only according to the SDK guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 53,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.AsyncImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client to 'ImageAnalysisClient' so it matches the synchronous client name in the aio package.",
                    "comment": "The asynchronous client should use the same client name as the synchronous one; having 'AsyncImageAnalysisClient' violates the naming guideline for sync/async clients.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-constructor-api-version-argument-1"
                    ],
                    "line_no": 54,
                    "bad_code": "def __init__(\n        self, \n        endpoint: str, \n        credential: Union[AzureKeyCredential, AsyncTokenCredential], \n    ) -> None",
                    "suggestion": "Add an optional keyword-only api_version parameter to the async client __init__ signature, for example: \n    def __init__(self, endpoint: str, credential: Union[AzureKeyCredential, AsyncTokenCredential], *, api_version: str = ..., **kwargs: Any) -> None",
                    "comment": "The async client constructor is missing the optional api_version parameter required by the guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-static-methods"
                    ],
                    "line_no": 88,
                    "bad_code": "@staticmethod",
                    "suggestion": "Remove the staticmethod decorator and refactor send_request as an instance method or a module-level function.",
                    "comment": "Static methods are discouraged; module-level functions or instance methods should be used instead.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 168,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "Use a less ambiguous attribute name such as 'items' or 'captions' to avoid shadowing the built-in 'list' type.",
                    "comment": "Naming an attribute 'list' can lead to confusion with Python\u2019s built-in type. Choosing a more descriptive name improves clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to 'DetectedPerson' using PascalCase.",
                    "comment": "Type names must be in PascalCase; 'detectedPerson' should be renamed to 'DetectedPerson'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace this getter method with a property (e.g. @property def result(self): ...).",
                    "comment": "Simple getter methods are discouraged; use a property to expose the value instead.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 413,
                    "bad_code": "def set_result(self, obj) -> None",
                    "suggestion": "Replace this setter method with a property setter (e.g. @result.setter def result(self, value): ...).",
                    "comment": "Simple setter methods are discouraged; use a property setter to update the value.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 432,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Move PeopleResult to the common models namespace (azure.ai.vision.imageanalysis.models) instead of duplicating it in the aio sub-namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespaces.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "    tags = 'tags'",
                    "suggestion": "Change the enum member to uppercase: TAGS = 'tags'",
                    "comment": "Enum member names must be in UPPERCASE; 'tags' should be renamed to 'TAGS'.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from __init__ and instead implement a separate from_connection_string factory method.",
                    "comment": "The synchronous client constructor accepts a connection_string, which violates the guideline that the constructor must not take a connection string.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 34,
                    "bad_code": "gender_neutral_caption: Optional[bool] = ...,",
                    "suggestion": "Insert a '*' before the optional parameters so that they become keyword-only, for example:\n\n def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., ...)",
                    "comment": "Optional operation-specific arguments in analyze_from_url are not forced to be keyword-only. This violates the guideline that optional arguments should be keyword-only.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 53,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.AsyncImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client to ImageAnalysisClient so that the synchronous and asynchronous clients share the same name, with async located in the .aio subpackage.",
                    "comment": "The async client is named AsyncImageAnalysisClient instead of using the same client name as the sync version, which violates naming guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 168,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar items: List[DenseCaption]",
                    "comment": "Using the name 'list' shadows the built\u2010in list type. Choose a more descriptive name such as 'items' to avoid potential conflicts.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "    def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace the get_result (and corresponding set_result) methods with a property, for example using @property and @<name>.setter decorators.",
                    "comment": "Simple getter and setter methods are used in ObjectsResult, which violates the guideline that properties should be used instead.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "tags = 'tags'",
                    "suggestion": "Rename the enum member to TAGS (i.e. use uppercase) to comply with the guideline.",
                    "comment": "Enum members should be uppercase to follow standard Python conventions. Change 'tags' to 'TAGS' to be consistent with the other enum members. Enum member names should be in UPPERCASE. The 'tags' member violates this naming standard.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 10,
        "comments_found": 6,
        "valid_generic_comments": 1,
        "true_positives": 4,
        "false_positives": 0,
        "false_negatives": 5,
        "percent_coverage": 40,
        "rule_matches_wrong_line": 1,
        "wrong_line_details": [
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                30,
                34
            ]
        ],
        "similarity": 4,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE accurately reflects the guidelines provided in the CONTEXT without introducing unsupported information or omitting critical details, making it fully grounded and complete.",
        "overall_score": 59
    },
    {
        "testcase": "no_violations",
        "expected": {
            "comments": []
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 170,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Using 'list' as an attribute name shadows the built-in type. A more descriptive name like 'captions' improves clarity and avoids potential conflicts.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 0,
        "comments_found": 1,
        "valid_generic_comments": 1,
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 100.0
    },
    {
        "testcase": "multiple_same_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 16,
                    "bad_code": "def analyze(",
                    "suggestion": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the 'analyze' method should be keyword-only. Insert a '*' after the required parameters so that all optional parameters must be specified by name.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 28,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the 'analyze_from_url' method should be keyword-only. Adding a '*' after the required parameters will enforce this design guideline.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 62,
                    "bad_code": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "For async methods, optional parameters must also be keyword-only. Insert '*' to force keyword-only usage.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 74,
                    "bad_code": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be made keyword-only by inserting '*' after the required parameters.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 166,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Using 'list' as an attribute name shadows the built-in list type in Python. Renaming this attribute to something more descriptive (like 'captions' or 'dense_captions') will avoid potential conflicts and improve code clarity.",
                    "source": "generic"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 20,
                    "bad_code": "    gender_neutral_caption: Optional[bool] = ...",
                    "suggestion": "Add a '*' after 'visual_features: List[VisualFeatures]' so that all optional parameters become keyword-only, e.g.:\n\ndef analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the synchronous 'analyze' method should be declared as keyword-only according to the guideline (python_design.html#python-client-optional-arguments-keyword-only).",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 32,
                    "bad_code": "    gender_neutral_caption: Optional[bool] = ...",
                    "suggestion": "Insert a '*' delimiter before the optional parameters in the method signature, for example:\n\ndef analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the synchronous 'analyze_from_url' method should be keyword-only as per the guideline (python_design.html#python-client-optional-arguments-keyword-only).",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 66,
                    "bad_code": "    gender_neutral_caption: Optional[bool] = ...",
                    "suggestion": "Add a '*' separator after the required parameters in the async method signature, for example:\n\nasync def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the asynchronous 'analyze' method should be keyword-only (see python_design.html#python-client-optional-arguments-keyword-only).",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 78,
                    "bad_code": "    gender_neutral_caption: Optional[bool] = ...",
                    "suggestion": "Insert a '*' before the optional parameters in the async 'analyze_from_url' method, for example:\n\nasync def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the asynchronous 'analyze_from_url' method must be declared as keyword-only in compliance with python_design.html#python-client-optional-arguments-keyword-only.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 166,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Naming an attribute 'list' shadows the built-in list type. Choose a more descriptive name (such as 'captions' or 'items') to avoid potential conflicts and improve readability.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 4,
        "comments_found": 5,
        "valid_generic_comments": 1,
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 0,
        "rule_matches_wrong_line": 4,
        "wrong_line_details": [
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                28,
                32
            ],
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                74,
                78
            ],
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                16,
                20
            ],
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                62,
                66
            ]
        ],
        "similarity": 4,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately conveying the guideline without introducing unsupported information or omitting any critical details.",
        "overall_score": 48
    },
    {
        "average_score": 76.75,
        "total_evals": 4
    }
]