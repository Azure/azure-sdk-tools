//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package test_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAvailabilitySets_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an availability set."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewAvailabilitySetsClient("1", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myAvailabilitySet",
		test.AvailabilitySet{
			Location: to.StringPtr("westus"),
			AdditionalProperties: map[string]*string{
				"anyProperty": to.StringPtr("fakeValue"),
			},
			Properties: &test.AvailabilitySetProperties{
				PlatformFaultDomainCount:  to.Int32Ptr(2),
				PlatformUpdateDomainCount: to.Int32Ptr(20),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnAvailabilitySet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.AvailabilitySet{
			Name:     to.StringPtr("myAvailabilitySet"),
			Type:     to.StringPtr("Microsoft.Compute/availabilitySets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
			Location: to.StringPtr("westus"),
			Properties: &test.AvailabilitySetProperties{
				PlatformFaultDomainCount:  to.Int32Ptr(2),
				PlatformUpdateDomainCount: to.Int32Ptr(20),
			},
			SKU: &test.SKU{
				Name: to.StringPtr("Classic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailabilitySet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailabilitySet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnAvailabilitySet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailabilitySets_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAvailabilitySets_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAvailabilitySets_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAvailabilitySets_ListBySubscription(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailabilitySetsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List availability sets in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewAvailabilitySetsClient("{subscriptionId}", cred, &options)
	pager := client.ListBySubscription(&test.AvailabilitySetsClientListBySubscriptionOptions{Expand: to.StringPtr("Faked for test: +ge+2020, %3E2012")})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailabilitySetsInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.AvailabilitySetListResult{
				Value: []*test.AvailabilitySet{
					{
						Name:     to.StringPtr("{availabilitySetName}"),
						Type:     to.StringPtr("Microsoft.Compute/availabilitySets"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						Location: to.StringPtr("australiasoutheast"),
						Properties: &test.AvailabilitySetProperties{
							PlatformFaultDomainCount:  to.Int32Ptr(3),
							PlatformUpdateDomainCount: to.Int32Ptr(5),
							VirtualMachines: []*test.SubResource{
								{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
								}},
						},
						SKU: &test.SKU{
							Name: to.StringPtr("Classic"),
						},
					},
					{
						Name:     to.StringPtr("{availabilitySetName}"),
						Type:     to.StringPtr("Microsoft.Compute/availabilitySets"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						Location: to.StringPtr("australiasoutheast"),
						Properties: &test.AvailabilitySetProperties{
							PlatformFaultDomainCount:  to.Int32Ptr(3),
							PlatformUpdateDomainCount: to.Int32Ptr(5),
							VirtualMachines: []*test.SubResource{
								{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
								}},
						},
						SKU: &test.SKU{
							Name: to.StringPtr("Classic"),
						},
					},
					{
						Name:     to.StringPtr("{availabilitySetName}"),
						Type:     to.StringPtr("Microsoft.Compute/availabilitySets"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						Location: to.StringPtr("westcentralus"),
						Tags: map[string]*string{
							"{tagName}": to.StringPtr("{tagValue}"),
						},
						Properties: &test.AvailabilitySetProperties{
							PlatformFaultDomainCount:  to.Int32Ptr(3),
							PlatformUpdateDomainCount: to.Int32Ptr(5),
							VirtualMachines:           []*test.SubResource{},
						},
						SKU: &test.SKU{
							Name: to.StringPtr("Classic"),
						},
					},
					{
						Name:     to.StringPtr("{availabilitySetName}"),
						Type:     to.StringPtr("Microsoft.Compute/availabilitySets"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						Location: to.StringPtr("westcentralus"),
						Tags: map[string]*string{
							"{tagName}": to.StringPtr("{tagValue}"),
						},
						Properties: &test.AvailabilitySetProperties{
							PlatformFaultDomainCount:  to.Int32Ptr(3),
							PlatformUpdateDomainCount: to.Int32Ptr(5),
							VirtualMachines:           []*test.SubResource{},
						},
						SKU: &test.SKU{
							Name: to.StringPtr("Classic"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().AvailabilitySetListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().AvailabilitySetListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailabilitySetsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestAvailabilitySets_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAvailabilitySets_ListAvailableSizes(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestProximityPlacementGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a proximity placement group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"$(resourceName)",
		test.ProximityPlacementGroup{
			Location: to.StringPtr("westus"),
			Properties: &test.ProximityPlacementGroupProperties{
				ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAProximityPlacementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ProximityPlacementGroup{
			Name:     to.StringPtr("myProximityPlacementGroup"),
			Type:     to.StringPtr("Microsoft.Compute/proximityPlacementGroups"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
			Location: to.StringPtr("westus"),
			Properties: &test.ProximityPlacementGroupProperties{
				ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProximityPlacementGroups_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PatchAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myProximityPlacementGroup",
		test.ProximityPlacementGroupUpdate{
			Tags: map[string]*string{
				"additionalProp1": to.StringPtr("string"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PatchAProximityPlacementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ProximityPlacementGroup{
			Name:     to.StringPtr("myProximityPlacementGroup"),
			Type:     to.StringPtr("Microsoft.Compute/proximityPlacementGroups"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
			Location: to.StringPtr("westus"),
			Properties: &test.ProximityPlacementGroupProperties{
				ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PatchAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProximityPlacementGroups_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"$(resourceName)",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteAProximityPlacementGroup.json: %v", err)
	}
}

func TestProximityPlacementGroups_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myProximityPlacementGroup",
		&test.ProximityPlacementGroupsClientGetOptions{IncludeColocationStatus: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAProximityPlacementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ProximityPlacementGroup{
			Name:     to.StringPtr("myProximityPlacementGroup"),
			Type:     to.StringPtr("Microsoft.Compute/proximityPlacementGroups"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
			Location: to.StringPtr("westus"),
			Properties: &test.ProximityPlacementGroupProperties{
				AvailabilitySets: []*test.SubResourceWithColocationStatus{
					{
						ID: to.StringPtr("string"),
					}},
				ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
				VirtualMachineScaleSets: []*test.SubResourceWithColocationStatus{
					{
						ID: to.StringPtr("string"),
					}},
				VirtualMachines: []*test.SubResourceWithColocationStatus{
					{
						ID: to.StringPtr("string"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProximityPlacementGroups_ListBySubscription(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	pager := client.ListBySubscription(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ProximityPlacementGroupListResult{
				Value: []*test.ProximityPlacementGroup{
					{
						Name:     to.StringPtr("myProximityPlacementGroup"),
						Type:     to.StringPtr("Microsoft.Compute/proximityPlacementGroups"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
						Location: to.StringPtr("westus"),
						Properties: &test.ProximityPlacementGroupProperties{
							AvailabilitySets: []*test.SubResourceWithColocationStatus{
								{
									ID: to.StringPtr("string"),
								}},
							ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
							VirtualMachineScaleSets: []*test.SubResourceWithColocationStatus{
								{
									ID: to.StringPtr("string"),
								}},
							VirtualMachines: []*test.SubResourceWithColocationStatus{
								{
									ID: to.StringPtr("string"),
								}},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ProximityPlacementGroupListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ProximityPlacementGroupListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestProximityPlacementGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInAResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ProximityPlacementGroupListResult{
				Value: []*test.ProximityPlacementGroup{
					{
						Name:     to.StringPtr("myProximityPlacementGroup"),
						Type:     to.StringPtr("Microsoft.Compute/proximityPlacementGroups"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
						Location: to.StringPtr("westus"),
						Properties: &test.ProximityPlacementGroupProperties{
							AvailabilitySets: []*test.SubResourceWithColocationStatus{
								{
									ID: to.StringPtr("string"),
								}},
							ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
							VirtualMachineScaleSets: []*test.SubResourceWithColocationStatus{
								{
									ID: to.StringPtr("string"),
								}},
							VirtualMachines: []*test.SubResourceWithColocationStatus{
								{
									ID: to.StringPtr("string"),
								}},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ProximityPlacementGroupListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ProximityPlacementGroupListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDedicatedHostGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		test.DedicatedHostGroup{
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("finance"),
			},
			Properties: &test.DedicatedHostGroupProperties{
				PlatformFaultDomainCount:  to.Int32Ptr(3),
				SupportAutomaticPlacement: to.BoolPtr(true),
			},
			Zones: []*string{
				to.StringPtr("1")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHostGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DedicatedHostGroup{
			Name:     to.StringPtr("myDedicatedHostGroup"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("finance"),
				"owner":      to.StringPtr("myCompany"),
			},
			Properties: &test.DedicatedHostGroupProperties{
				PlatformFaultDomainCount:  to.Int32Ptr(3),
				SupportAutomaticPlacement: to.BoolPtr(true),
			},
			Zones: []*string{
				to.StringPtr("1")},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHostGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHostGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHostGroups_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDedicatedHostGroups_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDedicatedHostGroups_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a dedicated host group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDedicatedHostGroupsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		&test.DedicatedHostGroupsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHostGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DedicatedHostGroup{
			Name:     to.StringPtr("myDedicatedHostGroup"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"{tagName}": to.StringPtr("{tagValue}"),
			},
			Properties: &test.DedicatedHostGroupProperties{
				Hosts: []*test.SubResourceReadOnly{
					{
						ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost1"),
					},
					{
						ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost2"),
					}},
				InstanceView: &test.DedicatedHostGroupInstanceView{
					Hosts: []*test.DedicatedHostInstanceViewWithName{
						{
							AssetID: to.StringPtr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
							AvailableCapacity: &test.DedicatedHostAvailableCapacity{
								AllocatableVMs: []*test.DedicatedHostAllocatableVM{
									{
										Count:  to.Float64Ptr(10),
										VMSize: to.StringPtr("Standard_A1"),
									}},
							},
							Statuses: []*test.InstanceViewStatus{
								{
									Code:          to.StringPtr("ProvisioningState/succeeded"),
									DisplayStatus: to.StringPtr("Provisioning succeeded"),
									Level:         test.StatusLevelTypesInfo.ToPtr(),
								},
								{
									Code:          to.StringPtr("HealthState/available"),
									DisplayStatus: to.StringPtr("Host available"),
									Level:         test.StatusLevelTypesInfo.ToPtr(),
								}},
							Name: to.StringPtr("myHost1"),
						},
						{
							AssetID: to.StringPtr("f293d4ac-5eea-4be2-b0c0-0fcaa09aebf8"),
							AvailableCapacity: &test.DedicatedHostAvailableCapacity{
								AllocatableVMs: []*test.DedicatedHostAllocatableVM{
									{
										Count:  to.Float64Ptr(10),
										VMSize: to.StringPtr("Standard_A1"),
									}},
							},
							Statuses: []*test.InstanceViewStatus{
								{
									Code:          to.StringPtr("ProvisioningState/succeeded"),
									DisplayStatus: to.StringPtr("Provisioning succeeded"),
									Level:         test.StatusLevelTypesInfo.ToPtr(),
								},
								{
									Code:          to.StringPtr("HealthState/available"),
									DisplayStatus: to.StringPtr("Host available"),
									Level:         test.StatusLevelTypesInfo.ToPtr(),
								}},
							Name: to.StringPtr("myHost2"),
						}},
				},
				PlatformFaultDomainCount:  to.Int32Ptr(3),
				SupportAutomaticPlacement: to.BoolPtr(true),
			},
			Zones: []*string{
				to.StringPtr("3")},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHostGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHostGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHostGroups_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDedicatedHostGroups_ListBySubscription(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDedicatedHosts_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host ."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		"myDedicatedHost",
		test.DedicatedHost{
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("HR"),
			},
			Properties: &test.DedicatedHostProperties{
				PlatformFaultDomain: to.Int32Ptr(1),
			},
			SKU: &test.SKU{
				Name: to.StringPtr("DSv3-Type1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DedicatedHost{
			Name:     to.StringPtr("myDedicatedHost"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("HR"),
			},
			Properties: &test.DedicatedHostProperties{
				AutoReplaceOnFailure: to.BoolPtr(false),
				HostID:               to.StringPtr("{GUID}"),
				LicenseType:          test.DedicatedHostLicenseTypesWindowsServerHybrid.ToPtr(),
				PlatformFaultDomain:  to.Int32Ptr(1),
			},
			SKU: &test.SKU{
				Name: to.StringPtr("DSv3-Type1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHost)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHosts_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDedicatedHosts_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDedicatedHosts_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dedicated host."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDedicatedHostsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		"myHost",
		&test.DedicatedHostsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHost.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DedicatedHost{
			Name:     to.StringPtr("myHost"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("HR"),
			},
			Properties: &test.DedicatedHostProperties{
				AutoReplaceOnFailure: to.BoolPtr(true),
				HostID:               to.StringPtr("{GUID}"),
				InstanceView: &test.DedicatedHostInstanceView{
					AssetID: to.StringPtr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
					AvailableCapacity: &test.DedicatedHostAvailableCapacity{
						AllocatableVMs: []*test.DedicatedHostAllocatableVM{
							{
								Count:  to.Float64Ptr(10),
								VMSize: to.StringPtr("Standard_A1"),
							}},
					},
					Statuses: []*test.InstanceViewStatus{
						{
							Code:          to.StringPtr("ProvisioningState/succeeded"),
							DisplayStatus: to.StringPtr("Provisioning succeeded"),
							Level:         test.StatusLevelTypesInfo.ToPtr(),
						},
						{
							Code:          to.StringPtr("HealthState/available"),
							DisplayStatus: to.StringPtr("Host available"),
							Level:         test.StatusLevelTypesInfo.ToPtr(),
						}},
				},
				PlatformFaultDomain: to.Int32Ptr(1),
				ProvisioningState:   to.StringPtr("Succeeded"),
				ProvisioningTime:    to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-27T01:02:38.3138469+00:00"); return t }()),
				VirtualMachines: []*test.SubResourceReadOnly{
					{
						ID: to.StringPtr("/subscriptions/subId/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/vm1"),
					}},
			},
			SKU: &test.SKU{
				Name: to.StringPtr("DSv3-Type1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHost) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHost)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHosts_ListByHostGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSSHPublicKeys_ListBySubscription(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSSHPublicKeys_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSSHPublicKeys_Create(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new SSH public key resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	res, err := client.Create(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		test.SSHPublicKeyResource{
			Location: to.StringPtr("westus"),
			Properties: &test.SSHPublicKeyResourceProperties{
				PublicKey: to.StringPtr("{ssh-rsa public key}"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnSshPublicKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.SSHPublicKeyResource{
			Name:     to.StringPtr("mySshPublicKeyName"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
			Location: to.StringPtr("westus"),
			Properties: &test.SSHPublicKeyResourceProperties{
				PublicKey: to.StringPtr("{ssh-rsa public key}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SSHPublicKeyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnSshPublicKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSSHPublicKeys_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSSHPublicKeys_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSSHPublicKeys_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAnSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an ssh public key."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSSHPublicKeysClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAnSshPublicKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.SSHPublicKeyResource{
			Name:     to.StringPtr("mySshPublicKeyName"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"{tagName}": to.StringPtr("{tagValue}"),
			},
			Properties: &test.SSHPublicKeyResourceProperties{
				PublicKey: to.StringPtr("{ssh-rsa public key}"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SSHPublicKeyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAnSshPublicKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSSHPublicKeys_GenerateKeyPair(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GenerateSshKeyPair.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate an SSH key pair."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	res, err := client.GenerateKeyPair(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GenerateSshKeyPair.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.SSHPublicKeyGenerateKeyPairResult{
			ID:         to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
			PrivateKey: to.StringPtr("{ssh private key}"),
			PublicKey:  to.StringPtr("{ssh-rsa public key}"),
		}
		if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyGenerateKeyPairResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SSHPublicKeyGenerateKeyPairResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GenerateSshKeyPair.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineExtensionImages_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineExtensionImages_ListTypes(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineExtensionImages_ListVersions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineExtensions_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineExtensions_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineExtensions_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineExtensions_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineExtensions_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineImages_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineImages_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineImages_ListOffers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineImages_ListPublishers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineImagesEdgeZone_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineImagesEdgeZone_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineImagesEdgeZone_ListOffers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineImagesEdgeZone_ListPublishers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestUsage_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_ListByLocation(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachinesInASubscriptionByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the virtual machines under the specified subscription for the specified location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	pager := client.ListByLocation("eastus",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachinesInASubscriptionByLocation.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.VirtualMachineListResult{
				Value: []*test.VirtualMachine{
					{
						Name:     to.StringPtr("{virtualMachineName}"),
						Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
						Location: to.StringPtr("eastus"),
						Tags: map[string]*string{
							"RG":      to.StringPtr("rg"),
							"testTag": to.StringPtr("1"),
						},
						Properties: &test.VirtualMachineProperties{
							AvailabilitySet: &test.SubResource{
								ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							HardwareProfile: &test.HardwareProfile{
								VMSize: test.VirtualMachineSizeTypesStandardA0.ToPtr(),
							},
							NetworkProfile: &test.NetworkProfile{
								NetworkInterfaces: []*test.NetworkInterfaceReference{
									{
										ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
									}},
							},
							OSProfile: &test.OSProfile{
								AdminUsername:            to.StringPtr("Foo12"),
								AllowExtensionOperations: to.BoolPtr(true),
								ComputerName:             to.StringPtr("Test"),
								Secrets:                  []*test.VaultSecretGroup{},
								WindowsConfiguration: &test.WindowsConfiguration{
									EnableAutomaticUpdates: to.BoolPtr(true),
									ProvisionVMAgent:       to.BoolPtr(true),
								},
							},
							ProvisioningState: to.StringPtr("Succeeded"),
							StorageProfile: &test.StorageProfile{
								DataDisks: []*test.DataDisk{},
								ImageReference: &test.ImageReference{
									Offer:     to.StringPtr("WindowsServer"),
									Publisher: to.StringPtr("MicrosoftWindowsServer"),
									SKU:       to.StringPtr("2012-R2-Datacenter"),
									Version:   to.StringPtr("4.127.20170406"),
								},
								OSDisk: &test.OSDisk{
									Name:         to.StringPtr("test"),
									Caching:      test.CachingTypesNone.ToPtr(),
									CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
									DiskSizeGB:   to.Int32Ptr(127),
									OSType:       test.OperatingSystemTypesWindows.ToPtr(),
									Vhd: &test.VirtualHardDisk{
										URI: to.StringPtr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
									},
								},
							},
							VMID: to.StringPtr("{vmId}"),
						},
					},
					{
						Name:     to.StringPtr("{virtualMachineName}"),
						Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
						Location: to.StringPtr("eastus"),
						Tags: map[string]*string{
							"RG":      to.StringPtr("rg"),
							"testTag": to.StringPtr("1"),
						},
						Properties: &test.VirtualMachineProperties{
							AvailabilitySet: &test.SubResource{
								ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							HardwareProfile: &test.HardwareProfile{
								VMSize: test.VirtualMachineSizeTypesStandardA0.ToPtr(),
							},
							NetworkProfile: &test.NetworkProfile{
								NetworkInterfaces: []*test.NetworkInterfaceReference{
									{
										ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
									}},
							},
							OSProfile: &test.OSProfile{
								AdminUsername:            to.StringPtr("Foo12"),
								AllowExtensionOperations: to.BoolPtr(true),
								ComputerName:             to.StringPtr("Test"),
								Secrets:                  []*test.VaultSecretGroup{},
								WindowsConfiguration: &test.WindowsConfiguration{
									EnableAutomaticUpdates: to.BoolPtr(true),
									ProvisionVMAgent:       to.BoolPtr(true),
								},
							},
							ProvisioningState: to.StringPtr("Succeeded"),
							StorageProfile: &test.StorageProfile{
								DataDisks: []*test.DataDisk{},
								ImageReference: &test.ImageReference{
									Offer:     to.StringPtr("WindowsServer"),
									Publisher: to.StringPtr("MicrosoftWindowsServer"),
									SKU:       to.StringPtr("2012-R2-Datacenter"),
									Version:   to.StringPtr("4.127.20170406"),
								},
								OSDisk: &test.OSDisk{
									Name:         to.StringPtr("test"),
									Caching:      test.CachingTypesNone.ToPtr(),
									CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
									DiskSizeGB:   to.Int32Ptr(127),
									OSType:       test.OperatingSystemTypesWindows.ToPtr(),
									Vhd: &test.VirtualHardDisk{
										URI: to.StringPtr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
									},
								},
							},
							VMID: to.StringPtr("{vmId}"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().VirtualMachineListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().VirtualMachineListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachinesInASubscriptionByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestVirtualMachines_Capture(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting assessmentMode of ImageDefault."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						PatchSettings: &test.LinuxPatchSettings{
							AssessmentMode: test.LinuxPatchAssessmentModeImageDefault.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("UbuntuServer"),
						Publisher: to.StringPtr("Canonical"),
						SKU:       to.StringPtr("16.04-LTS"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						PatchSettings: &test.LinuxPatchSettings{
							AssessmentMode: test.LinuxPatchAssessmentModeImageDefault.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
					Secrets: []*test.VaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("UbuntuServer"),
						Publisher: to.StringPtr("Canonical"),
						SKU:       to.StringPtr("16.04-LTS"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting patchMode of ImageDefault."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						PatchSettings: &test.LinuxPatchSettings{
							PatchMode: test.LinuxVMGuestPatchModeImageDefault.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("UbuntuServer"),
						Publisher: to.StringPtr("Canonical"),
						SKU:       to.StringPtr("16.04-LTS"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						PatchSettings: &test.LinuxPatchSettings{
							PatchMode: test.LinuxVMGuestPatchModeImageDefault.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
					Secrets: []*test.VaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("UbuntuServer"),
						Publisher: to.StringPtr("Canonical"),
						SKU:       to.StringPtr("16.04-LTS"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						PatchSettings: &test.LinuxPatchSettings{
							AssessmentMode: test.LinuxPatchAssessmentModeAutomaticByPlatform.ToPtr(),
							PatchMode:      test.LinuxVMGuestPatchModeAutomaticByPlatform.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("UbuntuServer"),
						Publisher: to.StringPtr("Canonical"),
						SKU:       to.StringPtr("16.04-LTS"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						PatchSettings: &test.LinuxPatchSettings{
							AssessmentMode: test.LinuxPatchAssessmentModeAutomaticByPlatform.ToPtr(),
							PatchMode:      test.LinuxVMGuestPatchModeAutomaticByPlatform.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
					Secrets: []*test.VaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("UbuntuServer"),
						Publisher: to.StringPtr("Canonical"),
						SKU:       to.StringPtr("16.04-LTS"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with Uefi Settings of secureBoot and vTPM."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				SecurityProfile: &test.SecurityProfile{
					SecurityType: to.StringPtr("TrustedLaunch"),
					UefiSettings: &test.UefiSettings{
						SecureBootEnabled: to.BoolPtr(true),
						VTpmEnabled:       to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windowsserver-gen2preview-preview"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("windows10-tvm"),
						Version:   to.StringPtr("18363.592.2001092016"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardSSDLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				SecurityProfile: &test.SecurityProfile{
					SecurityType: to.StringPtr("TrustedLaunch"),
					UefiSettings: &test.UefiSettings{
						SecureBootEnabled: to.BoolPtr(true),
						VTpmEnabled:       to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windowsserver-gen2preview-preview"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("windows10-tvm"),
						Version:   to.StringPtr("18363.592.2001092016"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardSSDLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with UserData"},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("{vm-name}"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("vmOSdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
				UserData: to.StringPtr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("{vm-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/{vm-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("{vm-name}"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("vmOSdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with network interface configuration"},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkAPIVersion: test.NetworkAPIVersionTwoThousandTwenty1101.ToPtr(),
					NetworkInterfaceConfigurations: []*test.VirtualMachineNetworkInterfaceConfiguration{
						{
							Name: to.StringPtr("{nic-config-name}"),
							Properties: &test.VirtualMachineNetworkInterfaceConfigurationProperties{
								DeleteOption: test.DeleteOptionsDelete.ToPtr(),
								IPConfigurations: []*test.VirtualMachineNetworkInterfaceIPConfiguration{
									{
										Name: to.StringPtr("{ip-config-name}"),
										Properties: &test.VirtualMachineNetworkInterfaceIPConfigurationProperties{
											Primary: to.BoolPtr(true),
											PublicIPAddressConfiguration: &test.VirtualMachinePublicIPAddressConfiguration{
												Name: to.StringPtr("{publicIP-config-name}"),
												Properties: &test.VirtualMachinePublicIPAddressConfigurationProperties{
													DeleteOption:             test.DeleteOptionsDetach.ToPtr(),
													PublicIPAllocationMethod: test.PublicIPAllocationMethodStatic.ToPtr(),
												},
												SKU: &test.PublicIPAddressSKU{
													PublicIPAddressSKUName: test.PublicIPAddressSKUNameBasic.ToPtr(),
													PublicIPAddressSKUTier: test.PublicIPAddressSKUTierGlobal.ToPtr(),
												},
											},
										},
									}},
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/toBeCreatedNetworkInterface"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting assessmentMode of ImageDefault."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							AssessmentMode: test.WindowsPatchAssessmentModeImageDefault.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							AssessmentMode: test.WindowsPatchAssessmentModeImageDefault.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByOS."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							PatchMode: test.WindowsVMGuestPatchModeAutomaticByOS.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							PatchMode: test.WindowsVMGuestPatchModeAutomaticByOS.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByPlatform and enableHotpatching set to true."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							EnableHotpatching: to.BoolPtr(true),
							PatchMode:         test.WindowsVMGuestPatchModeAutomaticByPlatform.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							EnableHotpatching: to.BoolPtr(true),
							PatchMode:         test.WindowsVMGuestPatchModeAutomaticByPlatform.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of Manual."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							PatchMode: test.WindowsVMGuestPatchModeManual.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							PatchMode: test.WindowsVMGuestPatchModeManual.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							AssessmentMode: test.WindowsPatchAssessmentModeAutomaticByPlatform.ToPtr(),
							PatchMode:      test.WindowsVMGuestPatchModeAutomaticByPlatform.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						PatchSettings: &test.PatchSettings{
							AssessmentMode: test.WindowsPatchAssessmentModeAutomaticByPlatform.ToPtr(),
							PatchMode:      test.WindowsVMGuestPatchModeAutomaticByPlatform.ToPtr(),
						},
						ProvisionVMAgent: to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image vm from an unmanaged generalized os image."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						Image: &test.VirtualHardDisk{
							URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
						Vhd: &test.VirtualHardDisk{
							URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						Image: &test.VirtualHardDisk{
							URI: to.StringPtr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
						Vhd: &test.VirtualHardDisk{
							URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
						},
					},
				},
				VMID: to.StringPtr("926cd555-a07c-4ff5-b214-4aa4dd09d79b"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image vm with unmanaged os and data disks."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							Vhd: &test.VirtualHardDisk{
								URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd"),
							},
						},
						{
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							Vhd: &test.VirtualHardDisk{
								URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd"),
							},
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						Vhd: &test.VirtualHardDisk{
							URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							Name:         to.StringPtr("dataDisk0"),
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							Vhd: &test.VirtualHardDisk{
								URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk0.vhd"),
							},
						},
						{
							Name:         to.StringPtr("dataDisk1"),
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							Vhd: &test.VirtualHardDisk{
								URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk1.vhd"),
							},
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						OSType:       test.OperatingSystemTypesWindows.ToPtr(),
						Vhd: &test.VirtualHardDisk{
							URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
						},
					},
				},
				VMID: to.StringPtr("5230a749-2f68-4830-900b-702182d32e63"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a custom image."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						DisablePasswordAuthentication: to.BoolPtr(false),
					},
					Secrets: []*test.VaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiskSizeGB:   to.Int32Ptr(30),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
				VMID: to.StringPtr("71aa3d5a-d73d-4970-9182-8580433b2865"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a generalized shared image."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						DisablePasswordAuthentication: to.BoolPtr(false),
					},
					Secrets: []*test.VaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiskSizeGB:   to.Int32Ptr(30),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
				VMID: to.StringPtr("71aa3d5a-d73d-4970-9182-8580433b2865"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a specialized shared image."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiskSizeGB:   to.Int32Ptr(30),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
				VMID: to.StringPtr("71aa3d5a-d73d-4970-9182-8580433b2865"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in a Virtual Machine Scale Set with customer assigned platformFaultDomain."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				PlatformFaultDomain: to.Int32Ptr(1),
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
				VirtualMachineScaleSet: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				PlatformFaultDomain: to.Int32Ptr(1),
				ProvisioningState:   to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VirtualMachineScaleSet: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myExistingFlexVmss"),
				},
				VMID: to.StringPtr("7cce54f2-ecd3-4ddd-a8d9-50984faa3918"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in an availability set."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				AvailabilitySet: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}"),
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				AvailabilitySet: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/NSGEXISTINGAS"),
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with DiskEncryptionSet resource id in the os disk and data disk."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							ManagedDisk: &test.ManagedDiskParameters{
								DiskEncryptionSet: &test.DiskEncryptionSetParameters{
									ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
						{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesAttach.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							ManagedDisk: &test.ManagedDiskParameters{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
								DiskEncryptionSet: &test.DiskEncryptionSetParameters{
									ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						}},
					ImageReference: &test.ImageReference{
						ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							DiskEncryptionSet: &test.DiskEncryptionSetParameters{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						DisablePasswordAuthentication: to.BoolPtr(false),
					},
					Secrets: []*test.VaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							ManagedDisk: &test.ManagedDiskParameters{
								DiskEncryptionSet: &test.DiskEncryptionSetParameters{
									ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
						{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesAttach.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							ManagedDisk: &test.ManagedDiskParameters{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
								DiskEncryptionSet: &test.DiskEncryptionSetParameters{
									ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						}},
					ImageReference: &test.ImageReference{
						ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiskSizeGB:   to.Int32Ptr(30),
						ManagedDisk: &test.ManagedDiskParameters{
							DiskEncryptionSet: &test.DiskEncryptionSetParameters{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskencryptionset-name}"),
							},
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
				VMID: to.StringPtr("71aa3d5a-d73d-4970-9182-8580433b2865"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Host Encryption using encryptionAtHost property."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("$(fakeStepVar)"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				SecurityProfile: &test.SecurityProfile{
					EncryptionAtHost: to.BoolPtr(true),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windows-data-science-vm"),
						Publisher: to.StringPtr("$(fakeScenarioVar)"),
						SKU:       to.StringPtr("windows2016"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				SecurityProfile: &test.SecurityProfile{
					EncryptionAtHost: to.BoolPtr(true),
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("standard-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("standard-data-science-vm"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Scheduled Events Profile"},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				ScheduledEventsProfile: &test.ScheduledEventsProfile{
					TerminateNotificationProfile: &test.TerminateNotificationProfile{
						Enable:           to.BoolPtr(true),
						NotBeforeTimeout: to.StringPtr("PT10M"),
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				ScheduledEventsProfile: &test.ScheduledEventsProfile{
					TerminateNotificationProfile: &test.TerminateNotificationProfile{
						Enable:           to.BoolPtr(true),
						NotBeforeTimeout: to.StringPtr("PT10M"),
					},
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with a marketplace image plan."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("windows2016"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windows-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("windows2016"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("standard-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("standard-data-science-vm"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with an extensions time budget."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				ExtensionsTimeBudget: to.StringPtr("PT30M"),
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionsTimeBudget: to.StringPtr("PT30M"),
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with boot diagnostics."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with empty data disks."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
						},
						{
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							ManagedDisk: &test.ManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
						{
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							ManagedDisk: &test.ManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Cache disk using placement property."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("windows2016"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windows-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("windows2016"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiffDiskSettings: &test.DiffDiskSettings{
							Option:    test.DiffDiskOptionsLocal.ToPtr(),
							Placement: test.DiffDiskPlacementCacheDisk.ToPtr(),
						},
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("standard-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("standard-data-science-vm"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiffDiskSettings: &test.DiffDiskSettings{
							Option:    test.DiffDiskOptionsLocal.ToPtr(),
							Placement: test.DiffDiskPlacementCacheDisk.ToPtr(),
						},
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Resource disk using placement property."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("windows2016"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windows-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("windows2016"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiffDiskSettings: &test.DiffDiskSettings{
							Option:    test.DiffDiskOptionsLocal.ToPtr(),
							Placement: test.DiffDiskPlacementResourceDisk.ToPtr(),
						},
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("standard-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("standard-data-science-vm"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiffDiskSettings: &test.DiffDiskSettings{
							Option:    test.DiffDiskOptionsLocal.ToPtr(),
							Placement: test.DiffDiskPlacementResourceDisk.ToPtr(),
						},
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("windows2016"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windows-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("windows2016"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiffDiskSettings: &test.DiffDiskSettings{
							Option: test.DiffDiskOptionsLocal.ToPtr(),
						},
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("standard-data-science-vm"),
						Publisher: to.StringPtr("microsoft-ads"),
						SKU:       to.StringPtr("standard-data-science-vm"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiffDiskSettings: &test.DiffDiskSettings{
							Option: test.DiffDiskOptionsLocal.ToPtr(),
						},
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with managed boot diagnostics."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled: to.BoolPtr(true),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled: to.BoolPtr(true),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with password authentication."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("b248db33-62ba-4d2d-b791-811e075ee0f5"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with premium storage."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("a149cd25-409f-41af-8088-275f5486bc93"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ssh authentication."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						DisablePasswordAuthentication: to.BoolPtr(true),
						SSH: &test.SSHConfiguration{
							PublicKeys: []*test.SSHPublicKey{
								{
									Path:    to.StringPtr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.StringPtr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("{image_offer}"),
						Publisher: to.StringPtr("{image_publisher}"),
						SKU:       to.StringPtr("{image_sku}"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					LinuxConfiguration: &test.LinuxConfiguration{
						DisablePasswordAuthentication: to.BoolPtr(true),
						SSH: &test.SSHConfiguration{
							PublicKeys: []*test.SSHPublicKey{
								{
									Path:    to.StringPtr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.StringPtr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
					Secrets: []*test.VaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("UbuntuServer"),
						Publisher: to.StringPtr("Canonical"),
						SKU:       to.StringPtr("16.04-LTS"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
				VMID: to.StringPtr("e0de9b84-a506-4b95-9623-00a425d05c90"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by detaching data disk"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachineUpdate{
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							ToBeDetached: to.BoolPtr(true),
						},
						{
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							ToBeDetached: to.BoolPtr(false),
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							ManagedDisk: &test.ManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
							ToBeDetached: to.BoolPtr(true),
						},
						{
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							ManagedDisk: &test.ManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
							ToBeDetached: to.BoolPtr(false),
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by force-detaching data disk"},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		test.VirtualMachineUpdate{
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DetachOption: test.DiskDetachOptionTypesForceDetach.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							ToBeDetached: to.BoolPtr(true),
						},
						{
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							ToBeDetached: to.BoolPtr(false),
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DetachOption: test.DiskDetachOptionTypesForceDetach.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(0),
							ManagedDisk: &test.ManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
							ToBeDetached: to.BoolPtr(true),
						},
						{
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(1023),
							Lun:          to.Int32Ptr(1),
							ManagedDisk: &test.ManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
							ToBeDetached: to.BoolPtr(false),
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force delete a VM"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myVM",
		&test.VirtualMachinesClientBeginDeleteOptions{ForceDeletion: to.BoolPtr(true)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Virtual Machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myVM",
		&test.VirtualMachinesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.VirtualMachineProperties{
				AvailabilitySet: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/my-AvailabilitySet"),
				},
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled:    to.BoolPtr(true),
						StorageURI: to.StringPtr("http://{myStorageAccount}.blob.core.windows.net"),
					},
				},
				ExtensionsTimeBudget: to.StringPtr("PT50M"),
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS3V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("admin"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(false),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				ProximityPlacementGroup: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/my-ppg01"),
				},
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							Name:         to.StringPtr("myDataDisk0"),
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(30),
							Lun:          to.Int32Ptr(0),
							ManagedDisk: &test.ManagedDiskParameters{
								ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk0"),
								StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
							},
						},
						{
							Name:         to.StringPtr("myDataDisk1"),
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesAttach.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(100),
							Lun:          to.Int32Ptr(1),
							ManagedDisk: &test.ManagedDiskParameters{
								ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk1"),
								StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
							},
						}},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myOsDisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiskSizeGB:   to.Int32Ptr(30),
						ManagedDisk: &test.ManagedDiskParameters{
							ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				UserData: to.StringPtr("RXhhbXBsZSBVc2VyRGF0YQ=="),
				VMID:     to.StringPtr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
			},
			Resources: []*test.VirtualMachineExtension{
				{
					Name:     to.StringPtr("CustomScriptExtension-DSC"),
					Type:     to.StringPtr("Microsoft.Compute/virtualMachines/extensions"),
					ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
					Location: to.StringPtr("west us"),
					Tags: map[string]*string{
						"displayName": to.StringPtr("CustomScriptExtension-DSC"),
					},
					Properties: &test.VirtualMachineExtensionProperties{
						Type:                    to.StringPtr("CustomScriptExtension"),
						AutoUpgradeMinorVersion: to.BoolPtr(true),
						ProvisioningState:       to.StringPtr("Succeeded"),
						Publisher:               to.StringPtr("Microsoft.Compute"),
						Settings:                map[string]interface{}{},
						TypeHandlerVersion:      to.StringPtr("1.9"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine placed on a dedicated host group through automatic placement"},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myVM",
		&test.VirtualMachinesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachine{
			Name:     to.StringPtr("myVM"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardD2SV3.ToPtr(),
				},
				HostGroup: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername: to.StringPtr("admin"),
					ComputerName:  to.StringPtr("myVM"),
					Secrets:       []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(false),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{},
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("WindowsServer"),
						Publisher: to.StringPtr("MicrosoftWindowsServer"),
						SKU:       to.StringPtr("2016-Datacenter"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myOsDisk"),
						Caching:      test.CachingTypesReadWrite.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiskSizeGB:   to.Int32Ptr(30),
						ManagedDisk: &test.ManagedDiskParameters{
							ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
							StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_InstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Virtual Machine Instance View."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	res, err := client.InstanceView(ctx,
		"myResourceGroup",
		"myVM",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceView.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineInstanceView{
			BootDiagnostics: &test.BootDiagnosticsInstanceView{
				ConsoleScreenshotBlobURI: to.StringPtr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.screenshot.bmp"),
				SerialConsoleLogBlobURI:  to.StringPtr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.serialconsole.log"),
			},
			ComputerName: to.StringPtr("myVM"),
			Disks: []*test.DiskInstanceView{
				{
					Name: to.StringPtr("myOsDisk"),
					Statuses: []*test.InstanceViewStatus{
						{
							Code:          to.StringPtr("ProvisioningState/succeeded"),
							DisplayStatus: to.StringPtr("Provisioning succeeded"),
							Level:         test.StatusLevelTypesInfo.ToPtr(),
							Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.477089+00:00"); return t }()),
						}},
				},
				{
					Name: to.StringPtr("myDataDisk0"),
					Statuses: []*test.InstanceViewStatus{
						{
							Code:          to.StringPtr("ProvisioningState/succeeded"),
							DisplayStatus: to.StringPtr("Provisioning succeeded"),
							Level:         test.StatusLevelTypesInfo.ToPtr(),
							Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.461517+00:00"); return t }()),
						}},
				}},
			HyperVGeneration: test.HyperVGenerationTypeV1.ToPtr(),
			OSName:           to.StringPtr("Windows Server 2016 Datacenter"),
			OSVersion:        to.StringPtr("Microsoft Windows NT 10.0.14393.0"),
			PatchStatus: &test.VirtualMachinePatchStatus{
				AvailablePatchSummary: &test.AvailablePatchSummary{
					AssessmentActivityID:          to.StringPtr("68f8b292-dfc2-4646-9781-33cc88631968"),
					CriticalAndSecurityPatchCount: to.Int32Ptr(1),
					LastModifiedTime:              to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
					OtherPatchCount:               to.Int32Ptr(2),
					RebootPending:                 to.BoolPtr(true),
					StartTime:                     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
					Status:                        test.PatchOperationStatusSucceeded.ToPtr(),
				},
				ConfigurationStatuses: []*test.InstanceViewStatus{
					{
						Code:          to.StringPtr("PatchModeConfigurationState/Ready"),
						DisplayStatus: to.StringPtr("Status_PatchModeConfigurationState_Ready"),
						Level:         test.StatusLevelTypesInfo.ToPtr(),
						Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
					},
					{
						Code:          to.StringPtr("PatchModeConfigurationState/Pending"),
						DisplayStatus: to.StringPtr("Status_PatchModeConfigurationState_Pending"),
						Level:         test.StatusLevelTypesInfo.ToPtr(),
						Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
					},
					{
						Code:          to.StringPtr("AssessmentModeConfigurationState/Pending"),
						DisplayStatus: to.StringPtr("Status_AssessmentModeConfigurationState_Pending"),
						Level:         test.StatusLevelTypesInfo.ToPtr(),
						Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
					}},
				LastPatchInstallationSummary: &test.LastPatchInstallationSummary{
					ExcludedPatchCount:        to.Int32Ptr(1),
					FailedPatchCount:          to.Int32Ptr(1),
					InstallationActivityID:    to.StringPtr("68f8b292-dfc2-4646-9981-33cc88631968"),
					InstalledPatchCount:       to.Int32Ptr(1),
					LastModifiedTime:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
					MaintenanceWindowExceeded: to.BoolPtr(false),
					NotSelectedPatchCount:     to.Int32Ptr(1),
					PendingPatchCount:         to.Int32Ptr(1),
					StartTime:                 to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
					Status:                    test.PatchOperationStatusSucceeded.ToPtr(),
				},
			},
			PlatformFaultDomain:  to.Int32Ptr(1),
			PlatformUpdateDomain: to.Int32Ptr(1),
			Statuses: []*test.InstanceViewStatus{
				{
					Code:          to.StringPtr("ProvisioningState/succeeded"),
					DisplayStatus: to.StringPtr("Provisioning succeeded"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:30:12.8051917+00:00"); return t }()),
				},
				{
					Code:          to.StringPtr("PowerState/running"),
					DisplayStatus: to.StringPtr("VM running"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
				}},
			VMAgent: &test.VirtualMachineAgentInstanceView{
				ExtensionHandlers: []*test.VirtualMachineExtensionHandlerInstanceView{
					{
						Type: to.StringPtr("Microsoft.Azure.Security.IaaSAntimalware"),
						Status: &test.InstanceViewStatus{
							Code:          to.StringPtr("ProvisioningState/succeeded"),
							DisplayStatus: to.StringPtr("Ready"),
							Level:         test.StatusLevelTypesInfo.ToPtr(),
						},
						TypeHandlerVersion: to.StringPtr("1.5.5.9"),
					}},
				Statuses: []*test.InstanceViewStatus{
					{
						Code:          to.StringPtr("ProvisioningState/succeeded"),
						DisplayStatus: to.StringPtr("Ready"),
						Level:         test.StatusLevelTypesInfo.ToPtr(),
						Message:       to.StringPtr("GuestAgent is running and accepting new configurations."),
						Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T23:11:22+00:00"); return t }()),
					}},
				VMAgentVersion: to.StringPtr("2.7.41491.949"),
			},
			Extensions: []*test.VirtualMachineExtensionInstanceView{
				{
					Name: to.StringPtr("IaaSAntiMalware-ext0"),
					Type: to.StringPtr("Microsoft.Azure.Security.IaaSAntimalware"),
					Statuses: []*test.InstanceViewStatus{
						{
							Code:          to.StringPtr("ProvisioningState/succeeded"),
							DisplayStatus: to.StringPtr("Provisioning succeeded"),
							Level:         test.StatusLevelTypesInfo.ToPtr(),
							Message:       to.StringPtr("Microsoft Antimalware enabled"),
						}},
					TypeHandlerVersion: to.StringPtr("1.5.5.9"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineInstanceView)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceView.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine placed on a dedicated host group through automatic placement."},
	})
	client = test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	res, err = client.InstanceView(ctx,
		"myResourceGroup",
		"myVM",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineInstanceView{
			AssignedHost: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
			ComputerName: to.StringPtr("myVM"),
			Disks: []*test.DiskInstanceView{
				{
					Name: to.StringPtr("myOsDisk"),
					Statuses: []*test.InstanceViewStatus{
						{
							Code:          to.StringPtr("ProvisioningState/succeeded"),
							DisplayStatus: to.StringPtr("Provisioning succeeded"),
							Level:         test.StatusLevelTypesInfo.ToPtr(),
							Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T21:29:47.477089+00:00"); return t }()),
						}},
				}},
			HyperVGeneration: test.HyperVGenerationTypeV1.ToPtr(),
			OSName:           to.StringPtr("Windows Server 2016 Datacenter"),
			OSVersion:        to.StringPtr("Microsoft Windows NT 10.0.14393.0"),
			Statuses: []*test.InstanceViewStatus{
				{
					Code:          to.StringPtr("ProvisioningState/succeeded"),
					DisplayStatus: to.StringPtr("Provisioning succeeded"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T21:30:12.8051917+00:00"); return t }()),
				},
				{
					Code:          to.StringPtr("PowerState/running"),
					DisplayStatus: to.StringPtr("VM running"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
				}},
			VMAgent: &test.VirtualMachineAgentInstanceView{
				Statuses: []*test.InstanceViewStatus{
					{
						Code:          to.StringPtr("ProvisioningState/succeeded"),
						DisplayStatus: to.StringPtr("Ready"),
						Level:         test.StatusLevelTypesInfo.ToPtr(),
						Message:       to.StringPtr("GuestAgent is running and accepting new configurations."),
						Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T23:11:22+00:00"); return t }()),
					}},
				VMAgentVersion: to.StringPtr("2.7.41491.949"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineInstanceView)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_ConvertToManagedDisks(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_Deallocate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_Generalize(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GeneralizeVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generalize a Virtual Machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	_, err := client.Generalize(ctx,
		"myResourceGroup",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GeneralizeVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_ListAll(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_ListAvailableSizes(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailableVmSizes_VirtualMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available virtual machine sizes to which the specified virtual machine can be resized"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	res, err := client.ListAvailableSizes(ctx,
		"myResourceGroup",
		"myVmName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailableVmSizes_VirtualMachines.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineSizeListResult{
			Value: []*test.VirtualMachineSize{
				{
					Name:                 to.StringPtr("Standard_A1_V2"),
					MaxDataDiskCount:     to.Int32Ptr(2),
					MemoryInMB:           to.Int32Ptr(2048),
					NumberOfCores:        to.Int32Ptr(1),
					OSDiskSizeInMB:       to.Int32Ptr(1047552),
					ResourceDiskSizeInMB: to.Int32Ptr(10240),
				},
				{
					Name:                 to.StringPtr("Standard_A2_V2"),
					MaxDataDiskCount:     to.Int32Ptr(4),
					MemoryInMB:           to.Int32Ptr(4096),
					NumberOfCores:        to.Int32Ptr(2),
					OSDiskSizeInMB:       to.Int32Ptr(1047552),
					ResourceDiskSizeInMB: to.Int32Ptr(20480),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineSizeListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineSizeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailableVmSizes_VirtualMachines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_PowerOff(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_Reapply(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reapply the state of a virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginReapply(ctx,
		"ResourceGroup",
		"VMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Restart(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_Start(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_Redeploy(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_Reimage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage a Virtual Machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginReimage(ctx,
		"myResourceGroup",
		"myVMName",
		&test.VirtualMachinesClientBeginReimageOptions{Parameters: &test.VirtualMachineReimageParameters{
			TempDisk: to.BoolPtr(true),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_RetrieveBootDiagnosticsData(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	res, err := client.RetrieveBootDiagnosticsData(ctx,
		"ResourceGroup",
		"VMName",
		&test.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Int32Ptr(60)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RetrieveBootDiagnosticsDataResult{
			ConsoleScreenshotBlobURI: to.StringPtr("https://storageuri/vm.screenshot.bmp?{sasKey}"),
			SerialConsoleLogBlobURI:  to.StringPtr("https://storageuri/vm.serialconsole.log?{sasKey}"),
		}
		if !reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RetrieveBootDiagnosticsDataResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_PerformMaintenance(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachines_SimulateEviction(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	_, err := client.SimulateEviction(ctx,
		"ResourceGroup",
		"VMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVM.json: %v", err)
	}
}

func TestVirtualMachines_AssessPatches(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assess patch state of a virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginAssessPatches(ctx,
		"myResourceGroupName",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineAssessPatchesResult{
			AssessmentActivityID: to.StringPtr("68f8b292-dfc2-4646-9781-33cc88631968"),
			AvailablePatches: []*test.VirtualMachineSoftwarePatchProperties{
				{
					Name:            to.StringPtr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
					ActivityID:      to.StringPtr("68f8b292-dfc2-4646-9781-33cc88631968"),
					AssessmentState: test.PatchAssessmentStateAvailable.ToPtr(),
					Classifications: []*string{
						to.StringPtr("Definition Updates")},
					KbID:                 to.StringPtr("2267602"),
					LastModifiedDateTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.2830263Z"); return t }()),
					PatchID:              to.StringPtr("35428702-5784-4ba4-a6e0-5222258b5411"),
					PublishedDate:        to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00Z"); return t }()),
					RebootBehavior:       test.VMGuestPatchRebootBehaviorNeverReboots.ToPtr(),
					Version:              to.StringPtr(""),
				},
				{
					Name:            to.StringPtr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
					ActivityID:      to.StringPtr("68f8b292-dfc2-4646-9781-33cc88631968"),
					AssessmentState: test.PatchAssessmentStateAvailable.ToPtr(),
					Classifications: []*string{
						to.StringPtr("Update Rollups")},
					KbID:                 to.StringPtr("890830"),
					LastModifiedDateTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.2830263Z"); return t }()),
					PatchID:              to.StringPtr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
					PublishedDate:        to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00Z"); return t }()),
					RebootBehavior:       test.VMGuestPatchRebootBehaviorCanRequestReboot.ToPtr(),
					Version:              to.StringPtr(""),
				}},
			CriticalAndSecurityPatchCount: to.Int32Ptr(1),
			OtherPatchCount:               to.Int32Ptr(2),
			RebootPending:                 to.BoolPtr(true),
			StartDateTime:                 to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
			Status:                        test.PatchOperationStatusSucceeded.ToPtr(),
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineAssessPatchesResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineAssessPatchesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_InstallPatches(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Install patch state of a virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginInstallPatches(ctx,
		"myResourceGroupName",
		"myVMName",
		test.VirtualMachineInstallPatchesParameters{
			MaximumDuration: to.StringPtr("PT4H"),
			RebootSetting:   test.VMGuestPatchRebootSettingIfRequired.ToPtr(),
			WindowsParameters: &test.WindowsParameters{
				ClassificationsToInclude: []*test.VMGuestPatchClassificationWindows{
					test.VMGuestPatchClassificationWindowsCritical.ToPtr(),
					test.VMGuestPatchClassificationWindowsSecurity.ToPtr()},
				MaxPatchPublishDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-19T02:36:43.0539904+00:00"); return t }()),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineInstallPatchesResult{
			ExcludedPatchCount:        to.Int32Ptr(0),
			FailedPatchCount:          to.Int32Ptr(0),
			InstallationActivityID:    to.StringPtr("68f8b292-dfc2-4646-9781-33cc88631968"),
			InstalledPatchCount:       to.Int32Ptr(3),
			MaintenanceWindowExceeded: to.BoolPtr(false),
			NotSelectedPatchCount:     to.Int32Ptr(0),
			Patches: []*test.PatchInstallationDetail{
				{
					Name: to.StringPtr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
					Classifications: []*string{
						to.StringPtr("Definition Updates")},
					InstallationState: test.PatchInstallationStateInstalled.ToPtr(),
					KbID:              to.StringPtr("2267602"),
					PatchID:           to.StringPtr("35428702-5784-4ba4-a6e0-5222258b5411"),
					Version:           to.StringPtr(""),
				},
				{
					Name: to.StringPtr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
					Classifications: []*string{
						to.StringPtr("Update Rollups")},
					InstallationState: test.PatchInstallationStatePending.ToPtr(),
					KbID:              to.StringPtr("890830"),
					PatchID:           to.StringPtr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
					Version:           to.StringPtr(""),
				}},
			PendingPatchCount: to.Int32Ptr(2),
			RebootStatus:      test.VMGuestPatchRebootStatusCompleted.ToPtr(),
			StartDateTime:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
			Status:            test.PatchOperationStatusSucceeded.ToPtr(),
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstallPatchesResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineInstallPatchesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_RunCommand(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommand"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachinesClient("24fb23e3-6ba3-41f0-9b6e-e41131d5d61e", cred, &options)
	poller, err := client.BeginRunCommand(ctx,
		"crptestar98131",
		"vm3036",
		test.RunCommandInput{
			CommandID: to.StringPtr("RunPowerShellScript"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RunCommandResult{
			Value: []*test.InstanceViewStatus{
				{
					Code:          to.StringPtr("ComponentStatus/StdOut/succeeded"),
					DisplayStatus: to.StringPtr("Provisioning succeeded"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Message:       to.StringPtr("This is a sample script with parameters value1 value2"),
				},
				{
					Code:          to.StringPtr("ComponentStatus/StdErr/succeeded"),
					DisplayStatus: to.StringPtr("Provisioning succeeded"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Message:       to.StringPtr(""),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RunCommandResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSets_ListByLocation(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetsInASubscriptionByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the VM scale sets under the specified subscription for the specified location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	pager := client.ListByLocation("eastus",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetsInASubscriptionByLocation.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.VirtualMachineScaleSetListResult{
				Value: []*test.VirtualMachineScaleSet{
					{
						Name:     to.StringPtr("{virtualMachineScaleSetName}"),
						Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
						Location: to.StringPtr("eastus"),
						Tags: map[string]*string{
							"myTag1": to.StringPtr("tagValue1"),
						},
						Properties: &test.VirtualMachineScaleSetProperties{
							DoNotRunExtensionsOnOverprovisionedVMs: to.BoolPtr(false),
							Overprovision:                          to.BoolPtr(false),
							PlatformFaultDomainCount:               to.Int32Ptr(1),
							ProvisioningState:                      to.StringPtr("Succeeded"),
							SinglePlacementGroup:                   to.BoolPtr(false),
							UpgradePolicy: &test.UpgradePolicy{
								AutomaticOSUpgradePolicy: &test.AutomaticOSUpgradePolicy{
									EnableAutomaticOSUpgrade: to.BoolPtr(false),
								},
								Mode: test.UpgradeModeAutomatic.ToPtr(),
							},
							VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
								NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
									NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
										{
											Name: to.StringPtr("myNic"),
											Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
												IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
													{
														Name: to.StringPtr("myIPConfig"),
														Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
															Primary: to.BoolPtr(true),
															Subnet: &test.APIEntityReference{
																ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
															},
														},
													}},
												NetworkSecurityGroup: &test.SubResource{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
												},
												Primary: to.BoolPtr(true),
											},
										}},
								},
								OSProfile: &test.VirtualMachineScaleSetOSProfile{
									AdminUsername:      to.StringPtr("admin"),
									ComputerNamePrefix: to.StringPtr("{virtualMachineScaleSetName}"),
									LinuxConfiguration: &test.LinuxConfiguration{
										DisablePasswordAuthentication: to.BoolPtr(false),
									},
								},
								StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
									DataDisks: []*test.VirtualMachineScaleSetDataDisk{},
									ImageReference: &test.ImageReference{
										Offer:     to.StringPtr("databricks"),
										Publisher: to.StringPtr("azuredatabricks"),
										SKU:       to.StringPtr("databricksworker"),
										Version:   to.StringPtr("3.15.2"),
									},
									OSDisk: &test.VirtualMachineScaleSetOSDisk{
										Caching:      test.CachingTypesReadWrite.ToPtr(),
										CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
										DiskSizeGB:   to.Int32Ptr(30),
										ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
											StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
										},
									},
								},
							},
						},
						SKU: &test.SKU{
							Name:     to.StringPtr("Standard_D2s_v3"),
							Capacity: to.Int64Ptr(4),
							Tier:     to.StringPtr("Standard"),
						},
					},
					{
						Name:     to.StringPtr("{virtualMachineScaleSetName}"),
						Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}1"),
						Location: to.StringPtr("eastus"),
						Tags: map[string]*string{
							"myTag1": to.StringPtr("tagValue2"),
						},
						Properties: &test.VirtualMachineScaleSetProperties{
							DoNotRunExtensionsOnOverprovisionedVMs: to.BoolPtr(false),
							Overprovision:                          to.BoolPtr(false),
							PlatformFaultDomainCount:               to.Int32Ptr(1),
							ProvisioningState:                      to.StringPtr("Succeeded"),
							SinglePlacementGroup:                   to.BoolPtr(false),
							UpgradePolicy: &test.UpgradePolicy{
								AutomaticOSUpgradePolicy: &test.AutomaticOSUpgradePolicy{
									EnableAutomaticOSUpgrade: to.BoolPtr(false),
								},
								Mode: test.UpgradeModeAutomatic.ToPtr(),
							},
							VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
								NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
									NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
										{
											Name: to.StringPtr("myNic1"),
											Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
												IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
													{
														Name: to.StringPtr("myIPConfig"),
														Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
															Primary: to.BoolPtr(true),
															Subnet: &test.APIEntityReference{
																ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
															},
														},
													}},
												NetworkSecurityGroup: &test.SubResource{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
												},
												Primary: to.BoolPtr(true),
											},
										}},
								},
								OSProfile: &test.VirtualMachineScaleSetOSProfile{
									AdminUsername:      to.StringPtr("admin"),
									ComputerNamePrefix: to.StringPtr("{virtualMachineScaleSetName}"),
									LinuxConfiguration: &test.LinuxConfiguration{
										DisablePasswordAuthentication: to.BoolPtr(false),
									},
								},
								StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
									DataDisks: []*test.VirtualMachineScaleSetDataDisk{},
									ImageReference: &test.ImageReference{
										Offer:     to.StringPtr("databricks"),
										Publisher: to.StringPtr("azuredatabricks"),
										SKU:       to.StringPtr("databricksworker"),
										Version:   to.StringPtr("3.15.2"),
									},
									OSDisk: &test.VirtualMachineScaleSetOSDisk{
										Caching:      test.CachingTypesReadWrite.ToPtr(),
										CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
										DiskSizeGB:   to.Int32Ptr(30),
										ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
											StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
										},
									},
								},
							},
						},
						SKU: &test.SKU{
							Name:     to.StringPtr("Standard_D2s_v3"),
							Capacity: to.Int64Ptr(4),
							Tier:     to.StringPtr("Standard"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().VirtualMachineScaleSetListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().VirtualMachineScaleSetListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetsInASubscriptionByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestVirtualMachineScaleSets_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image scale set from an unmanaged generalized os image."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Name:         to.StringPtr("osDisk"),
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							Image: &test.VirtualHardDisk{
								URI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
							},
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("d6e9ab29-f8c9-4792-978c-ae2c07b98f17"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Name:         to.StringPtr("osDisk"),
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							Image: &test.VirtualHardDisk{
								URI: to.StringPtr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
							},
							OSType: test.OperatingSystemTypesWindows.ToPtr(),
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image scale set with unmanaged os disks."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Name:         to.StringPtr("osDisk"),
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							VhdContainers: []*string{
								to.StringPtr("http://{existing-storage-account-name-0}.blob.core.windows.net/vhdContainer"),
								to.StringPtr("http://{existing-storage-account-name-1}.blob.core.windows.net/vhdContainer"),
								to.StringPtr("http://{existing-storage-account-name-2}.blob.core.windows.net/vhdContainer"),
								to.StringPtr("http://{existing-storage-account-name-3}.blob.core.windows.net/vhdContainer"),
								to.StringPtr("http://{existing-storage-account-name-4}.blob.core.windows.net/vhdContainer")},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("77b7df9a-32fe-45e3-8911-60ac9c9b9c64"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Name:         to.StringPtr("osDisk"),
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							VhdContainers: []*string{
								to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net/vhds")},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a custom image."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						LinuxConfiguration: &test.LinuxConfiguration{
							DisablePasswordAuthentication: to.BoolPtr(false),
						},
						Secrets: []*test.VaultSecretGroup{},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a generalized shared image."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						LinuxConfiguration: &test.LinuxConfiguration{
							DisablePasswordAuthentication: to.BoolPtr(false),
						},
						Secrets: []*test.VaultSecretGroup{},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a specialized shared image."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with DiskEncryptionSet resource in os disk and data disk."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*test.VirtualMachineScaleSetDataDisk{
							{
								Caching:      test.CachingTypesReadWrite.ToPtr(),
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(0),
								ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &test.DiskEncryptionSetParameters{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
									},
									StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
								},
							}},
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &test.DiskEncryptionSetParameters{
									ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_DS1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						LinuxConfiguration: &test.LinuxConfiguration{
							DisablePasswordAuthentication: to.BoolPtr(false),
						},
						Secrets: []*test.VaultSecretGroup{},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*test.VirtualMachineScaleSetDataDisk{
							{
								Caching:      test.CachingTypesReadWrite.ToPtr(),
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(0),
								ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &test.DiskEncryptionSetParameters{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
									},
									StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
								},
							}},
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &test.DiskEncryptionSetParameters{
									ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Fpga Network Interfaces."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							},
							{
								Name: to.StringPtr("{fpgaNic-Name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableFpga:                  to.BoolPtr(true),
									EnableIPForwarding:          to.BoolPtr(false),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{fpgaNic-Name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Primary:                 to.BoolPtr(true),
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(false),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							},
							{
								Name: to.StringPtr("{fpgaNic-Name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableFpga:                  to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{fpgaNic-Name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Primary:                 to.BoolPtr(true),
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(false),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						LinuxConfiguration: &test.LinuxConfiguration{
							DisablePasswordAuthentication: to.BoolPtr(false),
						},
						Secrets: []*test.VaultSecretGroup{},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Host Encryption using encryptionAtHost property."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("windows2016"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					SecurityProfile: &test.SecurityProfile{
						EncryptionAtHost: to.BoolPtr(true),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("windows-data-science-vm"),
							Publisher: to.StringPtr("microsoft-ads"),
							SKU:       to.StringPtr("windows2016"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_DS1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					SecurityProfile: &test.SecurityProfile{
						EncryptionAtHost: to.BoolPtr(true),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("standard-data-science-vm"),
							Publisher: to.StringPtr("microsoft-ads"),
							SKU:       to.StringPtr("standard-data-science-vm"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_DS1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Uefi Settings of secureBoot and vTPM."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					SecurityProfile: &test.SecurityProfile{
						SecurityType: to.StringPtr("TrustedLaunch"),
						UefiSettings: &test.UefiSettings{
							SecureBootEnabled: to.BoolPtr(true),
							VTpmEnabled:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("windowsserver-gen2preview-preview"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("windows10-tvm"),
							Version:   to.StringPtr("18363.592.2001092016"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardSSDLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D2s_v3"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					SecurityProfile: &test.SecurityProfile{
						SecurityType: to.StringPtr("TrustedLaunch"),
						UefiSettings: &test.UefiSettings{
							SecureBootEnabled: to.BoolPtr(true),
							VTpmEnabled:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("windowsserver-gen2preview-preview"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("windows10-tvm"),
							Version:   to.StringPtr("18363.592.2001092016"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardSSDLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D2s_v3"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with a marketplace image plan."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("windows2016"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("windows-data-science-vm"),
							Publisher: to.StringPtr("microsoft-ads"),
							SKU:       to.StringPtr("windows2016"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("standard-data-science-vm"),
							Publisher: to.StringPtr("microsoft-ads"),
							SKU:       to.StringPtr("standard-data-science-vm"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure application gateway."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*test.SubResource{
													{
														ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/{existing-application-gateway-name}/backendAddressPools/{existing-backend-address-pool-name}"),
													}},
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("a0134477-b9d9-484b-b0e3-205c1c089ffa"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*test.SubResource{
													{
														ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/nsgExistingAppGw/backendAddressPools/appGatewayBackendPool"),
													}},
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure load balancer."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												LoadBalancerBackendAddressPools: []*test.SubResource{
													{
														ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/backendAddressPools/{existing-backend-address-pool-name}"),
													}},
												LoadBalancerInboundNatPools: []*test.SubResource{
													{
														ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/inboundNatPools/{existing-nat-pool-name}"),
													}},
												PublicIPAddressConfiguration: &test.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.StringPtr("{vmss-name}"),
													Properties: &test.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														PublicIPAddressVersion: test.IPVersionIPv4.ToPtr(),
													},
												},
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("ec0b21ca-51ec-414b-9323-f236ffc21479"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												LoadBalancerBackendAddressPools: []*test.SubResource{
													{
														ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/backendAddressPools/lbBackendPool"),
													}},
												LoadBalancerInboundNatPools: []*test.SubResource{
													{
														ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/inboundNatPools/lbNatPool"),
													}},
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with automatic repairs enabled"},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				AutomaticRepairsPolicy: &test.AutomaticRepairsPolicy{
					Enabled:     to.BoolPtr(true),
					GracePeriod: to.StringPtr("PT30M"),
				},
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				AutomaticRepairsPolicy: &test.AutomaticRepairsPolicy{
					Enabled:     to.BoolPtr(true),
					GracePeriod: to.StringPtr("PT30M"),
				},
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with boot diagnostics."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &test.DiagnosticsProfile{
						BootDiagnostics: &test.BootDiagnostics{
							Enabled:    to.BoolPtr(true),
							StorageURI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &test.DiagnosticsProfile{
						BootDiagnostics: &test.BootDiagnostics{
							Enabled:    to.BoolPtr(true),
							StorageURI: to.StringPtr("http://nsgdiagnostic.blob.core.windows.net"),
						},
					},
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with empty data disks on each vm."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*test.VirtualMachineScaleSetDataDisk{
							{
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(0),
							},
							{
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(1),
							}},
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(512),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D2_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*test.VirtualMachineScaleSetDataDisk{
							{
								Caching:      test.CachingTypesNone.ToPtr(),
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(0),
								ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
									StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
								},
							},
							{
								Caching:      test.CachingTypesNone.ToPtr(),
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(1),
								ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
									StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
								},
							}},
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(512),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D2_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks using placement property."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("windows2016"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("windows-data-science-vm"),
							Publisher: to.StringPtr("microsoft-ads"),
							SKU:       to.StringPtr("windows2016"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiffDiskSettings: &test.DiffDiskSettings{
								Option:    test.DiffDiskOptionsLocal.ToPtr(),
								Placement: test.DiffDiskPlacementResourceDisk.ToPtr(),
							},
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_DS1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("standard-data-science-vm"),
							Publisher: to.StringPtr("microsoft-ads"),
							SKU:       to.StringPtr("standard-data-science-vm"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiffDiskSettings: &test.DiffDiskSettings{
								Option:    test.DiffDiskOptionsLocal.ToPtr(),
								Placement: test.DiffDiskPlacementResourceDisk.ToPtr(),
							},
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_DS1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("windows2016"),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("windows-data-science-vm"),
							Publisher: to.StringPtr("microsoft-ads"),
							SKU:       to.StringPtr("windows2016"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiffDiskSettings: &test.DiffDiskSettings{
								Option: test.DiffDiskOptionsLocal.ToPtr(),
							},
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Plan: &test.Plan{
				Name:      to.StringPtr("standard-data-science-vm"),
				Product:   to.StringPtr("standard-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("standard-data-science-vm"),
							Publisher: to.StringPtr("microsoft-ads"),
							SKU:       to.StringPtr("standard-data-science-vm"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiffDiskSettings: &test.DiffDiskSettings{
								Option: test.DiffDiskOptionsLocal.ToPtr(),
							},
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_DS1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with extension time budget."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &test.DiagnosticsProfile{
						BootDiagnostics: &test.BootDiagnostics{
							Enabled:    to.BoolPtr(true),
							StorageURI: to.StringPtr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					ExtensionProfile: &test.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.StringPtr("PT1H20M"),
						Extensions: []*test.VirtualMachineScaleSetExtension{
							{
								Name: to.StringPtr("{extension-name}"),
								Properties: &test.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.StringPtr("{extension-Type}"),
									AutoUpgradeMinorVersion: to.BoolPtr(false),
									Publisher:               to.StringPtr("{extension-Publisher}"),
									Settings:                map[string]interface{}{},
									TypeHandlerVersion:      to.StringPtr("{handler-version}"),
								},
							}},
					},
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &test.DiagnosticsProfile{
						BootDiagnostics: &test.BootDiagnostics{
							Enabled:    to.BoolPtr(true),
							StorageURI: to.StringPtr("http://nsgdiagnostic.blob.core.windows.net"),
						},
					},
					ExtensionProfile: &test.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.StringPtr("PT1H20M"),
						Extensions: []*test.VirtualMachineScaleSetExtension{
							{
								Name: to.StringPtr("{extension-name}"),
								Properties: &test.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.StringPtr("{extension-Type}"),
									AutoUpgradeMinorVersion: to.BoolPtr(false),
									Publisher:               to.StringPtr("{extension-Publisher}"),
									Settings:                map[string]interface{}{},
									TypeHandlerVersion:      to.StringPtr("{handler-version}"),
								},
							}},
					},
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with managed boot diagnostics."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &test.DiagnosticsProfile{
						BootDiagnostics: &test.BootDiagnostics{
							Enabled: to.BoolPtr(true),
						},
					},
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &test.DiagnosticsProfile{
						BootDiagnostics: &test.BootDiagnostics{
							Enabled: to.BoolPtr(true),
						},
					},
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with password authentication."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("ffb27c5c-39a5-4d4e-b307-b32598689813"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with premium storage."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("19fd38a2-f50a-42c6-9dc7-3f9cf3791225"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_DS1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ssh authentication."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						LinuxConfiguration: &test.LinuxConfiguration{
							DisablePasswordAuthentication: to.BoolPtr(true),
							SSH: &test.SSHConfiguration{
								PublicKeys: []*test.SSHPublicKey{
									{
										Path:    to.StringPtr("/home/{your-username}/.ssh/authorized_keys"),
										KeyData: to.StringPtr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
									}},
							},
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("fb73af19-0090-467c-9ced-b00bceab1c45"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						LinuxConfiguration: &test.LinuxConfiguration{
							DisablePasswordAuthentication: to.BoolPtr(true),
							SSH: &test.SSHConfiguration{
								PublicKeys: []*test.SSHPublicKey{
									{
										Path:    to.StringPtr("/home/{your-username}/.ssh/authorized_keys"),
										KeyData: to.StringPtr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
									}},
							},
						},
						Secrets: []*test.VaultSecretGroup{},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("UbuntuServer"),
							Publisher: to.StringPtr("Canonical"),
							SKU:       to.StringPtr("16.04-LTS"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with terminate scheduled events enabled."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					ScheduledEventsProfile: &test.ScheduledEventsProfile{
						TerminateNotificationProfile: &test.TerminateNotificationProfile{
							Enable:           to.BoolPtr(true),
							NotBeforeTimeout: to.StringPtr("PT5M"),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					ScheduledEventsProfile: &test.ScheduledEventsProfile{
						TerminateNotificationProfile: &test.TerminateNotificationProfile{
							Enable:           to.BoolPtr(true),
							NotBeforeTimeout: to.StringPtr("PT5M"),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with userData."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
					UserData: to.StringPtr("RXhhbXBsZSBVc2VyRGF0YQ=="),
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(true),
				UniqueID:             to.StringPtr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeManual.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &test.DiagnosticsProfile{
						BootDiagnostics: &test.BootDiagnostics{
							Enabled:    to.BoolPtr(true),
							StorageURI: to.StringPtr("http://nsgdiagnostic.blob.core.windows.net"),
						},
					},
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(3),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with virtual machines in different zones."},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		test.VirtualMachineScaleSet{
			Location: to.StringPtr("centralus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision: to.BoolPtr(true),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeAutomatic.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.StringPtr("{your-password}"),
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*test.VirtualMachineScaleSetDataDisk{
							{
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(0),
							},
							{
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(1),
							}},
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(512),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_A1_v2"),
				Capacity: to.Int64Ptr(2),
				Tier:     to.StringPtr("Standard"),
			},
			Zones: []*string{
				to.StringPtr("1"),
				to.StringPtr("3")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("{vmss-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
			Location: to.StringPtr("centralus"),
			Properties: &test.VirtualMachineScaleSetProperties{
				Overprovision:        to.BoolPtr(true),
				ProvisioningState:    to.StringPtr("Succeeded"),
				SinglePlacementGroup: to.BoolPtr(false),
				UniqueID:             to.StringPtr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
				UpgradePolicy: &test.UpgradePolicy{
					Mode: test.UpgradeModeAutomatic.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("{vmss-name}"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.BoolPtr(false),
									EnableIPForwarding:          to.BoolPtr(true),
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("{vmss-name}"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
												},
											},
										}},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("{your-username}"),
						ComputerNamePrefix: to.StringPtr("{vmss-name}"),
						Secrets:            []*test.VaultSecretGroup{},
						WindowsConfiguration: &test.WindowsConfiguration{
							EnableAutomaticUpdates: to.BoolPtr(true),
							ProvisionVMAgent:       to.BoolPtr(true),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*test.VirtualMachineScaleSetDataDisk{
							{
								Caching:      test.CachingTypesNone.ToPtr(),
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(0),
								ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
									StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
								},
							},
							{
								Caching:      test.CachingTypesNone.ToPtr(),
								CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
								DiskSizeGB:   to.Int32Ptr(1023),
								Lun:          to.Int32Ptr(1),
								ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
									StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
								},
							}},
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("WindowsServer"),
							Publisher: to.StringPtr("MicrosoftWindowsServer"),
							SKU:       to.StringPtr("2016-Datacenter"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(512),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
				ZoneBalance: to.BoolPtr(false),
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_A1_v2"),
				Capacity: to.Int64Ptr(2),
				Tier:     to.StringPtr("Standard"),
			},
			Zones: []*string{
				to.StringPtr("1"),
				to.StringPtr("3")},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSets_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a VM scale set."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		&test.VirtualMachineScaleSetsClientBeginDeleteOptions{ForceDeletion: to.BoolPtr(true)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set placed on a dedicated host group through automatic placement."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		&test.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("myVirtualMachineScaleSet"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				DoNotRunExtensionsOnOverprovisionedVMs: to.BoolPtr(false),
				HostGroup: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
				},
				Overprovision:            to.BoolPtr(false),
				PlatformFaultDomainCount: to.Int32Ptr(1),
				ProvisioningState:        to.StringPtr("Succeeded"),
				SinglePlacementGroup:     to.BoolPtr(false),
				UpgradePolicy: &test.UpgradePolicy{
					AutomaticOSUpgradePolicy: &test.AutomaticOSUpgradePolicy{
						EnableAutomaticOSUpgrade: to.BoolPtr(false),
					},
					Mode: test.UpgradeModeAutomatic.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("myNic"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("myIPConfig"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Primary: to.BoolPtr(true),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
												},
											},
										}},
									NetworkSecurityGroup: &test.SubResource{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
									},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("admin"),
						ComputerNamePrefix: to.StringPtr("myVirtualMachineScaleSet"),
						LinuxConfiguration: &test.LinuxConfiguration{
							DisablePasswordAuthentication: to.BoolPtr(false),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*test.VirtualMachineScaleSetDataDisk{},
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("databricks"),
							Publisher: to.StringPtr("azuredatabricks"),
							SKU:       to.StringPtr("databricksworker"),
							Version:   to.StringPtr("3.15.2"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(30),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
							},
						},
					},
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D2s_v3"),
				Capacity: to.Int64Ptr(4),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set with UserData"},
	})
	client = test.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		&test.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetWithUserData.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSet{
			Name:     to.StringPtr("myVirtualMachineScaleSet"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.VirtualMachineScaleSetProperties{
				DoNotRunExtensionsOnOverprovisionedVMs: to.BoolPtr(false),
				HostGroup: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
				},
				Overprovision:            to.BoolPtr(false),
				PlatformFaultDomainCount: to.Int32Ptr(1),
				ProvisioningState:        to.StringPtr("Succeeded"),
				SinglePlacementGroup:     to.BoolPtr(false),
				UpgradePolicy: &test.UpgradePolicy{
					AutomaticOSUpgradePolicy: &test.AutomaticOSUpgradePolicy{
						EnableAutomaticOSUpgrade: to.BoolPtr(false),
					},
					Mode: test.UpgradeModeAutomatic.ToPtr(),
				},
				VirtualMachineProfile: &test.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &test.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.StringPtr("myNic"),
								Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
									IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.StringPtr("myIPConfig"),
											Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
												Primary: to.BoolPtr(true),
												Subnet: &test.APIEntityReference{
													ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
												},
											},
										}},
									NetworkSecurityGroup: &test.SubResource{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
									},
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.StringPtr("admin"),
						ComputerNamePrefix: to.StringPtr("myVirtualMachineScaleSet"),
						LinuxConfiguration: &test.LinuxConfiguration{
							DisablePasswordAuthentication: to.BoolPtr(false),
						},
					},
					StorageProfile: &test.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*test.VirtualMachineScaleSetDataDisk{},
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("databricks"),
							Publisher: to.StringPtr("azuredatabricks"),
							SKU:       to.StringPtr("databricksworker"),
							Version:   to.StringPtr("3.15.2"),
						},
						OSDisk: &test.VirtualMachineScaleSetOSDisk{
							Caching:      test.CachingTypesReadWrite.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(30),
							ManagedDisk: &test.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesPremiumLRS.ToPtr(),
							},
						},
					},
					UserData: to.StringPtr("RXhhbXBsZSBVc2VyRGF0YQ=="),
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("Standard_D2s_v3"),
				Capacity: to.Int64Ptr(4),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSets_Deallocate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_DeleteInstances(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_GetInstanceView(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_ListAll(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_GetOSUpgradeHistory(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_PowerOff(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_Restart(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_Start(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_Redeploy(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_PerformMaintenance(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_UpdateInstances(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_Reimage(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_ReimageAll(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_ConvertToSinglePlacementGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSets_SetOrchestrationServiceState(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineSizes_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestImages_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob with DiskEncryptionSet resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					OSDisk: &test.ImageOSDisk{
						BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						DiskEncryptionSet: &test.DiskEncryptionSetParameters{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{},
					OSDisk: &test.ImageOSDisk{
						BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						Caching: test.CachingTypesReadWrite.ToPtr(),
						DiskEncryptionSet: &test.DiskEncryptionSetParameters{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					OSDisk: &test.ImageOSDisk{
						BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{},
					OSDisk: &test.ImageOSDisk{
						BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						Caching: test.CachingTypesReadWrite.ToPtr(),
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk with DiskEncryptionSet resource."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					OSDisk: &test.ImageOSDisk{
						DiskEncryptionSet: &test.DiskEncryptionSetParameters{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{},
					OSDisk: &test.ImageOSDisk{
						Caching: test.CachingTypesReadWrite.ToPtr(),
						DiskEncryptionSet: &test.DiskEncryptionSetParameters{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					OSDisk: &test.ImageOSDisk{
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{},
					OSDisk: &test.ImageOSDisk{
						Caching: test.CachingTypesReadWrite.ToPtr(),
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot with DiskEncryptionSet resource."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					OSDisk: &test.ImageOSDisk{
						DiskEncryptionSet: &test.DiskEncryptionSetParameters{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						Snapshot: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{},
					OSDisk: &test.ImageOSDisk{
						Caching: test.CachingTypesReadWrite.ToPtr(),
						DiskEncryptionSet: &test.DiskEncryptionSetParameters{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						Snapshot: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					OSDisk: &test.ImageOSDisk{
						Snapshot: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(false),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{},
					OSDisk: &test.ImageOSDisk{
						Caching: test.CachingTypesReadWrite.ToPtr(),
						Snapshot: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(false),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from an existing virtual machine."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				SourceVirtualMachine: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				SourceVirtualMachine: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{},
					OSDisk: &test.ImageOSDisk{
						Caching: test.CachingTypesReadWrite.ToPtr(),
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myVM_OsDisk_1_6dc293b7d811433196903acf92665022"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(false),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a blob."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{
						{
							BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
							Lun:     to.Int32Ptr(1),
						}},
					OSDisk: &test.ImageOSDisk{
						BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(false),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{
						{
							BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
							Lun:     to.Int32Ptr(1),
						}},
					OSDisk: &test.ImageOSDisk{
						BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						Caching: test.CachingTypesReadWrite.ToPtr(),
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(false),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a managed disk."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{
						{
							ManagedDisk: &test.SubResource{
								ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDisk: &test.ImageOSDisk{
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(false),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{
						{
							ManagedDisk: &test.SubResource{
								ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDisk: &test.ImageOSDisk{
						Caching: test.CachingTypesReadWrite.ToPtr(),
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(false),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a snapshot."},
	})
	client = test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.Image{
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{
						{
							Snapshot: &test.SubResource{
								ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDisk: &test.ImageOSDisk{
						Snapshot: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("westus"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{
						{
							Snapshot: &test.SubResource{
								ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDisk: &test.ImageOSDisk{
						Caching: test.CachingTypesReadWrite.ToPtr(),
						Snapshot: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:  test.OperatingSystemTypesLinux.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImages_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates tags of an Image."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewImagesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myImage",
		test.ImageUpdate{
			Tags: map[string]*string{
				"department": to.StringPtr("HR"),
			},
			Properties: &test.ImageProperties{
				HyperVGeneration: test.HyperVGenerationTypesV1.ToPtr(),
				SourceVirtualMachine: &test.SubResource{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"department": to.StringPtr("HR"),
			},
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{
						{
							BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
							ManagedDisk: &test.SubResource{
								ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
							},
							Snapshot: &test.SubResource{
								ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
							},
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							Lun:                to.Int32Ptr(1),
						}},
					OSDisk: &test.ImageOSDisk{
						BlobURI:    to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						DiskSizeGB: to.Int32Ptr(20),
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
						},
						Snapshot: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
						},
						StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						OSState:            test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:             test.OperatingSystemTypesWindows.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImages_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInformationAboutAnImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a virtual machine image."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewImagesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myImage",
		&test.ImagesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInformationAboutAnImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Image{
			Name:     to.StringPtr("myImage"),
			Type:     to.StringPtr("Microsoft.Compute/images"),
			ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
			Location: to.StringPtr("West US"),
			Properties: &test.ImageProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.ImageStorageProfile{
					DataDisks: []*test.ImageDataDisk{
						{
							BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
							ManagedDisk: &test.SubResource{
								ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
							},
							Snapshot: &test.SubResource{
								ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
							},
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							Lun:                to.Int32Ptr(1),
						}},
					OSDisk: &test.ImageOSDisk{
						BlobURI:    to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						DiskSizeGB: to.Int32Ptr(20),
						ManagedDisk: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
						},
						Snapshot: &test.SubResource{
							ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
						},
						StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						OSState:            test.OperatingSystemStateTypesGeneralized.ToPtr(),
						OSType:             test.OperatingSystemTypesWindows.ToPtr(),
					},
					ZoneResilient: to.BoolPtr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Image) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Image)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInformationAboutAnImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImages_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewImagesClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInAResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ImageListResult{
				Value: []*test.Image{
					{
						Name:     to.StringPtr("myImage"),
						Type:     to.StringPtr("Microsoft.Compute/images"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
						Location: to.StringPtr("West US"),
						Properties: &test.ImageProperties{
							ProvisioningState: to.StringPtr("Succeeded"),
							StorageProfile: &test.ImageStorageProfile{
								DataDisks: []*test.ImageDataDisk{
									{
										BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
										ManagedDisk: &test.SubResource{
											ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
										},
										Snapshot: &test.SubResource{
											ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
										},
										StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
										Lun:                to.Int32Ptr(1),
									}},
								OSDisk: &test.ImageOSDisk{
									BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
									ManagedDisk: &test.SubResource{
										ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
									},
									Snapshot: &test.SubResource{
										ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
									},
									StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
									OSState:            test.OperatingSystemStateTypesGeneralized.ToPtr(),
									OSType:             test.OperatingSystemTypesWindows.ToPtr(),
								},
							},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ImageListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ImageListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestImages_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewImagesClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ImageListResult{
				Value: []*test.Image{
					{
						Name:     to.StringPtr("myImage"),
						Type:     to.StringPtr("Microsoft.Compute/images"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
						Location: to.StringPtr("West US"),
						Properties: &test.ImageProperties{
							ProvisioningState: to.StringPtr("Succeeded"),
							StorageProfile: &test.ImageStorageProfile{
								DataDisks: []*test.ImageDataDisk{
									{
										BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
										ManagedDisk: &test.SubResource{
											ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
										},
										Snapshot: &test.SubResource{
											ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
										},
										StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
										Lun:                to.Int32Ptr(1),
									}},
								OSDisk: &test.ImageOSDisk{
									BlobURI: to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
									ManagedDisk: &test.SubResource{
										ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
									},
									Snapshot: &test.SubResource{
										ID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
									},
									StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
									OSState:            test.OperatingSystemStateTypesGeneralized.ToPtr(),
									OSType:             test.OperatingSystemTypesWindows.ToPtr(),
								},
							},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ImageListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ImageListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestRestorePointCollections_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateARestorePointCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a restore point collection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myRpc",
		test.RestorePointCollection{
			Location: to.StringPtr("norwayeast"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.RestorePointCollectionProperties{
				Source: &test.RestorePointCollectionSourceProperties{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateARestorePointCollection.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RestorePointCollection{
			Name:     to.StringPtr("myRpc"),
			Type:     to.StringPtr("Microsoft.Compute/restorePointCollections"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
			Location: to.StringPtr("norwayeast"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.RestorePointCollectionProperties{
				ProvisioningState:        to.StringPtr("Succeeded"),
				RestorePointCollectionID: to.StringPtr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
				Source: &test.RestorePointCollectionSourceProperties{
					ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
					Location: to.StringPtr("eastus"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateARestorePointCollection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePointCollections_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRestorePointCollections_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRestorePointCollections_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection (but not the restore points contained in the restore point collection)"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRpc",
		&test.RestorePointCollectionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollection.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RestorePointCollection{
			Name:     to.StringPtr("myRpc"),
			Type:     to.StringPtr("Microsoft.Compute/restorePointCollections"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.RestorePointCollectionProperties{
				ProvisioningState:        to.StringPtr("Succeeded"),
				RestorePointCollectionID: to.StringPtr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
				Source: &test.RestorePointCollectionSourceProperties{
					ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
					Location: to.StringPtr("eastus"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionWithContainedRestorePoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection, including the restore points contained in the restore point collection"},
	})
	client = test.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"rpcName",
		&test.RestorePointCollectionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionWithContainedRestorePoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RestorePointCollection{
			Name:     to.StringPtr("rpcName"),
			Type:     to.StringPtr("Microsoft.Compute/restorePointCollections"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.RestorePointCollectionProperties{
				ProvisioningState:        to.StringPtr("Succeeded"),
				RestorePointCollectionID: to.StringPtr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
				RestorePoints: []*test.RestorePoint{
					{
						Name:            to.StringPtr("restorePointName"),
						ID:              to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName"),
						ConsistencyMode: test.ConsistencyModeTypesApplicationConsistent.ToPtr(),
						ExcludeDisks: []*test.APIEntityReference{
							{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
							}},
						ProvisioningDetails: &test.RestorePointProvisioningDetails{
							CreationTime:         to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.8401519+00:00"); return t }()),
							StatusCode:           to.Int32Ptr(0),
							StatusMessage:        to.StringPtr("{\"jobMessage\":\"\",\"messageStr\":\"1/27/2021 8:35:56 PM , snapshotCreator=guestExtension, hostStatusCodePreSnapshot=200, Plugin enable Succeeded (command: Snapshot) Snapshot command completed \",\"snapshotConsistency\":2}"),
							TotalUsedSizeInBytes: to.Int64Ptr(10835349504),
						},
						ProvisioningState: to.StringPtr("Succeeded"),
						SourceMetadata: &test.RestorePointSourceMetadata{
							DiagnosticsProfile: &test.DiagnosticsProfile{
								BootDiagnostics: &test.BootDiagnostics{
									Enabled: to.BoolPtr(true),
								},
							},
							HardwareProfile: &test.HardwareProfile{
								VMSize: test.VirtualMachineSizeTypesStandardB1S.ToPtr(),
							},
							OSProfile: &test.OSProfile{
								AdminUsername:               to.StringPtr("admin"),
								AllowExtensionOperations:    to.BoolPtr(true),
								ComputerName:                to.StringPtr("computerName"),
								RequireGuestProvisionSignal: to.BoolPtr(true),
								Secrets:                     []*test.VaultSecretGroup{},
								WindowsConfiguration: &test.WindowsConfiguration{
									EnableAutomaticUpdates: to.BoolPtr(true),
									ProvisionVMAgent:       to.BoolPtr(true),
								},
							},
							StorageProfile: &test.RestorePointSourceVMStorageProfile{
								DataDisks: []*test.RestorePointSourceVMDataDisk{
									{
										Name:    to.StringPtr("testingexcludedisk_DataDisk_1"),
										Caching: test.CachingTypesNone.ToPtr(),
										DiskRestorePoint: &test.APIEntityReference{
											ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
										},
										Lun: to.Int32Ptr(1),
										ManagedDisk: &test.ManagedDiskParameters{
											ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
											StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
										},
									}},
								OSDisk: &test.RestorePointSourceVMOSDisk{
									Name:    to.StringPtr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									Caching: test.CachingTypesReadWrite.ToPtr(),
									DiskRestorePoint: &test.APIEntityReference{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
									},
									ManagedDisk: &test.ManagedDiskParameters{
										ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
										StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
									},
									OSType: test.OperatingSystemTypeWindows.ToPtr(),
								},
							},
							VMID: to.StringPtr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
						},
					}},
				Source: &test.RestorePointCollectionSourceProperties{
					ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
					Location: to.StringPtr("eastus"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionWithContainedRestorePoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePointCollections_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	pager := client.List("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInAResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.RestorePointCollectionListResult{
				Value: []*test.RestorePointCollection{
					{
						Name:     to.StringPtr("restorePointCollection1"),
						Type:     to.StringPtr("Microsoft.Compute/restorePointCollections"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
						Location: to.StringPtr("West US"),
						Tags: map[string]*string{
							"myTag1": to.StringPtr("tagValue1"),
						},
						Properties: &test.RestorePointCollectionProperties{
							ProvisioningState:        to.StringPtr("Succeeded"),
							RestorePointCollectionID: to.StringPtr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
							Source: &test.RestorePointCollectionSourceProperties{
								ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
								Location: to.StringPtr("West US"),
							},
						},
					},
					{
						Name:     to.StringPtr("restorePointCollection2"),
						Type:     to.StringPtr("Microsoft.Compute/restorePointCollections"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
						Location: to.StringPtr("West US"),
						Tags: map[string]*string{
							"myTag1": to.StringPtr("tagValue1"),
						},
						Properties: &test.RestorePointCollectionProperties{
							ProvisioningState:        to.StringPtr("Succeeded"),
							RestorePointCollectionID: to.StringPtr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
							Source: &test.RestorePointCollectionSourceProperties{
								ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
								Location: to.StringPtr("West US"),
							},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().RestorePointCollectionListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().RestorePointCollectionListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestRestorePointCollections_ListAll(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	pager := client.ListAll(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.RestorePointCollectionListResult{
				Value: []*test.RestorePointCollection{
					{
						Name:     to.StringPtr("restorePointCollection1"),
						Type:     to.StringPtr("Microsoft.Compute/restorePointCollections"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup1/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
						Location: to.StringPtr("West US"),
						Tags: map[string]*string{
							"myTag1": to.StringPtr("tagValue1"),
						},
						Properties: &test.RestorePointCollectionProperties{
							ProvisioningState:        to.StringPtr("Succeeded"),
							RestorePointCollectionID: to.StringPtr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
							Source: &test.RestorePointCollectionSourceProperties{
								ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Test"),
								Location: to.StringPtr("West US"),
							},
						},
					},
					{
						Name:     to.StringPtr("restorePointCollection2"),
						Type:     to.StringPtr("Microsoft.Compute/restorePointCollections"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup2/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
						Location: to.StringPtr("West US"),
						Tags: map[string]*string{
							"myTag1": to.StringPtr("tagValue1"),
						},
						Properties: &test.RestorePointCollectionProperties{
							ProvisioningState:        to.StringPtr("Succeeded"),
							RestorePointCollectionID: to.StringPtr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
							Source: &test.RestorePointCollectionSourceProperties{
								ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Prod"),
								Location: to.StringPtr("West US"),
							},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().RestorePointCollectionListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().RestorePointCollectionListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestRestorePoints_Create(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a restore point"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewRestorePointsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"rpcName",
		"rpName",
		test.RestorePoint{
			ExcludeDisks: []*test.APIEntityReference{
				{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json: %v", err)
	}
}

func TestRestorePoints_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRestorePoints_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewRestorePointsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"rpcName",
		"rpName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePoint.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RestorePoint{
			Name:            to.StringPtr("rpName"),
			ID:              to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName"),
			ConsistencyMode: test.ConsistencyModeTypesApplicationConsistent.ToPtr(),
			ExcludeDisks: []*test.APIEntityReference{
				{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
				}},
			ProvisioningDetails: &test.RestorePointProvisioningDetails{
				CreationTime:         to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.8401519+00:00"); return t }()),
				StatusCode:           to.Int32Ptr(0),
				StatusMessage:        to.StringPtr("{\"jobMessage\":\"\",\"messageStr\":\"1/27/2021 8:35:56 PM , snapshotCreator=guestExtension, hostStatusCodePreSnapshot=200, Plugin enable Succeeded (command: Snapshot) Snapshot command completed \",\"snapshotConsistency\":2}"),
				TotalUsedSizeInBytes: to.Int64Ptr(10835349504),
			},
			ProvisioningState: to.StringPtr("Succeeded"),
			SourceMetadata: &test.RestorePointSourceMetadata{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled: to.BoolPtr(true),
					},
				},
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardB1S.ToPtr(),
				},
				OSProfile: &test.OSProfile{
					AdminUsername:               to.StringPtr("admin"),
					AllowExtensionOperations:    to.BoolPtr(true),
					ComputerName:                to.StringPtr("computerName"),
					RequireGuestProvisionSignal: to.BoolPtr(true),
					Secrets:                     []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				StorageProfile: &test.RestorePointSourceVMStorageProfile{
					DataDisks: []*test.RestorePointSourceVMDataDisk{
						{
							Name:    to.StringPtr("testingexcludedisk_DataDisk_1"),
							Caching: test.CachingTypesNone.ToPtr(),
							DiskRestorePoint: &test.APIEntityReference{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
							},
							Lun: to.Int32Ptr(1),
							ManagedDisk: &test.ManagedDiskParameters{
								ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						}},
					OSDisk: &test.RestorePointSourceVMOSDisk{
						Name:    to.StringPtr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
						Caching: test.CachingTypesReadWrite.ToPtr(),
						DiskRestorePoint: &test.APIEntityReference{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
						},
						ManagedDisk: &test.ManagedDiskParameters{
							ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypeWindows.ToPtr(),
					},
				},
				VMID: to.StringPtr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePoint)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetExtensions_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetExtensions_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetExtensions_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetExtensions_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetExtensions_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetRollingUpgrades_Cancel(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetRollingUpgrades_StartOSUpgrade(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetRollingUpgrades_StartExtensionUpgrade(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start an extension rolling upgrade."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginStartExtensionUpgrade(ctx,
		"myResourceGroup",
		"{vmss-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json: %v", err)
	}
}

func TestVirtualMachineScaleSetRollingUpgrades_GetLatest(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMExtensions_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM extension."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		test.VirtualMachineScaleSetVMExtension{
			Properties: &test.VirtualMachineExtensionProperties{
				Type:                    to.StringPtr("extType"),
				AutoUpgradeMinorVersion: to.BoolPtr(true),
				Publisher:               to.StringPtr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
					"items": []interface{}{
						map[string]interface{}{
							"name": "text - 2",
							"type": float64(1),
							"content": map[string]interface{}{
								"json": "## New workbook\n---\n\nWelcome to your new workbook.  This area will display text formatted as markdown.\n\n\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.",
							},
						},
						map[string]interface{}{
							"name": "query - 2",
							"type": float64(3),
							"content": map[string]interface{}{
								"exportToExcelOptions": "visible",
								"query":                "union withsource=TableName *\n| summarize Count=count() by TableName\n| render barchart",
								"queryType":            float64(0),
								"resourceType":         "microsoft.operationalinsights/workspaces",
								"size":                 float64(1),
								"version":              "KqlItem/1.0",
							},
						},
					},
					"styleSettings": map[string]interface{}{},
					"test":          float64(1),
				},
				TypeHandlerVersion: to.StringPtr("1.2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSetVMExtension{
			ID:   to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
			Name: to.StringPtr("myVMExtension"),
			Type: to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
			Properties: &test.VirtualMachineExtensionProperties{
				Type:                    to.StringPtr("extType"),
				AutoUpgradeMinorVersion: to.BoolPtr(true),
				ProvisioningState:       to.StringPtr("Succeeded"),
				Publisher:               to.StringPtr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
				},
				TypeHandlerVersion: to.StringPtr("1.2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMExtensions_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM extension."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		test.VirtualMachineScaleSetVMExtensionUpdate{
			Properties: &test.VirtualMachineExtensionUpdateProperties{
				Type:                    to.StringPtr("extType"),
				AutoUpgradeMinorVersion: to.BoolPtr(true),
				Publisher:               to.StringPtr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
				},
				TypeHandlerVersion: to.StringPtr("1.2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSetVMExtension{
			ID:   to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
			Name: to.StringPtr("myVMExtension"),
			Type: to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
			Properties: &test.VirtualMachineExtensionProperties{
				Type:                    to.StringPtr("extType"),
				AutoUpgradeMinorVersion: to.BoolPtr(true),
				ProvisioningState:       to.StringPtr("Succeeded"),
				Publisher:               to.StringPtr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
				},
				TypeHandlerVersion: to.StringPtr("1.2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMExtensions_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM extension."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMExtensions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM extension."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		&test.VirtualMachineScaleSetVMExtensionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSetVMExtension{
			ID:   to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
			Name: to.StringPtr("myVMExtension"),
			Type: to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
			Properties: &test.VirtualMachineExtensionProperties{
				Type:                    to.StringPtr("extType"),
				AutoUpgradeMinorVersion: to.BoolPtr(true),
				ProvisioningState:       to.StringPtr("Succeeded"),
				Publisher:               to.StringPtr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
				},
				TypeHandlerVersion: to.StringPtr("1.2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMExtensions_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List extensions in Vmss instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		&test.VirtualMachineScaleSetVMExtensionsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSetVMExtensionsListResult{
			Value: []*test.VirtualMachineScaleSetVMExtension{
				{
					ID:   to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
					Name: to.StringPtr("myVMExtension"),
					Type: to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
					Properties: &test.VirtualMachineExtensionProperties{
						Type:                    to.StringPtr("extType"),
						AutoUpgradeMinorVersion: to.BoolPtr(true),
						ProvisioningState:       to.StringPtr("Succeeded"),
						Publisher:               to.StringPtr("extPublisher"),
						Settings: map[string]interface{}{
							"UserName": "xyz@microsoft.com",
						},
						TypeHandlerVersion: to.StringPtr("1.2"),
					},
				},
				{
					ID:   to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension1"),
					Name: to.StringPtr("myVMExtension1"),
					Type: to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
					Properties: &test.VirtualMachineExtensionProperties{
						Type:                    to.StringPtr("extType1"),
						AutoUpgradeMinorVersion: to.BoolPtr(true),
						ProvisioningState:       to.StringPtr("Succeeded"),
						Publisher:               to.StringPtr("extPublisher1"),
						Settings: map[string]interface{}{
							"UserName": "xyz@microsoft.com",
						},
						TypeHandlerVersion: to.StringPtr("1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtensionsListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMs_Reimage(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_ReimageAll(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_Deallocate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a virtual machine from a VM scale set."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		&test.VirtualMachineScaleSetVMsClientBeginDeleteOptions{ForceDeletion: to.BoolPtr(true)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VM scale set VM with UserData"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"{vmss-name}",
		"0",
		&test.VirtualMachineScaleSetVMsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMWithUserData.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSetVM{
			Name:     to.StringPtr("{vmss-vm-name}"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"myTag1": to.StringPtr("tagValue1"),
			},
			Properties: &test.VirtualMachineScaleSetVMProperties{
				DiagnosticsProfile: &test.DiagnosticsProfile{
					BootDiagnostics: &test.BootDiagnostics{
						Enabled: to.BoolPtr(true),
					},
				},
				HardwareProfile:        &test.HardwareProfile{},
				LatestModelApplied:     to.BoolPtr(true),
				ModelDefinitionApplied: to.StringPtr("VirtualMachineScaleSet"),
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
						}},
				},
				NetworkProfileConfiguration: &test.VirtualMachineScaleSetVMNetworkProfileConfiguration{
					NetworkInterfaceConfigurations: []*test.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.StringPtr("vmsstestnetconfig5415"),
							Properties: &test.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &test.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.BoolPtr(false),
								EnableIPForwarding:          to.BoolPtr(false),
								IPConfigurations: []*test.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.StringPtr("vmsstestnetconfig9693"),
										Properties: &test.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: test.IPVersionIPv4.ToPtr(),
											Subnet: &test.APIEntityReference{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
											},
										},
									}},
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminUsername:               to.StringPtr("Foo12"),
					AllowExtensionOperations:    to.BoolPtr(true),
					ComputerName:                to.StringPtr("test000000"),
					RequireGuestProvisionSignal: to.BoolPtr(true),
					Secrets:                     []*test.VaultSecretGroup{},
					WindowsConfiguration: &test.WindowsConfiguration{
						EnableAutomaticUpdates: to.BoolPtr(true),
						ProvisionVMAgent:       to.BoolPtr(true),
					},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				StorageProfile: &test.StorageProfile{
					DataDisks: []*test.DataDisk{
						{
							Name:         to.StringPtr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							Caching:      test.CachingTypesNone.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesEmpty.ToPtr(),
							DiskSizeGB:   to.Int32Ptr(128),
							Lun:          to.Int32Ptr(1),
							ManagedDisk: &test.ManagedDiskParameters{
								ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
							ToBeDetached: to.BoolPtr(false),
						}},
					ImageReference: &test.ImageReference{
						ExactVersion: to.StringPtr("4.127.20180315"),
						Offer:        to.StringPtr("WindowsServer"),
						Publisher:    to.StringPtr("MicrosoftWindowsServer"),
						SKU:          to.StringPtr("2012-R2-Datacenter"),
						Version:      to.StringPtr("4.127.20180315"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						Caching:      test.CachingTypesNone.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						DiskSizeGB:   to.Int32Ptr(127),
						ManagedDisk: &test.ManagedDiskParameters{
							ID:                 to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
						OSType: test.OperatingSystemTypesWindows.ToPtr(),
					},
				},
				UserData: to.StringPtr("RXhhbXBsZSBVc2VyRGF0YQ=="),
				VMID:     to.StringPtr("42af9fdf-b906-4ad7-9905-8316209ff619"),
			},
			Resources: []*test.VirtualMachineExtension{
				{
					Name:     to.StringPtr("CustomScriptExtension-DSC"),
					Type:     to.StringPtr("Microsoft.Compute/virtualMachines/extensions"),
					ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
					Location: to.StringPtr("west us"),
					Tags: map[string]*string{
						"displayName": to.StringPtr("CustomScriptExtension-DSC"),
					},
					Properties: &test.VirtualMachineExtensionProperties{
						Type:                    to.StringPtr("CustomScriptExtension"),
						AutoUpgradeMinorVersion: to.BoolPtr(true),
						ProvisioningState:       to.StringPtr("Succeeded"),
						Publisher:               to.StringPtr("Microsoft.Compute"),
						Settings:                map[string]interface{}{},
						TypeHandlerVersion:      to.StringPtr("1.9"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVM)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMs_GetInstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine from a VM scale set placed on a dedicated host group through automatic placement."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	res, err := client.GetInstanceView(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		"0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineScaleSetVMInstanceView{
			AssignedHost: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
			Disks: []*test.DiskInstanceView{
				{
					Name: to.StringPtr("myOSDisk"),
					Statuses: []*test.InstanceViewStatus{
						{
							Code:          to.StringPtr("ProvisioningState/succeeded"),
							DisplayStatus: to.StringPtr("Provisioning succeeded"),
							Level:         test.StatusLevelTypesInfo.ToPtr(),
							Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T04:58:58.0882815+00:00"); return t }()),
						}},
				}},
			PlatformFaultDomain:  to.Int32Ptr(0),
			PlatformUpdateDomain: to.Int32Ptr(0),
			Statuses: []*test.InstanceViewStatus{
				{
					Code:          to.StringPtr("ProvisioningState/succeeded"),
					DisplayStatus: to.StringPtr("Provisioning succeeded"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-05T04:59:58.1852966+00:00"); return t }()),
				},
				{
					Code:          to.StringPtr("PowerState/running"),
					DisplayStatus: to.StringPtr("VM running"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
				}},
			VMAgent: &test.VirtualMachineAgentInstanceView{
				Statuses: []*test.InstanceViewStatus{
					{
						Code:          to.StringPtr("ProvisioningState/Unavailable"),
						DisplayStatus: to.StringPtr("Not Ready"),
						Level:         test.StatusLevelTypesWarning.ToPtr(),
						Message:       to.StringPtr("VM status blob is found but not yet populated."),
						Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T05:00:32+00:00"); return t }()),
					}},
				VMAgentVersion: to.StringPtr("Unknown"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMInstanceView) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMInstanceView)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMs_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_PowerOff(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_Restart(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_Start(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_Redeploy(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_RetrieveBootDiagnosticsData(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVMScaleSetVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	res, err := client.RetrieveBootDiagnosticsData(ctx,
		"ResourceGroup",
		"myvmScaleSet",
		"0",
		&test.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Int32Ptr(60)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVMScaleSetVM.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RetrieveBootDiagnosticsDataResult{
			ConsoleScreenshotBlobURI: to.StringPtr("https://storageuri/myvmScaleSetinstance.screenshot.bmp?{saskey}"),
			SerialConsoleLogBlobURI:  to.StringPtr("https://storageuri/myvmScaleSetinstance.serialconsole.log?{saskey}"),
		}
		if !reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RetrieveBootDiagnosticsDataResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVMScaleSetVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMs_PerformMaintenance(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestVirtualMachineScaleSetVMs_SimulateEviction(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVmssVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	_, err := client.SimulateEviction(ctx,
		"ResourceGroup",
		"VmScaleSetName",
		"InstanceId",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVmssVM.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_RunCommand(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_RunCommand"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRunCommand(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		"0",
		test.RunCommandInput{
			CommandID: to.StringPtr("RunPowerShellScript"),
			Script: []*string{
				to.StringPtr("# Test multi-line string\r\nWrite-Host Hello World!")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RunCommandResult{
			Value: []*test.InstanceViewStatus{
				{
					Code:          to.StringPtr("ComponentStatus/StdOut/succeeded"),
					DisplayStatus: to.StringPtr("Provisioning succeeded"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Message:       to.StringPtr("Hello World!"),
				},
				{
					Code:          to.StringPtr("ComponentStatus/StdErr/succeeded"),
					DisplayStatus: to.StringPtr("Provisioning succeeded"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Message:       to.StringPtr(""),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RunCommandResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogAnalytics_ExportRequestRateByInterval(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all Api requests made to Compute Resource Provider within the given time period broken down by intervals."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewLogAnalyticsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginExportRequestRateByInterval(ctx,
		"westus",
		test.RequestRateByIntervalInput{
			BlobContainerSasURI: to.StringPtr("https://somesasuri"),
			FromTime:            to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862601Z"); return t }()),
			GroupByResourceName: to.BoolPtr(true),
			ToTime:              to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862601Z"); return t }()),
			IntervalLength:      test.IntervalInMinsFiveMins.ToPtr(),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.LogAnalyticsOperationResult{
			Properties: &test.LogAnalyticsOutput{
				Output: to.StringPtr("https://crptestar4227.blob.core.windows.net:443/sascontainer/RequestRateByInterval_20180121-0154_20180123-0154.csv"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogAnalyticsOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogAnalytics_ExportThrottledRequests(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all throttled Api requests made to Compute Resource Provider within the given time period."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewLogAnalyticsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginExportThrottledRequests(ctx,
		"westus",
		test.ThrottledRequestsInput{
			BlobContainerSasURI:        to.StringPtr("https://somesasuri"),
			FromTime:                   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862601Z"); return t }()),
			GroupByClientApplicationID: to.BoolPtr(false),
			GroupByOperationName:       to.BoolPtr(true),
			GroupByResourceName:        to.BoolPtr(false),
			GroupByUserAgent:           to.BoolPtr(false),
			ToTime:                     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862601Z"); return t }()),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.LogAnalyticsOperationResult{
			Properties: &test.LogAnalyticsOutput{
				Output: to.StringPtr("https://crptestar4227.blob.core.windows.net:443/sascontainer/ThrottledRequests_20180121-0154_20180123-0154.csv"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogAnalyticsOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineRunCommands_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineRunCommandsClient("subid", cred, &options)
	pager := client.List("SoutheastAsia",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandList.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.RunCommandListResult{
				Value: []*test.RunCommandDocumentBase{
					{
						Description: to.StringPtr("Configure the machine to enable remote PowerShell."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("EnableRemotePS"),
						Label:       to.StringPtr("Enable remote PowerShell"),
						OSType:      test.OperatingSystemTypesWindows.ToPtr(),
					},
					{
						Description: to.StringPtr("Shows detailed information for the IP address, subnet mask and default gateway for each adapter bound to TCP/IP."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("IPConfig"),
						Label:       to.StringPtr("List IP configuration"),
						OSType:      test.OperatingSystemTypesWindows.ToPtr(),
					},
					{
						Description: to.StringPtr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("RunPowerShellScript"),
						Label:       to.StringPtr("Executes a PowerShell script"),
						OSType:      test.OperatingSystemTypesWindows.ToPtr(),
					},
					{
						Description: to.StringPtr("Custom multiline shell script should be defined in script property. Optional parameters can be set in parameters property."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("RunShellScript"),
						Label:       to.StringPtr("Executes a Linux shell script"),
						OSType:      test.OperatingSystemTypesLinux.ToPtr(),
					},
					{
						Description: to.StringPtr("Get the configuration of all network interfaces."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("ifconfig"),
						Label:       to.StringPtr("List network configuration"),
						OSType:      test.OperatingSystemTypesLinux.ToPtr(),
					},
					{
						Description: to.StringPtr("Checks if the local Administrator account is disabled, and if so enables it."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("EnableAdminAccount"),
						Label:       to.StringPtr("Enable administrator account"),
						OSType:      test.OperatingSystemTypesWindows.ToPtr(),
					},
					{
						Description: to.StringPtr("Reset built-in Administrator account password."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("ResetAccountPassword"),
						Label:       to.StringPtr("Reset built-in Administrator account password"),
						OSType:      test.OperatingSystemTypesWindows.ToPtr(),
					},
					{
						Description: to.StringPtr("Checks registry settings and domain policy settings. Suggests policy actions if machine is part of a domain or modifies the settings to default values."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("RDPSettings"),
						Label:       to.StringPtr("Verify RDP Listener Settings"),
						OSType:      test.OperatingSystemTypesWindows.ToPtr(),
					},
					{
						Description: to.StringPtr("Sets the default or user specified port number for Remote Desktop connections. Enables firewall rule for inbound access to the port."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("SetRDPPort"),
						Label:       to.StringPtr("Set Remote Desktop port"),
						OSType:      test.OperatingSystemTypesWindows.ToPtr(),
					},
					{
						Description: to.StringPtr("Removes the SSL certificate tied to the RDP listener and restores the RDP listerner security to default. Use this script if you see any issues with the certificate."),
						Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
						ID:          to.StringPtr("ResetRDPCert"),
						Label:       to.StringPtr("Restore RDP Authentication mode to defaults"),
						OSType:      test.OperatingSystemTypesWindows.ToPtr(),
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().RunCommandListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().RunCommandListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestVirtualMachineRunCommands_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineRunCommandsClient("24fb23e3-6ba3-41f0-9b6e-e41131d5d61e", cred, &options)
	res, err := client.Get(ctx,
		"SoutheastAsia",
		"RunPowerShellScript",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RunCommandDocument{
			Description: to.StringPtr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
			Schema:      to.StringPtr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
			ID:          to.StringPtr("RunPowerShellScript"),
			Label:       to.StringPtr("Executes a PowerShell script"),
			OSType:      test.OperatingSystemTypesWindows.ToPtr(),
			Parameters: []*test.RunCommandParameterDefinition{
				{
					Name:         to.StringPtr("arg1"),
					Type:         to.StringPtr("string"),
					DefaultValue: to.StringPtr("value1"),
				},
				{
					Name:         to.StringPtr("arg2"),
					Type:         to.StringPtr("string"),
					DefaultValue: to.StringPtr("value2"),
				}},
			Script: []*string{
				to.StringPtr("param("),
				to.StringPtr("    [string]$arg1,"),
				to.StringPtr("    [string]$arg2"),
				to.StringPtr(")"),
				to.StringPtr("Write-Host This is a sample script with parameters $arg1 $arg2")},
		}
		if !reflect.DeepEqual(exampleRes, res.RunCommandDocument) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RunCommandDocument)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineRunCommands_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a run command."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		test.VirtualMachineRunCommand{
			Location: to.StringPtr("West US"),
			Properties: &test.VirtualMachineRunCommandProperties{
				AsyncExecution: to.BoolPtr(false),
				Parameters: []*test.RunCommandInputParameter{
					{
						Name:  to.StringPtr("param1"),
						Value: to.StringPtr("value1"),
					},
					{
						Name:  to.StringPtr("param2"),
						Value: to.StringPtr("value2"),
					}},
				RunAsPassword: to.StringPtr("<runAsPassword>"),
				RunAsUser:     to.StringPtr("user1"),
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Int32Ptr(3600),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineRunCommand{
			Name:     to.StringPtr("myRunCommand"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines/runCommands"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
			Properties: &test.VirtualMachineRunCommandProperties{
				AsyncExecution: to.BoolPtr(false),
				Parameters: []*test.RunCommandInputParameter{
					{
						Name:  to.StringPtr("param1"),
						Value: to.StringPtr("value1"),
					},
					{
						Name:  to.StringPtr("param2"),
						Value: to.StringPtr("value2"),
					}},
				ProvisioningState: to.StringPtr("Succeeded"),
				RunAsUser:         to.StringPtr("user1"),
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Int32Ptr(3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineRunCommands_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a run command."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		test.VirtualMachineRunCommandUpdate{
			Properties: &test.VirtualMachineRunCommandProperties{
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Script Source Updated!"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineRunCommand{
			Name:     to.StringPtr("myRunCommand"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines/runCommands"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
			Properties: &test.VirtualMachineRunCommandProperties{
				AsyncExecution: to.BoolPtr(false),
				Parameters: []*test.RunCommandInputParameter{
					{
						Name:  to.StringPtr("param1"),
						Value: to.StringPtr("value1"),
					},
					{
						Name:  to.StringPtr("param2"),
						Value: to.StringPtr("value2"),
					}},
				ProvisioningState: to.StringPtr("Succeeded"),
				RunAsUser:         to.StringPtr("user1"),
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Script Source Updated!"),
				},
				TimeoutInSeconds: to.Int32Ptr(3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineRunCommands_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a run command."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json: %v", err)
	}
}

func TestVirtualMachineRunCommands_GetByVirtualMachine(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a run command."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	res, err := client.GetByVirtualMachine(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		&test.VirtualMachineRunCommandsClientGetByVirtualMachineOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRunCommand.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineRunCommand{
			Name:     to.StringPtr("myRunCommand"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachines/runCommands"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
			Properties: &test.VirtualMachineRunCommandProperties{
				AsyncExecution: to.BoolPtr(false),
				Parameters: []*test.RunCommandInputParameter{
					{
						Name:  to.StringPtr("param1"),
						Value: to.StringPtr("value1"),
					},
					{
						Name:  to.StringPtr("param2"),
						Value: to.StringPtr("value2"),
					}},
				ProvisioningState: to.StringPtr("Succeeded"),
				RunAsUser:         to.StringPtr("user1"),
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Int32Ptr(3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineRunCommands_ListByVirtualMachine(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListRunCommandsInVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in a Virtual Machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	pager := client.ListByVirtualMachine("myResourceGroup",
		"myVM",
		&test.VirtualMachineRunCommandsClientListByVirtualMachineOptions{Expand: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListRunCommandsInVM.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.VirtualMachineRunCommandsListResult{
				Value: []*test.VirtualMachineRunCommand{
					{
						Name:     to.StringPtr("myRunCommand"),
						Type:     to.StringPtr("Microsoft.Compute/virtualMachines/runCommands"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"tag1": to.StringPtr("value1"),
							"tag2": to.StringPtr("value2"),
						},
						Properties: &test.VirtualMachineRunCommandProperties{
							AsyncExecution: to.BoolPtr(false),
							Parameters: []*test.RunCommandInputParameter{
								{
									Name:  to.StringPtr("param1"),
									Value: to.StringPtr("value1"),
								},
								{
									Name:  to.StringPtr("param2"),
									Value: to.StringPtr("value2"),
								}},
							ProvisioningState: to.StringPtr("Succeeded"),
							RunAsUser:         to.StringPtr("user1"),
							Source: &test.VirtualMachineRunCommandScriptSource{
								Script: to.StringPtr("Write-Host Hello World!"),
							},
							TimeoutInSeconds: to.Int32Ptr(0),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().VirtualMachineRunCommandsListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().VirtualMachineRunCommandsListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListRunCommandsInVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestVirtualMachineScaleSetVMRunCommands_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM run command."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		test.VirtualMachineRunCommand{
			Location: to.StringPtr("West US"),
			Properties: &test.VirtualMachineRunCommandProperties{
				AsyncExecution: to.BoolPtr(false),
				Parameters: []*test.RunCommandInputParameter{
					{
						Name:  to.StringPtr("param1"),
						Value: to.StringPtr("value1"),
					},
					{
						Name:  to.StringPtr("param2"),
						Value: to.StringPtr("value2"),
					}},
				RunAsPassword: to.StringPtr("<runAsPassword>"),
				RunAsUser:     to.StringPtr("user1"),
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Int32Ptr(3600),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineRunCommand{
			Name:     to.StringPtr("myRunCommand"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
			Location: to.StringPtr("westus"),
			Properties: &test.VirtualMachineRunCommandProperties{
				AsyncExecution: to.BoolPtr(false),
				Parameters: []*test.RunCommandInputParameter{
					{
						Name:  to.StringPtr("param1"),
						Value: to.StringPtr("value1"),
					},
					{
						Name:  to.StringPtr("param2"),
						Value: to.StringPtr("value2"),
					}},
				ProvisioningState: to.StringPtr("Succeeded"),
				RunAsUser:         to.StringPtr("user1"),
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Int32Ptr(3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMRunCommands_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM run command."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		test.VirtualMachineRunCommandUpdate{
			Properties: &test.VirtualMachineRunCommandProperties{
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Script Source Updated!"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineRunCommand{
			Name:     to.StringPtr("myRunCommand"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
			Properties: &test.VirtualMachineRunCommandProperties{
				AsyncExecution: to.BoolPtr(false),
				Parameters: []*test.RunCommandInputParameter{
					{
						Name:  to.StringPtr("param1"),
						Value: to.StringPtr("value1"),
					},
					{
						Name:  to.StringPtr("param2"),
						Value: to.StringPtr("value2"),
					}},
				ProvisioningState: to.StringPtr("Succeeded"),
				RunAsUser:         to.StringPtr("user1"),
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Script Source Updated!"),
				},
				TimeoutInSeconds: to.Int32Ptr(3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMRunCommands_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM run command."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMRunCommands_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM run commands."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		&test.VirtualMachineScaleSetVMRunCommandsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.VirtualMachineRunCommand{
			Name:     to.StringPtr("myRunCommand"),
			Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
			Properties: &test.VirtualMachineRunCommandProperties{
				AsyncExecution: to.BoolPtr(false),
				Parameters: []*test.RunCommandInputParameter{
					{
						Name:  to.StringPtr("param1"),
						Value: to.StringPtr("value1"),
					},
					{
						Name:  to.StringPtr("param2"),
						Value: to.StringPtr("value2"),
					}},
				ProvisioningState: to.StringPtr("Succeeded"),
				RunAsUser:         to.StringPtr("user1"),
				Source: &test.VirtualMachineRunCommandScriptSource{
					Script: to.StringPtr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Int32Ptr(3600),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMRunCommands_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in Vmss instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	pager := client.List("myResourceGroup",
		"myvmScaleSet",
		"0",
		&test.VirtualMachineScaleSetVMRunCommandsClientListOptions{Expand: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMRunCommands.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.VirtualMachineRunCommandsListResult{
				Value: []*test.VirtualMachineRunCommand{
					{
						Name:     to.StringPtr("myRunCommand"),
						Type:     to.StringPtr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
						Location: to.StringPtr("westus"),
						Properties: &test.VirtualMachineRunCommandProperties{
							AsyncExecution: to.BoolPtr(false),
							Parameters: []*test.RunCommandInputParameter{
								{
									Name:  to.StringPtr("param1"),
									Value: to.StringPtr("value1"),
								},
								{
									Name:  to.StringPtr("param2"),
									Value: to.StringPtr("value2"),
								}},
							ProvisioningState: to.StringPtr("Succeeded"),
							RunAsUser:         to.StringPtr("user1"),
							Source: &test.VirtualMachineRunCommandScriptSource{
								Script: to.StringPtr("Write-Host Hello World!"),
							},
							TimeoutInSeconds: to.Int32Ptr(0),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().VirtualMachineRunCommandsListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().VirtualMachineRunCommandsListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestResourceSKUs_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewResourceSKUsClient("{subscription-id}", cred, &options)
	pager := client.List(&test.ResourceSKUsClientListOptions{Filter: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkus.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ResourceSKUsResult{
				Value: []*test.ResourceSKU{
					{
						Name: to.StringPtr("Standard_A0"),
						Capabilities: []*test.ResourceSKUCapabilities{
							{
								Name:  to.StringPtr("MaxResourceVolumeMB"),
								Value: to.StringPtr("20480"),
							},
							{
								Name:  to.StringPtr("OSVhdSizeMB"),
								Value: to.StringPtr("1047552"),
							},
							{
								Name:  to.StringPtr("vCPUs"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("HyperVGenerations"),
								Value: to.StringPtr("V1"),
							},
							{
								Name:  to.StringPtr("MemoryGB"),
								Value: to.StringPtr("0.75"),
							},
							{
								Name:  to.StringPtr("MaxDataDiskCount"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("LowPriorityCapable"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("PremiumIO"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("vCPUsAvailable"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("ACUs"),
								Value: to.StringPtr("50"),
							},
							{
								Name:  to.StringPtr("vCPUsPerCore"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("EphemeralOSDiskSupported"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("AcceleratedNetworkingEnabled"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("RdmaEnabled"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("MaxNetworkInterfaces"),
								Value: to.StringPtr("2"),
							}},
						Family: to.StringPtr("standardA0_A7Family"),
						LocationInfo: []*test.ResourceSKULocationInfo{
							{
								Location: to.StringPtr("westus"),
								ZoneDetails: []*test.ResourceSKUZoneDetails{
									{
										Name: []*string{
											to.StringPtr("2")},
										Capabilities: []*test.ResourceSKUCapabilities{
											{
												Name:  to.StringPtr("UltraSSDAvailable"),
												Value: to.StringPtr("True"),
											}},
									}},
								Zones: []*string{
									to.StringPtr("2"),
									to.StringPtr("1")},
							}},
						Locations: []*string{
							to.StringPtr("westus")},
						ResourceType: to.StringPtr("virtualMachines"),
						Size:         to.StringPtr("A0"),
						Tier:         to.StringPtr("Standard"),
					},
					{
						Name: to.StringPtr("Standard_A1"),
						Capabilities: []*test.ResourceSKUCapabilities{
							{
								Name:  to.StringPtr("MaxResourceVolumeMB"),
								Value: to.StringPtr("71680"),
							},
							{
								Name:  to.StringPtr("OSVhdSizeMB"),
								Value: to.StringPtr("1047552"),
							},
							{
								Name:  to.StringPtr("vCPUs"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("HyperVGenerations"),
								Value: to.StringPtr("V1"),
							},
							{
								Name:  to.StringPtr("MemoryGB"),
								Value: to.StringPtr("1.75"),
							},
							{
								Name:  to.StringPtr("MaxDataDiskCount"),
								Value: to.StringPtr("2"),
							},
							{
								Name:  to.StringPtr("LowPriorityCapable"),
								Value: to.StringPtr("True"),
							},
							{
								Name:  to.StringPtr("PremiumIO"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("vCPUsAvailable"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("ACUs"),
								Value: to.StringPtr("100"),
							},
							{
								Name:  to.StringPtr("vCPUsPerCore"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("EphemeralOSDiskSupported"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("AcceleratedNetworkingEnabled"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("RdmaEnabled"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("MaxNetworkInterfaces"),
								Value: to.StringPtr("2"),
							}},
						Family: to.StringPtr("standardA0_A7Family"),
						LocationInfo: []*test.ResourceSKULocationInfo{
							{
								Location: to.StringPtr("westus"),
								Zones: []*string{
									to.StringPtr("1"),
									to.StringPtr("2"),
									to.StringPtr("3")},
							}},
						Locations: []*string{
							to.StringPtr("westus")},
						ResourceType: to.StringPtr("virtualMachines"),
						Size:         to.StringPtr("A1"),
						Tier:         to.StringPtr("Standard"),
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ResourceSKUsResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ResourceSKUsResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkusForARegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs for the specified region"},
	})
	client = test.NewResourceSKUsClient("{subscription-id}", cred, &options)
	pager = client.List(&test.ResourceSKUsClientListOptions{Filter: to.StringPtr("location eq 'westus'")})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkusForARegion.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ResourceSKUsResult{
				Value: []*test.ResourceSKU{
					{
						Name: to.StringPtr("Standard_A0"),
						Capabilities: []*test.ResourceSKUCapabilities{
							{
								Name:  to.StringPtr("MaxResourceVolumeMB"),
								Value: to.StringPtr("20480"),
							},
							{
								Name:  to.StringPtr("OSVhdSizeMB"),
								Value: to.StringPtr("1047552"),
							},
							{
								Name:  to.StringPtr("vCPUs"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("HyperVGenerations"),
								Value: to.StringPtr("V1"),
							},
							{
								Name:  to.StringPtr("MemoryGB"),
								Value: to.StringPtr("0.75"),
							},
							{
								Name:  to.StringPtr("MaxDataDiskCount"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("LowPriorityCapable"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("PremiumIO"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("vCPUsAvailable"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("ACUs"),
								Value: to.StringPtr("50"),
							},
							{
								Name:  to.StringPtr("vCPUsPerCore"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("EphemeralOSDiskSupported"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("AcceleratedNetworkingEnabled"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("RdmaEnabled"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("MaxNetworkInterfaces"),
								Value: to.StringPtr("2"),
							}},
						Family: to.StringPtr("standardA0_A7Family"),
						LocationInfo: []*test.ResourceSKULocationInfo{
							{
								Location: to.StringPtr("westus"),
								ZoneDetails: []*test.ResourceSKUZoneDetails{
									{
										Name: []*string{
											to.StringPtr("2")},
										Capabilities: []*test.ResourceSKUCapabilities{
											{
												Name:  to.StringPtr("UltraSSDAvailable"),
												Value: to.StringPtr("True"),
											}},
									}},
								Zones: []*string{
									to.StringPtr("2"),
									to.StringPtr("1")},
							}},
						Locations: []*string{
							to.StringPtr("westus")},
						ResourceType: to.StringPtr("virtualMachines"),
						Size:         to.StringPtr("A0"),
						Tier:         to.StringPtr("Standard"),
					},
					{
						Name: to.StringPtr("Standard_A1"),
						Capabilities: []*test.ResourceSKUCapabilities{
							{
								Name:  to.StringPtr("MaxResourceVolumeMB"),
								Value: to.StringPtr("71680"),
							},
							{
								Name:  to.StringPtr("OSVhdSizeMB"),
								Value: to.StringPtr("1047552"),
							},
							{
								Name:  to.StringPtr("vCPUs"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("HyperVGenerations"),
								Value: to.StringPtr("V1"),
							},
							{
								Name:  to.StringPtr("MemoryGB"),
								Value: to.StringPtr("1.75"),
							},
							{
								Name:  to.StringPtr("MaxDataDiskCount"),
								Value: to.StringPtr("2"),
							},
							{
								Name:  to.StringPtr("LowPriorityCapable"),
								Value: to.StringPtr("True"),
							},
							{
								Name:  to.StringPtr("PremiumIO"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("vCPUsAvailable"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("ACUs"),
								Value: to.StringPtr("100"),
							},
							{
								Name:  to.StringPtr("vCPUsPerCore"),
								Value: to.StringPtr("1"),
							},
							{
								Name:  to.StringPtr("EphemeralOSDiskSupported"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("AcceleratedNetworkingEnabled"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("RdmaEnabled"),
								Value: to.StringPtr("False"),
							},
							{
								Name:  to.StringPtr("MaxNetworkInterfaces"),
								Value: to.StringPtr("2"),
							}},
						Family: to.StringPtr("standardA0_A7Family"),
						LocationInfo: []*test.ResourceSKULocationInfo{
							{
								Location: to.StringPtr("westus"),
								Zones: []*string{
									to.StringPtr("1"),
									to.StringPtr("2"),
									to.StringPtr("3")},
							}},
						Locations: []*string{
							to.StringPtr("westus")},
						ResourceType: to.StringPtr("virtualMachines"),
						Size:         to.StringPtr("A1"),
						Tier:         to.StringPtr("Standard"),
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ResourceSKUsResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ResourceSKUsResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkusForARegion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDisks_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskAccessID:        to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
				DiskSizeGB:          to.Int32Ptr(200),
				NetworkAccessPolicy: test.NetworkAccessPolicyAllowPrivate.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskAccessID:        to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
				DiskSizeGB:          to.Int32Ptr(200),
				NetworkAccessPolicy: test.NetworkAccessPolicyAllowPrivate.ToPtr(),
				ProvisioningState:   to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk encryption set."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB: to.Int32Ptr(200),
				Encryption: &test.Encryption{
					DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB: to.Int32Ptr(200),
				Encryption: &test.Encryption{
					DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by copying a snapshot."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
					SourceResourceID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
					SourceResourceID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from a different subscription."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionImport.ToPtr(),
					SourceURI:        to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionImport.ToPtr(),
					SourceURI:        to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from the same subscription."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionImport.ToPtr(),
					SourceURI:    to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionImport.ToPtr(),
					SourceURI:    to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from a platform image."},
	})
	client = test.NewDisksClient("{subscriptionId}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionFromImage.ToPtr(),
					ImageReference: &test.ImageDiskReference{
						ID: to.StringPtr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
					},
				},
				OSType: test.OperatingSystemTypesWindows.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionFromImage.ToPtr(),
					ImageReference: &test.ImageDiskReference{
						ID: to.StringPtr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
					},
				},
				HyperVGeneration:  test.HyperVGenerationV1.ToPtr(),
				OSType:            test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState: to.StringPtr("Succeeded"),
				PurchasePlan: &test.DiskPurchasePlan{
					Name:      to.StringPtr("{sku}"),
					Product:   to.StringPtr("{offer}"),
					Publisher: to.StringPtr("{publisher}"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from an existing managed disk in the same or different subscription."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk2",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
					SourceResourceID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk2"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
					SourceResourceID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with security profile"},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("North Central US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionFromImage.ToPtr(),
					ImageReference: &test.ImageDiskReference{
						ID: to.StringPtr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
					},
				},
				OSType: test.OperatingSystemTypesWindows.ToPtr(),
				SecurityProfile: &test.DiskSecurityProfile{
					SecurityType: test.DiskSecurityTypesTrustedLaunch.ToPtr(),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("North Central US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionFromImage.ToPtr(),
					ImageReference: &test.ImageDiskReference{
						ID: to.StringPtr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
					},
				},
				OSType:            test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState: to.StringPtr("Succeeded"),
				SecurityProfile: &test.DiskSecurityProfile{
					SecurityType: test.DiskSecurityTypesTrustedLaunch.ToPtr(),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with ssd zrs account type."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB: to.Int32Ptr(200),
			},
			SKU: &test.DiskSKU{
				Name: test.DiskStorageAccountTypesPremiumZRS.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB:        to.Int32Ptr(200),
				ProvisioningState: to.StringPtr("Succeeded"),
			},
			SKU: &test.DiskSKU{
				Name: test.DiskStorageAccountTypesPremiumZRS.ToPtr(),
				Tier: to.StringPtr("Premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed upload disk."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:    test.DiskCreateOptionUpload.ToPtr(),
					UploadSizeBytes: to.Int64Ptr(10737418752),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:    test.DiskCreateOptionUpload.ToPtr(),
					UploadSizeBytes: to.Int64Ptr(10737418752),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk in extended location."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			ExtendedLocation: &test.ExtendedLocation{
				Name: to.StringPtr("{edge-zone-id}"),
				Type: test.ExtendedLocationTypesEdgeZone.ToPtr(),
			},
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB: to.Int32Ptr(200),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			ExtendedLocation: &test.ExtendedLocation{
				Name: to.StringPtr("{edge-zone-id}"),
				Type: test.ExtendedLocationTypesEdgeZone.ToPtr(),
			},
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB:        to.Int32Ptr(200),
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB: to.Int32Ptr(200),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB:        to.Int32Ptr(200),
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ultra managed disk with logicalSectorSize 512E"},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.Disk{
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:      test.DiskCreateOptionEmpty.ToPtr(),
					LogicalSectorSize: to.Int32Ptr(512),
				},
				DiskSizeGB: to.Int32Ptr(200),
			},
			SKU: &test.DiskSKU{
				Name: test.DiskStorageAccountTypesUltraSSDLRS.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption:      test.DiskCreateOptionEmpty.ToPtr(),
					LogicalSectorSize: to.Int32Ptr(512),
				},
				DiskSizeGB:        to.Int32Ptr(200),
				ProvisioningState: to.StringPtr("Succeeded"),
			},
			SKU: &test.DiskSKU{
				Name: test.DiskStorageAccountTypesUltraSSDLRS.ToPtr(),
				Tier: to.StringPtr("Ultra"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a bursting enabled managed disk."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.DiskUpdate{
			Properties: &test.DiskUpdateProperties{
				BurstingEnabled: to.BoolPtr(true),
				DiskSizeGB:      to.Int32Ptr(1024),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				BurstingEnabled: to.BoolPtr(true),
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB:        to.Int32Ptr(1024),
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add purchase plan."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.DiskUpdate{
			Properties: &test.DiskUpdateProperties{
				PurchasePlan: &test.DiskPurchasePlan{
					Name:          to.StringPtr("myPurchasePlanName"),
					Product:       to.StringPtr("myPurchasePlanProduct"),
					PromotionCode: to.StringPtr("myPurchasePlanPromotionCode"),
					Publisher:     to.StringPtr("myPurchasePlanPublisher"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("westus"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionFromImage.ToPtr(),
					ImageReference: &test.ImageDiskReference{
						ID: to.StringPtr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
					},
				},
				DiskSizeGB:        to.Int32Ptr(127),
				HyperVGeneration:  test.HyperVGenerationV1.ToPtr(),
				OSType:            test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState: to.StringPtr("Succeeded"),
				PurchasePlan: &test.DiskPurchasePlan{
					Name:          to.StringPtr("myPurchasePlanName"),
					Product:       to.StringPtr("myPurchasePlanProduct"),
					PromotionCode: to.StringPtr("myPurchasePlanPromotionCode"),
					Publisher:     to.StringPtr("myPurchasePlanPublisher"),
				},
			},
			SKU: &test.DiskSKU{
				Name: test.DiskStorageAccountTypesStandardLRS.ToPtr(),
				Tier: to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add supportsHibernation."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.DiskUpdate{
			Properties: &test.DiskUpdateProperties{
				SupportsHibernation: to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("westus"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionImport.ToPtr(),
					SourceURI:    to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
				DiskSizeGB:          to.Int32Ptr(127),
				HyperVGeneration:    test.HyperVGenerationV1.ToPtr(),
				OSType:              test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState:   to.StringPtr("Succeeded"),
				SupportsHibernation: to.BoolPtr(true),
			},
			SKU: &test.DiskSKU{
				Name: test.DiskStorageAccountTypesStandardLRS.ToPtr(),
				Tier: to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to change tier."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.DiskUpdate{
			Properties: &test.DiskUpdateProperties{
				Tier: to.StringPtr("P30"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				Tier:              to.StringPtr("P30"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to disable bursting."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.DiskUpdate{
			Properties: &test.DiskUpdateProperties{
				BurstingEnabled: to.BoolPtr(false),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update managed disk to remove disk access resource association."},
	})
	client = test.NewDisksClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		test.DiskUpdate{
			Properties: &test.DiskUpdateProperties{
				NetworkAccessPolicy: test.NetworkAccessPolicyAllowAll.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myDisk"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
				},
				DiskSizeGB:          to.Int32Ptr(200),
				NetworkAccessPolicy: test.NetworkAccessPolicyAllowAll.ToPtr(),
				ProvisioningState:   to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a managed disk."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDisksClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myManagedDisk",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAManagedDisk.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Disk{
			Name:     to.StringPtr("myManagedDisk"),
			Type:     to.StringPtr("Microsoft.Compute/disks"),
			ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("ManagedDisks"),
			},
			ManagedBy: to.StringPtr("/subscriptions/123caaa-123v-v211-a49f-f88ccac5bf88/resourceGroups/ResourceGroupName/providers/Microsoft.Compute/virtualMachines/TestVM414689371c88843d65ec"),
			Properties: &test.DiskProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionFromImage.ToPtr(),
					ImageReference: &test.ImageDiskReference{
						ID: to.StringPtr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
					},
				},
				DiskSizeGB: to.Int32Ptr(10),
				Encryption: &test.Encryption{
					Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
				},
				EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
					Enabled: to.BoolPtr(true),
					EncryptionSettings: []*test.EncryptionSettingsElement{
						{
							DiskEncryptionKey: &test.KeyVaultAndSecretReference{
								SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
								SourceVault: &test.SourceVault{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
								},
							},
							KeyEncryptionKey: &test.KeyVaultAndKeyReference{
								KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
								SourceVault: &test.SourceVault{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
								},
							},
						}},
				},
				HyperVGeneration:  test.HyperVGenerationV1.ToPtr(),
				OSType:            test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState: to.StringPtr("Succeeded"),
				PurchasePlan: &test.DiskPurchasePlan{
					Name:      to.StringPtr("test_sku"),
					Product:   to.StringPtr("marketplace_vm_test"),
					Publisher: to.StringPtr("test_test_pmc2pc1"),
				},
				SecurityProfile: &test.DiskSecurityProfile{
					SecurityType: test.DiskSecurityTypesTrustedLaunch.ToPtr(),
				},
				SupportsHibernation: to.BoolPtr(true),
				TimeCreated:         to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079872+00:00"); return t }()),
			},
			SKU: &test.DiskSKU{
				Name: test.DiskStorageAccountTypesStandardLRS.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Disk) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Disk)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDisks_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDisksClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInAResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DiskList{
				Value: []*test.Disk{
					{
						Name:     to.StringPtr("myManagedDisk1"),
						Type:     to.StringPtr("Microsoft.Compute/disks"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("ManagedDisks"),
						},
						Properties: &test.DiskProperties{
							CreationData: &test.CreationData{
								CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
								SourceResourceID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
							},
							DiskSizeGB: to.Int32Ptr(200),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
								Enabled: to.BoolPtr(true),
								EncryptionSettings: []*test.EncryptionSettingsElement{
									{
										DiskEncryptionKey: &test.KeyVaultAndSecretReference{
											SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
										KeyEncryptionKey: &test.KeyVaultAndKeyReference{
											KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
									}},
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
						},
					},
					{
						Name:     to.StringPtr("myManagedDisk2"),
						Type:     to.StringPtr("Microsoft.Compute/disks"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						Location: to.StringPtr("westus"),
						Properties: &test.DiskProperties{
							CreationData: &test.CreationData{
								CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
							},
							DiskSizeGB: to.Int32Ptr(10),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872242+00:00"); return t }()),
						},
					},
					{
						Name:     to.StringPtr("myManagedDisk3"),
						Type:     to.StringPtr("Microsoft.Compute/disks"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("ManagedDisks"),
						},
						Properties: &test.DiskProperties{
							CreationData: &test.CreationData{
								CreateOption: test.DiskCreateOptionFromImage.ToPtr(),
								ImageReference: &test.ImageDiskReference{
									ID: to.StringPtr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
								},
							},
							DiskSizeGB: to.Int32Ptr(200),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
								Enabled: to.BoolPtr(true),
								EncryptionSettings: []*test.EncryptionSettingsElement{
									{
										DiskEncryptionKey: &test.KeyVaultAndSecretReference{
											SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
										KeyEncryptionKey: &test.KeyVaultAndKeyReference{
											KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
									}},
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.3973934+00:00"); return t }()),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DiskList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DiskList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDisks_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDisksClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DiskList{
				Value: []*test.Disk{
					{
						Name:     to.StringPtr("myManagedDisk1"),
						Type:     to.StringPtr("Microsoft.Compute/disks"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("ManagedDisks"),
						},
						Properties: &test.DiskProperties{
							CreationData: &test.CreationData{
								CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
								SourceResourceID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
							},
							DiskSizeGB: to.Int32Ptr(200),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
								Enabled: to.BoolPtr(true),
								EncryptionSettings: []*test.EncryptionSettingsElement{
									{
										DiskEncryptionKey: &test.KeyVaultAndSecretReference{
											SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
										KeyEncryptionKey: &test.KeyVaultAndKeyReference{
											KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
									}},
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
						},
					},
					{
						Name:     to.StringPtr("myManagedDisk2"),
						Type:     to.StringPtr("Microsoft.Compute/disks"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						Location: to.StringPtr("westus"),
						Properties: &test.DiskProperties{
							CreationData: &test.CreationData{
								CreateOption: test.DiskCreateOptionEmpty.ToPtr(),
							},
							DiskSizeGB: to.Int32Ptr(10),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872242+00:00"); return t }()),
						},
					},
					{
						Name:     to.StringPtr("myManagedDisk3"),
						Type:     to.StringPtr("Microsoft.Compute/disks"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk3"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("ManagedDisks"),
						},
						Properties: &test.DiskProperties{
							CreationData: &test.CreationData{
								CreateOption: test.DiskCreateOptionFromImage.ToPtr(),
								ImageReference: &test.ImageDiskReference{
									ID: to.StringPtr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
								},
							},
							DiskSizeGB: to.Int32Ptr(200),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
								Enabled: to.BoolPtr(true),
								EncryptionSettings: []*test.EncryptionSettingsElement{
									{
										DiskEncryptionKey: &test.KeyVaultAndSecretReference{
											SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
										KeyEncryptionKey: &test.KeyVaultAndKeyReference{
											KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
									}},
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.3973934+00:00"); return t }()),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DiskList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DiskList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDisks_GrantAccess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDisks_RevokeAccess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSnapshots_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from a different subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSnapshotsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot1",
		test.Snapshot{
			Location: to.StringPtr("West US"),
			Properties: &test.SnapshotProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionImport.ToPtr(),
					SourceURI:        to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Snapshot{
			Name:     to.StringPtr("mySnapshot1"),
			Location: to.StringPtr("West US"),
			Properties: &test.SnapshotProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionImport.ToPtr(),
					SourceURI:        to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from the same subscription."},
	})
	client = test.NewSnapshotsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot1",
		test.Snapshot{
			Location: to.StringPtr("West US"),
			Properties: &test.SnapshotProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionImport.ToPtr(),
					SourceURI:    to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Snapshot{
			Name:     to.StringPtr("mySnapshot1"),
			Location: to.StringPtr("West US"),
			Properties: &test.SnapshotProperties{
				CreationData: &test.CreationData{
					CreateOption: test.DiskCreateOptionImport.ToPtr(),
					SourceURI:    to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot from an existing snapshot in the same or a different subscription."},
	})
	client = test.NewSnapshotsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot2",
		test.Snapshot{
			Location: to.StringPtr("West US"),
			Properties: &test.SnapshotProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
					SourceResourceID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Snapshot{
			Name:     to.StringPtr("mySnapshot2"),
			Location: to.StringPtr("West US"),
			Properties: &test.SnapshotProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
					SourceResourceID: to.StringPtr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
				},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSnapshots_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a snapshot."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSnapshotsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySnapshot",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutASnapshot.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Snapshot{
			Name:     to.StringPtr("mySnapshot"),
			Type:     to.StringPtr("Microsoft.Compute/snapshots"),
			ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("Snapshots"),
			},
			Properties: &test.SnapshotProperties{
				CreationData: &test.CreationData{
					CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
					SourceResourceID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
					SourceUniqueID:   to.StringPtr("d633885d-d102-4481-901e-5b2413d1a7be"),
				},
				DiskSizeGB: to.Int32Ptr(100),
				Encryption: &test.Encryption{
					Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
				},
				EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
					Enabled: to.BoolPtr(true),
					EncryptionSettings: []*test.EncryptionSettingsElement{
						{
							DiskEncryptionKey: &test.KeyVaultAndSecretReference{
								SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
								SourceVault: &test.SourceVault{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
								},
							},
							KeyEncryptionKey: &test.KeyVaultAndKeyReference{
								KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
								SourceVault: &test.SourceVault{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
								},
							},
						}},
				},
				HyperVGeneration:  test.HyperVGenerationV1.ToPtr(),
				OSType:            test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState: to.StringPtr("Succeeded"),
				PurchasePlan: &test.DiskPurchasePlan{
					Name:      to.StringPtr("test_sku"),
					Product:   to.StringPtr("marketplace_vm_test"),
					Publisher: to.StringPtr("test_test_pmc2pc1"),
				},
				SupportsHibernation: to.BoolPtr(true),
				TimeCreated:         to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079872+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Snapshot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Snapshot)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSnapshots_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSnapshotsClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInAResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.SnapshotList{
				Value: []*test.Snapshot{
					{
						Name:     to.StringPtr("mySnapshot"),
						Type:     to.StringPtr("Microsoft.Compute/snapshots"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("Snapshots"),
						},
						Properties: &test.SnapshotProperties{
							CreationData: &test.CreationData{
								CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
								SourceResourceID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
							},
							DiskSizeGB: to.Int32Ptr(200),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
								Enabled: to.BoolPtr(true),
								EncryptionSettings: []*test.EncryptionSettingsElement{
									{
										DiskEncryptionKey: &test.KeyVaultAndSecretReference{
											SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
										KeyEncryptionKey: &test.KeyVaultAndKeyReference{
											KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
									}},
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().SnapshotList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().SnapshotList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSnapshots_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSnapshotsClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.SnapshotList{
				Value: []*test.Snapshot{
					{
						Name:     to.StringPtr("mySnapshot1"),
						Type:     to.StringPtr("Microsoft.Compute/snapshots"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("Snapshots"),
						},
						Properties: &test.SnapshotProperties{
							CreationData: &test.CreationData{
								CreateOption:     test.DiskCreateOptionCopy.ToPtr(),
								SourceResourceID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
							},
							DiskSizeGB: to.Int32Ptr(200),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
								Enabled: to.BoolPtr(true),
								EncryptionSettings: []*test.EncryptionSettingsElement{
									{
										DiskEncryptionKey: &test.KeyVaultAndSecretReference{
											SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
										KeyEncryptionKey: &test.KeyVaultAndKeyReference{
											KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
									}},
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.6630569+00:00"); return t }()),
						},
					},
					{
						Name:     to.StringPtr("mySnapshot2"),
						Type:     to.StringPtr("Microsoft.Compute/snapshots"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("Snapshots"),
						},
						Properties: &test.SnapshotProperties{
							CreationData: &test.CreationData{
								CreateOption:     test.DiskCreateOptionImport.ToPtr(),
								SourceURI:        to.StringPtr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
								StorageAccountID: to.StringPtr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
							},
							DiskSizeGB: to.Int32Ptr(200),
							Encryption: &test.Encryption{
								Type: test.EncryptionTypeEncryptionAtRestWithPlatformKey.ToPtr(),
							},
							EncryptionSettingsCollection: &test.EncryptionSettingsCollection{
								Enabled: to.BoolPtr(true),
								EncryptionSettings: []*test.EncryptionSettingsElement{
									{
										DiskEncryptionKey: &test.KeyVaultAndSecretReference{
											SecretURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
										KeyEncryptionKey: &test.KeyVaultAndKeyReference{
											KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
											SourceVault: &test.SourceVault{
												ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
											},
										},
									}},
							},
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.3247198+00:00"); return t }()),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().SnapshotList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().SnapshotList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSnapshots_GrantAccess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestSnapshots_RevokeAccess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDiskEncryptionSets_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set with key vault from a different subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		test.DiskEncryptionSet{
			Location: to.StringPtr("West US"),
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.EncryptionSetProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
				},
				EncryptionType: test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskEncryptionSet{
			Name:     to.StringPtr("myDiskEncryptionSet"),
			Location: to.StringPtr("West US"),
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.EncryptionSetProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
				},
				EncryptionType: test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
				PreviousKeys:   []*test.KeyForDiskEncryptionSet{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set."},
	})
	client = test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		test.DiskEncryptionSet{
			Location: to.StringPtr("West US"),
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.EncryptionSetProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
					SourceVault: &test.SourceVault{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType: test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskEncryptionSet{
			Name:     to.StringPtr("myDiskEncryptionSet"),
			Location: to.StringPtr("West US"),
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.EncryptionSetProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
					SourceVault: &test.SourceVault{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType: test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
				PreviousKeys:   []*test.KeyForDiskEncryptionSet{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskEncryptionSets_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Succeeded"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		test.DiskEncryptionSetUpdate{
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.DiskEncryptionSetUpdateProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				},
				EncryptionType:                    test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
				RotationToLatestKeyVersionEnabled: to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskEncryptionSet{
			Name:     to.StringPtr("myDiskEncryptionSet"),
			Type:     to.StringPtr("Microsoft.Compute/diskEncryptionSets"),
			ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
			Location: to.StringPtr("West US"),
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.EncryptionSetProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/KeyVersion2"),
				},
				EncryptionType:                    test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
				LastKeyRotationTimestamp:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079872+00:00"); return t }()),
				ProvisioningState:                 to.StringPtr("Succeeded"),
				RotationToLatestKeyVersionEnabled: to.BoolPtr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Updating"},
	})
	client = test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		test.DiskEncryptionSetUpdate{
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.DiskEncryptionSetUpdateProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				},
				EncryptionType:                    test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
				RotationToLatestKeyVersionEnabled: to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskEncryptionSet{
			Name:     to.StringPtr("myDiskEncryptionSet"),
			Type:     to.StringPtr("Microsoft.Compute/diskEncryptionSets"),
			ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
			Location: to.StringPtr("West US"),
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.EncryptionSetProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion2"),
				},
				EncryptionType:           test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
				LastKeyRotationTimestamp: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079872+00:00"); return t }()),
				PreviousKeys: []*test.KeyForDiskEncryptionSet{
					{
						KeyURL: to.StringPtr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
					}},
				ProvisioningState:                 to.StringPtr("Succeeded"),
				RotationToLatestKeyVersionEnabled: to.BoolPtr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set."},
	})
	client = test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		test.DiskEncryptionSetUpdate{
			Properties: &test.DiskEncryptionSetUpdateProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
					SourceVault: &test.SourceVault{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType: test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
			},
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("Encryption"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskEncryptionSet{
			Name:     to.StringPtr("myDiskEncryptionSet"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("Encryption"),
			},
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.EncryptionSetProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
					SourceVault: &test.SourceVault{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType:           test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
				LastKeyRotationTimestamp: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079872+00:00"); return t }()),
				PreviousKeys:             []*test.KeyForDiskEncryptionSet{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskEncryptionSets_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk encryption set."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskEncryptionSet.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskEncryptionSet{
			Name:     to.StringPtr("myDiskEncryptionSet"),
			Type:     to.StringPtr("Microsoft.Compute/diskEncryptionSets"),
			ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("Encryption"),
			},
			Identity: &test.EncryptionSetIdentity{
				Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &test.EncryptionSetProperties{
				ActiveKey: &test.KeyForDiskEncryptionSet{
					KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
					SourceVault: &test.SourceVault{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType:    test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
				PreviousKeys:      []*test.KeyForDiskEncryptionSet{},
				ProvisioningState: to.StringPtr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskEncryptionSets_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk encryption set."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json: %v", err)
	}
}

func TestDiskEncryptionSets_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DiskEncryptionSetList{
				Value: []*test.DiskEncryptionSet{
					{
						Name:     to.StringPtr("myDiskEncryptionSet"),
						Type:     to.StringPtr("Microsoft.Compute/diskEncryptionSets"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("Encryption"),
						},
						Identity: &test.EncryptionSetIdentity{
							Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
						},
						Properties: &test.EncryptionSetProperties{
							ActiveKey: &test.KeyForDiskEncryptionSet{
								KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
								SourceVault: &test.SourceVault{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
								},
							},
							EncryptionType:    test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
							PreviousKeys:      []*test.KeyForDiskEncryptionSet{},
							ProvisioningState: to.StringPtr("Succeeded"),
						},
					},
					{
						Name:     to.StringPtr("myDiskEncryptionSet2"),
						Type:     to.StringPtr("Microsoft.Compute/diskEncryptionSets"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("Encryption"),
						},
						Identity: &test.EncryptionSetIdentity{
							Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
						},
						Properties: &test.EncryptionSetProperties{
							ActiveKey: &test.KeyForDiskEncryptionSet{
								KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
								SourceVault: &test.SourceVault{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
								},
							},
							EncryptionType:    test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
							PreviousKeys:      []*test.KeyForDiskEncryptionSet{},
							ProvisioningState: to.StringPtr("Succeeded"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DiskEncryptionSetList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DiskEncryptionSetList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDiskEncryptionSets_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DiskEncryptionSetList{
				Value: []*test.DiskEncryptionSet{
					{
						Name:     to.StringPtr("myDiskEncryptionSet"),
						Type:     to.StringPtr("Microsoft.Compute/diskEncryptionSets"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("Encryption"),
						},
						Identity: &test.EncryptionSetIdentity{
							Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
						},
						Properties: &test.EncryptionSetProperties{
							ActiveKey: &test.KeyForDiskEncryptionSet{
								KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
								SourceVault: &test.SourceVault{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
								},
							},
							EncryptionType:    test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
							PreviousKeys:      []*test.KeyForDiskEncryptionSet{},
							ProvisioningState: to.StringPtr("Succeeded"),
						},
					},
					{
						Name:     to.StringPtr("myDiskEncryptionSet2"),
						Type:     to.StringPtr("Microsoft.Compute/diskEncryptionSets"),
						ID:       to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("Encryption"),
						},
						Identity: &test.EncryptionSetIdentity{
							Type: test.DiskEncryptionSetIdentityTypeSystemAssigned.ToPtr(),
						},
						Properties: &test.EncryptionSetProperties{
							ActiveKey: &test.KeyForDiskEncryptionSet{
								KeyURL: to.StringPtr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
								SourceVault: &test.SourceVault{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
								},
							},
							EncryptionType:    test.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey.ToPtr(),
							PreviousKeys:      []*test.KeyForDiskEncryptionSet{},
							ProvisioningState: to.StringPtr("Succeeded"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DiskEncryptionSetList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DiskEncryptionSetList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDiskEncryptionSets_ListAssociatedResources(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetAssociatedResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all resources that are encrypted with this disk encryption set."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	pager := client.ListAssociatedResources("myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetAssociatedResources.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ResourceURIList{
				Value: []*string{
					to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ResourceURIList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ResourceURIList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetAssociatedResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDiskAccesses_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskAccess",
		test.DiskAccess{
			Location: to.StringPtr("West US"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskAccess{
			Name:     to.StringPtr("myDiskAccess"),
			Type:     to.StringPtr("Microsoft.Compute/diskAccesses"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
			Location: to.StringPtr("West US"),
			Properties: &test.DiskAccessProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskAccess)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskAccess",
		test.DiskAccessUpdate{
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("PrivateEndpoints"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskAccess{
			Name:     to.StringPtr("myDiskAccess"),
			Type:     to.StringPtr("Microsoft.Compute/diskAccesses"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
			Location: to.StringPtr("West US"),
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("PrivateEndpoints"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskAccess)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource with private endpoints."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskAccess{
			Name:     to.StringPtr("myDiskAccess"),
			Type:     to.StringPtr("Microsoft.Compute/diskAccesses"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("PrivateEndpoints"),
			},
			Properties: &test.DiskAccessProperties{
				PrivateEndpointConnections: []*test.PrivateEndpointConnection{
					{
						Name: to.StringPtr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
						Type: to.StringPtr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
						ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
						Properties: &test.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &test.PrivateEndpoint{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
								Description:     to.StringPtr("Auto-Approved"),
								ActionsRequired: to.StringPtr("None"),
								Status:          test.PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
							},
							ProvisioningState: test.PrivateEndpointConnectionProvisioningStateSucceeded.ToPtr(),
						},
					}},
				ProvisioningState: to.StringPtr("Succeeded"),
				TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskAccess)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource."},
	})
	client = test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccess.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskAccess{
			Name:     to.StringPtr("myDiskAccess"),
			Type:     to.StringPtr("Microsoft.Compute/diskAccesses"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
			Location: to.StringPtr("westus"),
			Tags: map[string]*string{
				"department": to.StringPtr("Development"),
				"project":    to.StringPtr("PrivateEndpoints"),
			},
			Properties: &test.DiskAccessProperties{
				ProvisioningState: to.StringPtr("Succeeded"),
				TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskAccess)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json: %v", err)
	}
}

func TestDiskAccesses_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInAResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DiskAccessList{
				Value: []*test.DiskAccess{
					{
						Name:     to.StringPtr("myDiskAccess"),
						Type:     to.StringPtr("Microsoft.Compute/diskAccesses"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("PrivateEndpoints"),
						},
						Properties: &test.DiskAccessProperties{
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
						},
					},
					{
						Name:     to.StringPtr("myDiskAccess2"),
						Type:     to.StringPtr("Microsoft.Compute/diskAccesses"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("PrivateEndpoints"),
						},
						Properties: &test.DiskAccessProperties{
							PrivateEndpointConnections: []*test.PrivateEndpointConnection{
								{
									Name: to.StringPtr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
									Type: to.StringPtr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
									ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
									Properties: &test.PrivateEndpointConnectionProperties{
										PrivateEndpoint: &test.PrivateEndpoint{
											ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
										},
										PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
											Description:     to.StringPtr("Auto-Approved"),
											ActionsRequired: to.StringPtr("None"),
											Status:          test.PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
										},
										ProvisioningState: test.PrivateEndpointConnectionProvisioningStateSucceeded.ToPtr(),
									},
								}},
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DiskAccessList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DiskAccessList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDiskAccesses_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DiskAccessList{
				Value: []*test.DiskAccess{
					{
						Name:     to.StringPtr("myDiskAccess"),
						Type:     to.StringPtr("Microsoft.Compute/diskAccesses"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("PrivateEndpoints"),
						},
						Properties: &test.DiskAccessProperties{
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
						},
					},
					{
						Name:     to.StringPtr("myDiskAccess2"),
						Type:     to.StringPtr("Microsoft.Compute/diskAccesses"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
						Location: to.StringPtr("westus"),
						Tags: map[string]*string{
							"department": to.StringPtr("Development"),
							"project":    to.StringPtr("PrivateEndpoints"),
						},
						Properties: &test.DiskAccessProperties{
							PrivateEndpointConnections: []*test.PrivateEndpointConnection{
								{
									Name: to.StringPtr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
									Type: to.StringPtr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
									ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
									Properties: &test.PrivateEndpointConnectionProperties{
										PrivateEndpoint: &test.PrivateEndpoint{
											ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
										},
										PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
											Description:     to.StringPtr("Auto-Approved"),
											ActionsRequired: to.StringPtr("None"),
											Status:          test.PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
										},
										ProvisioningState: test.PrivateEndpointConnectionProvisioningStateSucceeded.ToPtr(),
									},
								}},
							ProvisioningState: to.StringPtr("Succeeded"),
							TimeCreated:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DiskAccessList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DiskAccessList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDiskAccesses_GetPrivateLinkResources(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskAccessPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all possible private link resources under disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	res, err := client.GetPrivateLinkResources(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskAccessPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.PrivateLinkResourceListResult{
			Value: []*test.PrivateLinkResource{
				{
					Name: to.StringPtr("disks"),
					Type: to.StringPtr("Microsoft.Compute/diskAccesses/privateLinkResources"),
					ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateLinkResources/disks"),
					Properties: &test.PrivateLinkResourceProperties{
						GroupID: to.StringPtr("disks"),
						RequiredMembers: []*string{
							to.StringPtr("diskAccess_1")},
						RequiredZoneNames: []*string{
							to.StringPtr("privatelink.blob.core.windows.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskAccessPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_UpdateAPrivateEndpointConnection(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve a Private Endpoint Connection under a disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdateAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		test.PrivateEndpointConnection{
			Properties: &test.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Approving myPrivateEndpointConnection"),
					Status:      test.PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.PrivateEndpointConnection{
			Name: to.StringPtr("myPrivateEndpointConnectionName"),
			Type: to.StringPtr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
			ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnectionName"),
			Properties: &test.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &test.PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
					Description:     to.StringPtr("Approving myPrivateEndpointConnection"),
					ActionsRequired: to.StringPtr("None"),
					Status:          test.PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
				ProvisioningState: test.PrivateEndpointConnectionProvisioningStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_GetAPrivateEndpointConnection(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	res, err := client.GetAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.PrivateEndpointConnection{
			Name: to.StringPtr("myPrivateEndpointConnection"),
			Type: to.StringPtr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
			ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
			Properties: &test.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &test.PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
					Description:     to.StringPtr("Auto-Approved"),
					ActionsRequired: to.StringPtr("None"),
					Status:          test.PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
				ProvisioningState: test.PrivateEndpointConnectionProvisioningStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_DeleteAPrivateEndpointConnection(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection under a disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDeleteAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json: %v", err)
	}
}

func TestDiskAccesses_ListPrivateEndpointConnections(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskAccessesClient("{subscription-id}", cred, &options)
	pager := client.ListPrivateEndpointConnections("myResourceGroup",
		"myDiskAccess",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.PrivateEndpointConnectionListResult{
				Value: []*test.PrivateEndpointConnection{
					{
						Name: to.StringPtr("myPrivateEndpointConnection"),
						Type: to.StringPtr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
						ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
						Properties: &test.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &test.PrivateEndpoint{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
								Description:     to.StringPtr("Auto-Approved"),
								ActionsRequired: to.StringPtr("None"),
								Status:          test.PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
							},
							ProvisioningState: test.PrivateEndpointConnectionProvisioningStateSucceeded.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().PrivateEndpointConnectionListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().PrivateEndpointConnectionListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDiskRestorePoint_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskRestorePointResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskRestorePointClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"rpc",
		"vmrp",
		"TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskRestorePointResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DiskRestorePoint{
			Name: to.StringPtr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
			ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
			Properties: &test.DiskRestorePointProperties{
				FamilyID:         to.StringPtr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
				HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
				OSType:           test.OperatingSystemTypesWindows.ToPtr(),
				SourceResourceID: to.StringPtr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
				SourceUniqueID:   to.StringPtr("48e058b1-7eea-4968-b532-10a8a1130c13"),
				TimeCreated:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079872+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiskRestorePoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiskRestorePoint)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskRestorePointResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskRestorePoint_ListByRestorePoint(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDiskRestorePointClient("{subscription-id}", cred, &options)
	pager := client.ListByRestorePoint("myResourceGroup",
		"rpc",
		"vmrp",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DiskRestorePointList{
				Value: []*test.DiskRestorePoint{
					{
						Name: to.StringPtr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
						ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
						Properties: &test.DiskRestorePointProperties{
							FamilyID:         to.StringPtr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
							HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
							OSType:           test.OperatingSystemTypesWindows.ToPtr(),
							SourceResourceID: to.StringPtr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
							SourceUniqueID:   to.StringPtr("48e058b1-7eea-4968-b532-10a8a1130c13"),
							TimeCreated:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079872+00:00"); return t }()),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DiskRestorePointList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DiskRestorePointList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestGalleries_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery with sharing profile."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleriesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		test.Gallery{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryProperties{
				Description: to.StringPtr("This is the gallery description."),
				SharingProfile: &test.SharingProfile{
					Permissions: test.GallerySharingPermissionTypesGroups.ToPtr(),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Gallery{
			Name:     to.StringPtr("myGalleryName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryProperties{
				Description: to.StringPtr("This is the gallery description."),
				Identifier: &test.GalleryIdentifier{
					UniqueName: to.StringPtr("{subscription-id}-MYGALLERYNAME"),
				},
				ProvisioningState: test.GalleryPropertiesProvisioningStateSucceeded.ToPtr(),
				SharingProfile: &test.SharingProfile{
					Permissions: test.GallerySharingPermissionTypesGroups.ToPtr(),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Gallery) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Gallery)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery."},
	})
	client = test.NewGalleriesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		test.Gallery{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryProperties{
				Description: to.StringPtr("This is the gallery description."),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Gallery{
			Name:     to.StringPtr("myGalleryName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryProperties{
				Description: to.StringPtr("This is the gallery description."),
				Identifier: &test.GalleryIdentifier{
					UniqueName: to.StringPtr("{subscription-id}-MYGALLERYNAME"),
				},
				ProvisioningState: test.GalleryPropertiesProvisioningStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Gallery) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Gallery)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleries_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleriesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		test.GalleryUpdate{
			Properties: &test.GalleryProperties{
				Description: to.StringPtr("This is the gallery description."),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Gallery{
			Name:     to.StringPtr("myGalleryName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryProperties{
				Description: to.StringPtr("This is the gallery description."),
				Identifier: &test.GalleryIdentifier{
					UniqueName: to.StringPtr("{subscription-id}-MYGALLERYNAME"),
				},
				ProvisioningState: test.GalleryPropertiesProvisioningStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Gallery) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Gallery)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleries_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryWithSelectPermissions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery with select permissions."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleriesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		&test.GalleriesClientGetOptions{Select: test.SelectPermissionsPermissions.ToPtr()})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryWithSelectPermissions.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Gallery{
			Name:     to.StringPtr("myGalleryName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryProperties{
				SharingProfile: &test.SharingProfile{
					Groups: []*test.SharingProfileGroup{
						{
							Type: test.SharingProfileGroupTypesSubscriptions.ToPtr(),
							IDs: []*string{
								to.StringPtr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
								to.StringPtr("380fd389-260b-41aa-bad9-0a83108c370b")},
						},
						{
							Type: test.SharingProfileGroupTypesAADTenants.ToPtr(),
							IDs: []*string{
								to.StringPtr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
						}},
					Permissions: test.GallerySharingPermissionTypesGroups.ToPtr(),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Gallery) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Gallery)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryWithSelectPermissions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client = test.NewGalleriesClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		&test.GalleriesClientGetOptions{Select: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGallery.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Gallery{
			Name:     to.StringPtr("myGalleryName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryProperties{
				Description: to.StringPtr("This is the gallery description."),
				Identifier: &test.GalleryIdentifier{
					UniqueName: to.StringPtr("{subscription-id}-MYGALLERYNAME"),
				},
				ProvisioningState: test.GalleryPropertiesProvisioningStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Gallery) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Gallery)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleries_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleriesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json: %v", err)
	}
}

func TestGalleries_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleriesClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInAResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.GalleryList{
				Value: []*test.Gallery{
					{
						Name:     to.StringPtr("myGalleryName"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
						Location: to.StringPtr("West US"),
						Properties: &test.GalleryProperties{
							Description: to.StringPtr("This is the gallery description."),
							Identifier: &test.GalleryIdentifier{
								UniqueName: to.StringPtr("{subscription-id}-MYGALLERYNAME"),
							},
							ProvisioningState: test.GalleryPropertiesProvisioningStateSucceeded.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().GalleryList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().GalleryList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestGalleries_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleriesClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInASubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.GalleryList{
				Value: []*test.Gallery{
					{
						Name:     to.StringPtr("myGalleryName"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
						Location: to.StringPtr("West US"),
						Properties: &test.GalleryProperties{
							Description: to.StringPtr("This is the gallery description."),
							Identifier: &test.GalleryIdentifier{
								UniqueName: to.StringPtr("{subscription-id}-MYGALLERYNAME"),
							},
							ProvisioningState: test.GalleryPropertiesProvisioningStateSucceeded.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().GalleryList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().GalleryList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestGalleryImages_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery image."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImagesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		test.GalleryImage{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageProperties{
				HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
				Identifier: &test.GalleryImageIdentifier{
					Offer:     to.StringPtr("myOfferName"),
					Publisher: to.StringPtr("myPublisherName"),
					SKU:       to.StringPtr("mySkuName"),
				},
				OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
				OSType:  test.OperatingSystemTypesWindows.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImage{
			Name:     to.StringPtr("myGalleryImageName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageProperties{
				HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
				Identifier: &test.GalleryImageIdentifier{
					Offer:     to.StringPtr("myOfferName"),
					Publisher: to.StringPtr("myPublisherName"),
					SKU:       to.StringPtr("mySkuName"),
				},
				OSState:           test.OperatingSystemStateTypesGeneralized.ToPtr(),
				OSType:            test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState: test.GalleryImagePropertiesProvisioningStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImage)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImages_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery image."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImagesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		test.GalleryImageUpdate{
			Properties: &test.GalleryImageProperties{
				HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
				Identifier: &test.GalleryImageIdentifier{
					Offer:     to.StringPtr("myOfferName"),
					Publisher: to.StringPtr("myPublisherName"),
					SKU:       to.StringPtr("mySkuName"),
				},
				OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
				OSType:  test.OperatingSystemTypesWindows.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImage{
			Name:     to.StringPtr("myGalleryImageName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageProperties{
				HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
				Identifier: &test.GalleryImageIdentifier{
					Offer:     to.StringPtr("myOfferName"),
					Publisher: to.StringPtr("myPublisherName"),
					SKU:       to.StringPtr("mySkuName"),
				},
				OSState:           test.OperatingSystemStateTypesGeneralized.ToPtr(),
				OSType:            test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState: test.GalleryImagePropertiesProvisioningStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImage)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImagesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImage{
			Name:     to.StringPtr("myGalleryImageName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageProperties{
				HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
				Identifier: &test.GalleryImageIdentifier{
					Offer:     to.StringPtr("myOfferName"),
					Publisher: to.StringPtr("myPublisherName"),
					SKU:       to.StringPtr("mySkuName"),
				},
				OSState:           test.OperatingSystemStateTypesGeneralized.ToPtr(),
				OSType:            test.OperatingSystemTypesWindows.ToPtr(),
				ProvisioningState: test.GalleryImagePropertiesProvisioningStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImage)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImages_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImagesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json: %v", err)
	}
}

func TestGalleryImages_ListByGallery(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImagesInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery images in a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImagesClient("{subscription-id}", cred, &options)
	pager := client.ListByGallery("myResourceGroup",
		"myGalleryName",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImagesInAGallery.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.GalleryImageList{
				Value: []*test.GalleryImage{
					{
						Name:     to.StringPtr("myGalleryImageName"),
						Location: to.StringPtr("West US"),
						Properties: &test.GalleryImageProperties{
							HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
							Identifier: &test.GalleryImageIdentifier{
								Offer:     to.StringPtr("myOfferName"),
								Publisher: to.StringPtr("myPublisherName"),
								SKU:       to.StringPtr("mySkuName"),
							},
							OSState:           test.OperatingSystemStateTypesGeneralized.ToPtr(),
							OSType:            test.OperatingSystemTypesWindows.ToPtr(),
							ProvisioningState: test.GalleryImagePropertiesProvisioningStateSucceeded.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().GalleryImageList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().GalleryImageList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImagesInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestGalleryImageVersions_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using VM as source."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		test.GalleryImageVersion{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Lun:         to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
					},
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using managed image as source."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		test.GalleryImageVersion{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Lun:         to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
					},
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using mix of disks and snapshots as a source."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		test.GalleryImageVersion{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							Source: &test.GalleryArtifactVersionSource{
								ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						Source: &test.GalleryArtifactVersionSource{
							ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Source: &test.GalleryArtifactVersionSource{
								ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
						Source: &test.GalleryArtifactVersionSource{
							ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using shared image as source."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		test.GalleryImageVersion{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Lun:         to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
					},
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using snapshots as a source."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		test.GalleryImageVersion{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							Source: &test.GalleryArtifactVersionSource{
								ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						Source: &test.GalleryArtifactVersionSource{
							ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name: to.StringPtr("East US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Source: &test.GalleryArtifactVersionSource{
								ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
						Source: &test.GalleryArtifactVersionSource{
							ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using vhd as a source."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		test.GalleryImageVersion{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							Source: &test.GalleryArtifactVersionSource{
								ID:  to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
								URI: to.StringPtr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						Source: &test.GalleryArtifactVersionSource{
							ID:  to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.StringPtr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							Source: &test.GalleryArtifactVersionSource{
								ID:  to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
								URI: to.StringPtr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						Source: &test.GalleryArtifactVersionSource{
							ID:  to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.StringPtr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImageVersions_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version (Managed Image as source)."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		test.GalleryImageVersionUpdate{
			Properties: &test.GalleryImageVersionProperties{
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					TargetRegions: []*test.TargetRegion{
						{
							Name:                 to.StringPtr("West US"),
							RegionalReplicaCount: to.Int32Ptr(1),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Lun:         to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
					},
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version without source id."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		test.GalleryImageVersionUpdate{
			Properties: &test.GalleryImageVersionProperties{
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					TargetRegions: []*test.TargetRegion{
						{
							Name:                 to.StringPtr("West US"),
							RegionalReplicaCount: to.Int32Ptr(1),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardZRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Lun:         to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
					},
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImageVersions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with replication status."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&test.GalleryImageVersionsClientGetOptions{Expand: test.ReplicationStatusTypesReplicationStatus.ToPtr()})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithReplicationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
				},
				ReplicationStatus: &test.ReplicationStatus{
					AggregatedState: test.AggregatedReplicationStateCompleted.ToPtr(),
					Summary: []*test.RegionalReplicationStatus{
						{
							Progress: to.Int32Ptr(100),
							Region:   to.StringPtr("West US"),
							State:    test.ReplicationStateCompleted.ToPtr(),
							Details:  to.StringPtr(""),
						},
						{
							Progress: to.Int32Ptr(100),
							Region:   to.StringPtr("East US"),
							State:    test.ReplicationStateCompleted.ToPtr(),
							Details:  to.StringPtr(""),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Lun:         to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
					},
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithReplicationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with snapshots as a source."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&test.GalleryImageVersionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Source:      &test.GalleryArtifactVersionSource{},
							Lun:         to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
						Source:      &test.GalleryArtifactVersionSource{},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithVhdAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with vhd as a source."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&test.GalleryImageVersionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithVhdAsSource.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							Source: &test.GalleryArtifactVersionSource{
								ID:  to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
								URI: to.StringPtr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
							},
							Lun: to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						Source: &test.GalleryArtifactVersionSource{
							ID:  to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.StringPtr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithVhdAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version."},
	})
	client = test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&test.GalleryImageVersionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryImageVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryImageVersionProperties{
				ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryImageVersionPublishingProfile{
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name: to.StringPtr("West US"),
							Encryption: &test.EncryptionImages{
								DataDiskImages: []*test.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(0),
									},
									{
										DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
										Lun:                 to.Int32Ptr(1),
									}},
								OSDiskImage: &test.OSDiskImageEncryption{
									DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						},
						{
							Name:                 to.StringPtr("East US"),
							RegionalReplicaCount: to.Int32Ptr(2),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
				},
				StorageProfile: &test.GalleryImageVersionStorageProfile{
					DataDiskImages: []*test.GalleryDataDiskImage{
						{
							HostCaching: test.HostCachingNone.ToPtr(),
							SizeInGB:    to.Int32Ptr(10),
							Lun:         to.Int32Ptr(1),
						}},
					OSDiskImage: &test.GalleryOSDiskImage{
						HostCaching: test.HostCachingReadOnly.ToPtr(),
						SizeInGB:    to.Int32Ptr(10),
					},
					Source: &test.GalleryArtifactVersionSource{
						ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImageVersions_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image version."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json: %v", err)
	}
}

func TestGalleryImageVersions_ListByGalleryImage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImageVersionsInAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery image versions in a gallery image definition."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	pager := client.ListByGalleryImage("myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImageVersionsInAGalleryImage.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.GalleryImageVersionList{
				Value: []*test.GalleryImageVersion{
					{
						Name:     to.StringPtr("1.0.0"),
						Location: to.StringPtr("West US"),
						Properties: &test.GalleryImageVersionProperties{
							ProvisioningState: test.GalleryImageVersionPropertiesProvisioningStateSucceeded.ToPtr(),
							PublishingProfile: &test.GalleryImageVersionPublishingProfile{
								PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
								ReplicaCount:       to.Int32Ptr(1),
								StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
								TargetRegions: []*test.TargetRegion{
									{
										Name: to.StringPtr("West US"),
										Encryption: &test.EncryptionImages{
											DataDiskImages: []*test.DataDiskImageEncryption{
												{
													DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
													Lun:                 to.Int32Ptr(0),
												},
												{
													DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
													Lun:                 to.Int32Ptr(1),
												}},
											OSDiskImage: &test.OSDiskImageEncryption{
												DiskEncryptionSetID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
											},
										},
										RegionalReplicaCount: to.Int32Ptr(1),
										StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
									},
									{
										Name:                 to.StringPtr("East US"),
										RegionalReplicaCount: to.Int32Ptr(2),
										StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
									}},
							},
							StorageProfile: &test.GalleryImageVersionStorageProfile{
								DataDiskImages: []*test.GalleryDataDiskImage{
									{
										HostCaching: test.HostCachingNone.ToPtr(),
										SizeInGB:    to.Int32Ptr(10),
										Lun:         to.Int32Ptr(1),
									}},
								OSDiskImage: &test.GalleryOSDiskImage{
									HostCaching: test.HostCachingReadOnly.ToPtr(),
									SizeInGB:    to.Int32Ptr(10),
								},
								Source: &test.GalleryArtifactVersionSource{
									ID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
								},
							},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().GalleryImageVersionList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().GalleryImageVersionList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImageVersionsInAGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestGalleryApplications_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		test.GalleryApplication{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationProperties{
				Description:         to.StringPtr("This is the gallery application description."),
				Eula:                to.StringPtr("This is the gallery application EULA."),
				PrivacyStatementURI: to.StringPtr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.StringPtr("myReleaseNoteUri"),
				SupportedOSType:     test.OperatingSystemTypesWindows.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryApplication{
			Name:     to.StringPtr("myGalleryApplicationName"),
			Type:     to.StringPtr("Microsoft.Compute/galleries"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationProperties{
				Description:         to.StringPtr("This is the gallery application description."),
				Eula:                to.StringPtr("This is the gallery application EULA."),
				PrivacyStatementURI: to.StringPtr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.StringPtr("myReleaseNoteUri"),
				SupportedOSType:     test.OperatingSystemTypesWindows.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryApplication)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryApplications_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		test.GalleryApplicationUpdate{
			Properties: &test.GalleryApplicationProperties{
				Description:         to.StringPtr("This is the gallery application description."),
				Eula:                to.StringPtr("This is the gallery application EULA."),
				PrivacyStatementURI: to.StringPtr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.StringPtr("myReleaseNoteUri"),
				SupportedOSType:     test.OperatingSystemTypesWindows.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryApplication{
			Name:     to.StringPtr("myGalleryApplicationName"),
			Type:     to.StringPtr("Microsoft.Compute/galleries"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationProperties{
				Description:         to.StringPtr("This is the gallery application description."),
				Eula:                to.StringPtr("This is the gallery application EULA."),
				PrivacyStatementURI: to.StringPtr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.StringPtr("myReleaseNoteUri"),
				SupportedOSType:     test.OperatingSystemTypesWindows.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryApplication)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryApplications_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryApplication{
			Name:     to.StringPtr("myGalleryApplicationName"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationProperties{
				Description:         to.StringPtr("This is the gallery application description."),
				Eula:                to.StringPtr("This is the gallery application EULA."),
				PrivacyStatementURI: to.StringPtr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.StringPtr("myReleaseNoteUri"),
				SupportedOSType:     test.OperatingSystemTypesWindows.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryApplication)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryApplications_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json: %v", err)
	}
}

func TestGalleryApplications_ListByGallery(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationsInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Applications in a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	pager := client.ListByGallery("myResourceGroup",
		"myGalleryName",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationsInAGallery.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.GalleryApplicationList{
				Value: []*test.GalleryApplication{
					{
						Name:     to.StringPtr("myGalleryApplicationName"),
						Location: to.StringPtr("West US"),
						Properties: &test.GalleryApplicationProperties{
							Description:         to.StringPtr("This is the gallery application description."),
							Eula:                to.StringPtr("This is the gallery application EULA."),
							PrivacyStatementURI: to.StringPtr("myPrivacyStatementUri}"),
							ReleaseNoteURI:      to.StringPtr("myReleaseNoteUri"),
							SupportedOSType:     test.OperatingSystemTypesWindows.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().GalleryApplicationList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().GalleryApplicationList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationsInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestGalleryApplicationVersions_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application Version."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		test.GalleryApplicationVersion{
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationVersionProperties{
				PublishingProfile: &test.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name:                 to.StringPtr("West US"),
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
					ManageActions: &test.UserArtifactManage{
						Install: to.StringPtr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.StringPtr("del C:\\package "),
					},
					Source: &test.UserArtifactSource{
						MediaLink: to.StringPtr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryApplicationVersion{
			Name:     to.StringPtr("1.0.0"),
			Type:     to.StringPtr("Microsoft.Compute/galleries/applications/versions"),
			ID:       to.StringPtr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationVersionProperties{
				ProvisioningState: test.GalleryApplicationVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
					ExcludeFromLatest:  to.BoolPtr(false),
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name:                 to.StringPtr("West US"),
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
					EnableHealthCheck: to.BoolPtr(false),
					ManageActions: &test.UserArtifactManage{
						Install: to.StringPtr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.StringPtr("del C:\\package "),
					},
					Source: &test.UserArtifactSource{
						MediaLink: to.StringPtr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryApplicationVersions_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application Version."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		test.GalleryApplicationVersionUpdate{
			Properties: &test.GalleryApplicationVersionProperties{
				PublishingProfile: &test.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00Z"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name:                 to.StringPtr("West US"),
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
					ManageActions: &test.UserArtifactManage{
						Install: to.StringPtr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.StringPtr("del C:\\package "),
					},
					Source: &test.UserArtifactSource{
						MediaLink: to.StringPtr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryApplicationVersion{
			Name:     to.StringPtr("1.0.0"),
			Type:     to.StringPtr("Microsoft.Compute/galleries/applications/versions"),
			ID:       to.StringPtr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationVersionProperties{
				ProvisioningState: test.GalleryApplicationVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
					ExcludeFromLatest:  to.BoolPtr(false),
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name:                 to.StringPtr("West US"),
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
					EnableHealthCheck: to.BoolPtr(false),
					ManageActions: &test.UserArtifactManage{
						Install: to.StringPtr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.StringPtr("del C:\\package "),
					},
					Source: &test.UserArtifactSource{
						MediaLink: to.StringPtr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryApplicationVersions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersionWithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version with replication status."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		&test.GalleryApplicationVersionsClientGetOptions{Expand: test.ReplicationStatusTypesReplicationStatus.ToPtr()})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersionWithReplicationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryApplicationVersion{
			Name:     to.StringPtr("1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationVersionProperties{
				ProvisioningState: test.GalleryApplicationVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
					ExcludeFromLatest:  to.BoolPtr(false),
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name:                 to.StringPtr("West US"),
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
					EnableHealthCheck: to.BoolPtr(false),
					ManageActions: &test.UserArtifactManage{
						Install: to.StringPtr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.StringPtr("del C:\\package "),
					},
					Source: &test.UserArtifactSource{
						MediaLink: to.StringPtr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
				ReplicationStatus: &test.ReplicationStatus{
					AggregatedState: test.AggregatedReplicationStateCompleted.ToPtr(),
					Summary: []*test.RegionalReplicationStatus{
						{
							Progress: to.Int32Ptr(100),
							Region:   to.StringPtr("West US"),
							State:    test.ReplicationStateCompleted.ToPtr(),
							Details:  to.StringPtr(""),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersionWithReplicationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version."},
	})
	client = test.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		&test.GalleryApplicationVersionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.GalleryApplicationVersion{
			Name:     to.StringPtr("1.0.0"),
			Type:     to.StringPtr("Microsoft.Compute/galleries/applications/versions"),
			ID:       to.StringPtr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
			Location: to.StringPtr("West US"),
			Properties: &test.GalleryApplicationVersionProperties{
				ProvisioningState: test.GalleryApplicationVersionPropertiesProvisioningStateSucceeded.ToPtr(),
				PublishingProfile: &test.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
					ExcludeFromLatest:  to.BoolPtr(false),
					PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
					ReplicaCount:       to.Int32Ptr(1),
					StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
					TargetRegions: []*test.TargetRegion{
						{
							Name:                 to.StringPtr("West US"),
							RegionalReplicaCount: to.Int32Ptr(1),
							StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
						}},
					EnableHealthCheck: to.BoolPtr(false),
					ManageActions: &test.UserArtifactManage{
						Install: to.StringPtr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.StringPtr("del C:\\package "),
					},
					Source: &test.UserArtifactSource{
						MediaLink: to.StringPtr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryApplicationVersions_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application Version."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json: %v", err)
	}
}

func TestGalleryApplicationVersions_ListByGalleryApplication(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationVersionsInAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Application Versions in a gallery Application Definition."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	pager := client.ListByGalleryApplication("myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationVersionsInAGalleryApplication.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.GalleryApplicationVersionList{
				Value: []*test.GalleryApplicationVersion{
					{
						Name:     to.StringPtr("1.0.0"),
						Type:     to.StringPtr("Microsoft.Compute/galleries/applications/versions"),
						ID:       to.StringPtr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
						Location: to.StringPtr("West US"),
						Properties: &test.GalleryApplicationVersionProperties{
							ProvisioningState: test.GalleryApplicationVersionPropertiesProvisioningStateSucceeded.ToPtr(),
							PublishingProfile: &test.GalleryApplicationVersionPublishingProfile{
								EndOfLifeDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
								ExcludeFromLatest:  to.BoolPtr(false),
								PublishedDate:      to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
								ReplicaCount:       to.Int32Ptr(1),
								StorageAccountType: test.StorageAccountTypeStandardLRS.ToPtr(),
								TargetRegions: []*test.TargetRegion{
									{
										Name:                 to.StringPtr("West US"),
										RegionalReplicaCount: to.Int32Ptr(1),
										StorageAccountType:   test.StorageAccountTypeStandardLRS.ToPtr(),
									}},
								EnableHealthCheck: to.BoolPtr(false),
								ManageActions: &test.UserArtifactManage{
									Install: to.StringPtr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
									Remove:  to.StringPtr("del C:\\package "),
								},
								Source: &test.UserArtifactSource{
									MediaLink: to.StringPtr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
								},
							},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().GalleryApplicationVersionList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().GalleryApplicationVersionList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationVersionsInAGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestGallerySharingProfile_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add sharing id to the sharing profile of a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewGallerySharingProfileClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		test.SharingUpdate{
			Groups: []*test.SharingProfileGroup{
				{
					Type: test.SharingProfileGroupTypesSubscriptions.ToPtr(),
					IDs: []*string{
						to.StringPtr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
						to.StringPtr("380fd389-260b-41aa-bad9-0a83108c370b")},
				},
				{
					Type: test.SharingProfileGroupTypesAADTenants.ToPtr(),
					IDs: []*string{
						to.StringPtr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
				}},
			OperationType: test.SharingUpdateOperationTypesAdd.ToPtr(),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.SharingUpdate{
			Groups: []*test.SharingProfileGroup{
				{
					Type: test.SharingProfileGroupTypesSubscriptions.ToPtr(),
					IDs: []*string{
						to.StringPtr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
						to.StringPtr("380fd389-260b-41aa-bad9-0a83108c370b")},
				},
				{
					Type: test.SharingProfileGroupTypesAADTenants.ToPtr(),
					IDs: []*string{
						to.StringPtr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
				}},
			OperationType: test.SharingUpdateOperationTypesAdd.ToPtr(),
		}
		if !reflect.DeepEqual(exampleRes, res.SharingUpdate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharingUpdate)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"reset sharing profile of a gallery."},
	})
	client = test.NewGallerySharingProfileClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		test.SharingUpdate{
			OperationType: test.SharingUpdateOperationTypesReset.ToPtr(),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.SharingUpdate{
			OperationType: test.SharingUpdateOperationTypesReset.ToPtr(),
		}
		if !reflect.DeepEqual(exampleRes, res.SharingUpdate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharingUpdate)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedGalleries_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleries.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSharedGalleriesClient("{subscription-id}", cred, &options)
	pager := client.List("myLocation",
		&test.SharedGalleriesClientListOptions{SharedTo: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleries.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.SharedGalleryList{
				Value: []*test.SharedGallery{
					{
						Name:     to.StringPtr("galleryUniqueName"),
						Location: to.StringPtr("myLocation"),
						Identifier: &test.SharedGalleryIdentifier{
							UniqueID: to.StringPtr("/SharedGalleries/galleryUniqueName"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().SharedGalleryList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().SharedGalleryList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleries.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSharedGalleries_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSharedGalleriesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGallery.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.SharedGallery{
			Name:     to.StringPtr("myGalleryName"),
			Location: to.StringPtr("myLocation"),
			Identifier: &test.SharedGalleryIdentifier{
				UniqueID: to.StringPtr("/SharedGalleries/galleryUniqueName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedGallery) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedGallery)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedGalleryImages_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSharedGalleryImagesClient("{subscription-id}", cred, &options)
	pager := client.List("myLocation",
		"galleryUniqueName",
		&test.SharedGalleryImagesClientListOptions{SharedTo: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImages.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.SharedGalleryImageList{
				Value: []*test.SharedGalleryImage{
					{
						Name:     to.StringPtr("myGalleryImageName"),
						Location: to.StringPtr("myLocation"),
						Identifier: &test.SharedGalleryIdentifier{
							UniqueID: to.StringPtr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
						},
						Properties: &test.SharedGalleryImageProperties{
							HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
							Identifier: &test.GalleryImageIdentifier{
								Offer:     to.StringPtr("myOfferName"),
								Publisher: to.StringPtr("myPublisherName"),
								SKU:       to.StringPtr("mySkuName"),
							},
							OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
							OSType:  test.OperatingSystemTypesWindows.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().SharedGalleryImageList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().SharedGalleryImageList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSharedGalleryImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSharedGalleryImagesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImage.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.SharedGalleryImage{
			Name:     to.StringPtr("myGalleryImageName"),
			Location: to.StringPtr("myLocation"),
			Identifier: &test.SharedGalleryIdentifier{
				UniqueID: to.StringPtr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
			},
			Properties: &test.SharedGalleryImageProperties{
				HyperVGeneration: test.HyperVGenerationV1.ToPtr(),
				Identifier: &test.GalleryImageIdentifier{
					Offer:     to.StringPtr("myOfferName"),
					Publisher: to.StringPtr("myPublisherName"),
					SKU:       to.StringPtr("mySkuName"),
				},
				OSState: test.OperatingSystemStateTypesGeneralized.ToPtr(),
				OSType:  test.OperatingSystemTypesWindows.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedGalleryImage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedGalleryImage)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedGalleryImageVersions_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImageVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSharedGalleryImageVersionsClient("{subscription-id}", cred, &options)
	pager := client.List("myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		&test.SharedGalleryImageVersionsClientListOptions{SharedTo: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImageVersions.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.SharedGalleryImageVersionList{
				Value: []*test.SharedGalleryImageVersion{
					{
						Name:     to.StringPtr("myGalleryImageVersionName"),
						Location: to.StringPtr("myLocation"),
						Identifier: &test.SharedGalleryIdentifier{
							UniqueID: to.StringPtr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
						},
						Properties: &test.SharedGalleryImageVersionProperties{
							EndOfLifeDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28Z"); return t }()),
							PublishedDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28Z"); return t }()),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().SharedGalleryImageVersionList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().SharedGalleryImageVersionList)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImageVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSharedGalleryImageVersions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSharedGalleryImageVersionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		"myGalleryImageVersionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImageVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.SharedGalleryImageVersion{
			Name:     to.StringPtr("myGalleryImageVersionName"),
			Location: to.StringPtr("myLocation"),
			Identifier: &test.SharedGalleryIdentifier{
				UniqueID: to.StringPtr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
			},
			Properties: &test.SharedGalleryImageVersionProperties{
				EndOfLifeDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28Z"); return t }()),
				PublishedDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedGalleryImageVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedGalleryImageVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceRoleInstances_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json: %v", err)
	}
}

func TestCloudServiceRoleInstances_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServiceRoleInstancesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RoleInstance{
			Name:     to.StringPtr("{roleInstance-name}"),
			Type:     to.StringPtr("Microsoft.Compute/cloudServices/roleInstances"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}"),
			Location: to.StringPtr("eastus2euap"),
			Properties: &test.RoleInstanceProperties{
				NetworkProfile: &test.RoleInstanceNetworkProfile{
					NetworkInterfaces: []*test.SubResource{
						{
							ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}/networkInterfaces/nic1"),
						}},
				},
			},
			SKU: &test.InstanceSKU{
				Name: to.StringPtr("Standard_D1_v2"),
				Tier: to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceRoleInstances_GetInstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Instance View of Cloud Service Role Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	res, err := client.GetInstanceView(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.RoleInstanceView{
			PlatformFaultDomain:  to.Int32Ptr(0),
			PlatformUpdateDomain: to.Int32Ptr(0),
			PrivateID:            to.StringPtr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e"),
			Statuses: []*test.ResourceInstanceViewStatus{
				{
					Code:          to.StringPtr("RoleState/RoleStateStarted"),
					DisplayStatus: to.StringPtr("RoleStateStarted"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Message:       to.StringPtr(""),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RoleInstanceView) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RoleInstanceView)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceRoleInstances_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Role Instances in a Cloud Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	pager := client.List("ConstosoRG",
		"{cs-name}",
		&test.CloudServiceRoleInstancesClientListOptions{Expand: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.RoleInstanceListResult{
				Value: []*test.RoleInstance{
					{
						Name:     to.StringPtr("ContosoFrontend_IN_0"),
						Type:     to.StringPtr("Microsoft.Compute/cloudServices/roleInstances"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0"),
						Location: to.StringPtr("eastus2euap"),
						Properties: &test.RoleInstanceProperties{
							NetworkProfile: &test.RoleInstanceNetworkProfile{
								NetworkInterfaces: []*test.SubResource{
									{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0/networkInterfaces/nic1"),
									}},
							},
						},
						SKU: &test.InstanceSKU{
							Name: to.StringPtr("Standard_D1_v2"),
							Tier: to.StringPtr("Standard"),
						},
					},
					{
						Name:     to.StringPtr("ContosoFrontend_IN_1"),
						Type:     to.StringPtr("Microsoft.Compute/cloudServices/roleInstances"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1"),
						Location: to.StringPtr("eastus2euap"),
						Properties: &test.RoleInstanceProperties{
							NetworkProfile: &test.RoleInstanceNetworkProfile{
								NetworkInterfaces: []*test.SubResource{
									{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1/networkInterfaces/nic1"),
									}},
							},
						},
						SKU: &test.InstanceSKU{
							Name: to.StringPtr("Standard_D1_v2"),
							Tier: to.StringPtr("Standard"),
						},
					},
					{
						Name:     to.StringPtr("ContosoBackend_IN_0"),
						Type:     to.StringPtr("Microsoft.Compute/cloudServices/roleInstances"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0"),
						Location: to.StringPtr("eastus2euap"),
						Properties: &test.RoleInstanceProperties{
							NetworkProfile: &test.RoleInstanceNetworkProfile{
								NetworkInterfaces: []*test.SubResource{
									{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0/networkInterfaces/nic1"),
									}},
							},
						},
						SKU: &test.InstanceSKU{
							Name: to.StringPtr("Standard_D1_v2"),
							Tier: to.StringPtr("Standard"),
						},
					},
					{
						Name:     to.StringPtr("ContosoBackend_IN_1"),
						Type:     to.StringPtr("Microsoft.Compute/cloudServices/roleInstances"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1"),
						Location: to.StringPtr("eastus2euap"),
						Properties: &test.RoleInstanceProperties{
							NetworkProfile: &test.RoleInstanceNetworkProfile{
								NetworkInterfaces: []*test.SubResource{
									{
										ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1/networkInterfaces/nic1"),
									}},
							},
						},
						SKU: &test.InstanceSKU{
							Name: to.StringPtr("Standard_D1_v2"),
							Tier: to.StringPtr("Standard"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().RoleInstanceListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().RoleInstanceListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestCloudServiceRoleInstances_Restart(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json: %v", err)
	}
}

func TestCloudServiceRoleInstances_Reimage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginReimage(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json: %v", err)
	}
}

func TestCloudServiceRoleInstances_Rebuild(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRebuild(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json: %v", err)
	}
}

func TestCloudServiceRoleInstances_GetRemoteDesktopFile(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCloudServiceRoles_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRolesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"{role-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CloudServiceRole{
			Name:     to.StringPtr("{role-name}"),
			Type:     to.StringPtr("Microsoft.Compute/cloudServices/roles"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/{role-name}"),
			Location: to.StringPtr("eastus2euap"),
			Properties: &test.CloudServiceRoleProperties{
				UniqueID: to.StringPtr("b03bc269-766b-4921-b91a-7dffaae4d03b:{role-name}"),
			},
			SKU: &test.CloudServiceRoleSKU{
				Name:     to.StringPtr("Standard_D1_v2"),
				Capacity: to.Int64Ptr(2),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudServiceRole) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudServiceRole)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceRoles_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Roles in a Cloud Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceRolesClient("{subscription-id}", cred, &options)
	pager := client.List("ConstosoRG",
		"{cs-name}",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.CloudServiceRoleListResult{
				Value: []*test.CloudServiceRole{
					{
						Name:     to.StringPtr("ContosoFrontend"),
						Type:     to.StringPtr("Microsoft.Compute/cloudServices/roles"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoFrontend"),
						Location: to.StringPtr("eastus2euap"),
						Properties: &test.CloudServiceRoleProperties{
							UniqueID: to.StringPtr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoFrontend"),
						},
						SKU: &test.CloudServiceRoleSKU{
							Name:     to.StringPtr("Standard_D1_v2"),
							Capacity: to.Int64Ptr(2),
							Tier:     to.StringPtr("Standard"),
						},
					},
					{
						Name:     to.StringPtr("ContosoBackend"),
						Type:     to.StringPtr("Microsoft.Compute/cloudServices/roles"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoBackend"),
						Location: to.StringPtr("eastus2euap"),
						Properties: &test.CloudServiceRoleProperties{
							UniqueID: to.StringPtr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoBackend"),
						},
						SKU: &test.CloudServiceRoleSKU{
							Name:     to.StringPtr("Standard_D1_v2"),
							Capacity: to.Int64Ptr(2),
							Tier:     to.StringPtr("Standard"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().CloudServiceRoleListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().CloudServiceRoleListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestCloudServices_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Multiple Roles"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginCreateOrUpdateOptions{Parameters: &test.CloudService{
			Location: to.StringPtr("westus"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("contosolb"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("contosofe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.StringPtr("{PackageUrl}"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						},
						{
							Name: to.StringPtr("ContosoBackend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CloudService{
			Name:     to.StringPtr("{cs-name}"),
			Type:     to.StringPtr("Microsoft.Compute/cloudServices"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("contosolb"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("contosofe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &test.CloudServiceOsProfile{
					Secrets: []*test.CloudServiceVaultSecretGroup{},
				},
				PackageURL:        to.StringPtr("{PackageUrl}"),
				ProvisioningState: to.StringPtr("Succeeded"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						},
						{
							Name: to.StringPtr("ContosoBackend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UniqueID:    to.StringPtr("7f3edf91-cb34-4a3e-971a-177dc3dd43cb"),
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role"},
	})
	client = test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginCreateOrUpdateOptions{Parameters: &test.CloudService{
			Location: to.StringPtr("westus"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("myLoadBalancer"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("myfe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.StringPtr("{PackageUrl}"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CloudService{
			Name:     to.StringPtr("{cs-name}"),
			Type:     to.StringPtr("Microsoft.Compute/cloudServices"),
			ID:       to.StringPtr("/subscriptions/5393f919-a68a-43d0-9063-4b2bda6bffdf/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("myLoadBalancer"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("myfe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &test.CloudServiceOsProfile{
					Secrets: []*test.CloudServiceVaultSecretGroup{},
				},
				PackageURL:        to.StringPtr("{PackageUrl}"),
				ProvisioningState: to.StringPtr("Succeeded"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UniqueID:    to.StringPtr("14d10b45-ced7-42ef-a406-50a3df2cea7d"),
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and Certificate from Key Vault"},
	})
	client = test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginCreateOrUpdateOptions{Parameters: &test.CloudService{
			Location: to.StringPtr("westus"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("contosolb"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("contosofe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &test.CloudServiceOsProfile{
					Secrets: []*test.CloudServiceVaultSecretGroup{
						{
							SourceVault: &test.SubResource{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
							},
							VaultCertificates: []*test.CloudServiceVaultCertificate{
								{
									CertificateURL: to.StringPtr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
								}},
						}},
				},
				PackageURL: to.StringPtr("{PackageUrl}"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CloudService{
			Name:     to.StringPtr("{cs-name}"),
			Type:     to.StringPtr("Microsoft.Compute/cloudServices"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("contosolb"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("contosofe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &test.CloudServiceOsProfile{
					Secrets: []*test.CloudServiceVaultSecretGroup{
						{
							SourceVault: &test.SubResource{
								ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
							},
							VaultCertificates: []*test.CloudServiceVaultCertificate{
								{
									CertificateURL: to.StringPtr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
								}},
						}},
				},
				PackageURL:        to.StringPtr("{PackageUrl}"),
				ProvisioningState: to.StringPtr("Succeeded"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UniqueID:    to.StringPtr("60b6cd59-600b-4e02-b717-521b07aa94bf"),
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and RDP Extension"},
	})
	client = test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginCreateOrUpdateOptions{Parameters: &test.CloudService{
			Location: to.StringPtr("westus"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				ExtensionProfile: &test.CloudServiceExtensionProfile{
					Extensions: []*test.Extension{
						{
							Name: to.StringPtr("RDPExtension"),
							Properties: &test.CloudServiceExtensionProperties{
								Type:                    to.StringPtr("RDP"),
								AutoUpgradeMinorVersion: to.BoolPtr(false),
								ProtectedSettings:       to.StringPtr("<PrivateConfig><Password>{password}</Password></PrivateConfig>"),
								Publisher:               to.StringPtr("Microsoft.Windows.Azure.Extensions"),
								Settings:                to.StringPtr("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
								TypeHandlerVersion:      to.StringPtr("1.2.1"),
							},
						}},
				},
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("contosolb"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("contosofe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.StringPtr("{PackageUrl}"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CloudService{
			Name:     to.StringPtr("{cs-name}"),
			Type:     to.StringPtr("Microsoft.Compute/cloudServices"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
			Location: to.StringPtr("westus"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				ExtensionProfile: &test.CloudServiceExtensionProfile{
					Extensions: []*test.Extension{
						{
							Name: to.StringPtr("RDPExtension"),
							Properties: &test.CloudServiceExtensionProperties{
								Type:                    to.StringPtr("RDP"),
								AutoUpgradeMinorVersion: to.BoolPtr(false),
								ProvisioningState:       to.StringPtr("Succeeded"),
								Publisher:               to.StringPtr("Microsoft.Windows.Azure.Extensions"),
								RolesAppliedTo: []*string{
									to.StringPtr("*")},
								Settings:           to.StringPtr("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
								TypeHandlerVersion: to.StringPtr("1.2.1"),
							},
						}},
				},
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("contosolb"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("contosofe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &test.CloudServiceOsProfile{
					Secrets: []*test.CloudServiceVaultSecretGroup{},
				},
				PackageURL:        to.StringPtr("{PackageUrl}"),
				ProvisioningState: to.StringPtr("Succeeded"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(1),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UniqueID:    to.StringPtr("c948cccb-bbfa-4516-a250-c28abc4d0c15"),
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServices_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update existing Cloud Service to add tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginUpdateOptions{Parameters: &test.CloudServiceUpdate{
			Tags: map[string]*string{
				"Documentation": to.StringPtr("RestAPI"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CloudService{
			Name:     to.StringPtr("{cs-name}"),
			Type:     to.StringPtr("Microsoft.Compute/cloudServices"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
			Location: to.StringPtr("eastus2euap"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("contosolb"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("contosofe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &test.CloudServiceOsProfile{
					Secrets: []*test.CloudServiceVaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(2),
								Tier:     to.StringPtr("Standard"),
							},
						},
						{
							Name: to.StringPtr("ContosoBackend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(2),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UniqueID:    to.StringPtr("4ccb4323-4740-4545-bb81-780b27375947"),
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
			Tags: map[string]*string{
				"Documentation": to.StringPtr("RestAPI"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServices_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json: %v", err)
	}
}

func TestCloudServices_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service with Multiple Roles and RDP Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CloudService{
			Name:     to.StringPtr("{cs-name}"),
			Type:     to.StringPtr("Microsoft.Compute/cloudServices"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
			Location: to.StringPtr("eastus2euap"),
			Properties: &test.CloudServiceProperties{
				Configuration: to.StringPtr("{ServiceConfiguration}"),
				ExtensionProfile: &test.CloudServiceExtensionProfile{
					Extensions: []*test.Extension{
						{
							Name: to.StringPtr("RDPExtension"),
							Properties: &test.CloudServiceExtensionProperties{
								Type:                    to.StringPtr("RDP"),
								AutoUpgradeMinorVersion: to.BoolPtr(false),
								ProvisioningState:       to.StringPtr("Succeeded"),
								Publisher:               to.StringPtr("Microsoft.Windows.Azure.Extensions"),
								RolesAppliedTo: []*string{
									to.StringPtr("*")},
								Settings:           to.StringPtr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
								TypeHandlerVersion: to.StringPtr("1.2.1"),
							},
						}},
				},
				NetworkProfile: &test.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
						{
							Name: to.StringPtr("contosolb"),
							Properties: &test.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.StringPtr("contosofe"),
										Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &test.SubResource{
												ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &test.CloudServiceOsProfile{
					Secrets: []*test.CloudServiceVaultSecretGroup{},
				},
				ProvisioningState: to.StringPtr("Succeeded"),
				RoleProfile: &test.CloudServiceRoleProfile{
					Roles: []*test.CloudServiceRoleProfileProperties{
						{
							Name: to.StringPtr("ContosoFrontend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(2),
								Tier:     to.StringPtr("Standard"),
							},
						},
						{
							Name: to.StringPtr("ContosoBackend"),
							SKU: &test.CloudServiceRoleSKU{
								Name:     to.StringPtr("Standard_D1_v2"),
								Capacity: to.Int64Ptr(2),
								Tier:     to.StringPtr("Standard"),
							},
						}},
				},
				UniqueID:    to.StringPtr("4ccb4323-4740-4545-bb81-780b27375947"),
				UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServices_GetInstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Instance View with Multiple Roles"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	res, err := client.GetInstanceView(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CloudServiceInstanceView{
			PrivateIDs: []*string{
				to.StringPtr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e")},
			RoleInstance: &test.InstanceViewStatusesSummary{
				StatusesSummary: []*test.StatusCodeCount{
					{
						Code:  to.StringPtr("ProvisioningState/succeeded"),
						Count: to.Int32Ptr(4),
					},
					{
						Code:  to.StringPtr("PowerState/started"),
						Count: to.Int32Ptr(4),
					},
					{
						Code:  to.StringPtr("RoleState/RoleStateStarted"),
						Count: to.Int32Ptr(4),
					}},
			},
			SdkVersion: to.StringPtr("2.9.6496.3"),
			Statuses: []*test.ResourceInstanceViewStatus{
				{
					Code:          to.StringPtr("ProvisioningState/succeeded"),
					DisplayStatus: to.StringPtr("Provisioning succeeded"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T16:50:07.0953535+05:30"); return t }()),
				},
				{
					Code:          to.StringPtr("PowerState/started"),
					DisplayStatus: to.StringPtr("Started"),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
					Time:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T16:50:07.0953535+05:30"); return t }()),
				},
				{
					Code:          to.StringPtr("CurrentUpgradeDomain/-1"),
					DisplayStatus: to.StringPtr("Current Upgrade Domain of cloud service is -1."),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
				},
				{
					Code:          to.StringPtr("MaxUpgradeDomain/1"),
					DisplayStatus: to.StringPtr("Max Upgrade Domain of cloud service is 1."),
					Level:         test.StatusLevelTypesInfo.ToPtr(),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudServiceInstanceView) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudServiceInstanceView)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServices_ListAll(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	pager := client.ListAll(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.CloudServiceListResult{
				Value: []*test.CloudService{
					{
						Name:     to.StringPtr("{cs-name}"),
						Type:     to.StringPtr("Microsoft.Compute/cloudServices"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
						Location: to.StringPtr("eastus2euap"),
						Properties: &test.CloudServiceProperties{
							Configuration: to.StringPtr("{ServiceConfiguration}"),
							ExtensionProfile: &test.CloudServiceExtensionProfile{
								Extensions: []*test.Extension{
									{
										Name: to.StringPtr("RDPExtension"),
										Properties: &test.CloudServiceExtensionProperties{
											Type:                    to.StringPtr("RDP"),
											AutoUpgradeMinorVersion: to.BoolPtr(false),
											ProvisioningState:       to.StringPtr("Succeeded"),
											Publisher:               to.StringPtr("Microsoft.Windows.Azure.Extensions"),
											RolesAppliedTo: []*string{
												to.StringPtr("*")},
											Settings:           to.StringPtr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
											TypeHandlerVersion: to.StringPtr("1.2.1"),
										},
									}},
							},
							NetworkProfile: &test.CloudServiceNetworkProfile{
								LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
									{
										Name: to.StringPtr("contosolb"),
										Properties: &test.LoadBalancerConfigurationProperties{
											FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
												{
													Name: to.StringPtr("contosofe"),
													Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
														PublicIPAddress: &test.SubResource{
															ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
														},
													},
												}},
										},
									}},
							},
							OSProfile: &test.CloudServiceOsProfile{
								Secrets: []*test.CloudServiceVaultSecretGroup{},
							},
							ProvisioningState: to.StringPtr("Succeeded"),
							RoleProfile: &test.CloudServiceRoleProfile{
								Roles: []*test.CloudServiceRoleProfileProperties{
									{
										Name: to.StringPtr("ContosoFrontend"),
										SKU: &test.CloudServiceRoleSKU{
											Name:     to.StringPtr("Standard_D1_v2"),
											Capacity: to.Int64Ptr(2),
											Tier:     to.StringPtr("Standard"),
										},
									},
									{
										Name: to.StringPtr("ContosoBackend"),
										SKU: &test.CloudServiceRoleSKU{
											Name:     to.StringPtr("Standard_D1_v2"),
											Capacity: to.Int64Ptr(2),
											Tier:     to.StringPtr("Standard"),
										},
									}},
							},
							UniqueID:    to.StringPtr("4ccb4323-4740-4545-bb81-780b27375947"),
							UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().CloudServiceListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().CloudServiceListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestCloudServices_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	pager := client.List("ConstosoRG",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.CloudServiceListResult{
				Value: []*test.CloudService{
					{
						Name:     to.StringPtr("{cs-name}"),
						Type:     to.StringPtr("Microsoft.Compute/cloudServices"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
						Location: to.StringPtr("eastus2euap"),
						Properties: &test.CloudServiceProperties{
							Configuration: to.StringPtr("{ServiceConfiguration}"),
							ExtensionProfile: &test.CloudServiceExtensionProfile{
								Extensions: []*test.Extension{
									{
										Name: to.StringPtr("RDPExtension"),
										Properties: &test.CloudServiceExtensionProperties{
											Type:                    to.StringPtr("RDP"),
											AutoUpgradeMinorVersion: to.BoolPtr(false),
											ProvisioningState:       to.StringPtr("Succeeded"),
											Publisher:               to.StringPtr("Microsoft.Windows.Azure.Extensions"),
											RolesAppliedTo: []*string{
												to.StringPtr("*")},
											Settings:           to.StringPtr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
											TypeHandlerVersion: to.StringPtr("1.2.1"),
										},
									}},
							},
							NetworkProfile: &test.CloudServiceNetworkProfile{
								LoadBalancerConfigurations: []*test.LoadBalancerConfiguration{
									{
										Name: to.StringPtr("contosolb"),
										Properties: &test.LoadBalancerConfigurationProperties{
											FrontendIPConfigurations: []*test.LoadBalancerFrontendIPConfiguration{
												{
													Name: to.StringPtr("contosofe"),
													Properties: &test.LoadBalancerFrontendIPConfigurationProperties{
														PublicIPAddress: &test.SubResource{
															ID: to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
														},
													},
												}},
										},
									}},
							},
							OSProfile: &test.CloudServiceOsProfile{
								Secrets: []*test.CloudServiceVaultSecretGroup{},
							},
							ProvisioningState: to.StringPtr("Succeeded"),
							RoleProfile: &test.CloudServiceRoleProfile{
								Roles: []*test.CloudServiceRoleProfileProperties{
									{
										Name: to.StringPtr("ContosoFrontend"),
										SKU: &test.CloudServiceRoleSKU{
											Name:     to.StringPtr("Standard_D1_v2"),
											Capacity: to.Int64Ptr(2),
											Tier:     to.StringPtr("Standard"),
										},
									},
									{
										Name: to.StringPtr("ContosoBackend"),
										SKU: &test.CloudServiceRoleSKU{
											Name:     to.StringPtr("Standard_D1_v2"),
											Capacity: to.Int64Ptr(2),
											Tier:     to.StringPtr("Standard"),
										},
									}},
							},
							UniqueID:    to.StringPtr("4ccb4323-4740-4545-bb81-780b27375947"),
							UpgradeMode: test.CloudServiceUpgradeModeAuto.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().CloudServiceListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().CloudServiceListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestCloudServices_Start(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Cloud Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginStart(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json: %v", err)
	}
}

func TestCloudServices_PowerOff(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop or PowerOff Cloud Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginPowerOff(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json: %v", err)
	}
}

func TestCloudServices_Restart(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginRestartOptions{Parameters: &test.RoleInstances{
			RoleInstances: []*string{
				to.StringPtr("ContosoFrontend_IN_0"),
				to.StringPtr("ContosoBackend_IN_1")},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json: %v", err)
	}
}

func TestCloudServices_Reimage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginReimage(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginReimageOptions{Parameters: &test.RoleInstances{
			RoleInstances: []*string{
				to.StringPtr("ContosoFrontend_IN_0"),
				to.StringPtr("ContosoBackend_IN_1")},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json: %v", err)
	}
}

func TestCloudServices_Rebuild(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRebuild(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginRebuildOptions{Parameters: &test.RoleInstances{
			RoleInstances: []*string{
				to.StringPtr("ContosoFrontend_IN_0"),
				to.StringPtr("ContosoBackend_IN_1")},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json: %v", err)
	}
}

func TestCloudServices_DeleteInstances(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDeleteInstances(ctx,
		"ConstosoRG",
		"{cs-name}",
		&test.CloudServicesClientBeginDeleteInstancesOptions{Parameters: &test.RoleInstances{
			RoleInstances: []*string{
				to.StringPtr("ContosoFrontend_IN_0"),
				to.StringPtr("ContosoBackend_IN_1")},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json: %v", err)
	}
}

func TestCloudServicesUpdateDomain_WalkUpdateDomain(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Cloud Service to specified Domain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesUpdateDomainClient("{subscription-id}", cred, &options)
	poller, err := client.BeginWalkUpdateDomain(ctx,
		"ConstosoRG",
		"{cs-name}",
		1,
		&test.CloudServicesUpdateDomainClientBeginWalkUpdateDomainOptions{Parameters: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json: %v", err)
	}
}

func TestCloudServicesUpdateDomain_GetUpdateDomain(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Update Domain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesUpdateDomainClient("{subscription-id}", cred, &options)
	res, err := client.GetUpdateDomain(ctx,
		"ConstosoRG",
		"{cs-name}",
		1,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.UpdateDomain{
			Name: to.StringPtr("1"),
			ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
		}
		if !reflect.DeepEqual(exampleRes, res.UpdateDomain) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UpdateDomain)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServicesUpdateDomain_ListUpdateDomains(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Update Domains in Cloud Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServicesUpdateDomainClient("{subscription-id}", cred, &options)
	pager := client.ListUpdateDomains("ConstosoRG",
		"{cs-name}",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.UpdateDomainListResult{
				Value: []*test.UpdateDomain{
					{
						Name: to.StringPtr("0"),
						ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/0"),
					},
					{
						Name: to.StringPtr("1"),
						ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().UpdateDomainListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().UpdateDomainListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestCloudServiceOperatingSystems_GetOSVersion(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Version"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceOperatingSystemsClient("{subscription-id}", cred, &options)
	res, err := client.GetOSVersion(ctx,
		"westus2",
		"WA-GUEST-OS-3.90_202010-02",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.OSVersion{
			Name:     to.StringPtr("WA-GUEST-OS-3.90_202010-02"),
			Type:     to.StringPtr("Microsoft.Compute/locations/cloudServiceOsVersions"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
			Location: to.StringPtr("westus2"),
			Properties: &test.OSVersionProperties{
				Family:      to.StringPtr("3"),
				FamilyLabel: to.StringPtr("Windows Server 2012"),
				IsActive:    to.BoolPtr(true),
				IsDefault:   to.BoolPtr(true),
				Label:       to.StringPtr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
				Version:     to.StringPtr("WA-GUEST-OS-3.90_202010-02"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OSVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OSVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceOperatingSystems_ListOSVersions(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Versions in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceOperatingSystemsClient("{subscription-id}", cred, &options)
	pager := client.ListOSVersions("westus2",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.OSVersionListResult{
				Value: []*test.OSVersion{
					{
						Name:     to.StringPtr("WA-GUEST-OS-3.90_202010-02"),
						Type:     to.StringPtr("Microsoft.Compute/locations/cloudServiceOsVersions"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
						Location: to.StringPtr("westus2"),
						Properties: &test.OSVersionProperties{
							Family:      to.StringPtr("3"),
							FamilyLabel: to.StringPtr("Windows Server 2012"),
							IsActive:    to.BoolPtr(true),
							IsDefault:   to.BoolPtr(true),
							Label:       to.StringPtr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
							Version:     to.StringPtr("WA-GUEST-OS-3.90_202010-02"),
						},
					},
					{
						Name:     to.StringPtr("WA-GUEST-OS-4.83_202010-02"),
						Type:     to.StringPtr("Microsoft.Compute/locations/cloudServiceOsVersions"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-4.83_202010-02"),
						Location: to.StringPtr("westus2"),
						Properties: &test.OSVersionProperties{
							Family:      to.StringPtr("4"),
							FamilyLabel: to.StringPtr("Windows Server 2012 R2"),
							IsActive:    to.BoolPtr(true),
							IsDefault:   to.BoolPtr(true),
							Label:       to.StringPtr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
							Version:     to.StringPtr("WA-GUEST-OS-4.83_202010-02"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().OSVersionListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().OSVersionListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestCloudServiceOperatingSystems_GetOSFamily(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Family"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceOperatingSystemsClient("{subscription-id}", cred, &options)
	res, err := client.GetOSFamily(ctx,
		"westus2",
		"3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.OSFamily{
			Name:     to.StringPtr("3"),
			Type:     to.StringPtr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
			ID:       to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
			Location: to.StringPtr("westus2"),
			Properties: &test.OSFamilyProperties{
				Name:  to.StringPtr("3"),
				Label: to.StringPtr("Windows Server 2012"),
				Versions: []*test.OSVersionPropertiesBase{
					{
						IsActive:  to.BoolPtr(true),
						IsDefault: to.BoolPtr(true),
						Label:     to.StringPtr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
						Version:   to.StringPtr("WA-GUEST-OS-3.90_202010-02"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OSFamily) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OSFamily)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceOperatingSystems_ListOSFamilies(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Families in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCloudServiceOperatingSystemsClient("{subscription-id}", cred, &options)
	pager := client.ListOSFamilies("westus2",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.OSFamilyListResult{
				Value: []*test.OSFamily{
					{
						Name:     to.StringPtr("3"),
						Type:     to.StringPtr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
						Location: to.StringPtr("westus2"),
						Properties: &test.OSFamilyProperties{
							Name:  to.StringPtr("3"),
							Label: to.StringPtr("Windows Server 2012"),
							Versions: []*test.OSVersionPropertiesBase{
								{
									IsActive:  to.BoolPtr(true),
									IsDefault: to.BoolPtr(true),
									Label:     to.StringPtr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
									Version:   to.StringPtr("WA-GUEST-OS-3.90_202010-02"),
								}},
						},
					},
					{
						Name:     to.StringPtr("4"),
						Type:     to.StringPtr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
						ID:       to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/4"),
						Location: to.StringPtr("westus2"),
						Properties: &test.OSFamilyProperties{
							Name:  to.StringPtr("4"),
							Label: to.StringPtr("Windows Server 2012 R2"),
							Versions: []*test.OSVersionPropertiesBase{
								{
									IsActive:  to.BoolPtr(true),
									IsDefault: to.BoolPtr(true),
									Label:     to.StringPtr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
									Version:   to.StringPtr("WA-GUEST-OS-4.83_202010-02"),
								}},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().OSFamilyListResult) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().OSFamilyListResult)
				t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
