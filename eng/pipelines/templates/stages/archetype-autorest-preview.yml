parameters:
# Whether to build alpha versions of the packages. This is passed as a flag to the build script.
- name: BuildPrereleaseVersion
  type: boolean

# Whether to use the `next` version of TypeSpec. This is passed as a flag to the initialize script.
- name: UseTypeSpecNext
  type: boolean

# Whether to publish to the internal feed.
- name: PublishInternal
  type: boolean

# Path to the emitter package's package.json file. If specified, it will be used to generate emitter-package.json in the artifact `build_artifacts`.
- name: EmitterPackageJsonPath
  type: string
  default: 'not-specified'

# Custom steps to run in the Build and Test stages after the repositories are cloned.
- name: AutorestInitializationSteps
  type: stepList
  default: []

# Custom steps to run after the sdk repository is cloned but before the generation matrix is created.
- name: SdkInitializationSteps
  type: stepList
  default: []

# List of packages to publish. Each package is an object with the following properties:
#   name: The name of the package. This is used to determine the name of the file to publish.
#   type: The type of package. Currently supported values are 'npm' and 'nuget'.
#   file: The path to the file to publish. This is relative to the packages directory in the build artifacts directory.
- name: Packages
  type: object
  default: []

# Number of jobs to generate. This is the maximum number of jobs that will be generated. The actual number of jobs will be reduced if it would result in fewer than MinimumPerJob packages per job.
- name: RegenerationJobCount
  type: number
  default: 10

# Minimum number of packages to generate per job.
- name: MinimumPerJob
  type: number
  default: 10

# Indicates if regenration matrix should only contain folders with typespec files
- name: OnlyGenerateTypespec
  type: boolean
  default: false

# Indicates the build matrix to use for post-build autorest validation
- name: TestMatrix
  type: object
  default: {}

# Indicates the build matrix to use for post-build autorest validation
- name: PublishDependsOnTest
  type: boolean
  default: false

stages:

# Build stage
# Responsible for building the autorest generator and typespec emitter packages
# Produces the artifact `build_artifacts` which contains the following:
#   emitter-package.json: Will be used to generate the emitter-package-lock.json file and placed in the `/eng` folder
#                         of the sdk repository.
#   overrides.json: Contains npm package version overrides for the emitter and generator
#   packages/: Contains the packages to publish
- stage: Build
  variables:
    autorestRepositoryPath: $(Build.SourcesDirectory)/autorest
    toolsRepositoryPath: $(Build.SourcesDirectory)/azure-sdk-tools
    sdkRepositoryPath: $(Build.SourcesDirectory)/azure-sdk
  jobs:
  - job: Build
    steps:
    - template: ../steps/emit-pipeline-repositories.yml
      parameters:
        name: repositories
        displayName: 'Get repository details'

    # Validate parameters and fail early if invalid
    - ${{ each package in parameters.Packages }}:
      - ${{ if notIn(package.type, 'npm', 'nuget') }}:
        - script: |
            echo "Package ${{ package.name }} has unsupported type: ${{ package.type }}"
            exit 1
          displayName: 'Unsupported package type'
          condition: always()

    - checkout: self
      path: s/autorest

    - checkout: azure-sdk-tools

    - ${{ parameters.AutorestInitializationSteps }}

    - task: PowerShell@2
      displayName: 'Run initialize script'
      inputs:
        pwsh: true
        filePath: $(autorestRepositoryPath)/eng/scripts/Initialize-Repository.ps1
        arguments: -UseTypeSpecNext:$${{ parameters.UseTypeSpecNext }}
        workingDirectory: $(autorestRepositoryPath)

    - task: PowerShell@2
      displayName: 'Run build script'
      name: ci_build
      inputs:
        pwsh: true
        filePath: $(autorestRepositoryPath)/eng/scripts/Build-Packages.ps1
        arguments: >
          -BuildNumber "$(Build.BuildNumber)"
          -Output "$(Build.ArtifactStagingDirectory)"
          -PublishInternal:$${{ parameters.PublishInternal }}
          -Prerelease:$${{ parameters.BuildPrereleaseVersion }}
        workingDirectory: $(autorestRepositoryPath)

    - ${{ if ne(parameters.EmitterPackageJsonPath, 'not-specified') }}:
      - task: PowerShell@2
        displayName: Create emitter-package.json
        inputs:
          pwsh: true
          filePath: $(toolsRepositoryPath)/eng/scripts/autorest/New-EmitterPackageJson.ps1
          arguments: >
            -PackageJsonPath '${{ parameters.EmitterPackageJsonPath }}'
            -OverridesPath '$(Build.ArtifactStagingDirectory)/overrides.json'
            -OutputDirectory '$(Build.ArtifactStagingDirectory)'
          workingDirectory: $(autorestRepositoryPath)

    - template: ../../../common/pipelines/templates/steps/publish-artifact.yml
      parameters:
        artifactName: build_artifacts
        artifactPath: $(Build.ArtifactStagingDirectory)

    - pwsh: |
        $branchName = 'autorest-failed-build-$(Build.BuildId)'
        $repositoryName = '$(repositories.self.name)'

        . $(toolsRepositoryPath)/eng/common/scripts/git-branch-push.ps1 `
          -PRBranchName $branchName `
          -CommitMsg 'Update repo on failing build`n`nBuild url: $(System.CollectionUri)_build/results?buildId=$(Build.BuildId)' `
          -GitUrl "https://$(azuresdk-github-pat)@github.com/azure-sdk/$repositoryName.git"

        Write-Host ""
        Write-Host @"
          ##vso[task.logissue type=error]Created branch $branchName for build failure repro

          To clone the repo:
            git clone https://github.com/azure-sdk/$repositoryName
            
          To add the remote to an existing clone:
            git remote add azure-sdk https://github.com/azure-sdk/$repositoryName
            git fetch azure-sdk

          To checkout the branch:
            git checkout $branchName
        "@

      displayName: If failed, push changes
      condition: failed()
      workingDirectory: $(autorestRepositoryPath)

# Publish stage
# Responsible for publishing the packages in `build_artifacts/packages` and producing `emitter-package-lock.json`
# Produces the artifact `publish_artifacts` which contains the following:
#   emitter-package-lock.json: Created by calling `npm install` using `build_artifacts/emitter-package.json` and will
#                              be placed in the `/eng` folder of the sdk repository.
- stage: Publish
  dependsOn:
  - Build
  - ${{ if and(parameters.PublishDependsOnTest, ne(length(parameters.TestMatrix), 0)) }}:
    - Test
  variables:
    toolsRepositoryPath: $(Build.SourcesDirectory)
    buildArtifactsPath: $(Pipeline.Workspace)/build_artifacts
  jobs:
  - job: Publish
    steps:
    - checkout: azure-sdk-tools

    - download: current
      artifact: build_artifacts
      displayName: Download build artifacts

    # Create authenticated .npmrc file for publishing
    - ${{ if eq(parameters.PublishInternal, 'true') }}:
      - template: ../steps/create-authenticated-npmrc.yml
        parameters:
          npmrcPath: $(buildArtifactsPath)/packages/.npmrc
          registryUrl: https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-js-test-autorest/npm/registry/
    - ${{ else }}:
      - pwsh: |
          "//registry.npmjs.org/:_authToken=$(azure-sdk-npm-token)" | Out-File '.npmrc'
        displayName: Authenticate .npmrc for npmjs.org
        workingDirectory: $(buildArtifactsPath)/packages

    # per package, publishing using appropriate tool
    - ${{ each package in parameters.Packages }}:
      - ${{ if eq(package.type, 'npm') }}:
        - pwsh: |
            $file = Resolve-Path "${{ package.file }}"
            Write-Host "npm publish $file --verbose --access public --prefix $(buildArtifactsPath)/packages"
            npm publish $file --verbose --access public --prefix $(buildArtifactsPath)/packages
          displayName: Publish ${{ package.name }}
          workingDirectory: $(buildArtifactsPath)/packages
      - ${{ elseif eq(package.type, 'nuget') }}:
        - task: NuGetCommand@2
          displayName: Publish ${{ package.name }}
          inputs:
            command: 'push'
            packagesToPush: $(buildArtifactsPath)/packages/${{ package.file }}
            # Nuget packages are always published to the same internal feed https://dev.azure.com/azure-sdk/public/_packaging?_a=feed&feed=azure-sdk-for-net
            nuGetFeedType: 'internal'
            publishVstsFeed: '29ec6040-b234-4e31-b139-33dc4287b756/fa8c16a3-dbe0-4de2-a297-03065ec1ba3f'

    - ${{ if ne(parameters.EmitterPackageJsonPath, 'not-specified') }}:
      - task: PowerShell@2
        displayName: Create emitter-package-lock.json
        inputs:
          pwsh: true
          filePath: $(toolsRepositoryPath)/eng/scripts/autorest/New-EmitterPackageLock.ps1
          arguments: >
            -EmitterPackageJsonPath "$(buildArtifactsPath)/emitter-package.json"
            -OutputDirectory "$(Build.ArtifactStagingDirectory)"

    - template: ../../../common/pipelines/templates/steps/publish-artifact.yml
      parameters:
        artifactName: publish_artifacts
        artifactPath: $(Build.ArtifactStagingDirectory)

# Test stage
# Responsible for running unit and functional tests using a matrix passed in as the parameter `TestMatrix`.
# Will only run if the parameter `TestMatrix` is not empty.
# The contents of the artficact `build_artifacts` are available under the path `$(buildArtifactsPath)`.
- ${{ if ne(length(parameters.TestMatrix), 0) }}:
  - stage: Test
    dependsOn: Build
    variables:
      autorestRepositoryPath: $(Build.SourcesDirectory)/autorest
      toolsRepositoryPath: $(Build.SourcesDirectory)/azure-sdk-tools
    jobs:
    - job: Test
      strategy:
        matrix: ${{ parameters.TestMatrix }}
      variables:
        buildArtifactsPath: $(Pipeline.Workspace)/build_artifacts
      steps:
      - checkout: self
        path: s/autorest # Use a predictable path for the `self` repo

      - checkout: azure-sdk-tools
        
      - download: current
        artifact: build_artifacts
        displayName: Download build artifacts

      - ${{ parameters.AutorestInitializationSteps }}

      - task: PowerShell@2
        displayName: 'Run initialize script'
        inputs:
          pwsh: true
          filePath: $(autorestRepositoryPath)/eng/scripts/Initialize-Repository.ps1
          arguments: -BuildArtifactsPath '$(buildArtifactsPath)'
          workingDirectory: $(autorestRepositoryPath)

      - task: PowerShell@2
        displayName: 'Run test script'
        inputs:
          pwsh: true
          filePath: $(autorestRepositoryPath)/eng/scripts/Test-Packages.ps1
          arguments: $(TestArguments)
          workingDirectory: $(autorestRepositoryPath)

      - template: ../../../common/pipelines/templates/steps/publish-artifact.yml
        parameters:
          artifactName: test_artifacts_$(System.JobName)
          artifactPath: $(Build.ArtifactStagingDirectory)


- stage: Regenerate
  dependsOn:
  - Build
  - Publish
  variables:
    autorestRepositoryPath: $(Build.SourcesDirectory)/autorest
    toolsRepositoryPath: $(Build.SourcesDirectory)/azure-sdk-tools
    sdkRepositoryPath: $(Build.SourcesDirectory)/azure-sdk
    sdkRepositoryName: $[stageDependencies.Build.Build.outputs['repositories.sdk-repository.name']]
    pullRequestTargetBranch: $[coalesce(stageDependencies.Build.Build.outputs['repositories.sdk-repository.branch'], 'main')]
    sdkRepositoryCommitSha: $[stageDependencies.Build.Build.outputs['repositories.sdk-repository.version']]
    buildArtifactsPath: $(Pipeline.Workspace)/build_artifacts
    publishArtifactsPath: $(Pipeline.Workspace)/publish_artifacts
    branchName: auto-update-autorest-alpha-$(Build.BuildNumber)
  jobs:
  - job: Initialize
    steps:
    - template: ../../../common/pipelines/templates/steps/sparse-checkout.yml
      parameters:
        Paths:
        - "/*"
        - "!SessionRecords"
        Repositories:
        - Name: Azure/$(sdkRepositoryName)
          WorkingDirectory: $(sdkRepositoryPath)
          Commitish: $(sdkRepositoryCommitSha)
        SkipCheckoutNone: true
    - checkout: self
      path: s/autorest
    - checkout: azure-sdk-tools

    - download: current
      artifact: build_artifacts
      displayName: Download build artifacts

    - download: current
      artifact: publish_artifacts
      displayName: Download pubish artifacts

    - ${{ if ne(parameters.EmitterPackageJsonPath, 'not-specified') }}:
      - pwsh: |
          Write-Host "Copying emitter-package.json to $(sdkRepositoryPath)/eng"
          Copy-Item $(buildArtifactsPath)/emitter-package.json $(sdkRepositoryPath)/eng -Force

          Write-Host "Copying emitter-package-lock.json to $(sdkRepositoryPath)/eng"
          Copy-Item $(publishArtifactsPath)/emitter-package-lock.json $(sdkRepositoryPath)/eng -Force
        displayName: Copy emitter-package json files

    - ${{ parameters.SdkInitializationSteps }}

    - template: /eng/common/pipelines/templates/steps/git-push-changes.yml
      parameters:
        BaseRepoOwner: azure-sdk
        TargetRepoName: $(sdkRepositoryName)
        BaseRepoBranch: $(branchName)
        CommitMsg: Initialize repository for autorest build $(Build.BuildNumber)
        WorkingDirectory: $(sdkRepositoryPath)
        ScriptDirectory: $(toolsRepositoryPath)/eng/common/scripts

    - task: PowerShell@2
      displayName: Get generation job matrix
      name: generate_matrix
      inputs:
        pwsh: true
        workingDirectory: $(sdkRepositoryPath)
        filePath: $(sdkRepositoryPath)/eng/common/scripts/New-RegenerateMatrix.ps1
        arguments: >
          -OutputDirectory "$(Build.ArtifactStagingDirectory)"
          -OutputVariableName matrix
          -JobCount ${{ parameters.RegenerationJobCount }}
          -MinimumPerJob ${{ parameters.MinimumPerJob }}
          -OnlyTypespec ${{ parameters.OnlyGenerateTypespec }}

    - template: ../../../common/pipelines/templates/steps/publish-artifact.yml
      parameters:
        artifactName: matrix_artifacts
        artifactPath: $(Build.ArtifactStagingDirectory)

  - job: Generate
    dependsOn: Initialize
    strategy:
      matrix: $[dependencies.Initialize.outputs['generate_matrix.matrix']]
    variables:
      matrixArtifactsPath: $(Pipeline.Workspace)/matrix_artifacts
    steps:
    - checkout: self
    - checkout: azure-sdk-tools
    - template: ../../../common/pipelines/templates/steps/sparse-checkout.yml
      parameters:
        Paths:
        - "/*"
        - "!SessionRecords"
        Repositories:
        - Name: azure-sdk/$(sdkRepositoryName)
          WorkingDirectory: $(sdkRepositoryPath)
          Commitish: $(branchName)
        SkipCheckoutNone: true

    - download: current
      displayName: Download pipeline artifacts

    - ${{ parameters.SdkInitializationSteps }}

    - task: PowerShell@2
      displayName: Call regeneration script
      inputs:
        pwsh: true
        workingDirectory: $(sdkRepositoryPath)
        filePath: $(sdkRepositoryPath)/eng/common/scripts/Update-GeneratedSdks.ps1
        arguments: >
          -PackageDirectoriesFile "$(matrixArtifactsPath)/$(DirectoryList)"
      continueOnError: true

    - template: /eng/common/pipelines/templates/steps/git-push-changes.yml
      parameters:
        BaseRepoOwner: azure-sdk
        TargetRepoName: $(sdkRepositoryName)
        BaseRepoBranch: $(branchName)
        CommitMsg: Update SDK code $(JobKey)
        WorkingDirectory: $(sdkRepositoryPath)
        ScriptDirectory: $(toolsRepositoryPath)/eng/common/scripts

  - job: Create_PR
    displayName: Create PR
    dependsOn: 
    - Generate
    variables:
      generateJobResult: $[dependencies.Generate.result]
      generatorVersion: $[stageDependencies.Build.Build.outputs['ci_build.generatorVersion']]
    steps:
    - checkout: self
    - checkout: azure-sdk-tools

    - pwsh: |
        $generateJobResult = '$(generateJobResult)'
        $generatorVersion = '$(generatorVersion)'
        $repoUrl = '$(Build.Repository.Uri)'
        $sourceBranch = '$(Build.SourceBranch)'
        $buildNumber = '$(Build.SourceBranch)'
        $queuedBy = '$(Build.SourceBranch)'
        $preRelease = '${{ parameters.BuildPrereleaseVersion }}' -eq 'true'

        $source = "[$sourceBranch]($repoUrl/tree/$sourceBranch)" 
        if ($sourceBranch -match "^refs/heads/(.+)$") {
            $source = "branch: [$($Matches[1])]($repoUrl/tree/$sourceBranch)"
        } elseif ($sourceBranch -match "^refs/tags/(.+)$") {
            $source = "tag: [$($Matches[1])]($repoUrl/tree/$sourceBranch)"
        } elseif ($sourceBranch -match "^refs/pull/(\d+)/(head|merge)$") {
            $source = "pull request: $repoUrl/pull/$($Matches[1])"
        }

        $prBody = "Triggered from $source"

        $prTitle = $preRelease `
          ? "Update autorest version to prerelease $generatorVersion" `
          : "Update autorest version to $generatorVersion"

        if ($generateJobResult -ne 'Succeeded') {
          $prTitle = "Failed: $prTitle"
        }

        Write-Host "Setting variable 'PullRequestTitle' to '$prTitle'"
        Write-Host "##vso[task.setvariable variable=PullRequestTitle]$prTitle"

        Write-Host "Setting variable 'PullRequestBody' to '$prBody'"
        Write-Host "##vso[task.setvariable variable=PullRequestBody]$prBody"
      displayName: Get PR title and body

    - task: PowerShell@2
      displayName: Create pull request
      inputs:
        pwsh: true
        filePath: $(toolsRepositoryPath)/eng/common/scripts/Submit-PullRequest.ps1
        arguments: >
          -RepoOwner 'Azure'
          -RepoName '$(sdkRepositoryName)'
          -BaseBranch '$(pullRequestTargetBranch)'
          -PROwner 'azure-sdk'
          -PRBranch '$(branchName)'
          -AuthToken '$(azuresdk-github-pat)'
          -PRTitle '$(PullRequestTitle)'
          -PRBody '$(PullRequestBody)'
          -OpenAsDraft $true
          -PRLabels 'Do Not Merge'
