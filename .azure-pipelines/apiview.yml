trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - src/dotnet/APIView
      - src/java/apiview-java-processor
      - packages/python-packages/api-stub-generator

pr:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - src/dotnet/APIView
      - src/java/apiview-java-processor
      - packages/python-packages/api-stub-generator

variables:
  DotNetCoreVersion: '5.x'
  DotNetRuntimeVersion: '3.1.x'
  WebClientProjectDirectory: 'src/dotnet/APIView/APIViewWeb/Client'
  WebProjectPath: 'src/dotnet/APIView/APIViewWeb/APIViewWeb.csproj'
  TestProjectPath: 'src/dotnet/APIView/APIViewTest/APIViewTest.csproj'
  NodeVersion: '12.x'
  BuildConfiguration: 'Release'
  PythonParserPackagePath: 'packages/python-packages/api-stub-generator'
  TypeScriptGeneratorDirectory: 'src/ts/ts-genapi'
  GoParserPackagePath: 'src/go'
  GoVersion: '1.15'
  NugetSecurityAnalysisWarningLevel: 'none'

stages:
  - stage: 'Main'
    jobs:
      - job: 'Build'

        pool:
          vmImage: 'vs2017-win2016'

        steps:

          - task: DotNetCoreInstaller@2
            displayName: 'Use .NET Core sdk $(DotNetCoreVersion)'
            inputs:
              version: '$(DotNetCoreVersion)'

          - task: DotNetCoreInstaller@2
            displayName: 'Use .NET Core $(DotNetRuntimeVersion)'
            inputs:
              packageType: runtime
              version: '$(DotNetRuntimeVersion)'

          - task: NodeTool@0
            inputs:
              versionSpec: '$(NodeVersion)'
            displayName: 'Use NodeJS $(NodeVersion)'

          - task: GoTool@0
            inputs:
              version: '$(GoVersion)'
            displayName: "Use Go $(GoVersion)"

          - script: |
              npm install -g npm@6.14.6
            displayName: "Install npm 6.14.6"

          - script: |
              npm install
            workingDirectory: $(WebClientProjectDirectory)
            displayName: "Install npm packages"

          - script: |
              npm run-script build
            workingDirectory: $(WebClientProjectDirectory)
            displayName: "Build client assets"

          - script: |
              npm install
            workingDirectory: $(TypeScriptGeneratorDirectory)
            displayName: "Install npm packages typescript generator"

          - script: |
              npm run-script build
            workingDirectory: $(TypeScriptGeneratorDirectory)
            displayName: "Build typescript generator"

          - task: Maven@3
            inputs:
              mavenPomFile: 'src/java/apiview-java-processor/pom.xml'
              goals: 'clean package'

          - pwsh: |
              copy-item -Path $(PythonParserPackagePath) -Destination $(Build.ArtifactStagingDirectory)/APIViewWeb/api-stub-generator -Recurse -Force
            displayName: 'Bundle Python API Parser'

          - script: |
              go build -o $(Build.ArtifactStagingDirectory)/APIViewWeb
            workingDirectory: $(GoParserPackagePath)
            displayName: 'Build go parser'

          - script: 'dotnet build $(WebProjectPath) -warnaserror'
            displayName: 'Build and Package'
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0

          - task: DotNetCoreCLI@2
            displayName: 'Publish site'
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0
            inputs:
              command: 'publish'
              projects: '$(WebProjectPath)'
              publishWebProjects: false
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'APIView'
              

      - job: 'Test'

        dependsOn:
          - 'Build'

        pool:
          vmImage: 'vs2017-win2016'

        steps:

          - task: UsePythonVersion@0
            displayName: 'Use Python 3.6'
            inputs:
              versionSpec: 3.6

          - task: DotNetCoreInstaller@2
            displayName: 'Use .NET Core sdk $(DotNetCoreVersion)'
            inputs:
              version: '$(DotNetCoreVersion)'

          - task: DotNetCoreInstaller@2
            displayName: 'Use .NET Core $(DotNetRuntimeVersion)'
            inputs:
              packageType: runtime
              version: '$(DotNetRuntimeVersion)'

          - task: DotNetCoreCLI@2
            displayName: 'Build & Test'
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0
            inputs:
              command: test
              projects: '$(TestProjectPath)'
              arguments: --logger trx
              publishTestResults: false

          - script: |
              cd $(Build.SourcesDirectory)/$(PythonParserPackagePath)
              pip install tox
              tox
              cd $(Build.SourcesDirectory)
            displayName: 'Test Python Package Parser'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/*.trx'
              testRunTitle: 'Windows DotNet $(DotNetCoreVersion)'
              testResultsFormat: 'VSTest'
              mergeTestResults: true
