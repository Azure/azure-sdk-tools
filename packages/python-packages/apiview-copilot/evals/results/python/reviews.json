[
    {
        "testcase": "small_apiview_few_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the __init__ method and instead implement a separate from_connection_string class method.",
                    "comment": "The constructor should not accept a connection string per the guideline. Instead, a factory method (from_connection_string) must be provided if supported.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 171,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Using 'list' as an attribute name shadows the built-in list type and may be ambiguous. A more descriptive name such as 'captions' would better convey its intent.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Remove PeopleResult from the aio sub-namespace and define it only once in the shared models namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespace per the guidelines. Reuse the model from azure.ai.vision.imageanalysis.models.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThis API provides functionality to analyze images by extracting visual features and metadata. It processes image data\u2014either provided as bytes or via URLs\u2014to generate detailed analysis results that include information such as captions, information on objects, people, text regions, smart crop regions, and tags.\n\n**API Version**  \nThe clients are configured with an `api_version` parameter during initialization. The stub does not specify an explicit latest version, so the desired version must be provided by the consumer.\n\n**Client Classes**  \nThe service exposes two primary client classes: the synchronous `ImageAnalysisClient` in the `azure.ai.vision.imageanalysis` namespace and the asynchronous `ImageAnalysisClient` in the `azure.ai.vision.imageanalysis.aio` namespace. Both classes offer equivalent functionality, differing only in their approach to synchronous versus asynchronous execution.\n\n**Functional Overview**  \nThe clients enable operations that can be understood as a read process: they accept image data or image URLs along with parameters to fine-tune the analysis. The functionality includes sending analysis requests that return processed results, handling low-level HTTP requests if needed, and managing connection lifecycles. These operations focus on retrieving (read) analytical data from images rather than full CRUD operations.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": null,
                    "comment": "The synchronous client constructor should not accept a connection string parameter. Instead, provide a separate from_connection_string factory method.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": null,
                    "comment": "Models should not be duplicated in the aio namespace; PeopleResult must be defined only once in the shared models namespace.",
                    "source": "guideline"
                }
            ]
        },
        "expected_comments": 2,
        "comments_found": 2,
        "valid_generic_comments": 0,
        "invalid_generic_comments": [],
        "true_positives": 2,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 100.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 4,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE accurately and completely reflects all essential information from the CONTEXT without adding or omitting anything.",
        "overall_score": 97
    },
    {
        "testcase": "small_apiview_many_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from __init__ and add a separate factory method (e.g. from_connection_string) to create the client.",
                    "comment": "The __init__ method accepts a connection_string parameter, which violates the guideline that the constructor must not take a connection string.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 30,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "Insert a '*' after the required parameters to enforce keyword-only optional arguments, e.g.,\n\ndef analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., ...):",
                    "comment": "Optional parameters in analyze_from_url must be keyword-only according to the SDK guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 53,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.AsyncImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client to 'ImageAnalysisClient' so it matches the synchronous client name in the aio package.",
                    "comment": "The asynchronous client should use the same client name as the synchronous one; having 'AsyncImageAnalysisClient' violates the naming guideline for sync/async clients.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-constructor-api-version-argument-1"
                    ],
                    "line_no": 54,
                    "bad_code": "def __init__(\n        self, \n        endpoint: str, \n        credential: Union[AzureKeyCredential, AsyncTokenCredential], \n    ) -> None",
                    "suggestion": "Add an optional keyword-only api_version parameter to the async client __init__ signature, for example: \n    def __init__(self, endpoint: str, credential: Union[AzureKeyCredential, AsyncTokenCredential], *, api_version: str = ..., **kwargs: Any) -> None",
                    "comment": "The async client constructor is missing the optional api_version parameter required by the guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-static-methods"
                    ],
                    "line_no": 88,
                    "bad_code": "@staticmethod",
                    "suggestion": "Remove the staticmethod decorator and refactor send_request as an instance method or a module-level function.",
                    "comment": "Static methods are discouraged; module-level functions or instance methods should be used instead.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 168,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "Use a less ambiguous attribute name such as 'items' or 'captions' to avoid shadowing the built-in 'list' type.",
                    "comment": "Naming an attribute 'list' can lead to confusion with Python\u2019s built-in type. Choosing a more descriptive name improves clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to 'DetectedPerson' using PascalCase.",
                    "comment": "Type names must be in PascalCase; 'detectedPerson' should be renamed to 'DetectedPerson'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace this getter method with a property (e.g. @property def result(self): ...).",
                    "comment": "Simple getter methods are discouraged; use a property to expose the value instead.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 413,
                    "bad_code": "def set_result(self, obj) -> None",
                    "suggestion": "Replace this setter method with a property setter (e.g. @result.setter def result(self, value): ...).",
                    "comment": "Simple setter methods are discouraged; use a property setter to update the value.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 432,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Move PeopleResult to the common models namespace (azure.ai.vision.imageanalysis.models) instead of duplicating it in the aio sub-namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespaces.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "    tags = 'tags'",
                    "suggestion": "Change the enum member to uppercase: TAGS = 'tags'",
                    "comment": "Enum member names must be in UPPERCASE; 'tags' should be renamed to 'TAGS'.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None",
                    "suggestion": "def __init__(self, endpoint: str, credential: Union[AzureKeyCredential, TokenCredential], *, api_version: str = ..., **kwargs: Any) -> None",
                    "comment": "The client constructor must not accept a connection string. Instead, provide a separate from_connection_string factory method.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-kwargs"
                    ],
                    "line_no": 30,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be keyword-only. Insert a '*' after the required parameters to enforce keyword-only arguments.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "class azure.ai.vision.imageanalysis.models.DetectedPerson(MutableMapping[str, Any]):",
                    "comment": "Type names must use PascalCase. Rename detectedPerson to DetectedPerson.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "def result(self) -> ObjectsResult",
                    "comment": "Avoid simple getter methods; use a property instead to expose the result.",
                    "source": "guideline"
                }
            ]
        },
        "expected_comments": 10,
        "comments_found": 4,
        "valid_generic_comments": 0,
        "invalid_generic_comments": [],
        "true_positives": 3,
        "false_positives": 1,
        "false_negatives": 7,
        "percent_coverage": 30.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately reflecting the guidelines and providing precise, relevant suggestions without omissions or unsupported additions.",
        "overall_score": 38
    },
    {
        "testcase": "small_apiview_no_violations",
        "expected": {
            "comments": []
        },
        "actual": {
            "comments": []
        },
        "expected_comments": 0,
        "comments_found": 0,
        "valid_generic_comments": 0,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 100.0
    },
    {
        "testcase": "small_apiview_multiple_same_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 16,
                    "bad_code": "def analyze(",
                    "suggestion": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the 'analyze' method should be keyword-only. Insert a '*' after the required parameters so that all optional parameters must be specified by name.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 28,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the 'analyze_from_url' method should be keyword-only. Adding a '*' after the required parameters will enforce this design guideline.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 62,
                    "bad_code": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "For async methods, optional parameters must also be keyword-only. Insert '*' to force keyword-only usage.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 74,
                    "bad_code": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be made keyword-only by inserting '*' after the required parameters.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 166,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Using 'list' as an attribute name shadows the built-in list type in Python. Renaming this attribute to something more descriptive (like 'captions' or 'dense_captions') will avoid potential conflicts and improve code clarity.",
                    "source": "generic"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThis service provides comprehensive image analysis capabilities. It processes input images\u2014either supplied as raw bytes or via a URL\u2014to extract a range of visual insights and metadata.\n\n**API Version**  \nThe clients accept an optional `api_version` parameter during initialization. Although an explicit API version object is not defined in the APIView, this parameter allows users to specify the service version they wish to interact with.\n\n**Client Classes**  \nThe API offers two primary client classes: a synchronous `ImageAnalysisClient` in the main namespace and an asynchronous `ImageAnalysisClient` in the async namespace. Both clients deliver equivalent functionality, tailored to different runtime environments.\n\n**Functional Overview**  \nEach client class enables image processing by analyzing visual features specified through a list of options. The operations include generating descriptive captions (with gender neutrality options), extracting detailed region captions, detecting objects and people, performing optical character recognition, suggesting smart crop regions based on aspect ratios, and identifying relevant tags. Distributed tracing is integrated into these operations, and the clients support context management for clean resource handling. Additionally, a lower-level request-sending facility is provided for scenarios that require more granular control over HTTP interactions, with results consolidated into an image analysis response object.",
                    "source": "summary"
                }
            ]
        },
        "expected_comments": 4,
        "comments_found": 0,
        "valid_generic_comments": 0,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 4,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 0
    },
    {
        "testcase": "medium_apiview_few_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 78,
                    "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatchingAsyncClient(ClinicalMatchingClientOperationsMixin): implements AsyncContextManager",
                    "suggestion": "Place the async client in an '.aio' subpackage and name it identically to the sync client (i.e. ClinicalMatchingClient). For example:\n\n# In module azure.healthinsights.clinicalmatching.aio\nclass ClinicalMatchingClient(ClinicalMatchingClientOperationsMixin):\n    async def begin_match_trials(...): ...\n    async def close(...): ...",
                    "comment": "The async client does not follow the naming and namespace conventions. According to the guidelines (python_design.html#python-client-same-name-sync-async and python_design.html#python-client-namespace-async), the async client should have the same name as its synchronous counterpart and reside in an '.aio' namespace.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 91,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "async def begin_match_trials(self, body: Union[TrialMatcherData, JSON, IO], *, content_type: str = \"application/json\", repeatability_first_sent: Optional[datetime] = None, repeatability_request_id: Optional[str] = None, **kwargs: Any) -> LROPoller[TrialMatcherResult]:",
                    "comment": "Public asynchronous methods must include full PEP484 type annotations. The async overloads for 'begin_match_trials' are missing explicit type hints.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 368,
                    "bad_code": "contacts: Optional[List[ForwardRef('ContactDetails')]]",
                    "suggestion": "Add 'from __future__ import annotations' at the top of the module to simplify forward references in type hints.",
                    "comment": "$Explicit use of ForwardRef can be avoided in Python 3.10+ using postponed evaluation of annotations. This change can improve readability and reduce boilerplate in type annotations. (general comment)",
                    "source": "generic"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThe API provides a service that processes patient clinical data to generate clinical trial matching results. It ingests detailed patient records and related healthcare information and utilizes advanced inference mechanisms to determine appropriate clinical trial opportunities based on clinical documents, demographics, and evidentiary data.\n\n**API Version**  \nThe clients accept an `api_version` parameter during initialization, allowing configuration of the service version. There is no separate version object explicitly enumerated; the latest version is effectively determined by the default or provided parameter value.\n\n**Client Classes**  \nThe service exposes two principal client classes, namely `ClinicalMatchingClient` and `ClinicalMatchingAsyncClient`. Both clients offer equivalent functionality with the former using a synchronous approach and the latter designed for asynchronous operations.\n\n**Functional Overview**  \nThe clients support initiating a trial matching process that works as a long-running operation. This process accepts trial matching input in various forms, including structured data and streamable content, and returns inferences about clinical trial eligibility. They also incorporate context management to handle resource cleanup, low-level HTTP communication capabilities, and distributed tracing support to monitor request flows. Overall, the API facilitates a workflow where healthcare data is analyzed to furnish clinical trial match results rather than performing conventional CRUD operations.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-namespaces-async"
                    ],
                    "line_no": 76,
                    "bad_code": "namespace azure.healthinsights.clinicalmatching",
                    "suggestion": "namespace azure.healthinsights.clinicalmatching.aio",
                    "comment": "Async clients must reside in a sub-namespace with an .aio suffix.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 91,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "async def begin_match_trials(self, body: Union[TrialMatcherData, JSON, IO], *, content_type: str = \"application/json\", repeatability_first_sent: Optional[datetime] = ..., repeatability_request_id: Optional[str] = ..., **kwargs: Any) -> LROPoller[TrialMatcherResult]",
                    "comment": "This public async method overload should include complete PEP484 type hints to improve clarity and maintain consistency with type annotation guidelines.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 502,
                    "bad_code": "PATIENT_REGISTRIES = \"patientRegistries\"",
                    "suggestion": "PATIENT_REGISTRIES = \"patient_registries\"",
                    "comment": "Use a consistent naming convention for string values in constants.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 2,
        "comments_found": 3,
        "valid_generic_comments": 1,
        "invalid_generic_comments": [],
        "true_positives": 1,
        "false_positives": 1,
        "false_negatives": 1,
        "percent_coverage": 50.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The response is fully grounded in the context, accurately reflecting both the namespace and type hinting guidelines without adding or omitting information.",
        "overall_score": 50
    },
    {
        "testcase": "medium_apiview_many_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-naming",
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 6,
                    "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatching(ClinicalMatchingClientOperationsMixin): implements ContextManager",
                    "suggestion": "class azure.healthinsights.clinicalmatching.ClinicalMatchingClient(ClinicalMatchingClientOperationsMixin): implements ContextManager",
                    "comment": "Service client types should be named with a 'Client' suffix. In addition, the sync and async clients must share the same name. Rename the sync client from 'ClinicalMatching' to 'ClinicalMatchingClient' to comply with these guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-auth-credential-azure-core"
                    ],
                    "line_no": 11,
                    "bad_code": "api_key: str",
                    "suggestion": "Use a credential object from azure.core.credentials (e.g., AzureKeyCredential) instead of a raw string for the api key.",
                    "comment": "Authentication parameters should leverage azure-core credential classes rather than using a simple string.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-options-naming"
                    ],
                    "line_no": 70,
                    "bad_code": "    options: Optional[CreateTrialsOptions] = None,",
                    "suggestion": "    <individual keyword parameters> instead of an options bag",
                    "comment": "Avoid using an options bag object to group optional parameters. Pass each optional parameter as a separate keyword-only argument.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-lro-poller-begin-naming"
                    ],
                    "line_no": 93,
                    "bad_code": "def create_trials(",
                    "suggestion": "def begin_create_trials(",
                    "comment": "Long running operations must use a 'begin_' prefix. Rename 'create_trials' to 'begin_create_trials' per the long running operations naming guideline.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix"
                    ],
                    "line_no": 102,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Methods that enumerate resources should be prefixed with 'list_'. Rename 'trials' to 'list_trials' to follow the paging method naming guideline.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 108,
                    "bad_code": "def erase_trials(",
                    "suggestion": "def delete_trials(",
                    "comment": "For deletion operations the preferred verb is 'delete_'. Rename 'erase_trials' to 'delete_trials' per the service verb naming guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-lro-poller-begin-naming"
                    ],
                    "line_no": 214,
                    "bad_code": "async def create_trials(",
                    "suggestion": "async def begin_create_trials(",
                    "comment": "Long running operations should use a 'begin_' prefix. Rename the async 'create_trials' method to 'begin_create_trials'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix"
                    ],
                    "line_no": 223,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Methods that enumerate resources should be prefixed with 'list_'. Consider renaming 'trials' to 'list_trials' and returning an ItemPaged type.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 229,
                    "bad_code": "async def erase_trials(",
                    "suggestion": "async def delete_trials(",
                    "comment": "Deletion operation names should use the 'delete_' prefix rather than 'erase_'. Rename 'erase_trials' to 'delete_trials' in the async client.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 824,
                    "bad_code": "ivar innerrror: Optional[InnerError]",
                    "suggestion": "ivar inner_error: Optional[InnerError]",
                    "comment": "There is a typo in the attribute name ('innerrror'). Correcting it to 'inner_error' (or a similar consistent name) improves clarity and consistency in the API.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 998,
                    "bad_code": "ivar eligibilityCriteriaEvidence: Optional[str]",
                    "suggestion": "ivar eligibility_criteria_evidence: Optional[str]",
                    "comment": "Variable names should use snake_case instead of camelCase.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1000,
                    "bad_code": "ivar patientDataEvidence: Optional[ClinicalNoteEvidence]",
                    "suggestion": "ivar patient_data_evidence: Optional[ClinicalNoteEvidence]",
                    "comment": "Variable names should use snake_case instead of camelCase.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1001,
                    "bad_code": "ivar patientInfoEvidence: Optional[ClinicalCodedElement]",
                    "suggestion": "ivar patient_info_evidence: Optional[ClinicalCodedElement]",
                    "comment": "Variable names should use snake_case instead of camelCase.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThis API provides a clinical trial matching service that accepts patient records and configuration data to evaluate trial eligibility. The service processes clinical matching requests using long running operations and returns trial match results along with associated inferences and details.\n\n**API Version**  \nThe clients accept an `api_version` parameter during initialization. No specific latest version is explicitly provided in the APIView.\n\n**Client Classes**  \nThe service exposes both a synchronous client\u2014`ClinicalMatching`\u2014and an asynchronous client\u2014`ClinicalMatchingClient`. Both classes offer equivalent functionality for interacting with the clinical trial matching operations.\n\n**Functional Overview**  \nThe clients provide functionality that covers key CRUD operations. They enable clients to submit trial matching requests (create), retrieve trial matching results (read), and delete trials as needed (delete). In addition, the operations use long running pollers for asynchronous processing, and both clients include a method for sending low-level HTTP requests if custom behavior is required.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-options-naming"
                    ],
                    "line_no": 70,
                    "bad_code": "options: Optional[CreateTrialsOptions] = None,",
                    "suggestion": null,
                    "comment": "Avoid using an options bag object; instead, pass each optional parameter as a keyword-only argument.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix"
                    ],
                    "line_no": 102,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Methods that return collections should be prefixed with 'list_' to indicate paging support.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 108,
                    "bad_code": "def erase_trials(",
                    "suggestion": "def delete_trials(",
                    "comment": "Deletion operations should use the 'delete_' prefix instead of 'erase_'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix"
                    ],
                    "line_no": 223,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Async list methods should also be prefixed with 'list_' to clarify they enumerate resources.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 229,
                    "bad_code": "async def erase_trials(",
                    "suggestion": "async def delete_trials(",
                    "comment": "Async deletion methods should use the 'delete_' prefix to match guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 348,
                    "bad_code": "ivar sub_type: Union[str, GeoJsonPropertiesSubType]",
                    "suggestion": "ivar subtype: Union[str, GeoJsonPropertiesSubType]",
                    "comment": "Rename 'sub_type' to 'subtype' for brevity and consistency with Python naming conventions.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 824,
                    "bad_code": "ivar innerrror: Optional[InnerError]",
                    "suggestion": "ivar innererror: Optional[InnerError]",
                    "comment": "Fix the typo in the attribute name to ensure consistency and clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 997,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceEvidence(MutableMapping[str, Any]):",
                    "suggestion": "class TrialMatcherInferenceEvidence(MutableMapping[str, Any]):",
                    "comment": "Remove redundant package qualification from the class name for a more idiomatic Python API.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 998,
                    "bad_code": "ivar eligibilityCriteriaEvidence: Optional[str]",
                    "suggestion": "ivar eligibility_criteria_evidence: Optional[str]",
                    "comment": "Instance variable names should use snake_case to follow Python naming conventions.",
                    "source": "merged"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1000,
                    "bad_code": "ivar patientDataEvidence: Optional[ClinicalNoteEvidence]",
                    "suggestion": "ivar patient_data_evidence: Optional[ClinicalNoteEvidence]",
                    "comment": "Instance variable names should use snake_case for consistency with Python naming conventions.",
                    "source": "merged"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1001,
                    "bad_code": "ivar patientInfoEvidence: Optional[ClinicalCodedElement]",
                    "suggestion": "ivar patient_info_evidence: Optional[ClinicalCodedElement]",
                    "comment": "Instance variable names should use snake_case to follow Python naming conventions.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 1023,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(str, Enum):",
                    "suggestion": "class TrialMatcherInferenceType(str, Enum):",
                    "comment": "Remove package prefix from the class name to simplify usage.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1027,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.TrialMatcherModelConfiguration(MutableMapping[str, Any]):",
                    "suggestion": "class TrialMatcherModelConfiguration(MutableMapping[str, Any]):",
                    "comment": "Omit redundant module path from the class name for a cleaner API design.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1075,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.TrialMatcherResult(MutableMapping[str, Any]):",
                    "suggestion": "class TrialMatcherResult(MutableMapping[str, Any]):",
                    "comment": "Simplify the class name by removing the package namespace for improved clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1085,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.TrialMatcherResults(MutableMapping[str, Any]):",
                    "suggestion": "class TrialMatcherResults(MutableMapping[str, Any]):",
                    "comment": "Remove the module namespace from the class name to match conventional Python usage.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 12,
        "comments_found": 15,
        "valid_generic_comments": 7,
        "invalid_generic_comments": [],
        "true_positives": 8,
        "false_positives": 0,
        "false_negatives": 4,
        "percent_coverage": 66.6666666667,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded, accurately and thoroughly reflecting all relevant guidelines from the CONTEXT without introducing unsupported information or omitting critical points.",
        "overall_score": 72
    },
    {
        "testcase": "medium_apiview_no_violations",
        "expected": {
            "comments": []
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThe service enables clinical trial matching by evaluating patient records and clinical criteria against trial configurations. It processes detailed clinical data to produce trial matching outcomes and inference details, supporting workflows that assess eligibility and match patients to suitable clinical trials.\n\n**API Version**  \nThe API version is provided as a parameter (`api_version`) when initializing a client. The latest version is not explicitly specified within this APIView.\n\n**Client Classes**  \nThe API exposes two primary client classes: a synchronous `ClinicalMatchingClient` and an asynchronous `ClinicalMatchingClient` (located in the `.aio` namespace). Both classes offer equivalent functionality, differing only in execution mode.\n\n**Functional Overview**  \nThe clients support initiating long-running clinical trial matching operations through a method that accepts various input formats such as structured trial matcher data, JSON, or file-like objects. These operations follow a CRUD pattern in that they create and manage matching tasks from submission to result retrieval. Additionally, the clients provide methods for managing the underlying HTTP requests and proper resource cleanup via context management.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 393,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(str, Enum):",
                    "suggestion": "class ClinicalTrialPhase(str, Enum):",
                    "comment": "Use a concise enum name without the full module path.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 402,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(str, Enum):",
                    "suggestion": "class ClinicalTrialPurpose(str, Enum):",
                    "comment": "Remove redundant namespace information from the enum declaration.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 415,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(str, Enum):",
                    "suggestion": "class ClinicalTrialRecruitmentStatus(str, Enum):",
                    "comment": "Simplify the enum class name; the module already provides context.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 493,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(str, Enum):",
                    "suggestion": "class ClinicalTrialStudyType(str, Enum):",
                    "comment": "Remove the redundant namespace from the enum class name.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 0,
        "comments_found": 4,
        "valid_generic_comments": 4,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 100.0
    },
    {
        "testcase": "medium_apiview_multiple_same_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 194,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.AgeUnit(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.AgeUnit(str, Enum):",
                    "comment": "Enum types should be implemented as extensible enumerations by inheriting from both str and Enum, per the guideline 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 270,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(str, Enum):",
                    "comment": "This enum should be extensible; inherit from str along with Enum as recommended by 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 307,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(str, Enum):",
                    "comment": "For extensibility, the enum should inherit from str and Enum as per the guideline 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 393,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(str, Enum):",
                    "comment": "Implement the enum as an extensible enumeration by subclassing from str and Enum ('python-models-enum-string').",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 402,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(str, Enum):",
                    "comment": "Extend the enum by inheriting from str along with Enum, following 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 415,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(str, Enum):",
                    "comment": "This enum should inherit from str and Enum to be extensible, as described in 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 488,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialSource(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialSource(str, Enum):",
                    "comment": "For extensibility, implement the enum by inheriting from both str and Enum ('python-models-enum-string').",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 493,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(str, Enum):",
                    "comment": "Change the enum declaration to inherit from str and Enum to comply with 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 568,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(str, Enum):",
                    "comment": "To allow for extensibility, the enum should subclass both str and Enum ('python-models-enum-string').",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 573,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.DocumentType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.DocumentType(str, Enum):",
                    "comment": "This enum should also be extensible by inheriting from str alongside Enum, as per 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 720,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.JobStatus(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.JobStatus(str, Enum):",
                    "comment": "For consistency and extensibility, define the enum by inheriting from str and Enum ('python-models-enum-string').",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 812,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.RepeatabilityResultType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.RepeatabilityResultType(str, Enum):",
                    "comment": "$The enum should be made extensible by subclassing both str and Enum, following 'python-models-enum-string'. (general comment)",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 899,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(str, Enum):",
                    "comment": "Implement this enum as an extensible enumeration by inheriting from str in addition to Enum ('python-models-enum-string').",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThis service is designed to perform clinical matching by processing patient records and clinical trial information to derive trial suitability. Its functionality centers on evaluating clinical data against trial criteria to produce inference results for matching patients to clinical trials.\n\n**API Version**  \nThe client constructors include an `api_version` parameter. Although a discrete API version object is not defined, the intended version is provided at initialization, with the latest version specified by that parameter.\n\n**Client Classes**  \nThe API offers both a synchronous `ClinicalMatchingClient` and an asynchronous `ClinicalMatchingClient` (found in the aio namespace). These client classes provide equivalent capabilities, differing only in their synchronous versus asynchronous operation modes.\n\n**Functional Overview**  \nThe service\u2019s client methods enable the initiation of clinical matching operations as long-running tasks. They accept inputs in multiple formats to convey clinical trial criteria and patient data, trigger processing of this information, and ultimately return matching results and inferences. In addition, the clients support sending customized HTTP requests and managing resource lifecycle events such as closure of the client session.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 363,
                    "bad_code": "contacts: Optional[List[ForwardRef('ContactDetails')]]",
                    "suggestion": "contacts: Optional[List['ContactDetails']]",
                    "comment": "Use quoted type hints for forward references to align with common Python idioms. (general comment)",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 583,
                    "bad_code": "ivar innererror: Optional[InnerError]",
                    "suggestion": "inner_error: Optional[InnerError]",
                    "comment": "Rename 'innererror' to 'inner_error' to follow standard snake_case naming conventions.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 653,
                    "bad_code": "ivar type: Union[str, GeoJsonType]",
                    "suggestion": "geojson_type: Union[str, GeoJsonType]",
                    "comment": "Do not use the built-in name 'type'; choose a more descriptive name like 'geojson_type' for clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 734,
                    "bad_code": "ivar type: Union[str, DocumentType]",
                    "suggestion": "doc_type: Union[str, DocumentType]",
                    "comment": "Avoid using the built-in name 'type' as an attribute; rename it (e.g. to 'doc_type') to prevent shadowing.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 13,
        "comments_found": 4,
        "valid_generic_comments": 4,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 13,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 0
    },
    {
        "testcase": "large_apiview_few_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-separate-sync-async"
                    ],
                    "line_no": 326,
                    "bad_code": "async def analyze_document_async(self, model_id: str, body: Union[AnalyzeDocumentRequest, JSON, IO[bytes]], **kwargs: Any) -> AnalyzeResult",
                    "suggestion": "Remove this asynchronous method from the synchronous client. Instead, offer an equivalent async method only in the async client located under the azure.ai.documentintelligence.aio namespace.",
                    "comment": "Synchronous client classes must not mix in async methods. The 'analyze_document_async' method in the sync client violates the guideline for providing separate sync and async clients.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 937,
                    "bad_code": "    @asyncio.coroutine",
                    "suggestion": "Replace the use of '@asyncio.coroutine' with an 'async def' definition. For example, remove the decorator and define the method with 'async def get_classifier_old(...):'.",
                    "comment": "The use of '@asyncio.coroutine' is deprecated; the guidelines require using async/await syntax for asynchronous methods.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThe service enables intelligent document processing. It offers capabilities to extract structured information from documents, build and manage document classifiers and models, and perform document analysis in both batch and single-document modes. It supports operations that create, retrieve, update, and delete (CRUD) resources and provides mechanisms for handling long\u2010running operations.\n\n**API Version**  \nThe client classes accept an `api_version` parameter at initialization, allowing users to specify the version of the service to interact with. The latest version is used by default when no specific version is provided.\n\n**Client Classes**  \nArchitecturally relevant client classes include the synchronous `DocumentIntelligenceAdministrationClient` and `DocumentIntelligenceClient`, as well as their asynchronous equivalents in the `azure.ai.documentintelligence.aio` namespace. The administration client focuses on resource management tasks such as building, copying, retrieving, and deleting classifiers and models, while the main client concentrates on document analysis, classification, and delivering analysis outputs.\n\n**Functional Overview**  \nThe administration-oriented client supports CRUD operations over document classifier and model resources. It provides functionality for initiating build and copy operations, as well as for retrieving resource details and monitoring long-running operations through pollers. The document analysis client offers capabilities to perform detailed analysis\u2014ranging from text extraction to output generation in formats such as PDFs and figures\u2014in both batch and individual modes. Parallel synchronous and asynchronous methods allow integration into a wide array of application architectures without compromising responsiveness.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 6,
                    "bad_code": "class azure.ai.documentintelligence.AnalyzeDocumentLROPoller(LROPoller[+PollingReturnType_co]):",
                    "suggestion": "class azure.ai.documentintelligence.AnalyzeDocumentLROPoller(LROPoller[PollingReturnType_co]):",
                    "comment": "Eliminate the non\u2010standard '+' prefix in the generic parameter for clearer, idiomatic type hints.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 317,
                    "bad_code": "def list_classifiers(self, **kwargs: Any) -> Iterable[DocumentClassifierDetails]",
                    "suggestion": "def list_classifiers(self, **kwargs: Any) -> ItemPaged[DocumentClassifierDetails]",
                    "comment": "Listing methods should return a pager type that implements the ItemPaged protocol instead of a generic Iterable so that paging (via by_page) is supported.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-sync-async-separate-clients"
                    ],
                    "line_no": 326,
                    "bad_code": "async def analyze_document_async(",
                    "suggestion": null,
                    "comment": "This client mixes asynchronous operations with synchronous methods. Async operations should be provided in a separate async client rather than using an async method inside the sync client.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 937,
                    "bad_code": "@asyncio.coroutine",
                    "suggestion": null,
                    "comment": "The @asyncio.coroutine decorator is deprecated and should be removed. Use native async/await syntax by defining the function with async def instead.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 1164,
                    "bad_code": "body: Union[AnalyzeDocumentRequest, JSON, IO[bytes]],",
                    "suggestion": null,
                    "comment": "Define a type alias for the union of accepted body types to improve readability and maintainability of the signature.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1827,
                    "bad_code": "AZURE_BLOB = \"azureBlob\"",
                    "suggestion": null,
                    "comment": "Enum member values differ in style from their names; consider aligning enum values with conventional naming or document the discrepancy clearly.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2154,
                    "bad_code": "type: Union[str, DocumentFieldType],",
                    "suggestion": null,
                    "comment": "Avoid shadowing the built\u2010in name 'type'; consider renaming this parameter (e.g. to 'field_type').",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2507,
                    "bad_code": "def __init__(self, *args: Any, **kwargs: Any) -> None",
                    "suggestion": null,
                    "comment": "The final generic constructor using *args and **kwargs obscures which parameters are expected, hindering type checking and IDE autocomplete. Consider defining an explicit signature.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2983,
                    "bad_code": "ivar footnotes: Optional[List[ForwardRef('DocumentFootnote')]]",
                    "suggestion": "footnotes: Optional[List[DocumentFootnote]]",
                    "comment": "Leverage postponed evaluation (e.g. via 'from __future__ import annotations') to avoid needing explicit ForwardRef in type hints.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 2,
        "comments_found": 9,
        "valid_generic_comments": 6,
        "invalid_generic_comments": [],
        "true_positives": 1,
        "false_positives": 2,
        "false_negatives": 1,
        "percent_coverage": 50.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 4,
        "groundedness": 3,
        "groundedness_reason": "The response is mostly grounded but includes an unsupported addition (the pager protocol), which is not in the CONTEXT.",
        "overall_score": 46
    },
    {
        "testcase": "large_apiview_many_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-namespaces-prefix"
                    ],
                    "line_no": 3,
                    "bad_code": "namespace microsoft.azure.ai.documentintelligence",
                    "suggestion": "namespace azure.ai.documentintelligence",
                    "comment": "The namespace declaration includes a 'microsoft' prefix. According to the guidelines, the library should be implemented as a sub\u2010package of the azure root namespace (and must not use 'microsoft' as the root namespace).",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-hier-vend"
                    ],
                    "line_no": 332,
                    "bad_code": "def client(self, name, **kwargs) -> DocumentIntelligenceClient",
                    "suggestion": "def get_client(self, name, **kwargs) -> DocumentIntelligenceClient",
                    "comment": "For hierarchical clients the method retrieving a child client should be named with a 'get_' prefix (e.g. get_client) according to the guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-long-args"
                    ],
                    "line_no": 629,
                    "bad_code": "def process_document(self, model_id, doc_type, source, version, locale, format, pages, fields, timeout) -> AnalyzeResult",
                    "suggestion": "def process_document(self, model_id, *, doc_type, source, version, locale, format, pages, fields, timeout) -> AnalyzeResult",
                    "comment": "The process_document method takes too many positional parameters (nine in total). This violates the guideline that advises against methods requiring more than five positional parameters. Refactor these parameters to be keyword-only.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-optional-args"
                    ],
                    "line_no": 643,
                    "bad_code": "def analyze_batch(",
                    "suggestion": "def analyze_batch(self, model_id, body, *, features=None, locale=None, output=None) -> LROPoller[AnalyzeBatchResult]",
                    "comment": "Optional parameters in the analyze_batch method should be declared as keyword\u2011only. This helps improve clarity and conforms to SDK design guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-namespaces-async"
                    ],
                    "line_no": 661,
                    "bad_code": "namespace azure.ai.documentintelligence.async",
                    "suggestion": "namespace azure.ai.documentintelligence.aio",
                    "comment": "Asynchronous client types should reside in an '.aio' subpackage rather than '.async'. This change conforms with SDK guidelines for async namespacing.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-auth-credential-azure-core"
                    ],
                    "line_no": 995,
                    "bad_code": "api_key: str",
                    "suggestion": "credential: Union[AzureKeyCredential, AsyncTokenCredential]",
                    "comment": "In the async DocumentIntelligenceClient constructor the parameter is defined as a plain string (api_key: str). The guidelines require using the credential types provided by azure-core (e.g. AzureKeyCredential or AsyncTokenCredential) for authentication.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1427,
                    "bad_code": "ivar failedCount: int",
                    "suggestion": "ivar failed_count: int",
                    "comment": "The attribute name 'failedCount' does not follow snake_case conventions. It should be renamed to 'failed_count' to comply with the naming guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1428,
                    "bad_code": "ivar skippedCount: int",
                    "suggestion": "ivar skipped_count: int",
                    "comment": "Variable names should use snake_case. 'skippedCount' should be renamed to 'skipped_count'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1429,
                    "bad_code": "ivar succeededCount: int",
                    "suggestion": "ivar succeeded_count: int",
                    "comment": "Variable names should use snake_case. 'succeededCount' should be renamed to 'succeeded_count'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 1948,
                    "bad_code": "neural = \"neural\"",
                    "suggestion": "NEURAL = \"neural\" (and similarly, use TEMPLATE = \"template\" for the other member)",
                    "comment": "Enum member names must be in UPPERCASE. The current definition of DocumentBuildMode uses lower-case member names.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-errors-use-standard-exceptions"
                    ],
                    "line_no": 3160,
                    "bad_code": "class DocumentIntelligenceCustomError(Exception):",
                    "suggestion": "Consider using an existing exception type from azure-core (for example, subclass AzureError) or a built-in exception if appropriate, rather than creating a new custom exception.",
                    "comment": "Custom exceptions should be avoided if a standard or azure-core exception type can convey the error, per SDK guidelines.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThe API provides advanced document intelligence functionality that enables analysis, classification, and management of documents through automated extraction, OCR, and layout analysis. It supports the initiation and monitoring of long-running operations for tasks such as building and copying document classifiers and models, as well as performing detailed document analysis.\n\n**API Version**  \nThe service operations require an API version to be specified via the `api_version` parameter in the client constructors. Although a version object is not explicitly defined, the clients are designed to work with the latest service version as determined by that parameter.\n\n**Client Classes**  \nThe API exposes two primary client classes, namely the synchronous `DocumentIntelligenceAdministrationClient` and `DocumentIntelligenceClient`, along with their asynchronous equivalents. Both pairs provide similar capabilities in managing the lifecycle and analysis of document intelligence models and classifiers.\n\n**Functional Overview**  \nThe administration client facilitates CRUD operations on document classifiers and models by offering methods to authorize copy operations, trigger the build and composition of models, and delete or retrieve existing artifacts. In contrast, the document client is focused on the analysis of documents including batch and single-document processing, classification, and result retrieval in different formats such as illustration figures or PDFs. Both clients rely on long-running poller objects to manage asynchronous operations and provide detailed operation status and result retrieval.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 5,
                    "bad_code": "class azure.ai.documentintelligence.AnalyzeDocumentLROPoller(LROPoller[+PollingReturnType_co]):",
                    "suggestion": "class azure.ai.documentintelligence.AnalyzeDocumentLROPoller(LROPoller[PollingReturnType_co]):",
                    "comment": "Remove the plus sign in the generic parameter to use standard Python generic notation.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 317,
                    "bad_code": "def list_classifiers(self, **kwargs: Any) -> Iterable[DocumentClassifierDetails]",
                    "suggestion": "def list_classifiers(self, **kwargs: Any) -> ItemPaged[DocumentClassifierDetails]",
                    "comment": "Listing methods should return an ItemPaged type to support pagination features.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 320,
                    "bad_code": "def list_models(self, **kwargs: Any) -> Iterable[DocumentModelDetails]",
                    "suggestion": "def list_models(self, **kwargs: Any) -> ItemPaged[DocumentModelDetails]",
                    "comment": "Listing methods should return an ItemPaged type to support pagination features.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 323,
                    "bad_code": "def list_operations(self, **kwargs: Any) -> Iterable[DocumentIntelligenceOperationDetails]",
                    "suggestion": "def list_operations(self, **kwargs: Any) -> ItemPaged[DocumentIntelligenceOperationDetails]",
                    "comment": "Listing methods should return an ItemPaged type to support pagination features.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 520,
                    "bad_code": "body: Union[AnalyzeDocumentRequest, JSON, IO[bytes]]",
                    "suggestion": "body: DocumentInput",
                    "comment": "Define a type alias (e.g. DocumentInput = Union[AnalyzeDocumentRequest, JSON, IO[bytes]]) to simplify repeated union type annotations.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-namespaces-async"
                    ],
                    "line_no": 661,
                    "bad_code": "namespace azure.ai.documentintelligence.async",
                    "suggestion": "namespace azure.ai.documentintelligence.aio",
                    "comment": "Async client namespaces should use the '.aio' suffix rather than '.async'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 1053,
                    "bad_code": "async def begin_analyze_batch_documents(",
                    "suggestion": "async def begin_analyze_batch_documents(self, model_id: str, body: Union[AnalyzeBatchDocumentsRequest, JSON, IO[bytes]], *, content_type: str = 'application/json', features: Optional[List[Union[str, DocumentAnalysisFeature]]] = ..., locale: Optional[str] = ..., output: Optional[List[Union[str, AnalyzeOutputOption]]] = ..., output_content_format: Optional[Union[str, DocumentContentFormat]] = ..., pages: Optional[str] = ..., query_fields: Optional[List[str]] = ..., string_index_type: Optional[Union[str, StringIndexType]] = ..., **kwargs: Any) -> AsyncLROPoller[AnalyzeBatchResult]",
                    "comment": "The final implementation for begin_analyze_batch_documents omits the 'content_type' parameter present in the overloads, leading to an inconsistency.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 1948,
                    "bad_code": "neural = \"neural\"",
                    "suggestion": "NEURAL = \"neural\"",
                    "comment": "Enum member names should be in uppercase.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 1949,
                    "bad_code": "template = \"template\"",
                    "suggestion": "TEMPLATE = \"template\"",
                    "comment": "Enum member names should be in uppercase.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "17"
                    ],
                    "line_no": 2493,
                    "bad_code": "def __init__(",
                    "suggestion": null,
                    "comment": "Relying on a catch\u2010all __init__ using *args and **kwargs obscures the valid parameters. An explicit signature (or input validation) would improve discoverability and developer experience.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2993,
                    "bad_code": "ivar footnotes: Optional[List[ForwardRef('DocumentFootnote')]]",
                    "suggestion": "footnotes: Optional[List['DocumentFootnote']]",
                    "comment": "Use a string literal for forward references to simplify annotations in line with modern Python practices.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-errors-use-standard-exceptions",
                        "python_design.html#python-errors-azure-exceptions"
                    ],
                    "line_no": 3160,
                    "bad_code": "class DocumentIntelligenceCustomError(Exception):",
                    "suggestion": "class DocumentIntelligenceCustomError(AzureError):",
                    "comment": "Custom exception types should derive from an Azure core exception (e.g. AzureError) rather than directly from Exception.",
                    "source": "guideline"
                }
            ]
        },
        "expected_comments": 11,
        "comments_found": 12,
        "valid_generic_comments": 5,
        "invalid_generic_comments": [],
        "true_positives": 3,
        "false_positives": 4,
        "false_negatives": 8,
        "percent_coverage": 27.2727272727,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is entirely based on the CONTEXT, accurately and thoroughly conveying all essential information without introducing unsupported details or omitting critical points.",
        "overall_score": 34
    },
    {
        "testcase": "large_apiview_no_violations",
        "expected": {
            "comments": []
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThis service provides a comprehensive document intelligence solution that enables clients to analyze documents, extract rich features from them, and manage the models and classifiers needed for these tasks. It supports the initiation and monitoring of long\u2010running operations for tasks such as training, composing, and copying classifiers and document models, along with operations to retrieve analysis results in various formats.\n\n**API Version**  \nClient constructors in both the administration and analysis clients accept an `api_version` parameter to enforce compatibility with a specific version of the service. The stub does not explicitly designate a latest version; instead, the caller is expected to supply the appropriate version as needed.\n\n**Client Classes**  \nThe API exposes synchronous clients such as `DocumentIntelligenceAdministrationClient` and `DocumentIntelligenceClient` and their asynchronous counterparts in the `aio` namespace. The administration clients focus on operations for managing resources\u2014including creating, reading, updating, and deleting (CRUD) classifiers and document models\u2014while the analysis clients focus on processing documents and retrieving analysis outcomes.\n\n**Functional Overview**  \nThe administration client provides functionality to perform CRUD operations on document classifiers and models, to authorize copy actions between resources, and to initiate model-building and model-composing operations that run asynchronously. In contrast, the analysis client supports initiating long\u2011running tasks for batch document analysis, single document analysis, and document classification. Both clients offer methods to retrieve detailed information on operations and results, including formats such as PDF and graphical outputs, and they allow callers to submit custom HTTP requests when needed.",
                    "source": "summary"
                }
            ]
        },
        "expected_comments": 0,
        "comments_found": 0,
        "valid_generic_comments": 0,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 100.0
    },
    {
        "testcase": "large_apiview_multiple_same_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 1448,
                    "bad_code": "class azure.ai.documentintelligence.models.AnalyzeOutputOption(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.AnalyzeOutputOption(str, Enum):",
                    "comment": "Enums in the SDK should be extensible by inheriting from str as well as Enum. This allows for flexible comparisons and future extensions.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python-models-enum-string"
                    ],
                    "line_no": 1811,
                    "bad_code": "class azure.ai.documentintelligence.models.ContentSourceKind(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.ContentSourceKind(str, Enum):",
                    "comment": "Enums should extend str to adhere to the guideline of using extensible enumerations in the SDK.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python-models-enum-string"
                    ],
                    "line_no": 1864,
                    "bad_code": "class azure.ai.documentintelligence.models.DocumentAnalysisFeature(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.DocumentAnalysisFeature(str, Enum):",
                    "comment": "Enums should extend str to adhere to the guideline of using extensible enumerations in the SDK.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python-models-enum-string"
                    ],
                    "line_no": 1902,
                    "bad_code": "class azure.ai.documentintelligence.models.DocumentBarcodeKind(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.DocumentBarcodeKind(str, Enum):",
                    "comment": "Enum members should be based on str to ensure extensibility and compliance with SDK guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python-models-enum-string"
                    ],
                    "line_no": 1922,
                    "bad_code": "class azure.ai.documentintelligence.models.DocumentBuildMode(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.DocumentBuildMode(str, Enum):",
                    "comment": "For consistency and extensibility, enums should inherit from str alongside Enum.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThis API provides a document intelligence service that enables the processing and extraction of structured information from documents. It supports operations for creating, reading, updating, and deleting (CRUD) custom document models and classifiers as well as performing detailed analysis and classification of documents.\n\n**API Version**  \nThe clients require an `api_version` parameter during initialization to ensure compatibility with the service. Although the available versions are not enumerated in the view, the use of this parameter indicates that the service supports versioning with a latest version determined by the deployment configuration.\n\n**Client Classes**  \nThe service exposes both synchronous and asynchronous clients. The `DocumentIntelligenceAdministrationClient` (together with its asynchronous counterpart in the `aio` namespace) provides administrative functionality for managing document models and classifiers, including build, compose, copy, and deletion operations. In contrast, the `DocumentIntelligenceClient` (and its async variant) focuses on document analysis operations such as initiating batch or individual analysis tasks, classifying documents, retrieving analysis outputs, and monitoring long\u2010running operations.\n\n**Functional Overview**  \nThe clients offer methods that initiate long-running operations through polling constructs (for example, via classes like `AnalyzeDocumentLROPoller` and its asynchronous equivalent). These operations cover authorizing model or classifier copy actions, building and composing custom models, and establishing classifiers. In addition, the clients support analysis of documents with capabilities to process both file and URL inputs, extract various content elements (such as figures, tables, and textual features), and retrieve results in multiple formats. They also provide functions for listing resources and operations, fetching detailed resource and operational information, and sending custom HTTP requests to extend functionality.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-separate-sync-async"
                    ],
                    "line_no": 1251,
                    "bad_code": "def list_analyze_batch_results(",
                    "suggestion": "async def list_analyze_batch_results(",
                    "comment": "A synchronous listing method is present alongside asynchronous methods. Sync and async operations should be split into separate client classes.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "17"
                    ],
                    "line_no": 1494,
                    "bad_code": "def __init__(",
                    "suggestion": null,
                    "comment": "A catch\u2010all __init__ using *args and **kwargs makes the API less discoverable and hinders IDE support. Consider defining an explicit signature or a dedicated from_dict factory method.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1997,
                    "bad_code": "status: Union[str, DocumentIntelligenceOperationStatus]",
                    "suggestion": "status: DocumentIntelligenceOperationStatus",
                    "comment": "Since the enum is a string subclass, use it directly instead of a union with str to simplify the type.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 5,
        "comments_found": 3,
        "valid_generic_comments": 2,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 1,
        "false_negatives": 5,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 1,
        "groundedness": 1,
        "groundedness_reason": "The RESPONSE is completely ungrounded and unrelated to the CONTEXT, which is about extensible enumerations.",
        "overall_score": 0
    },
    {
        "average_score": 53.083333333333336,
        "total_evals": 12
    }
]