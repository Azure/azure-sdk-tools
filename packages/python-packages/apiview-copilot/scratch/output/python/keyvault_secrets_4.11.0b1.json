{
    "comments": [
        {
            "rule_ids": [],
            "line_no": 1,
            "bad_code": "",
            "suggestion": null,
            "comment": "### API Summary\n\n**Purpose**  \nThis API offers a secret management service for handling secrets within a key vault system. It provides comprehensive operations for managing secrets, including performing full CRUD functions alongside specialized actions such as backup, restoration, deletion, recovery, and secret rolling.\n\n**API Version**  \nThe API defines an `ApiVersion` object supporting various releases. The latest supported version is `7.7-preview.1`.\n\n**Client Classes**  \nThe service exposes two primary client classes of interest: the synchronous `SecretClient` found in `azure.keyvault.secrets` and the asynchronous `SecretClient` within `azure.keyvault.secrets.aio`. Both clients offer equivalent functionality tailored to their respective operational models.\n\n**Functional Overview**  \nThe `SecretClient` classes enable an array of operations to comprehensively manage secrets. They facilitate CRUD operations as well as additional workflows such as secret backup and restoration, controlled deletion and recovery, and advanced scenarios like secret rolling. These capabilities empower architects to integrate secret management effectively within secure key vault environments.",
            "source": "summary"
        },
        {
            "rule_ids": [
                "python_design.html#python-models-enum-name-uppercase"
            ],
            "line_no": 15,
            "bad_code": "V7_7_preview_1 = \"7.7-preview.1\"",
            "suggestion": "V7_7_PREVIEW_1 = \"7.7-preview.1\"",
            "comment": "Enum member names should be fully uppercase and use consistent formatting for modifiers.",
            "source": "merged"
        },
        {
            "rule_ids": [],
            "line_no": 250,
            "bad_code": "async def delete_secret(",
            "suggestion": "async def begin_delete_secret(",
            "comment": "Prefix the async deletion method with 'begin_' to indicate a long-running operation consistent with the sync client.",
            "source": "generic"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-separate-sync-async"
            ],
            "line_no": 271,
            "bad_code": "        @distributed_trace",
            "suggestion": "        @distributed_trace_async",
            "comment": "Async methods in the aio client should use the asynchronous tracing decorator for consistency.",
            "source": "context"
        },
        {
            "rule_ids": [],
            "line_no": 272,
            "bad_code": "async def list_deleted_secrets(self, **kwargs: Any) -> AsyncItemPaged[DeletedSecret]",
            "suggestion": "def list_deleted_secrets(self, **kwargs: Any) -> AsyncItemPaged[DeletedSecret]",
            "comment": "Async list operations must not use the async keyword.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-separate-sync-async"
            ],
            "line_no": 274,
            "bad_code": "        @distributed_trace",
            "suggestion": "        @distributed_trace_async",
            "comment": "Async methods must be decorated with @distributed_trace_async rather than the synchronous @distributed_trace.",
            "source": "context"
        },
        {
            "rule_ids": [],
            "line_no": 275,
            "bad_code": "async def list_properties_of_secret_versions(self, name: str, **kwargs: Any) -> AsyncItemPaged[SecretProperties]",
            "suggestion": "def list_properties_of_secret_versions(self, name: str, **kwargs: Any) -> AsyncItemPaged[SecretProperties]",
            "comment": "Async list operations must not be defined with the async keyword.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-separate-sync-async"
            ],
            "line_no": 281,
            "bad_code": "        @distributed_trace",
            "suggestion": "        @distributed_trace_async",
            "comment": "The async method should use the async decorator (@distributed_trace_async) to ensure proper behavior.",
            "source": "context"
        },
        {
            "rule_ids": [],
            "line_no": 282,
            "bad_code": "async def list_properties_of_secrets(self, **kwargs: Any) -> AsyncItemPaged[SecretProperties]",
            "suggestion": "def list_properties_of_secrets(self, **kwargs: Any) -> AsyncItemPaged[SecretProperties]",
            "comment": "Async list operations must not use the async keyword.",
            "source": "guideline"
        },
        {
            "rule_ids": [],
            "line_no": 292,
            "bad_code": "async def recover_deleted_secret(",
            "suggestion": "async def begin_recover_deleted_secret(",
            "comment": "Prefix the async recovery method with 'begin_' for consistency with the corresponding sync method.",
            "source": "generic"
        }
    ]
}