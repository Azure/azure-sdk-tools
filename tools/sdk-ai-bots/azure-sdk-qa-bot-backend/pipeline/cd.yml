name: Deploy Azure SDK QA Bot Backend

trigger: none
pr: none

parameters:
  - name: environment
    displayName: 'Target Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - preview
      - prod

variables:
  - template: /eng/pipelines/templates/variables/image.yml
  - template: /eng/pipelines/templates/variables/globals.yml
  
  # Load environment-specific variable groups
  # These groups should define: RESOURCE_GROUP, ACR_NAME, ACR_RESOURCE_GROUP, APP_NAME, SERVICE_CONNECTION
  - ${{ if eq(parameters.environment, 'dev') }}:
    - group: 'Azure SDK QA Bot Dev Variables'
  
  - ${{ if eq(parameters.environment, 'preview') }}:
    - group: 'Azure SDK QA Bot Preview Variables'
  
  - ${{ if eq(parameters.environment, 'prod') }}:
    - group: 'Azure SDK QA Bot Prod Variables'

  - name: imageName
    value: 'azure-sdk-qa-bot-backend'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/tools/sdk-ai-bots/azure-sdk-qa-bot-backend'

stages:
  - stage: Build
    displayName: 'Build and Push Container Image'
    condition: ne('${{ parameters.environment }}', 'prod')
    jobs:
      - job: BuildAndPush
        displayName: 'Build and Push to ACR'
        pool:
          name: $(LINUXPOOL)
          image: $(LINUXVMIMAGE)
          os: linux
        
        steps:
          - checkout: self
            displayName: 'Checkout repository'

          - template: templates/get-image-tag.yml
            parameters:
              environment: ${{ parameters.environment }}
              workingDirectory: $(workingDirectory)

          - task: AzureCLI@2
            displayName: 'Setup Azure Authentication'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              addSpnToEnvironment: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                echo "##vso[task.setvariable variable=AZURE_CLIENT_ID]$servicePrincipalId"
                echo "##vso[task.setvariable variable=AZURE_TENANT_ID]$tenantId"
                echo "##vso[task.setvariable variable=AZURE_SUBSCRIPTION_ID]$(az account show --query id -o tsv)"
                echo "$idToken" > "$(Agent.BuildDirectory)/id_token"
                echo "##vso[task.setvariable variable=AZURE_FEDERATED_TOKEN_FILE]$(Agent.BuildDirectory)/id_token"

          - task: AzureCLI@2
            displayName: 'Get ACR Login Server'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group "$ACR_RESOURCE_GROUP" --query "loginServer" --output tsv)
                echo "##vso[task.setvariable variable=acrLoginServer]$ACR_LOGIN_SERVER"
                echo "ACR Login Server: $ACR_LOGIN_SERVER"
            env:
              ACR_NAME: $(ACR_NAME)
              ACR_RESOURCE_GROUP: $(ACR_RESOURCE_GROUP)

          - task: AzureCLI@2
            displayName: 'Build and Push Docker Image'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail
                
                ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group "$ACR_RESOURCE_GROUP" --query "loginServer" --output tsv)
                
                echo "ACR Login Server: $ACR_LOGIN_SERVER"
                echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                
                az acr login --name "$ACR_NAME"
                docker build -t "${IMAGE_NAME}:${IMAGE_TAG}" -f "${WORKING_DIR}/Dockerfile" "${WORKING_DIR}"
                docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
                docker push "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
                
                echo "✓ Image built and pushed successfully"
            env:
              IMAGE_NAME: $(imageName)
              IMAGE_TAG: $(imageTag)
              WORKING_DIR: $(workingDirectory)
              ACR_NAME: $(ACR_NAME)
              ACR_RESOURCE_GROUP: $(ACR_RESOURCE_GROUP)

  - stage: ValidateProductionImage
    displayName: 'Validate Production Image Exists'
    condition: eq('${{ parameters.environment }}', 'prod')
    jobs:
      - job: ValidateImage
        displayName: 'Check Image in Registry'
        pool:
          name: $(LINUXPOOL)
          image: $(LINUXVMIMAGE)
          os: linux
        
        steps:
          - checkout: self
            displayName: 'Checkout repository'

          - template: templates/get-image-tag.yml
            parameters:
              environment: ${{ parameters.environment }}
              workingDirectory: $(workingDirectory)

          - task: AzureCLI@2
            displayName: 'Verify Image Exists in ACR'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                echo "Checking if image ${IMAGE_NAME}:${IMAGE_TAG} exists in registry ${ACR_NAME}..."
                
                if az acr repository show-tags --name "$ACR_NAME" --repository "$IMAGE_NAME" --output tsv | grep -Fxq "$IMAGE_TAG"; then
                  echo "✓ Image ${IMAGE_NAME}:${IMAGE_TAG} found in registry"
                else
                  echo "✗ Error: Image ${IMAGE_NAME}:${IMAGE_TAG} not found in registry"
                  echo "Please ensure the image has been built and tested in preview environment first."
                  exit 1
                fi
            env:
              ACR_NAME: $(ACR_NAME)
              IMAGE_NAME: $(imageName)
              IMAGE_TAG: $(imageTag)

  - stage: Deploy
    displayName: 'Deploy to ${{ parameters.environment }}'
    dependsOn: 
      - ${{ if ne(parameters.environment, 'prod') }}:
        - Build
      - ${{ if eq(parameters.environment, 'prod') }}:
        - ValidateProductionImage
    jobs:
      - job: DeployToAppService
        displayName: 'Deploy to Azure App Service'
        pool:
          name: $(LINUXPOOL)
          image: $(LINUXVMIMAGE)
          os: linux
        
        steps:
          - checkout: self
            displayName: 'Checkout repository'

          - template: templates/get-image-tag.yml
            parameters:
              environment: ${{ parameters.environment }}
              workingDirectory: $(workingDirectory)

          - task: AzureCLI@2
            displayName: 'Get ACR Login Server'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group "$ACR_RESOURCE_GROUP" --query "loginServer" --output tsv)
                echo "##vso[task.setvariable variable=acrLoginServer]$ACR_LOGIN_SERVER"
                echo "ACR Login Server: $ACR_LOGIN_SERVER"
            env:
              ACR_NAME: $(ACR_NAME)
              ACR_RESOURCE_GROUP: $(ACR_RESOURCE_GROUP)

          - task: AzureCLI@2
            displayName: 'Update Container Image'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group "$ACR_RESOURCE_GROUP" --query "loginServer" --output tsv)
                echo "Updating image in ${{ parameters.environment }} environment..."
                echo "Image: ${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
                
                set +e
                OUTPUT=$(az webapp config container set \
                  --name "$APP_NAME" \
                  --resource-group "$RESOURCE_GROUP" \
                  --container-image-name "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}" \
                  --container-registry-url "https://${ACR_LOGIN_SERVER}" 2>&1)
                STATUS=$?
                set -euo pipefail

                echo "$OUTPUT"

                if [ $STATUS -ne 0 ]; then
                  echo "✗ Failed to update container image" >&2
                  exit $STATUS
                fi

                if echo "$OUTPUT" | grep -q "ERROR:"; then
                  echo "✗ Encountered Azure CLI error while updating container image" >&2
                  exit 1
                fi

                echo "✓ Container image updated successfully"
            env:
              APP_NAME: $(APP_NAME)
              RESOURCE_GROUP: $(RESOURCE_GROUP)
              ACR_NAME: $(ACR_NAME)
              ACR_RESOURCE_GROUP: $(ACR_RESOURCE_GROUP)
              IMAGE_NAME: $(imageName)
              IMAGE_TAG: $(imageTag)

          - task: AzureCLI@2
            displayName: 'Restart Web App'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                echo "Restarting webapp ${APP_NAME}..."
                az webapp restart --name "$APP_NAME" --resource-group "$RESOURCE_GROUP"
                echo "✓ Webapp restarted successfully"
            env:
              APP_NAME: $(APP_NAME)
              RESOURCE_GROUP: $(RESOURCE_GROUP)

          - task: AzureCLI@2
            displayName: 'Verify Deployment'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                echo "Verifying deployment status..."
                
                ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group "$ACR_RESOURCE_GROUP" --query "loginServer" --output tsv)
                
                # Get the webapp URL
                APP_URL=$(az webapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" --query "defaultHostName" --output tsv)
                echo "Application URL: https://$APP_URL"
                
                # Wait a bit for the app to start
                echo "Waiting for application to start..."
                sleep 30
                
                # Check if the app is responding
                HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$APP_URL/ping || echo "000")
                
                if [ "$HTTP_STATUS" == "200" ]; then
                  echo "✓ Deployment verified successfully - Health check passed"
                else
                  echo "⚠ Warning: Health check returned status $HTTP_STATUS"
                  echo "Please verify the deployment manually"
                fi
                
                echo ""
                echo "================================================"
                echo "Deployment Summary"
                echo "================================================"
                echo "Environment: ${{ parameters.environment }}"
                echo "Image Tag: ${IMAGE_TAG}"
                echo "Resource Group: ${RESOURCE_GROUP}"
                echo "App Service: ${APP_NAME}"
                echo "Image: ${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
                echo "URL: https://$APP_URL"
                echo "================================================"
            env:
              APP_NAME: $(APP_NAME)
              RESOURCE_GROUP: $(RESOURCE_GROUP)
              IMAGE_TAG: $(imageTag)
              ACR_NAME: $(ACR_NAME)
              ACR_RESOURCE_GROUP: $(ACR_RESOURCE_GROUP)
              IMAGE_NAME: $(imageName)
