"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const arm_networkanalytics_1 = require("@azure/arm-networkanalytics");
const identity_1 = require("@azure/identity");
const dotenv = tslib_1.__importStar(require("dotenv"));
dotenv.config();
/**
 * This sample demonstrates how to Initiate key rotation on Data Product.
 *
 * @summary Initiate key rotation on Data Product.
 * x-ms-original-file: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataProducts_RotateKey_MaximumSet_Gen.json
 */
async function dataProductsRotateKeyMaximumSetGen() {
    const subscriptionId = process.env["NETWORKANALYTICS_SUBSCRIPTION_ID"] ||
        "00000000-0000-0000-0000-00000000000";
    const resourceGroupName = process.env["NETWORKANALYTICS_RESOURCE_GROUP"] || "aoiresourceGroupName";
    const dataProductName = "dataproduct01";
    const body = {
        keyVaultUrl: "https://myKeyVault.vault.azure.net"
    };
    const credential = new identity_1.DefaultAzureCredential();
    const client = new arm_networkanalytics_1.MicrosoftNetworkAnalytics(credential, subscriptionId);
    const result = await client.dataProducts.rotateKey(resourceGroupName, dataProductName, body);
    console.log(result);
}
/**
 * This sample demonstrates how to Initiate key rotation on Data Product.
 *
 * @summary Initiate key rotation on Data Product.
 * x-ms-original-file: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataProducts_RotateKey_MinimumSet_Gen.json
 */
async function dataProductsRotateKeyMaximumSetGenGeneratedByMinimumSetRuleMinimumSetGen() {
    const subscriptionId = process.env["NETWORKANALYTICS_SUBSCRIPTION_ID"] ||
        "00000000-0000-0000-0000-00000000000";
    const resourceGroupName = process.env["NETWORKANALYTICS_RESOURCE_GROUP"] || "aoiresourceGroupName";
    const dataProductName = "dataproduct01";
    const body = {
        keyVaultUrl: "https://myKeyVault.vault.azure.net"
    };
    const credential = new identity_1.DefaultAzureCredential();
    const client = new arm_networkanalytics_1.MicrosoftNetworkAnalytics(credential, subscriptionId);
    const result = await client.dataProducts.rotateKey(resourceGroupName, dataProductName, body);
    console.log(result);
}
async function main() {
    dataProductsRotateKeyMaximumSetGen();
    dataProductsRotateKeyMaximumSetGenGeneratedByMinimumSetRuleMinimumSetGen();
}
main().catch(console.error);
//# sourceMappingURL=dataProductsRotateKeySample.js.map