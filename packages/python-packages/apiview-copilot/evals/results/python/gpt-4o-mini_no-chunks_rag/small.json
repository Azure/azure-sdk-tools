[
    {
        "testcase": "few_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the __init__ constructor and instead provide a separate factory classmethod (e.g. from_connection_string) that creates an instance from a connection string.",
                    "comment": "The constructor of ImageAnalysisClient in the sync namespace accepts a connection_string argument, which violates the guideline that the __init__ method must not take a connection string."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Remove duplicate model definitions in the aio sub-namespace. The PeopleResult model should be defined only once (in the root models namespace) and reused in both sync and async clients.",
                    "comment": "Defining PeopleResult in the azure.ai.vision.imageanalysis.models.aio namespace duplicates models between sync and async packages, which violates the guideline against duplicating models between the root and aio namespaces."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "general_design=html=general-namespaces-approved-list",
                        "general_design=html=general-namespaces-naming",
                        "python_design=html=python-client-namespace-sync"
                    ],
                    "line_no": 3,
                    "bad_code": "namespace azure.ai.vision.imageanalysis",
                    "suggestion": "Ensure there is a corresponding async namespace 'azure.ai.vision.imageanalysis.aio' with the .aio suffix.",
                    "comment": "The namespace 'azure.ai.vision.imageanalysis' is not listed in the approved namespace list. The namespace does not follow the required format <AZURE>.<group>.<service>. The sync client namespace does not have a corresponding async namespace with the .aio suffix."
                },
                {
                    "rule_ids": [
                        "python_design=html=python-namespaces-async"
                    ],
                    "line_no": 52,
                    "bad_code": "namespace azure.ai.vision.imageanalysis.aio",
                    "suggestion": "Change the namespace to 'azure.ai.vision.imageanalysis.aio' to include the .aio suffix.",
                    "comment": "The async client namespace does not follow the naming convention for async clients."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 102,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.CaptionResult(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'CaptionResult'.",
                    "comment": "The class name 'CaptionResult' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 123,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.CropRegion(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'CropRegion'.",
                    "comment": "The class name 'CropRegion' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 146,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DenseCaption(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'DenseCaption'.",
                    "comment": "The class name 'DenseCaption' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 170,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DenseCaptionsResult(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'DenseCaptionsResult'.",
                    "comment": "The class name 'DenseCaptionsResult' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 190,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DetectedTextBlock(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'DetectedTextBlock'.",
                    "comment": "The class name 'DetectedTextBlock' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DetectedTextLine(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'DetectedTextLine'.",
                    "comment": "The class name 'DetectedTextLine' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 233,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DetectedTextWord(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'DetectedTextWord'.",
                    "comment": "The class name 'DetectedTextWord' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 257,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ImageAnalysisResult(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'ImageAnalysisResult'.",
                    "comment": "The class name 'ImageAnalysisResult' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 293,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ImageBoundingBox(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'ImageBoundingBox'.",
                    "comment": "The class name 'ImageBoundingBox' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 318,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ImageMetadata(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'ImageMetadata'.",
                    "comment": "The class name 'ImageMetadata' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 340,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ImagePoint(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'ImagePoint'.",
                    "comment": "The class name 'ImagePoint' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 362,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ObjectsResult(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'ObjectsResult'.",
                    "comment": "The class name 'ObjectsResult' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'PeopleResult'.",
                    "comment": "The class name 'PeopleResult' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 402,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ReadResult(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'ReadResult'.",
                    "comment": "The class name 'ReadResult' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 422,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.SmartCropsResult(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'SmartCropsResult'.",
                    "comment": "The class name 'SmartCropsResult' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 441,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.TagsResult(MutableMapping[str, Any]):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'TagsResult'.",
                    "comment": "The class name 'TagsResult' should be in Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 460,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.VisualFeatures(str, Enum):",
                    "suggestion": "Ensure the class name follows Pascal case, e.g., 'VisualFeatures'.",
                    "comment": "The class name 'VisualFeatures' should be in Pascal case."
                }
            ]
        },
        "total_violations": 2,
        "violations_found": 19,
        "true_positives": 0,
        "false_positives": 19,
        "false_negatives": 2,
        "percent_coverage": 0,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [
            [
                382,
                [
                    "python_design.html#python-models-async"
                ],
                [
                    "python_implementation=html=python-codestyle-type-naming"
                ]
            ]
        ],
        "line_matches_wrong_rule": 1,
        "wrong_line_details": [],
        "similarity": 2,
        "groundedness": 3,
        "groundedness_reason": "The RESPONSE is accurate but includes unsupported additions about naming conventions and violations that are not directly related to the CONTEXT.",
        "overall_score": 0
    },
    {
        "testcase": "many_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the constructor and implement a separate factory method (e.g. from_connection_string) to create the client using a connection string.",
                    "comment": "The constructor must not accept a connection string; using a factory method for connection string support is required by the guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 53,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.AsyncImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client to ImageAnalysisClient (i.e. without the 'Async' prefix) and keep it under the 'azure.ai.vision.imageanalysis.aio' namespace so that both sync and async clients share the same client name.",
                    "comment": "Async and sync clients must share the same client name; adding an 'Async' prefix violates this guideline."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 432,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Move PeopleResult to the common models namespace (azure.ai.vision.imageanalysis.models) instead of duplicating it in the aio sub-namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespaces."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "tags = \"tags\"",
                    "suggestion": "Rename the enum member to use UPPERCASE (e.g., TAGS = \"tags\") in accordance with the guidelines.",
                    "comment": "Enum member names must be in UPPERCASE to comply with naming conventions."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace the get_result/set_result methods with a property (with a getter and setter) to expose the result, for example, using @property and @result.setter.",
                    "comment": "Simple getter and setter functions are discouraged; properties should be used instead."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 413,
                    "bad_code": "def set_result(self, obj) -> None",
                    "suggestion": "Replace the set_result method with a property setter (e.g., @result.setter def result(self, value): ...).",
                    "comment": "Simple setter methods should be implemented as property setters."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to DetectedPerson (using PascalCase) to adhere to type naming conventions.",
                    "comment": "Type names should be in PascalCase; 'detectedPerson' violates this guideline."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-static-methods"
                    ],
                    "line_no": 88,
                    "bad_code": "@staticmethod",
                    "suggestion": "Remove the staticmethod decorator and refactor send_request as an instance method or a module-level function.",
                    "comment": "Static methods are discouraged; module-level functions or instance methods should be used instead."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 30,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "Insert a '*' after the required positional parameters so that all optional parameters are keyword-only. For example:\n\n  def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional operation\u2010specific parameters must be keyword-only."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-constructor-api-version-argument-1"
                    ],
                    "line_no": 54,
                    "bad_code": "def __init__(\n        self, \n        endpoint: str, \n        credential: Union[AzureKeyCredential, AsyncTokenCredential], \n    ) -> None",
                    "suggestion": "Add an optional keyword-only api_version parameter to the async client __init__ signature, for example: \n    def __init__(self, endpoint: str, credential: Union[AzureKeyCredential, AsyncTokenCredential], *, api_version: str = ..., **kwargs: Any) -> None",
                    "comment": "The async client constructor is missing the optional api_version parameter required by the guidelines."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "general_design=html=general-namespaces-approved-list"
                    ],
                    "line_no": 3,
                    "bad_code": "namespace azure.ai.vision.imageanalysis",
                    "suggestion": "Consider using an approved namespace such as 'azure.ai' or restructure the service to fit into an approved namespace.",
                    "comment": "The namespace 'azure.ai.vision.imageanalysis' is not approved according to the approved namespace list for services."
                },
                {
                    "rule_ids": [
                        "python_design=html=python-client-namespace-sync"
                    ],
                    "line_no": 51,
                    "bad_code": "namespace azure.ai.vision.imageanalysis.aio",
                    "suggestion": "Change the namespace to 'azure.ai.vision.imageanalysis.aio' for async clients to follow the naming convention.",
                    "comment": "The async namespace 'azure.ai.vision.imageanalysis.aio' does not follow the correct suffix convention for async clients."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to 'DetectedPerson' to adhere to Pascal case naming conventions.",
                    "comment": "The class name 'detectedPerson' does not follow the Pascal case naming convention."
                }
            ]
        },
        "total_violations": 10,
        "violations_found": 3,
        "true_positives": 1,
        "false_positives": 2,
        "false_negatives": 9,
        "percent_coverage": 10,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 2,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately addressing the rules and violations mentioned without introducing unsupported information or omitting critical details.",
        "overall_score": 10
    },
    {
        "testcase": "no_violations",
        "expected": {
            "status": "Success",
            "violations": []
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "general_design=html=general-namespaces-approved-list",
                        "general_design=html=general-namespaces-naming",
                        "python_design=html=python-client-namespace-sync",
                        "python_design=html=python-client-separate-sync-async"
                    ],
                    "line_no": 3,
                    "bad_code": "namespace azure.ai.vision.imageanalysis",
                    "suggestion": "Ensure the sync and async clients are implemented in separate namespaces.",
                    "comment": "The namespace 'azure.ai.vision.imageanalysis' is not listed in the approved namespace list for services. The namespace does not follow the required format of <AZURE>.<group>.<service>. The namespace for the async client 'azure.ai.vision.imageanalysis.aio' should match the sync client 'azure.ai.vision.imageanalysis'. The sync and async client classes should be separate and not combined in the same namespace."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 101,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.CaptionResult(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'CaptionResult' to 'CaptionResult'.",
                    "comment": "Type name 'CaptionResult' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 122,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.CropRegion(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'CropRegion' to 'CropRegion'.",
                    "comment": "Type name 'CropRegion' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 145,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DenseCaption(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'DenseCaption' to 'DenseCaption'.",
                    "comment": "Type name 'DenseCaption' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 169,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DenseCaptionsResult(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'DenseCaptionsResult' to 'DenseCaptionsResult'.",
                    "comment": "Type name 'DenseCaptionsResult' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 189,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DetectedTextBlock(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'DetectedTextBlock' to 'DetectedTextBlock'.",
                    "comment": "Type name 'DetectedTextBlock' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 208,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DetectedTextLine(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'DetectedTextLine' to 'DetectedTextLine'.",
                    "comment": "Type name 'DetectedTextLine' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 232,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.DetectedTextWord(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'DetectedTextWord' to 'DetectedTextWord'.",
                    "comment": "Type name 'DetectedTextWord' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 256,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ImageAnalysisResult(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'ImageAnalysisResult' to 'ImageAnalysisResult'.",
                    "comment": "Type name 'ImageAnalysisResult' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 292,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ImageBoundingBox(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'ImageBoundingBox' to 'ImageBoundingBox'.",
                    "comment": "Type name 'ImageBoundingBox' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 317,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ImageMetadata(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'ImageMetadata' to 'ImageMetadata'.",
                    "comment": "Type name 'ImageMetadata' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 339,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ImagePoint(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'ImagePoint' to 'ImagePoint'.",
                    "comment": "Type name 'ImagePoint' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 361,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ObjectsResult(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'ObjectsResult' to 'ObjectsResult'.",
                    "comment": "Type name 'ObjectsResult' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 381,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'PeopleResult' to 'PeopleResult'.",
                    "comment": "Type name 'PeopleResult' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 401,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.ReadResult(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'ReadResult' to 'ReadResult'.",
                    "comment": "Type name 'ReadResult' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 421,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.SmartCropsResult(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'SmartCropsResult' to 'SmartCropsResult'.",
                    "comment": "Type name 'SmartCropsResult' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 440,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.TagsResult(MutableMapping[str, Any]):",
                    "suggestion": "Rename 'TagsResult' to 'TagsResult'.",
                    "comment": "Type name 'TagsResult' should use Pascal case."
                },
                {
                    "rule_ids": [
                        "python_implementation=html=python-codestyle-type-naming"
                    ],
                    "line_no": 459,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.VisualFeatures(str, Enum):",
                    "suggestion": "Rename 'VisualFeatures' to 'VisualFeatures'.",
                    "comment": "Type name 'VisualFeatures' should use Pascal case."
                }
            ]
        },
        "total_violations": 0,
        "violations_found": 18,
        "true_positives": 0,
        "false_positives": 18,
        "false_negatives": 0,
        "percent_coverage": 0,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 1,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded and complete, accurately conveying all essential information from the CONTEXT without introducing unsupported details or omitting critical points.",
        "overall_score": 0.0
    },
    {
        "testcase": "multiple_same_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 16,
                    "bad_code": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional operation-specific parameters should be provided as keyword-only arguments. Inserting the '*' after the required parameters forces callers to use parameter names."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 28,
                    "bad_code": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be keyword-only; add '*' after required parameters in the method signature."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 62,
                    "bad_code": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "For async methods, optional parameters must also be keyword-only. Insert '*' to force keyword-only usage."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 74,
                    "bad_code": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be made keyword-only by inserting '*' after the required parameters."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "general_design=html=general-namespaces-approved-list"
                    ],
                    "line_no": 3,
                    "bad_code": "namespace azure.ai.vision.imageanalysis",
                    "suggestion": "Consider changing the namespace to one that is approved, such as 'azure.ai' or 'azure.vision'.",
                    "comment": "The namespace 'azure.ai.vision.imageanalysis' is not part of the approved namespace list. It should adhere to the guidelines for namespace usage."
                },
                {
                    "rule_ids": [
                        "python_design=html=python-client-separate-sync-async"
                    ],
                    "line_no": 5,
                    "bad_code": "class azure.ai.vision.imageanalysis.ImageAnalysisClient(ImageAnalysisClient): implements ContextManager",
                    "suggestion": "Rename the async class to 'ImageAnalysisAsyncClient' and ensure it does not conflict with the sync client.",
                    "comment": "The same class name 'ImageAnalysisClient' is used for both sync and async clients, violating the guideline to provide separate client classes for synchronous and asynchronous operations."
                },
                {
                    "rule_ids": [
                        "python_design=html=python-client-sync-async-separate-clients"
                    ],
                    "line_no": 51,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.ImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client class to 'ImageAnalysisAsyncClient' to maintain distinction.",
                    "comment": "The async client should have a distinct class name from the sync client to comply with the guidelines for separate sync and async clients."
                },
                {
                    "rule_ids": [
                        "python_design=html=python-commonlib-minimize-code"
                    ],
                    "line_no": 97,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.CaptionResult(MutableMapping[str, Any]):",
                    "suggestion": "Evaluate whether this class needs to exist separately or can be merged with other functionalities to minimize code.",
                    "comment": "The class seems to be designed to extend MutableMapping without any additional business logic or structure, which may not be necessary as a separate class."
                }
            ]
        },
        "total_violations": 4,
        "violations_found": 4,
        "true_positives": 0,
        "false_positives": 4,
        "false_negatives": 4,
        "percent_coverage": 0,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 1,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE accurately reflects the guidelines and issues mentioned in the CONTEXT without adding unsupported details or omitting essential information.",
        "overall_score": 0
    },
    {
        "average_score": 2.5,
        "total_evals": 4
    }
]