{"query": "title: Does typespec allow negative lookaheads in name validation?\n\nquestion: Hi Team,\nDoes typespec allow negative lookahead for validating names? If not can you share the limitations?\nHere is the pattern we are trying to implement:\n- Length - 4 - 64\n- Alphanumerics and hyphens\n- Can't end with period. Start with a letter\n- Can't start or end with hyphen. Can't us consecutive hyphens\n- Can have spaces but not at the start or end of a name.\n```\nmodel StorageDiscoveryScope {\n@doc(\"Display name of the collection\")\n@pattern(\"^(?! )[a-zA-Z0-9]+(?:[ -][a-zA-Z0-9]+)*(?<! )$\")\n@minLength(4)\n@maxLength(64)\ndisplayName: string;\n```", "ground_truth": "no, only simple syntax same as openapi. Documented on the `@pattern` decorator https://typespec.io/docs/standard-library/built-in-decorators/#@pattern\nnote that `@pattern` is also just documentation purpose from the point of view of SDK(it won't validate regardless), you are still free to add extra validation on your side and document those restriction in the property doc", "response": "No, TypeSpec does not currently support negative lookaheads (or any lookaround, such as lookbehind or lookahead, positive or negative) in the regular expressions provided to the `@pattern` decorator. According to the TypeSpec documentation, the regex syntax allowed for `@pattern` is intentionally limited for portability and consistency: it supports alternations (`|`), quantifiers (`?`, `*`, `+`, `{ }`), wildcard (`.`), and grouping parentheses. Advanced features like look-around, capture groups, and references are not supported.\n\n**Limitations:**\n- Negative lookahead (`(?!...)`) and other lookarounds will not work and will either be ignored or could result in a validation error or warning depending on the TypeSpec version you use.\n- If you attempt to use a pattern containing lookahead or lookbehind in `@pattern`, it will not be enforced as you expect. As of recent TypeSpec versions (v0.63+), there is stricter regex validation, and you may get a warning for using unsupported regex features.\n\n**How to approach complex name validation?**\nYou will need to break down your validation into supported regex fragments, possibly combining several `@pattern`, `@minLength`, and `@maxLength` decorators to get as close as possible to your requirements. Some rules (like 'can't end with a period', 'can't use consecutive hyphens') may not be fully enforceable via TypeSpec's current regex support. In such cases, you should:\n- Document these constraints clearly using the `@doc` decorator.\n- Enforce the rules in service-side validation (backend implementation), since OpenAPI/TypeSpec cannot fully express them.\n\n**Example (Best effort with current TypeSpec capabilities):**\n```typespec\nmodel StorageDiscoveryScope {\n  @doc(\"Display name of the collection. Name must be 4-64 chars, alphanumerics and hyphens, start with letter, cannot start/end with hyphen or period, cannot have consecutive hyphens, spaces allowed but not at start/end.\")\n  @pattern(\"[a-zA-Z][a-zA-Z0-9 -]*[a-zA-Z0-9]\", \"Must start with a letter and end with alphanumeric. Only letters, numbers, spaces, and hyphens allowed.\")\n  @minLength(4)\n  @maxLength(64)\n  displayName: string;\n}\n```\nThis will enforce basic constraints (start with letter, allowed chars, min/max length), but not negative lookaheads/advanced rules.\n\n**Summary:**\n- TypeSpec `@pattern` does **not** support negative lookaheads or lookarounds.\n- For advanced validation, combine supported regex, min/max length, and clear documentation. Enforce non-expressible rules in your backend.", "context": "", "latency": 47.96630549430847, "response_length": 2526}