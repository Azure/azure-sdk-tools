parameters:
- name: dotnetSdkVersion  
  type: string
  default: '8.0.x'
- name: packageName
  type: string
- name: branch
  type: string
  default: 'main'
- name: language
  type: string
  default: 'Java'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: ${{ parameters.dotnetSdkVersion }}
    installationPath: $(Agent.ToolsDirectory)/dotnet 

- task: DotNetCoreCLI@2
  displayName: New Manifest for tool
  inputs:
    command: custom
    custom: 'new '
    arguments: tool-manifest

- task: DotNetCoreCLI@2
  displayName: Install Playwright CLI
  inputs:
    command: custom
    custom: 'tool '
    arguments: install Microsoft.Playwright.CLI

- task: DotNetCoreCLI@2
  displayName: Build all projects and libraries
  inputs:
    command: 'build'
    projects: 'content-validation.sln'

- task: DotNetCoreCLI@2
  displayName: Run Playwright Install
  inputs:
    command: custom
    custom: 'tool '
    arguments: run playwright install

- task: DotNetCoreCLI@2
  displayName: Get test data source
  env:
    Branch: ${{ parameters.branch }}
    Language: ${{ parameters.language }}
    PackageName: ${{ parameters.packageName }}
  inputs:
    command: 'run'
    workingDirectory: '$(System.DefaultWorkingDirectory)/DataSource'

- task: DotNetCoreCLI@2
  displayName: Run common test case
  inputs:
    command: 'test'
    projects: 'ContentValidation.Test/ContentValidation.Test.csproj'
    arguments: '-e BROWSER=chromium --filter Category=CommonTest'
    testRunTitle: 'Content Validation Testing Start'
  continueOnError: false

- task: DotNetCoreCLI@2
  displayName: Run test case
  inputs:
    command: 'test'
    projects: 'ContentValidation.Test/ContentValidation.Test.csproj'
    arguments: '-e BROWSER=chromium --filter Category=JavaTest'
    testRunTitle: 'Content Validation Testing Start'
  continueOnError: true

- task: DownloadPipelineArtifact@2
  displayName: Download The Last Artifact issues-summary
  inputs:
    buildType: 'specific'
    project: '$(System.TeamProject)'
    pipeline: '$(System.DefinitionName)'
    buildVersionToDownload: 'latestFromBranch'
    allowPartiallySucceededBuilds: true
    allowFailedBuilds: false
    branchName: 'refs/heads/main'
    artifactName: 'issues-summary'
    downloadPath: '$(System.DefaultWorkingDirectory)/Artifacts'
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: Resolve data by report helper
  env:
    PackageName: ${{ parameters.packageName }}
    Language: ${{ parameters.language }}
    GitHubToken: $(GITHUB_PAT)
    Owner: $(GITHUB_OWNER)
    Repo: $(GITHUB_REPO)
  inputs:
    command: 'run'
    workingDirectory: '$(System.DefaultWorkingDirectory)/ReportHelper'

- task: PublishPipelineArtifact@1
  displayName: "Upload pipeline test data"
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/Reports
    artifactName: ${{ parameters.packageName }}
    publishLocation: "pipeline"

# If some rules failed, change the pipeline status to failed.
- task: Bash@3
  displayName: Check the status of test case
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      FILE_PATH="$(System.DefaultWorkingDirectory)/eng/PipelineFailedStatus.txt"

      if [ ! -f "$FILE_PATH" ]; then
        echo "No exception was caught during the test case execution. Please check the test case running results."
        exit 0
      else
        echo "An exception was caught during the test case execution, interrupting subsequent execution. Printing contents and exiting abnormally."
        cat "$FILE_PATH"
        exit 1
      fi