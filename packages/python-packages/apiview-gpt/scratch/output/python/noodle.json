{
    "status": "Error",
    "violations": [
        {
            "rule_ids": [
                "python_design.html#python-client-naming",
                "python_design.html#python-namespaces-async"
            ],
            "line_no": 30,
            "bad_code": "class azure.contoso.NoodleAsyncManager:",
            "suggestion": "class azure.contoso.aio.NoodleAsyncClient:",
            "comment": "The class name should end with a 'Client' suffix. The namespace should have an '.aio' suffix for async clients."
        },
        {
            "rule_ids": [
                "python_design.html#python-client-constructor-policy-arguments"
            ],
            "line_no": 31,
            "bad_code": "async def __init__(self, endpoint, credential, options: dict)",
            "suggestion": "async def __init__(self, endpoint, credential, **kwargs)",
            "comment": "The class should accept optional default request options as keyword arguments and pass them along to its pipeline policies."
        },
        {
            "rule_ids": [
                "python_design.html#python-client-naming"
            ],
            "line_no": 43,
            "bad_code": "class azure.contoso.NoodleManager:",
            "suggestion": "class azure.contoso.NoodleClient:",
            "comment": "Service client types should be named with a Client suffix."
        },
        {
            "rule_ids": [
                "python_design.html#python-client-connection-string"
            ],
            "line_no": 49,
            "bad_code": "connection_string: Optional[str],",
            "suggestion": "Remove the connection_string parameter from the constructor and add a separate factory classmethod from_connection_string to create a client from a connection string.",
            "comment": "The constructor should not take a connection string. Use a separate factory classmethod from_connection_string to create a client from a connection string."
        }
    ]
}