{
    "comments": [
        {
            "rule_ids": [
                "python_design.html#python-client-connection-string"
            ],
            "line_no": 10,
            "bad_code": "         connection_string: Optional[str] = None,",
            "suggestion": "",
            "comment": "The constructor must not accept a connection string. Instead, implement a separate from_connection_string factory method.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-optional-arguments-keyword-only"
            ],
            "line_no": 30,
            "bad_code": "def analyze_from_url(",
            "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
            "comment": "Optional parameters must be keyword-only; add '*' after the required positional parameters.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-optional-arguments-keyword-only"
            ],
            "line_no": 74,
            "bad_code": "async def analyze_from_url(",
            "suggestion": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
            "comment": "Optional parameters must be keyword-only; insert '*' to separate them from required positional arguments.",
            "source": "guideline"
        },
        {
            "rule_ids": [],
            "line_no": 168,
            "bad_code": "    ivar list: List[DenseCaption]",
            "suggestion": "    ivar captions: List[DenseCaption]",
            "comment": "Avoid using built-in names like 'list' for attributes; use a more descriptive name such as 'captions'.",
            "source": "generic"
        },
        {
            "rule_ids": [
                "python_implementation.html#python-codestyle-type-naming"
            ],
            "line_no": 209,
            "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
            "suggestion": "class azure.ai.vision.imageanalysis.models.DetectedPerson(MutableMapping[str, Any]):",
            "comment": "Type names must be in PascalCase. Rename 'detectedPerson' to 'DetectedPerson' to adhere to naming conventions.",
            "source": "merged"
        },
        {
            "rule_ids": [
                "python_implementation.html#python-codestyle-properties"
            ],
            "line_no": 411,
            "bad_code": "    def get_result(self) -> ObjectsResult",
            "suggestion": null,
            "comment": "Avoid using simple getter methods; implement a property instead.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_implementation.html#python-codestyle-properties"
            ],
            "line_no": 412,
            "bad_code": "    def set_result(self, obj) -> None",
            "suggestion": null,
            "comment": "Avoid using simple setter methods; implement a property with a setter instead.",
            "source": "guideline"
        },
        {
            "rule_ids": [],
            "line_no": 498,
            "bad_code": "list: List[DetectedTag]",
            "suggestion": "detected_tags: List[DetectedTag]",
            "comment": "Avoid using a built‚Äêin name as a parameter; rename 'list' to something more descriptive like 'detected_tags'.",
            "source": "generic"
        },
        {
            "rule_ids": [
                "python_design.html#python-models-enum-name-uppercase"
            ],
            "line_no": 517,
            "bad_code": "tags = 'tags'",
            "suggestion": "TAGS = 'tags'",
            "comment": "Enum member names must be uppercase to conform to Python conventions. Change 'tags' to 'TAGS' for consistency.",
            "source": "merged"
        }
    ]
}