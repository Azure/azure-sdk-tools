# External variables:
# ProjectFile - The project to build and test. This variable is defined in pipeline web ui because we want to be able to provide it at queue time and that isn't supported in yaml yet.
# VersioningProps - A collection of extra msbuild versioning properties like OfficialBuildId, PreReleaseVersionLabel, and DotNetFinalVersionKind

trigger:
  - master

variables:
  DotNetCoreSDKVersion: '3.0.100-preview5-011568'
  DotNetCoreRuntimeVersion: '2.1.10'

jobs:
  - job: 'Build'

    pool:
      vmImage: 'vs2017-win2016'

    steps:
      - task: DotNetCoreInstaller@0
        displayName: 'Use .NET Core sdk $(DotNetCoreSDKVersion)'
        inputs:
          version: '$(DotNetCoreSDKVersion)'

      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core runtime $(DotNetCoreRuntimeVersion)"
        inputs:
          packageType: runtime
          version: "$(DotNetCoreRuntimeVersion)"

      - script: 'dotnet pack $(ProjectFile) -o $(Build.ArtifactStagingDirectory) -warnaserror $(VersioningProps)'
        displayName: 'Build and Package'
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0

      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish Artifacts'
        inputs:
          ArtifactName: packages

  - job: 'Test'

    pool:
      vmImage: 'vs2017-win2016'

    steps:
      - task: DotNetCoreInstaller@0
        displayName: 'Use .NET Core sdk $(DotNetCoreSDKVersion)'
        inputs:
          version: '$(DotNetCoreSDKVersion)'

      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core runtime $(DotNetCoreRuntimeVersion)"
        inputs:
          packageType: runtime
          version: "$(DotNetCoreRuntimeVersion)"

      - task: DotNetCoreCLI@2
        displayName: 'Build & Test'
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
        inputs:
          command: test
          projects: '$(ProjectFile)'
          arguments: --logger trx
          publishTestResults: false

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/*.trx'
          testRunTitle: 'Windows DotNet $(DotNetCoreVersion)'
          testResultsFormat: 'VSTest'
          mergeTestResults: true
