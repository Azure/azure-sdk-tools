// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GoTestGenerator from RP agrifood Generate MockTest and SDK example 1`] = `
Object {
  "ze_generated_example_extensions_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_Create() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Create(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Get(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.ExtensionsClientGetResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Update(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.ExtensionsClientUpdateResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Delete(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_ListByFarmBeats() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListByFarmBeats(\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
&armagfood.ExtensionsListByFarmBeatsOptions{ExtensionIDs: []string{},
ExtensionCategories: []string{},
MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}


",
  "ze_generated_example_farmbeatsextensions_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsExtensionsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, nil)
	pager := client.List(&armagfood.FarmBeatsExtensionsListOptions{FarmBeatsExtensionIDs: []string{},
FarmBeatsExtensionNames: []string{},
ExtensionCategories: []string{},
PublisherIDs: []string{},
MaxPageSize: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsExtensionsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, nil)
	res, err := client.Get(ctx,
\\"<farm-beats-extension-id>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.FarmBeatsExtensionsClientGetResult
}


",
  "ze_generated_example_farmbeatsmodels_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Get(ctx,
\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.FarmBeatsModelsClientGetResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
armagfood.FarmBeats{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
Location: to.StringPtr(\\"<location>\\"),
},
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.FarmBeatsModelsClientCreateOrUpdateResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Update(ctx,
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
armagfood.FarmBeatsUpdateRequestModel{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
},
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.FarmBeatsModelsClientUpdateResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Delete(ctx,
\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListBySubscription(&armagfood.FarmBeatsModelsListBySubscriptionOptions{MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListByResourceGroup(\\"<resource-group-name>\\",
&armagfood.FarmBeatsModelsListByResourceGroupOptions{MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}


",
  "ze_generated_example_locations_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleLocationsClient_CheckNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewLocationsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"<name>\\"),
Type: to.StringPtr(\\"<type>\\"),
},
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.LocationsClientCheckNameAvailabilityResult
}


",
  "ze_generated_example_operations_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleOperationsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewOperationsClient(cred, nil)
	pager := client.List(nil)
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}


",
  "zt_generated_mock_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"fmt\\"
	\\"net/http\\"
	\\"os\\"
	\\"runtime/debug\\"
	\\"testing\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\\"
    \\"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
	\\"golang.org/x/net/http2\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



var (
	ctx            context.Context
    options        arm.ClientOptions
	cred           azcore.TokenCredential
	err            error
	mockHost       string
)



func TestExtensions_Create(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Create(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Get(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Update(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Update(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Delete(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Delete(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_ListByFarmBeats(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListByFarmBeats(\\"examples-rg\\",
\\"examples-farmbeatsResourceName\\",
&armagfood.ExtensionsListByFarmBeatsOptions{ExtensionIDs: []string{},
ExtensionCategories: []string{},
MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsExtensions_List(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, &options)
        pager := client.List(&armagfood.FarmBeatsExtensionsListOptions{FarmBeatsExtensionIDs: []string{},
FarmBeatsExtensionNames: []string{},
ExtensionCategories: []string{},
PublisherIDs: []string{},
MaxPageSize: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsExtensions_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, &options)
            res, err := client.Get(ctx,
\\"DTN.ContentServices\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Get(ctx,
\\"examples-rg\\",
\\"examples-farmBeatsResourceName\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_CreateOrUpdate(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.CreateOrUpdate(ctx,
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
armagfood.FarmBeats{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
Location: to.StringPtr(\\"eastus2\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Update(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Update(ctx,
\\"examples-farmBeatsResourceName\\",
\\"examples-rg\\",
armagfood.FarmBeatsUpdateRequestModel{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Delete(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Delete(ctx,
\\"examples-rg\\",
\\"examples-farmBeatsResourceName\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_ListBySubscription(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListBySubscription(&armagfood.FarmBeatsModelsListBySubscriptionOptions{MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsModels_ListByResourceGroup(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListByResourceGroup(\\"examples-rg\\",
&armagfood.FarmBeatsModelsListByResourceGroupOptions{MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestLocations_CheckNameAvailability(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewLocationsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"existingaccountname\\"),
Type: to.StringPtr(\\"Microsoft.AgFoodPlatform/farmBeats\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }

    
    // From example 
    client = armagfood.NewLocationsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err = client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"newaccountname\\"),
Type: to.StringPtr(\\"Microsoft.AgFoodPlatform/farmBeats\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestOperations_List(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewOperationsClient(cred, &options)
        pager := client.List(nil)
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
    if value, ok := os.LookupEnv(key); ok {
        return value
    }
    return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv(\\"AZURE_VIRTUAL_SERVER_HOST\\", \\"https://localhost:8443\\")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf(\\"Failed to configure http2 transport: %v\\", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	
    cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: \\"MockToken\\", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}",
}
`;

exports[`GoTestGenerator from RP signalR Generate scenario test 1`] = `
Object {
  "zt_generated_signalr_live_test.go": "//go:build go1.16
// +build go1.16



package armsignalr_test

import (
	\\"context\\"
	\\"testing\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm\\"
    \\"github.com/Azure/azure-sdk-for-go/sdk/internal/recording\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil\\"
    \\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources\\"
    \\"github.com/stretchr/testify/suite\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr\\"
	\\"reflect\\"
	\\"time\\"
)



type SignalrTestSuite struct {
	suite.Suite

	ctx     context.Context
	cred    azcore.TokenCredential
	options *arm.ClientOptions
    resourceName string
    location string
    resourceGroupName string
    subscriptionId string
}

func (testsuite *SignalrTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred, testsuite.options = testutil.GetCredAndClientOptions(testsuite.T())
        testsuite.resourceName = \\"signalrswaggertest4\\"
        testsuite.location = testutil.GetEnv(\\"LOCATION\\", \\"eastus\\")
        testsuite.resourceGroupName = testutil.GetEnv(\\"RESOURCE_GROUP_NAME\\", \\"\\")
        testsuite.subscriptionId = testutil.GetEnv(\\"AZURE_SUBSCRIPTION_ID\\", \\"\\")

    testutil.StartRecording(testsuite.T(), \\"sdk/resourcemanager//armsignalr/testdata\\")
    resourceGroup, _, err := testutil.CreateResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.location)
	testsuite.Require().NoError(err)
	testsuite.resourceGroupName = *resourceGroup.Name
}

func (testsuite *SignalrTestSuite) TearDownSuite() {
	_, err := testutil.DeleteResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName)
	testsuite.Require().NoError(err)
	testutil.StopRecording(testsuite.T())
}

func TestSignalrTestSuite(t *testing.T) {
	suite.Run(t, new(SignalrTestSuite))
}


func (testsuite *SignalrTestSuite) TestMicrosoftSignalrserviceBasicCrud() {
    resourceName := testsuite.resourceName
var err error
    // From step Generate_Unique_Name
    template:= map[string]interface{}{
\\"$schema\\": \\"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\\",
\\"contentVersion\\": \\"1.0.0.0\\",
\\"outputs\\":map[string]interface{}{
\\"name\\":map[string]interface{}{
\\"type\\": \\"string\\",
\\"value\\": \\"[variables('name').value]\\",
},
\\"resourceName\\":map[string]interface{}{
\\"type\\": \\"string\\",
\\"value\\": \\"[variables('name').value]\\",
},
},
\\"resources\\":[]interface{}{
},
\\"variables\\":map[string]interface{}{
\\"name\\":map[string]interface{}{
\\"type\\": \\"string\\",
\\"metadata\\":map[string]interface{}{
\\"description\\": \\"Name of the SignalR service.\\",
},
\\"value\\": \\"[concat('sw',uniqueString(resourceGroup().id))]\\",
},
},
}
    params:= map[string]interface{}{
    }
    deployment:= armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       armresources.DeploymentModeIncremental.ToPtr(),
		},
	}
    deploymentExtend, err:= testutil.CreateDeployment(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName, \\"Generate_Unique_Name\\", &deployment)
    testsuite.Require().NoError(err)
    name = deploymentExtend.Properties.Outputs[\\"name\\"].(map[string]interface{})[\\"value\\"].(string)
    testsuite.resourceName = deploymentExtend.Properties.Outputs[\\"resourceName\\"].(map[string]interface{})[\\"value\\"].(string)

    
    // From step SignalR_CheckNameAvailability
    signalRClient := armsignalr.NewSignalRClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
                _, err = signalRClient.CheckNameAvailability(testsuite.ctx,
testsuite.location,
&armsignalr.SignalRCheckNameAvailabilityOptions{Parameters: &armsignalr.NameAvailabilityParameters{
Name: to.StringPtr(\\"my-signalr-service\\"),
Type: to.StringPtr(\\"Microsoft.SignalRService/SignalR\\"),
},
})
            testsuite.Require().NoError(err)

    
    // From step SignalR_CreateOrUpdate
                signalRCreateOrUpdatePollerResponse, err:= signalRClient.BeginCreateOrUpdate(testsuite.ctx,
testsuite.resourceGroupName,
testsuite.resourceName,
&armsignalr.SignalRBeginCreateOrUpdateOptions{Parameters: &armsignalr.SignalRResource{
Location: to.StringPtr(testsuite.location),
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
},
Identity: &armsignalr.ManagedIdentity{
Type: armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
},
Kind: armsignalr.ServiceKindSignalR.ToPtr(),
Properties: &armsignalr.SignalRProperties{
Cors: &armsignalr.SignalRCorsSettings{
AllowedOrigins: []*string{
to.StringPtr(\\"https://foo.com\\"),
to.StringPtr(\\"https://bar.com\\")},
},
Features: []*armsignalr.SignalRFeature{
{
Flag: armsignalr.FeatureFlagsServiceMode.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"Serverless\\"),
},
{
Flag: armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"True\\"),
},
{
Flag: armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"False\\"),
}},
NetworkACLs: &armsignalr.SignalRNetworkACLs{
DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
Name: to.StringPtr(\\"mySignalRService.1fa229cd-bf3f-47f0-8c49-afb36723997e\\"),
}},
PublicNetwork: &armsignalr.NetworkACL{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
},
},
Upstream: &armsignalr.ServerlessUpstreamSettings{
Templates: []*armsignalr.UpstreamTemplate{
{
Auth: &armsignalr.UpstreamAuthSettings{
Type: armsignalr.UpstreamAuthTypeManagedIdentity.ToPtr(),
ManagedIdentity: &armsignalr.ManagedIdentitySettings{
Resource: to.StringPtr(\\"api://example\\"),
},
},
CategoryPattern: to.StringPtr(\\"*\\"),
EventPattern: to.StringPtr(\\"connect,disconnect\\"),
HubPattern: to.StringPtr(\\"*\\"),
URLTemplate: to.StringPtr(\\"https://example.com/chat/api/connect\\"),
}},
},
TLS: &armsignalr.SignalRTLSSettings{
ClientCertEnabled: to.BoolPtr(false),
},
},
SKU: &armsignalr.ResourceSKU{
Name: to.StringPtr(\\"Standard_S1\\"),
Capacity: to.Int32Ptr(1),
Tier: armsignalr.SignalRSKUTierStandard.ToPtr(),
},
},
})
            testsuite.Require().NoError(err)
            if recording.GetRecordMode() == recording.PlaybackMode {
                for {
                    _, err = signalRCreateOrUpdatePollerResponse.Poller.Poll(testsuite.ctx)
                    testsuite.Require().NoError(err)
                    if signalRCreateOrUpdatePollerResponse.Poller.Done() {
                        _, err = signalRCreateOrUpdatePollerResponse.Poller.FinalResponse(testsuite.ctx)
                        testsuite.Require().NoError(err)
                        break
                    }
                }
            } else {
                _, err = signalRCreateOrUpdatePollerResponse.PollUntilDone(testsuite.ctx, 10*time.Second)
                testsuite.Require().NoError(err)
            }

    
    // From step SignalR_Get
                _, err = signalRClient.Get(testsuite.ctx,
testsuite.resourceGroupName,
testsuite.resourceName,
nil)
            testsuite.Require().NoError(err)

    
    // From step SignalR_Update
                signalRUpdatePollerResponse, err:= signalRClient.BeginUpdate(testsuite.ctx,
testsuite.resourceGroupName,
testsuite.resourceName,
&armsignalr.SignalRBeginUpdateOptions{Parameters: &armsignalr.SignalRResource{
Location: to.StringPtr(testsuite.location),
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
},
Identity: &armsignalr.ManagedIdentity{
Type: armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
},
Kind: armsignalr.ServiceKindSignalR.ToPtr(),
Properties: &armsignalr.SignalRProperties{
Cors: &armsignalr.SignalRCorsSettings{
AllowedOrigins: []*string{
to.StringPtr(\\"https://foo.com\\"),
to.StringPtr(\\"https://bar.com\\")},
},
Features: []*armsignalr.SignalRFeature{
{
Flag: armsignalr.FeatureFlagsServiceMode.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"Serverless\\"),
},
{
Flag: armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"True\\"),
},
{
Flag: armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"False\\"),
}},
NetworkACLs: &armsignalr.SignalRNetworkACLs{
DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
Name: to.StringPtr(testsuite.resourceName + \\".1fa229cd-bf3f-47f0-8c49-afb36723997e\\"),
}},
PublicNetwork: &armsignalr.NetworkACL{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
},
},
Upstream: &armsignalr.ServerlessUpstreamSettings{
Templates: []*armsignalr.UpstreamTemplate{
{
Auth: &armsignalr.UpstreamAuthSettings{
Type: armsignalr.UpstreamAuthTypeManagedIdentity.ToPtr(),
ManagedIdentity: &armsignalr.ManagedIdentitySettings{
Resource: to.StringPtr(\\"api://example\\"),
},
},
CategoryPattern: to.StringPtr(\\"*\\"),
EventPattern: to.StringPtr(\\"connect,disconnect\\"),
HubPattern: to.StringPtr(\\"*\\"),
URLTemplate: to.StringPtr(\\"https://example.com/chat/api/connect\\"),
}},
},
TLS: &armsignalr.SignalRTLSSettings{
ClientCertEnabled: to.BoolPtr(false),
},
},
SKU: &armsignalr.ResourceSKU{
Name: to.StringPtr(\\"Standard_S1\\"),
Capacity: to.Int32Ptr(1),
Tier: armsignalr.SignalRSKUTierStandard.ToPtr(),
},
},
})
            testsuite.Require().NoError(err)
            if recording.GetRecordMode() == recording.PlaybackMode {
                for {
                    _, err = signalRUpdatePollerResponse.Poller.Poll(testsuite.ctx)
                    testsuite.Require().NoError(err)
                    if signalRUpdatePollerResponse.Poller.Done() {
                        _, err = signalRUpdatePollerResponse.Poller.FinalResponse(testsuite.ctx)
                        testsuite.Require().NoError(err)
                        break
                    }
                }
            } else {
                _, err = signalRUpdatePollerResponse.PollUntilDone(testsuite.ctx, 10*time.Second)
                testsuite.Require().NoError(err)
            }

    
    // From step SignalR_ListKeys
                _, err = signalRClient.ListKeys(testsuite.ctx,
testsuite.resourceGroupName,
testsuite.resourceName,
nil)
            testsuite.Require().NoError(err)

    
    // From step Usages_List
    usagesClient := armsignalr.NewUsagesClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
            usagesListPager:= usagesClient.List(testsuite.location,
nil)
            for usagesListPager.NextPage(testsuite.ctx) {
                err = usagesListPager.Err()
                testsuite.Require().NoError(err)
                for _, v := range usagesListPager.PageResponse().Value {
                    _ = v
                }
            }

    
    // From step SignalR_ListByResourceGroup
            signalRListByResourceGroupPager:= signalRClient.ListByResourceGroup(testsuite.resourceGroupName,
nil)
            for signalRListByResourceGroupPager.NextPage(testsuite.ctx) {
                err = signalRListByResourceGroupPager.Err()
                testsuite.Require().NoError(err)
                for _, v := range signalRListByResourceGroupPager.PageResponse().Value {
                    _ = v
                }
            }

    
    // From step SignalR_ListBySubscription
            signalRListBySubscriptionPager:= signalRClient.ListBySubscription(nil)
            for signalRListBySubscriptionPager.NextPage(testsuite.ctx) {
                err = signalRListBySubscriptionPager.Err()
                testsuite.Require().NoError(err)
                for _, v := range signalRListBySubscriptionPager.PageResponse().Value {
                    _ = v
                }
            }

    
    // From step Operations_List
    operationsClient := armsignalr.NewOperationsClient(testsuite.cred, testsuite.options)
            operationsListPager:= operationsClient.List(nil)
            for operationsListPager.NextPage(testsuite.ctx) {
                err = operationsListPager.Err()
                testsuite.Require().NoError(err)
                for _, v := range operationsListPager.PageResponse().Value {
                    _ = v
                }
            }

    
    // From step SignalR_Delete
                signalRDeletePollerResponse, err:= signalRClient.BeginDelete(testsuite.ctx,
testsuite.resourceGroupName,
testsuite.resourceName,
nil)
            testsuite.Require().NoError(err)
            if recording.GetRecordMode() == recording.PlaybackMode {
                for {
                    _, err = signalRDeletePollerResponse.Poller.Poll(testsuite.ctx)
                    testsuite.Require().NoError(err)
                    if signalRDeletePollerResponse.Poller.Done() {
                        _, err = signalRDeletePollerResponse.Poller.FinalResponse(testsuite.ctx)
                        testsuite.Require().NoError(err)
                        break
                    }
                }
            } else {
                _, err = signalRDeletePollerResponse.PollUntilDone(testsuite.ctx, 10*time.Second)
                testsuite.Require().NoError(err)
            }
}",
}
`;
