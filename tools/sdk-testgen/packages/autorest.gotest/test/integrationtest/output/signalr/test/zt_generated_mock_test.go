//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package test_test

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	client, err := test.NewOperationsClient(cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.OperationList{
			Value: []*test.Operation{
				{
					Name: to.Ptr("Microsoft.SignalRService/SignalR/read"),
					Display: &test.OperationDisplay{
						Description: to.Ptr("View the resource settings and configurations in the management portal or through API"),
						Operation:   to.Ptr("Manage SignalR (read-only)"),
						Provider:    to.Ptr("Microsoft.SignalRService"),
						Resource:    to.Ptr("SignalR"),
					},
					IsDataAction: to.Ptr(false),
					Properties:   &test.OperationProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalR_CheckNameAvailability(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_CheckNameAvailability"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		test.NameAvailabilityParameters{
			Name: to.Ptr("mySignalRService"),
			Type: to.Ptr("Microsoft.SignalRService/SignalR"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json: %v", err)
	}
	// Response check
	exampleRes := test.NameAvailability{
		Message:       to.Ptr("The name is already taken. Please try a different name."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr("AlreadyExists"),
	}
	if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NameAvailability)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalR_ListBySubscription(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListBySubscription"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.ResourceInfoList{
			Value: []*test.ResourceInfo{
				{
					Name:     to.Ptr("mySignalRService"),
					Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Identity: &test.ManagedIdentity{
						Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					Kind: to.Ptr(test.ServiceKindSignalR),
					Properties: &test.SignalRProperties{
						Cors: &test.SignalRCorsSettings{
							AllowedOrigins: []*string{
								to.Ptr("https://foo.com"),
								to.Ptr("https://bar.com")},
						},
						DisableAADAuth:   to.Ptr(false),
						DisableLocalAuth: to.Ptr(false),
						ExternalIP:       to.Ptr("10.0.0.1"),
						Features: []*test.SignalRFeature{
							{
								Flag:       to.Ptr(test.FeatureFlagsServiceMode),
								Properties: map[string]*string{},
								Value:      to.Ptr("Serverless"),
							},
							{
								Flag:       to.Ptr(test.FeatureFlagsEnableConnectivityLogs),
								Properties: map[string]*string{},
								Value:      to.Ptr("True"),
							},
							{
								Flag:       to.Ptr(test.FeatureFlagsEnableMessagingLogs),
								Properties: map[string]*string{},
								Value:      to.Ptr("False"),
							},
							{
								Flag:       to.Ptr(test.FeatureFlagsEnableLiveTrace),
								Properties: map[string]*string{},
								Value:      to.Ptr("False"),
							}},
						HostName: to.Ptr("mysignalrservice.service.signalr.net"),
						NetworkACLs: &test.SignalRNetworkACLs{
							DefaultAction: to.Ptr(test.ACLActionDeny),
							PrivateEndpoints: []*test.PrivateEndpointACL{
								{
									Allow: []*test.SignalRRequestType{
										to.Ptr(test.SignalRRequestTypeServerConnection)},
									Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								}},
							PublicNetwork: &test.NetworkACL{
								Allow: []*test.SignalRRequestType{
									to.Ptr(test.SignalRRequestTypeClientConnection)},
							},
						},
						PrivateEndpointConnections: []*test.PrivateEndpointConnection{
							{
								Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Properties: &test.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &test.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
									},
									PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
								},
								SystemData: &test.SystemData{
									CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									CreatedBy:          to.Ptr("string"),
									CreatedByType:      to.Ptr(test.CreatedByTypeUser),
									LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									LastModifiedBy:     to.Ptr("string"),
									LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
								},
							}},
						ProvisioningState:   to.Ptr(test.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr("Enabled"),
						PublicPort:          to.Ptr[int32](443),
						ServerPort:          to.Ptr[int32](443),
						TLS: &test.SignalRTLSSettings{
							ClientCertEnabled: to.Ptr(true),
						},
						Upstream: &test.ServerlessUpstreamSettings{
							Templates: []*test.UpstreamTemplate{
								{
									URLTemplate: to.Ptr("http://foo.com"),
								}},
						},
						Version: to.Ptr("1.0"),
					},
					SKU: &test.ResourceSKU{
						Name:     to.Ptr("Standard_S1"),
						Capacity: to.Ptr[int32](1),
						Size:     to.Ptr("S1"),
						Tier:     to.Ptr(test.SignalRSKUTierStandard),
					},
					SystemData: &test.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(test.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceInfoList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceInfoList)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalR_ListByResourceGroup(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListByResourceGroup"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.ResourceInfoList{
			Value: []*test.ResourceInfo{
				{
					Name:     to.Ptr("mySignalRService"),
					Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Identity: &test.ManagedIdentity{
						Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					Kind: to.Ptr(test.ServiceKindSignalR),
					Properties: &test.SignalRProperties{
						Cors: &test.SignalRCorsSettings{
							AllowedOrigins: []*string{
								to.Ptr("https://foo.com"),
								to.Ptr("https://bar.com")},
						},
						DisableAADAuth:   to.Ptr(false),
						DisableLocalAuth: to.Ptr(false),
						ExternalIP:       to.Ptr("10.0.0.1"),
						Features: []*test.SignalRFeature{
							{
								Flag:       to.Ptr(test.FeatureFlagsServiceMode),
								Properties: map[string]*string{},
								Value:      to.Ptr("Serverless"),
							},
							{
								Flag:       to.Ptr(test.FeatureFlagsEnableConnectivityLogs),
								Properties: map[string]*string{},
								Value:      to.Ptr("True"),
							},
							{
								Flag:       to.Ptr(test.FeatureFlagsEnableMessagingLogs),
								Properties: map[string]*string{},
								Value:      to.Ptr("False"),
							},
							{
								Flag:       to.Ptr(test.FeatureFlagsEnableLiveTrace),
								Properties: map[string]*string{},
								Value:      to.Ptr("False"),
							}},
						HostName: to.Ptr("mysignalrservice.service.signalr.net"),
						NetworkACLs: &test.SignalRNetworkACLs{
							DefaultAction: to.Ptr(test.ACLActionDeny),
							PrivateEndpoints: []*test.PrivateEndpointACL{
								{
									Allow: []*test.SignalRRequestType{
										to.Ptr(test.SignalRRequestTypeServerConnection)},
									Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								}},
							PublicNetwork: &test.NetworkACL{
								Allow: []*test.SignalRRequestType{
									to.Ptr(test.SignalRRequestTypeClientConnection)},
							},
						},
						PrivateEndpointConnections: []*test.PrivateEndpointConnection{
							{
								Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Properties: &test.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &test.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
									},
									PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
								},
								SystemData: &test.SystemData{
									CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									CreatedBy:          to.Ptr("string"),
									CreatedByType:      to.Ptr(test.CreatedByTypeUser),
									LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									LastModifiedBy:     to.Ptr("string"),
									LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
								},
							}},
						ProvisioningState:   to.Ptr(test.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr("Enabled"),
						PublicPort:          to.Ptr[int32](443),
						ServerPort:          to.Ptr[int32](443),
						TLS: &test.SignalRTLSSettings{
							ClientCertEnabled: to.Ptr(true),
						},
						Upstream: &test.ServerlessUpstreamSettings{
							Templates: []*test.UpstreamTemplate{
								{
									URLTemplate: to.Ptr("http://foo.com"),
								}},
						},
						Version: to.Ptr("1.0"),
					},
					SKU: &test.ResourceSKU{
						Name:     to.Ptr("Standard_S1"),
						Capacity: to.Ptr[int32](1),
						Size:     to.Ptr("S1"),
						Tier:     to.Ptr(test.SignalRSKUTierStandard),
					},
					SystemData: &test.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(test.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceInfoList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceInfoList)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalR_Get(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Get"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &test.ManagedIdentity{
			Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(test.ServiceKindSignalR),
		Properties: &test.SignalRProperties{
			Cors: &test.SignalRCorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*test.SignalRFeature{
				{
					Flag:       to.Ptr(test.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &test.SignalRNetworkACLs{
				DefaultAction: to.Ptr(test.ACLActionDeny),
				PrivateEndpoints: []*test.PrivateEndpointACL{
					{
						Allow: []*test.SignalRRequestType{
							to.Ptr(test.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &test.NetworkACL{
					Allow: []*test.SignalRRequestType{
						to.Ptr(test.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*test.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &test.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &test.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
					},
					SystemData: &test.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(test.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(test.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &test.SignalRTLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &test.ServerlessUpstreamSettings{
				Templates: []*test.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &test.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(test.SignalRSKUTierStandard),
		},
		SystemData: &test.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(test.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ResourceInfo)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalR_CreateOrUpdate(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_CreateOrUpdate"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySignalRService",
		test.ResourceInfo{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &test.ManagedIdentity{
				Type: to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			},
			Kind: to.Ptr(test.ServiceKindSignalR),
			Properties: &test.SignalRProperties{
				Cors: &test.SignalRCorsSettings{
					AllowedOrigins: []*string{
						to.Ptr("https://foo.com"),
						to.Ptr("https://bar.com")},
				},
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				Features: []*test.SignalRFeature{
					{
						Flag:       to.Ptr(test.FeatureFlagsServiceMode),
						Properties: map[string]*string{},
						Value:      to.Ptr("Serverless"),
					},
					{
						Flag:       to.Ptr(test.FeatureFlagsEnableConnectivityLogs),
						Properties: map[string]*string{},
						Value:      to.Ptr("True"),
					},
					{
						Flag:       to.Ptr(test.FeatureFlagsEnableMessagingLogs),
						Properties: map[string]*string{},
						Value:      to.Ptr("False"),
					},
					{
						Flag:       to.Ptr(test.FeatureFlagsEnableLiveTrace),
						Properties: map[string]*string{},
						Value:      to.Ptr("False"),
					}},
				NetworkACLs: &test.SignalRNetworkACLs{
					DefaultAction: to.Ptr(test.ACLActionDeny),
					PrivateEndpoints: []*test.PrivateEndpointACL{
						{
							Allow: []*test.SignalRRequestType{
								to.Ptr(test.SignalRRequestTypeServerConnection)},
							Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &test.NetworkACL{
						Allow: []*test.SignalRRequestType{
							to.Ptr(test.SignalRRequestTypeClientConnection)},
					},
				},
				PublicNetworkAccess: to.Ptr("Enabled"),
				TLS: &test.SignalRTLSSettings{
					ClientCertEnabled: to.Ptr(false),
				},
				Upstream: &test.ServerlessUpstreamSettings{
					Templates: []*test.UpstreamTemplate{
						{
							Auth: &test.UpstreamAuthSettings{
								Type: to.Ptr(test.UpstreamAuthTypeManagedIdentity),
								ManagedIdentity: &test.ManagedIdentitySettings{
									Resource: to.Ptr("api://example"),
								},
							},
							CategoryPattern: to.Ptr("*"),
							EventPattern:    to.Ptr("connect,disconnect"),
							HubPattern:      to.Ptr("*"),
							URLTemplate:     to.Ptr("https://example.com/chat/api/connect"),
						}},
				},
			},
			SKU: &test.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(test.SignalRSKUTierStandard),
			},
		},
		&test.SignalRClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json: %v", err)
	}
	// Response check
	exampleRes := test.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &test.ManagedIdentity{
			Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(test.ServiceKindSignalR),
		Properties: &test.SignalRProperties{
			Cors: &test.SignalRCorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*test.SignalRFeature{
				{
					Flag:       to.Ptr(test.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &test.SignalRNetworkACLs{
				DefaultAction: to.Ptr(test.ACLActionDeny),
				PrivateEndpoints: []*test.PrivateEndpointACL{
					{
						Allow: []*test.SignalRRequestType{
							to.Ptr(test.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &test.NetworkACL{
					Allow: []*test.SignalRRequestType{
						to.Ptr(test.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*test.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &test.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &test.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
					},
					SystemData: &test.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(test.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(test.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &test.SignalRTLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &test.ServerlessUpstreamSettings{
				Templates: []*test.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &test.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(test.SignalRSKUTierStandard),
		},
		SystemData: &test.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(test.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ResourceInfo)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalR_Delete(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Delete"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"mySignalRService",
		&test.SignalRClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json: %v", err)
	}
}

func TestSignalR_Update(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Update"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"mySignalRService",
		test.ResourceInfo{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &test.ManagedIdentity{
				Type: to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			},
			Kind: to.Ptr(test.ServiceKindSignalR),
			Properties: &test.SignalRProperties{
				Cors: &test.SignalRCorsSettings{
					AllowedOrigins: []*string{
						to.Ptr("https://foo.com"),
						to.Ptr("https://bar.com")},
				},
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				Features: []*test.SignalRFeature{
					{
						Flag:       to.Ptr(test.FeatureFlagsServiceMode),
						Properties: map[string]*string{},
						Value:      to.Ptr("Serverless"),
					},
					{
						Flag:       to.Ptr(test.FeatureFlagsEnableConnectivityLogs),
						Properties: map[string]*string{},
						Value:      to.Ptr("True"),
					},
					{
						Flag:       to.Ptr(test.FeatureFlagsEnableMessagingLogs),
						Properties: map[string]*string{},
						Value:      to.Ptr("False"),
					},
					{
						Flag:       to.Ptr(test.FeatureFlagsEnableLiveTrace),
						Properties: map[string]*string{},
						Value:      to.Ptr("False"),
					}},
				NetworkACLs: &test.SignalRNetworkACLs{
					DefaultAction: to.Ptr(test.ACLActionDeny),
					PrivateEndpoints: []*test.PrivateEndpointACL{
						{
							Allow: []*test.SignalRRequestType{
								to.Ptr(test.SignalRRequestTypeServerConnection)},
							Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &test.NetworkACL{
						Allow: []*test.SignalRRequestType{
							to.Ptr(test.SignalRRequestTypeClientConnection)},
					},
				},
				PublicNetworkAccess: to.Ptr("Enabled"),
				TLS: &test.SignalRTLSSettings{
					ClientCertEnabled: to.Ptr(false),
				},
				Upstream: &test.ServerlessUpstreamSettings{
					Templates: []*test.UpstreamTemplate{
						{
							Auth: &test.UpstreamAuthSettings{
								Type: to.Ptr(test.UpstreamAuthTypeManagedIdentity),
								ManagedIdentity: &test.ManagedIdentitySettings{
									Resource: to.Ptr("api://example"),
								},
							},
							CategoryPattern: to.Ptr("*"),
							EventPattern:    to.Ptr("connect,disconnect"),
							HubPattern:      to.Ptr("*"),
							URLTemplate:     to.Ptr("https://example.com/chat/api/connect"),
						}},
				},
			},
			SKU: &test.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(test.SignalRSKUTierStandard),
			},
		},
		&test.SignalRClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json: %v", err)
	}
	// Response check
	exampleRes := test.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &test.ManagedIdentity{
			Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(test.ServiceKindSignalR),
		Properties: &test.SignalRProperties{
			Cors: &test.SignalRCorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*test.SignalRFeature{
				{
					Flag:       to.Ptr(test.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(test.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &test.SignalRNetworkACLs{
				DefaultAction: to.Ptr(test.ACLActionDeny),
				PrivateEndpoints: []*test.PrivateEndpointACL{
					{
						Allow: []*test.SignalRRequestType{
							to.Ptr(test.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &test.NetworkACL{
					Allow: []*test.SignalRRequestType{
						to.Ptr(test.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*test.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &test.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &test.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
					},
					SystemData: &test.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(test.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(test.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &test.SignalRTLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &test.ServerlessUpstreamSettings{
				Templates: []*test.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &test.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(test.SignalRSKUTierStandard),
		},
		SystemData: &test.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(test.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ResourceInfo)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalR_ListKeys(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListKeys"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListKeys(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json: %v", err)
	}
	// Response check
	exampleRes := test.SignalRKeys{}
	if !reflect.DeepEqual(exampleRes, res.SignalRKeys) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SignalRKeys)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalR_RegenerateKey(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_RegenerateKey"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRegenerateKey(ctx,
		"myResourceGroup",
		"mySignalRService",
		test.RegenerateKeyParameters{
			KeyType: to.Ptr(test.KeyTypePrimary),
		},
		&test.SignalRClientBeginRegenerateKeyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json: %v", err)
	}
}

func TestSignalR_Restart(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Restart"},
	})
	client, err := test.NewSignalRClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"mySignalRService",
		&test.SignalRClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json: %v", err)
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usages_List"},
	})
	client, err := test.NewUsagesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.SignalRUsageList{
			Value: []*test.SignalRUsage{
				{
					Name: &test.SignalRUsageName{
						LocalizedValue: to.Ptr("Usage1"),
						Value:          to.Ptr("Usage1"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage1"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr("Count"),
				},
				{
					Name: &test.SignalRUsageName{
						LocalizedValue: to.Ptr("Usage2"),
						Value:          to.Ptr("Usage2"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage2"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SignalRUsageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SignalRUsageList)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalRPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_List"},
	})
	client, err := test.NewSignalRPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("myResourceGroup",
		"mySignalRService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.PrivateEndpointConnectionList{
			Value: []*test.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &test.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &test.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
					},
					SystemData: &test.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(test.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionList)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalRPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Get"},
	})
	client, err := test.NewSignalRPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.PrivateEndpointConnection{
		Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Properties: &test.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &test.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
		},
		SystemData: &test.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(test.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalRPrivateEndpointConnections_Update(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Update"},
	})
	client, err := test.NewSignalRPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Update(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		test.PrivateEndpointConnection{
			Properties: &test.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &test.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json: %v", err)
	}
	// Response check
	exampleRes := test.PrivateEndpointConnection{
		Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Properties: &test.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &test.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &test.PrivateLinkServiceConnectionState{
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(test.PrivateLinkServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
		},
		SystemData: &test.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(test.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(test.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalRPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Delete"},
	})
	client, err := test.NewSignalRPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		&test.SignalRPrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json: %v", err)
	}
}

func TestSignalRPrivateLinkResources_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateLinkResources_List"},
	})
	client, err := test.NewSignalRPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("myResourceGroup",
		"mySignalRService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.PrivateLinkResourceList{
			Value: []*test.PrivateLinkResource{
				{
					Name: to.Ptr("myPrivateLink"),
					Type: to.Ptr("privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateLinkResources/myPrivateLink"),
					Properties: &test.PrivateLinkResourceProperties{
						GroupID: to.Ptr("signalr"),
						RequiredMembers: []*string{
							to.Ptr("signalr")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.service.signalr.net")},
						ShareablePrivateLinkResourceTypes: []*test.ShareablePrivateLinkResourceType{
							{
								Name: to.Ptr("site"),
								Properties: &test.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.Web/sites"),
									Description: to.Ptr("Azure App Service can be used as an upstream"),
									GroupID:     to.Ptr("sites"),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalRSharedPrivateLinkResources_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_List"},
	})
	client, err := test.NewSignalRSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("myResourceGroup",
		"mySignalRService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.SharedPrivateLinkResourceList{
			Value: []*test.SharedPrivateLinkResource{
				{
					Name: to.Ptr("upstream"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
					Properties: &test.SharedPrivateLinkResourceProperties{
						GroupID:               to.Ptr("sites"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
						ProvisioningState:     to.Ptr(test.ProvisioningStateSucceeded),
						RequestMessage:        to.Ptr("Please approve"),
						Status:                to.Ptr(test.SharedPrivateLinkResourceStatusApproved),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedPrivateLinkResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedPrivateLinkResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalRSharedPrivateLinkResources_Get(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_Get"},
	})
	client, err := test.NewSignalRSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.SharedPrivateLinkResource{
		Name: to.Ptr("upstream"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
		Properties: &test.SharedPrivateLinkResourceProperties{
			GroupID:               to.Ptr("sites"),
			PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
			ProvisioningState:     to.Ptr(test.ProvisioningStateSucceeded),
			RequestMessage:        to.Ptr("Please approve"),
			Status:                to.Ptr(test.SharedPrivateLinkResourceStatusApproved),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalRSharedPrivateLinkResources_CreateOrUpdate(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_CreateOrUpdate"},
	})
	client, err := test.NewSignalRSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		test.SharedPrivateLinkResource{
			Properties: &test.SharedPrivateLinkResourceProperties{
				GroupID:               to.Ptr("sites"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				RequestMessage:        to.Ptr("Please approve"),
			},
		},
		&test.SignalRSharedPrivateLinkResourcesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json: %v", err)
	}
	// Response check
	exampleRes := test.SharedPrivateLinkResource{
		Name: to.Ptr("upstream"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
		Properties: &test.SharedPrivateLinkResourceProperties{
			GroupID:               to.Ptr("sites"),
			PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
			ProvisioningState:     to.Ptr(test.ProvisioningStateSucceeded),
			RequestMessage:        to.Ptr("Please approve"),
			Status:                to.Ptr(test.SharedPrivateLinkResourceStatusApproved),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
		t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSignalRSharedPrivateLinkResources_Delete(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_Delete"},
	})
	client, err := test.NewSignalRSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		&test.SignalRSharedPrivateLinkResourcesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
