//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package test_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServices_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ServiceResource{
			Name:     to.StringPtr("myservice"),
			Type:     to.StringPtr("Microsoft.AppPlatform/Spring"),
			ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &test.ClusterResourceProperties{
				NetworkProfile: &test.NetworkProfile{
					OutboundIPs: &test.NetworkProfileOutboundIPs{
						PublicIPs: []*string{
							to.StringPtr("20.39.3.173"),
							to.StringPtr("40.64.67.13")},
					},
					RequiredTraffics: []*test.RequiredTraffic{
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(443),
							Protocol: to.StringPtr("TCP"),
						},
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(1194),
							Protocol: to.StringPtr("UDP"),
						},
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(9000),
							Protocol: to.StringPtr("TCP"),
						}},
				},
				ProvisioningState: test.ProvisioningStateSucceeded.ToPtr(),
				ServiceID:         to.StringPtr("12345678abcd1234abcd12345678abcd"),
			},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		test.ServiceResource{
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &test.ClusterResourceProperties{},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ServiceResource{
			Name:     to.StringPtr("myservice"),
			Type:     to.StringPtr("Microsoft.AppPlatform/Spring"),
			ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &test.ClusterResourceProperties{
				NetworkProfile: &test.NetworkProfile{
					OutboundIPs: &test.NetworkProfileOutboundIPs{
						PublicIPs: []*string{
							to.StringPtr("20.39.3.173"),
							to.StringPtr("40.64.67.13")},
					},
					RequiredTraffics: []*test.RequiredTraffic{
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(443),
							Protocol: to.StringPtr("TCP"),
						},
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(1194),
							Protocol: to.StringPtr("UDP"),
						},
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(9000),
							Protocol: to.StringPtr("TCP"),
						}},
				},
				ProvisioningState: test.ProvisioningStateSucceeded.ToPtr(),
				ServiceID:         to.StringPtr("12345678abcd1234abcd12345678abcd"),
			},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate_VNetInjection"},
	})
	client = test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		test.ServiceResource{
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &test.ClusterResourceProperties{
				NetworkProfile: &test.NetworkProfile{
					AppNetworkResourceGroup:            to.StringPtr("my-app-network-rg"),
					AppSubnetID:                        to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
					ServiceCidr:                        to.StringPtr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
					ServiceRuntimeNetworkResourceGroup: to.StringPtr("my-service-runtime-network-rg"),
					ServiceRuntimeSubnetID:             to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
				},
			},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ServiceResource{
			Name:     to.StringPtr("myservice"),
			Type:     to.StringPtr("Microsoft.AppPlatform/Spring"),
			ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &test.ClusterResourceProperties{
				NetworkProfile: &test.NetworkProfile{
					AppNetworkResourceGroup: to.StringPtr("my-app-network-rg"),
					AppSubnetID:             to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
					OutboundIPs: &test.NetworkProfileOutboundIPs{
						PublicIPs: []*string{
							to.StringPtr("40.64.67.13")},
					},
					RequiredTraffics: []*test.RequiredTraffic{
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(443),
							Protocol: to.StringPtr("TCP"),
						},
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(1194),
							Protocol: to.StringPtr("UDP"),
						},
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(9000),
							Protocol: to.StringPtr("TCP"),
						}},
					ServiceCidr:                        to.StringPtr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
					ServiceRuntimeNetworkResourceGroup: to.StringPtr("my-service-runtime-network-rg"),
					ServiceRuntimeSubnetID:             to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
				},
				ProvisioningState: test.ProvisioningStateSucceeded.ToPtr(),
				ServiceID:         to.StringPtr("12345678abcd1234abcd12345678abcd"),
			},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json: %v", err)
	}
}

func TestServices_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		test.ServiceResource{
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &test.ClusterResourceProperties{},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ServiceResource{
			Name:     to.StringPtr("myservice"),
			Type:     to.StringPtr("Microsoft.AppPlatform/Spring"),
			ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &test.ClusterResourceProperties{
				NetworkProfile: &test.NetworkProfile{
					OutboundIPs: &test.NetworkProfileOutboundIPs{
						PublicIPs: []*string{
							to.StringPtr("20.39.3.173"),
							to.StringPtr("40.64.67.13")},
					},
					RequiredTraffics: []*test.RequiredTraffic{
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(443),
							Protocol: to.StringPtr("TCP"),
						},
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(1194),
							Protocol: to.StringPtr("UDP"),
						},
						{
							Direction: test.TrafficDirectionOutbound.ToPtr(),
							IPs: []*string{
								to.StringPtr("20.62.211.25"),
								to.StringPtr("52.188.47.226")},
							Port:     to.Int32Ptr(9000),
							Protocol: to.StringPtr("TCP"),
						}},
				},
				ProvisioningState: test.ProvisioningStateSucceeded.ToPtr(),
				ServiceID:         to.StringPtr("12345678abcd1234abcd12345678abcd"),
			},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_ListTestKeys(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListTestKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_ListTestKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListTestKeys(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListTestKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Keys{
			Enabled:               to.BoolPtr(true),
			PrimaryKey:            to.StringPtr("<primaryKey>"),
			PrimaryTestEndpoint:   to.StringPtr("<primaryTestEndpoint>"),
			SecondaryKey:          to.StringPtr("<secondaryKey>"),
			SecondaryTestEndpoint: to.StringPtr("<secondaryTestEndpoint>"),
		}
		if !reflect.DeepEqual(exampleRes, res.Keys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Keys)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListTestKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_RegenerateTestKey(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_RegenerateTestKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_RegenerateTestKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.RegenerateTestKey(ctx,
		"myResourceGroup",
		"myservice",
		test.RegenerateTestKeyRequestPayload{
			KeyType: test.TestKeyTypePrimary.ToPtr(),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_RegenerateTestKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Keys{
			Enabled:               to.BoolPtr(true),
			PrimaryKey:            to.StringPtr("<primaryKey>"),
			PrimaryTestEndpoint:   to.StringPtr("<primaryTestEndpoint>"),
			SecondaryKey:          to.StringPtr("<secondaryKey>"),
			SecondaryTestEndpoint: to.StringPtr("<secondaryTestEndpoint>"),
		}
		if !reflect.DeepEqual(exampleRes, res.Keys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Keys)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_RegenerateTestKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_DisableTestEndpoint(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_DisableTestEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_DisableTestEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.DisableTestEndpoint(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_DisableTestEndpoint.json: %v", err)
	}
}

func TestServices_EnableTestEndpoint(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_EnableTestEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_EnableTestEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.EnableTestEndpoint(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_EnableTestEndpoint.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.Keys{
			Enabled:               to.BoolPtr(true),
			PrimaryKey:            to.StringPtr("<primaryKey>"),
			PrimaryTestEndpoint:   to.StringPtr("<primaryTestEndpoint>"),
			SecondaryKey:          to.StringPtr("<secondaryKey>"),
			SecondaryTestEndpoint: to.StringPtr("<secondaryTestEndpoint>"),
		}
		if !reflect.DeepEqual(exampleRes, res.Keys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Keys)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_EnableTestEndpoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		test.NameAvailabilityParameters{
			Name: to.StringPtr("myservice"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.NameAvailability{
			Message:       to.StringPtr("The name is already used."),
			NameAvailable: to.BoolPtr(false),
			Reason:        to.StringPtr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_ListBySubscription(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListBySubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ServiceResourceList{
				Value: []*test.ServiceResource{
					{
						Name:     to.StringPtr("myservice"),
						Type:     to.StringPtr("Microsoft.AppPlatform/Spring"),
						ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
						Location: to.StringPtr("eastus"),
						Tags: map[string]*string{
							"key1": to.StringPtr("value1"),
						},
						Properties: &test.ClusterResourceProperties{
							NetworkProfile: &test.NetworkProfile{
								OutboundIPs: &test.NetworkProfileOutboundIPs{
									PublicIPs: []*string{
										to.StringPtr("20.39.3.173"),
										to.StringPtr("40.64.67.13")},
								},
								RequiredTraffics: []*test.RequiredTraffic{
									{
										Direction: test.TrafficDirectionOutbound.ToPtr(),
										IPs: []*string{
											to.StringPtr("20.62.211.25"),
											to.StringPtr("52.188.47.226")},
										Port:     to.Int32Ptr(443),
										Protocol: to.StringPtr("TCP"),
									},
									{
										Direction: test.TrafficDirectionOutbound.ToPtr(),
										IPs: []*string{
											to.StringPtr("20.62.211.25"),
											to.StringPtr("52.188.47.226")},
										Port:     to.Int32Ptr(1194),
										Protocol: to.StringPtr("UDP"),
									},
									{
										Direction: test.TrafficDirectionOutbound.ToPtr(),
										IPs: []*string{
											to.StringPtr("20.62.211.25"),
											to.StringPtr("52.188.47.226")},
										Port:     to.Int32Ptr(9000),
										Protocol: to.StringPtr("TCP"),
									}},
							},
							ProvisioningState: test.ProvisioningStateSucceeded.ToPtr(),
							ServiceID:         to.StringPtr("12345678abcd1234abcd12345678abcd"),
						},
						SKU: &test.SKU{
							Name: to.StringPtr("S0"),
							Tier: to.StringPtr("Standard"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ServiceResourceList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ServiceResourceList)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ServiceResourceList{
				Value: []*test.ServiceResource{
					{
						Name:     to.StringPtr("myservice"),
						Type:     to.StringPtr("Microsoft.AppPlatform/Spring"),
						ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
						Location: to.StringPtr("eastus"),
						Tags: map[string]*string{
							"key1": to.StringPtr("value1"),
						},
						Properties: &test.ClusterResourceProperties{
							NetworkProfile: &test.NetworkProfile{
								OutboundIPs: &test.NetworkProfileOutboundIPs{
									PublicIPs: []*string{
										to.StringPtr("20.39.3.173"),
										to.StringPtr("40.64.67.13")},
								},
								RequiredTraffics: []*test.RequiredTraffic{
									{
										Direction: test.TrafficDirectionOutbound.ToPtr(),
										IPs: []*string{
											to.StringPtr("20.62.211.25"),
											to.StringPtr("52.188.47.226")},
										Port:     to.Int32Ptr(443),
										Protocol: to.StringPtr("TCP"),
									},
									{
										Direction: test.TrafficDirectionOutbound.ToPtr(),
										IPs: []*string{
											to.StringPtr("20.62.211.25"),
											to.StringPtr("52.188.47.226")},
										Port:     to.Int32Ptr(1194),
										Protocol: to.StringPtr("UDP"),
									},
									{
										Direction: test.TrafficDirectionOutbound.ToPtr(),
										IPs: []*string{
											to.StringPtr("20.62.211.25"),
											to.StringPtr("52.188.47.226")},
										Port:     to.Int32Ptr(9000),
										Protocol: to.StringPtr("TCP"),
									}},
							},
							ProvisioningState: test.ProvisioningStateSucceeded.ToPtr(),
							ServiceID:         to.StringPtr("12345678abcd1234abcd12345678abcd"),
						},
						SKU: &test.SKU{
							Name: to.StringPtr("S0"),
							Tier: to.StringPtr("Standard"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ServiceResourceList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ServiceResourceList)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestConfigServers_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ConfigServerResource{
			Name: to.StringPtr("default"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/configServers"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						Label: to.StringPtr("master"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
					},
				},
				ProvisioningState: test.ConfigServerStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigServerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigServers_UpdatePut(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_UpdatePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		test.ConfigServerResource{
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						Label: to.StringPtr("master"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ConfigServerResource{
			Name: to.StringPtr("default"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/configServers"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						Label: to.StringPtr("master"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
					},
				},
				ProvisioningState: test.ConfigServerStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigServerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigServers_UpdatePatch(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_UpdatePatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePatch(ctx,
		"myResourceGroup",
		"myservice",
		test.ConfigServerResource{
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						Label: to.StringPtr("master"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ConfigServerResource{
			Name: to.StringPtr("default"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/configServers"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						Label: to.StringPtr("master"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
					},
				},
				ProvisioningState: test.ConfigServerStateSucceeded.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigServerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigServers_Validate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_Validate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginValidate(ctx,
		"myResourceGroup",
		"myservice",
		test.ConfigServerSettings{
			GitProperty: &test.ConfigServerGitProperty{
				Label: to.StringPtr("master"),
				SearchPaths: []*string{
					to.StringPtr("/")},
				URI: to.StringPtr("https://github.com/fake-user/fake-repository.git"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.ConfigServerSettingsValidateResult{
			IsValid: to.BoolPtr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigServerSettingsValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigServerSettingsValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringSettings_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.MonitoringSettingResource{
			Name: to.StringPtr("default"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/monitoringSettings"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
			Properties: &test.MonitoringSettingProperties{
				AppInsightsAgentVersions: &test.ApplicationInsightsAgentVersions{
					Java: to.StringPtr("3.0.0"),
				},
				AppInsightsInstrumentationKey: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Float64Ptr(10),
				ProvisioningState:             test.MonitoringSettingStateSucceeded.ToPtr(),
				TraceEnabled:                  to.BoolPtr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringSettings_UpdatePut(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_UpdatePut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		test.MonitoringSettingResource{
			Properties: &test.MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Float64Ptr(10),
				TraceEnabled:                  to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.MonitoringSettingResource{
			Name: to.StringPtr("default"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/monitoringSettings"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
			Properties: &test.MonitoringSettingProperties{
				AppInsightsAgentVersions: &test.ApplicationInsightsAgentVersions{
					Java: to.StringPtr("3.0.0"),
				},
				AppInsightsInstrumentationKey: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Float64Ptr(10),
				ProvisioningState:             test.MonitoringSettingStateSucceeded.ToPtr(),
				TraceEnabled:                  to.BoolPtr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitoringSettings_UpdatePatch(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_UpdatePatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdatePatch(ctx,
		"myResourceGroup",
		"myservice",
		test.MonitoringSettingResource{
			Properties: &test.MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Float64Ptr(10),
				TraceEnabled:                  to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.MonitoringSettingResource{
			Name: to.StringPtr("default"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/monitoringSettings"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
			Properties: &test.MonitoringSettingProperties{
				AppInsightsAgentVersions: &test.ApplicationInsightsAgentVersions{
					Java: to.StringPtr("3.0.0"),
				},
				AppInsightsInstrumentationKey: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Float64Ptr(10),
				ProvisioningState:             test.MonitoringSettingStateSucceeded.ToPtr(),
				TraceEnabled:                  to.BoolPtr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		&test.AppsClientGetOptions{SyncStatus: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.AppResource{
			Name: to.StringPtr("myapp"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
			Identity: &test.ManagedIdentityProperties{
				Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("principalid"),
				TenantID:    to.StringPtr("tenantid"),
			},
			Location: to.StringPtr("eastus"),
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("mydeployment1"),
				EnableEndToEndTLS:    to.BoolPtr(false),
				Fqdn:                 to.StringPtr("myapp.mydomain.com"),
				HTTPSOnly:            to.BoolPtr(false),
				PersistentDisk: &test.PersistentDisk{
					MountPath: to.StringPtr("/mypersistentdisk"),
					SizeInGB:  to.Int32Ptr(2),
					UsedInGB:  to.Int32Ptr(1),
				},
				ProvisioningState: test.AppResourceProvisioningStateSucceeded.ToPtr(),
				Public:            to.BoolPtr(true),
				TemporaryDisk: &test.TemporaryDisk{
					MountPath: to.StringPtr("/mytemporarydisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
				URL: to.StringPtr("myapp.myservice.azuremicroservices.io"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		test.AppResource{
			Location: to.StringPtr("eastus"),
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("mydeployment1"),
				EnableEndToEndTLS:    to.BoolPtr(false),
				Fqdn:                 to.StringPtr("myapp.mydomain.com"),
				HTTPSOnly:            to.BoolPtr(false),
				PersistentDisk: &test.PersistentDisk{
					MountPath: to.StringPtr("/mypersistentdisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
				Public: to.BoolPtr(true),
				TemporaryDisk: &test.TemporaryDisk{
					MountPath: to.StringPtr("/mytemporarydisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.AppResource{
			Name: to.StringPtr("myapp"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
			Identity: &test.ManagedIdentityProperties{
				Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("principalid"),
				TenantID:    to.StringPtr("tenantid"),
			},
			Location: to.StringPtr("eastus"),
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("mydeployment1"),
				EnableEndToEndTLS:    to.BoolPtr(false),
				Fqdn:                 to.StringPtr("myapp.mydomain.com"),
				HTTPSOnly:            to.BoolPtr(false),
				PersistentDisk: &test.PersistentDisk{
					MountPath: to.StringPtr("/mypersistentdisk"),
					SizeInGB:  to.Int32Ptr(2),
					UsedInGB:  to.Int32Ptr(1),
				},
				ProvisioningState: test.AppResourceProvisioningStateSucceeded.ToPtr(),
				Public:            to.BoolPtr(true),
				TemporaryDisk: &test.TemporaryDisk{
					MountPath: to.StringPtr("/mytemporarydisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
				URL: to.StringPtr("myapp.myservice.azuremicroservices.io"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json: %v", err)
	}
}

func TestApps_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		test.AppResource{
			Identity: &test.ManagedIdentityProperties{
				Type: test.ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Location: to.StringPtr("eastus"),
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("mydeployment1"),
				EnableEndToEndTLS:    to.BoolPtr(false),
				Fqdn:                 to.StringPtr("myapp.mydomain.com"),
				HTTPSOnly:            to.BoolPtr(false),
				PersistentDisk: &test.PersistentDisk{
					MountPath: to.StringPtr("/mypersistentdisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
				Public: to.BoolPtr(true),
				TemporaryDisk: &test.TemporaryDisk{
					MountPath: to.StringPtr("/mytemporarydisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.AppResource{
			Name: to.StringPtr("myapp"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
			Identity: &test.ManagedIdentityProperties{
				Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("principalid"),
				TenantID:    to.StringPtr("tenantid"),
			},
			Location: to.StringPtr("eastus"),
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("mydeployment1"),
				EnableEndToEndTLS:    to.BoolPtr(false),
				Fqdn:                 to.StringPtr("myapp.mydomain.com"),
				HTTPSOnly:            to.BoolPtr(false),
				PersistentDisk: &test.PersistentDisk{
					MountPath: to.StringPtr("/mypersistentdisk"),
					SizeInGB:  to.Int32Ptr(2),
					UsedInGB:  to.Int32Ptr(1),
				},
				ProvisioningState: test.AppResourceProvisioningStateSucceeded.ToPtr(),
				Public:            to.BoolPtr(true),
				TemporaryDisk: &test.TemporaryDisk{
					MountPath: to.StringPtr("/mytemporarydisk"),
					SizeInGB:  to.Int32Ptr(2),
				},
				URL: to.StringPtr("myapp.myservice.azuremicroservices.io"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.AppResourceCollection{
				Value: []*test.AppResource{
					{
						Name: to.StringPtr("myapp"),
						Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
						Identity: &test.ManagedIdentityProperties{
							Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
							PrincipalID: to.StringPtr("principalid"),
							TenantID:    to.StringPtr("tenantid"),
						},
						Location: to.StringPtr("eastus"),
						Properties: &test.AppResourceProperties{
							ActiveDeploymentName: to.StringPtr("mydeployment1"),
							EnableEndToEndTLS:    to.BoolPtr(false),
							Fqdn:                 to.StringPtr("myapp.mydomain.com"),
							HTTPSOnly:            to.BoolPtr(false),
							PersistentDisk: &test.PersistentDisk{
								MountPath: to.StringPtr("/mypersistentdisk"),
								SizeInGB:  to.Int32Ptr(2),
								UsedInGB:  to.Int32Ptr(1),
							},
							ProvisioningState: test.AppResourceProvisioningStateSucceeded.ToPtr(),
							Public:            to.BoolPtr(true),
							TemporaryDisk: &test.TemporaryDisk{
								MountPath: to.StringPtr("/mytemporarydisk"),
								SizeInGB:  to.Int32Ptr(2),
							},
							URL: to.StringPtr("myapp.myservice.azuremicroservices.io"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().AppResourceCollection) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().AppResourceCollection)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestApps_ValidateDomain(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_ValidateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_ValidateDomain"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ValidateDomain(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		test.CustomDomainValidatePayload{
			Name: to.StringPtr("mydomain.io"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_ValidateDomain.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CustomDomainValidateResult{
			IsValid: to.BoolPtr(false),
			Message: to.StringPtr("Certificate is invalid, please check if it is a self signed cert or if it contains a suitable dns name"),
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainValidateResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainValidateResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_ValidateDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBindings_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.BindingResource{
			Name: to.StringPtr("mybinding"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/bindings"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				CreatedAt:           to.StringPtr("2019-01-01T12:34:56.000Z"),
				GeneratedProperties: to.StringPtr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
				ResourceID:          to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
				ResourceName:        to.StringPtr("my-cosmosdb-1"),
				ResourceType:        to.StringPtr("Microsoft.DocumentDB"),
				UpdatedAt:           to.StringPtr("2019-01-01T12:34:56.000Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BindingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BindingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBindings_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		test.BindingResource{
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				Key:        to.StringPtr("xxxx"),
				ResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.BindingResource{
			Name: to.StringPtr("mybinding"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/bindings"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				CreatedAt:           to.StringPtr("2019-01-01T12:34:56.000Z"),
				GeneratedProperties: to.StringPtr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
				ResourceID:          to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
				ResourceName:        to.StringPtr("my-cosmosdb-1"),
				ResourceType:        to.StringPtr("Microsoft.DocumentDB"),
				UpdatedAt:           to.StringPtr("2019-01-01T12:34:56.000Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BindingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BindingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBindings_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json: %v", err)
	}
}

func TestBindings_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		test.BindingResource{
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				Key: to.StringPtr("xxxx"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.BindingResource{
			Name: to.StringPtr("mybinding"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/bindings"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				CreatedAt:           to.StringPtr("2019-01-01T12:34:56.000Z"),
				GeneratedProperties: to.StringPtr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
				ResourceID:          to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
				ResourceName:        to.StringPtr("my-cosmosdb-1"),
				ResourceType:        to.StringPtr("Microsoft.DocumentDB"),
				UpdatedAt:           to.StringPtr("2019-01-01T12:34:56.000Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BindingResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BindingResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBindings_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.BindingResourceCollection{
				Value: []*test.BindingResource{
					{
						Name: to.StringPtr("mybinding"),
						Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/bindings"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
						Properties: &test.BindingResourceProperties{
							BindingParameters: map[string]interface{}{
								"apiType":      "SQL",
								"databaseName": "db1",
							},
							CreatedAt:           to.StringPtr("2019-01-01T12:34:56.000Z"),
							GeneratedProperties: to.StringPtr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
							ResourceID:          to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
							ResourceName:        to.StringPtr("my-cosmosdb-1"),
							ResourceType:        to.StringPtr("Microsoft.DocumentDB"),
							UpdatedAt:           to.StringPtr("2019-01-01T12:34:56.000Z"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().BindingResourceCollection) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().BindingResourceCollection)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestCertificates_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CertificateResource{
			Name: to.StringPtr("mycertificate"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/certificates"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
			Properties: &test.CertificateProperties{
				ActivateDate: to.StringPtr("2019-02-22T07:40:42Z"),
				CertVersion:  to.StringPtr("08a219d06d874795a96db47e06fbb01e"),
				DNSNames: []*string{
					to.StringPtr("mydomain.com"),
					to.StringPtr("mydomain.net"),
					to.StringPtr("mydomain.io")},
				ExpirationDate:   to.StringPtr("2019-02-21T07:40:42Z"),
				IssuedDate:       to.StringPtr("2019-02-20T07:40:42Z"),
				Issuer:           to.StringPtr("mydomain.com"),
				KeyVaultCertName: to.StringPtr("mycert"),
				SubjectName:      to.StringPtr("mysubjectname"),
				Thumbprint:       to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
				VaultURI:         to.StringPtr("https://myvault.vault.azure.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		test.CertificateResource{
			Properties: &test.CertificateProperties{
				CertVersion:      to.StringPtr("08a219d06d874795a96db47e06fbb01e"),
				KeyVaultCertName: to.StringPtr("mycert"),
				VaultURI:         to.StringPtr("https://myvault.vault.azure.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CertificateResource{
			Name: to.StringPtr("mycertificate"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/certificates"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
			Properties: &test.CertificateProperties{
				ActivateDate: to.StringPtr("2019-02-22T07:40:42Z"),
				CertVersion:  to.StringPtr("08a219d06d874795a96db47e06fbb01e"),
				DNSNames: []*string{
					to.StringPtr("mydomain.com"),
					to.StringPtr("mydomain.net"),
					to.StringPtr("mydomain.io")},
				ExpirationDate:   to.StringPtr("2019-02-21T07:40:42Z"),
				IssuedDate:       to.StringPtr("2019-02-20T07:40:42Z"),
				Issuer:           to.StringPtr("mydomain.com"),
				KeyVaultCertName: to.StringPtr("mycert"),
				SubjectName:      to.StringPtr("mysubjectname"),
				Thumbprint:       to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
				VaultURI:         to.StringPtr("https://myvault.vault.azure.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json: %v", err)
	}
}

func TestCertificates_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myService",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.CertificateResourceCollection{
				Value: []*test.CertificateResource{
					{
						Name: to.StringPtr("mycertificate"),
						Type: to.StringPtr("Microsoft.AppPlatform/Spring/certificates"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
						Properties: &test.CertificateProperties{
							ActivateDate: to.StringPtr("2019-02-22T07:40:42Z"),
							CertVersion:  to.StringPtr("08a219d06d874795a96db47e06fbb01e"),
							DNSNames: []*string{
								to.StringPtr("mydomain.com"),
								to.StringPtr("mydomain.net"),
								to.StringPtr("mydomain.io")},
							ExpirationDate:   to.StringPtr("2019-02-21T07:40:42Z"),
							IssuedDate:       to.StringPtr("2019-02-20T07:40:42Z"),
							Issuer:           to.StringPtr("mydomain.com"),
							KeyVaultCertName: to.StringPtr("mycert"),
							SubjectName:      to.StringPtr("mysubjectname"),
							Thumbprint:       to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
							VaultURI:         to.StringPtr("https://myvault.vault.azure.net"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().CertificateResourceCollection) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().CertificateResourceCollection)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestCustomDomains_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CustomDomainResource{
			Name: to.StringPtr("mydomain.com"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/domains"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
			Properties: &test.CustomDomainProperties{
				AppName:    to.StringPtr("myapp"),
				CertName:   to.StringPtr("mycert"),
				Thumbprint: to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		test.CustomDomainResource{
			Properties: &test.CustomDomainProperties{
				CertName:   to.StringPtr("mycert"),
				Thumbprint: to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CustomDomainResource{
			Name: to.StringPtr("mydomain.com"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/domains"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
			Properties: &test.CustomDomainProperties{
				AppName:    to.StringPtr("myapp"),
				CertName:   to.StringPtr("mycert"),
				Thumbprint: to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json: %v", err)
	}
}

func TestCustomDomains_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		test.CustomDomainResource{
			Properties: &test.CustomDomainProperties{
				CertName:   to.StringPtr("mycert"),
				Thumbprint: to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.CustomDomainResource{
			Name: to.StringPtr("mydomain.com"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/domains"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
			Properties: &test.CustomDomainProperties{
				AppName:    to.StringPtr("myapp"),
				CertName:   to.StringPtr("mycert"),
				Thumbprint: to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomDomainResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.CustomDomainResourceCollection{
				Value: []*test.CustomDomainResource{
					{
						Name: to.StringPtr("mydomain.com"),
						Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/domains"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
						Properties: &test.CustomDomainProperties{
							AppName:    to.StringPtr("myapp"),
							CertName:   to.StringPtr("mycert"),
							Thumbprint: to.StringPtr("934367bf1c97033f877db0f15cb1b586957d3133"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().CustomDomainResourceCollection) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().CustomDomainResourceCollection)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDeployments_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DeploymentResource{
			Name: to.StringPtr("mydeployment"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			Properties: &test.DeploymentResourceProperties{
				Active:  to.BoolPtr(false),
				AppName: to.StringPtr("myapp"),
				DeploymentSettings: &test.DeploymentSettings{
					CPU: to.Int32Ptr(1),
					EnvironmentVariables: map[string]*string{
						"env": to.StringPtr("test"),
					},
					JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Int32Ptr(3),
					RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
				},
				Instances: []*test.DeploymentInstance{
					{
						Name:            to.StringPtr("instance1"),
						DiscoveryStatus: to.StringPtr("pending"),
						StartTime:       to.StringPtr("2020-08-26T01:55:02Z"),
						Status:          to.StringPtr("Running"),
					}},
				ProvisioningState: test.DeploymentResourceProvisioningStateSucceeded.ToPtr(),
				Source: &test.UserSourceInfo{
					Type:             test.UserSourceTypeSource.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.StringPtr("1.0"),
				},
				Status: test.DeploymentResourceStatusRunning.ToPtr(),
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("S0"),
				Capacity: to.Int32Ptr(1),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		test.DeploymentResource{
			Properties: &test.DeploymentResourceProperties{
				DeploymentSettings: &test.DeploymentSettings{
					CPU: to.Int32Ptr(1),
					EnvironmentVariables: map[string]*string{
						"env": to.StringPtr("test"),
					},
					JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Int32Ptr(3),
					RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
				},
				Source: &test.UserSourceInfo{
					Type:             test.UserSourceTypeSource.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.StringPtr("1.0"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DeploymentResource{
			Name: to.StringPtr("mydeployment"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			Properties: &test.DeploymentResourceProperties{
				Active:  to.BoolPtr(false),
				AppName: to.StringPtr("myapp"),
				DeploymentSettings: &test.DeploymentSettings{
					CPU: to.Int32Ptr(1),
					EnvironmentVariables: map[string]*string{
						"env": to.StringPtr("test"),
					},
					JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Int32Ptr(3),
					RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
				},
				Instances: []*test.DeploymentInstance{
					{
						Name:            to.StringPtr("instance1"),
						DiscoveryStatus: to.StringPtr("pending"),
						StartTime:       to.StringPtr("2020-08-26T01:55:02Z"),
						Status:          to.StringPtr("Running"),
					}},
				ProvisioningState: test.DeploymentResourceProvisioningStateSucceeded.ToPtr(),
				Source: &test.UserSourceInfo{
					Type:             test.UserSourceTypeSource.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.StringPtr("1.0"),
				},
				Status: test.DeploymentResourceStatusRunning.ToPtr(),
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("S0"),
				Capacity: to.Int32Ptr(1),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json: %v", err)
	}
}

func TestDeployments_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		test.DeploymentResource{
			Properties: &test.DeploymentResourceProperties{
				Source: &test.UserSourceInfo{
					Type:             test.UserSourceTypeSource.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.StringPtr("1.0"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.DeploymentResource{
			Name: to.StringPtr("mydeployment"),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/deployments"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
			Properties: &test.DeploymentResourceProperties{
				Active:  to.BoolPtr(false),
				AppName: to.StringPtr("myapp"),
				DeploymentSettings: &test.DeploymentSettings{
					CPU: to.Int32Ptr(1),
					EnvironmentVariables: map[string]*string{
						"env": to.StringPtr("test"),
					},
					JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Int32Ptr(3),
					RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
				},
				Instances: []*test.DeploymentInstance{
					{
						Name:            to.StringPtr("instance1"),
						DiscoveryStatus: to.StringPtr("pending"),
						StartTime:       to.StringPtr("2020-08-26T01:55:02Z"),
						Status:          to.StringPtr("Running"),
					}},
				ProvisioningState: test.DeploymentResourceProvisioningStateSucceeded.ToPtr(),
				Source: &test.UserSourceInfo{
					Type:             test.UserSourceTypeSource.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.StringPtr("1.0"),
				},
				Status: test.DeploymentResourceStatusRunning.ToPtr(),
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("S0"),
				Capacity: to.Int32Ptr(1),
				Tier:     to.StringPtr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		&test.DeploymentsClientListOptions{Version: []string{}})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DeploymentResourceCollection{
				Value: []*test.DeploymentResource{
					{
						Name: to.StringPtr("mydeployment"),
						Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/deployments"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
						Properties: &test.DeploymentResourceProperties{
							Active:  to.BoolPtr(false),
							AppName: to.StringPtr("myapp"),
							DeploymentSettings: &test.DeploymentSettings{
								CPU: to.Int32Ptr(1),
								EnvironmentVariables: map[string]*string{
									"env": to.StringPtr("test"),
								},
								JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
								MemoryInGB:     to.Int32Ptr(3),
								RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
							},
							Instances: []*test.DeploymentInstance{
								{
									Name:            to.StringPtr("instance1"),
									DiscoveryStatus: to.StringPtr("pending"),
									StartTime:       to.StringPtr("2020-08-26T01:55:02Z"),
									Status:          to.StringPtr("Running"),
								}},
							ProvisioningState: test.DeploymentResourceProvisioningStateSucceeded.ToPtr(),
							Source: &test.UserSourceInfo{
								Type:             test.UserSourceTypeSource.ToPtr(),
								ArtifactSelector: to.StringPtr("sub-module-1"),
								RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
								Version:          to.StringPtr("1.0"),
							},
							Status: test.DeploymentResourceStatusRunning.ToPtr(),
						},
						SKU: &test.SKU{
							Name:     to.StringPtr("S0"),
							Capacity: to.Int32Ptr(1),
							Tier:     to.StringPtr("Standard"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DeploymentResourceCollection) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DeploymentResourceCollection)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDeployments_ListForCluster(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_ListForCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_ListForCluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListForCluster("myResourceGroup",
		"myservice",
		&test.DeploymentsClientListForClusterOptions{Version: []string{}})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_ListForCluster.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.DeploymentResourceCollection{
				Value: []*test.DeploymentResource{
					{
						Name: to.StringPtr("mydeployment"),
						Type: to.StringPtr("Microsoft.AppPlatform/Spring/apps/deployments"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
						Properties: &test.DeploymentResourceProperties{
							Active:  to.BoolPtr(false),
							AppName: to.StringPtr("myapp"),
							DeploymentSettings: &test.DeploymentSettings{
								CPU: to.Int32Ptr(1),
								EnvironmentVariables: map[string]*string{
									"env": to.StringPtr("test"),
								},
								JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
								MemoryInGB:     to.Int32Ptr(3),
								RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
							},
							Instances: []*test.DeploymentInstance{
								{
									Name:            to.StringPtr("instance1"),
									DiscoveryStatus: to.StringPtr("pending"),
									StartTime:       to.StringPtr("2020-08-26T01:55:02Z"),
									Status:          to.StringPtr("Running"),
								}},
							ProvisioningState: test.DeploymentResourceProvisioningStateSucceeded.ToPtr(),
							Source: &test.UserSourceInfo{
								Type:             test.UserSourceTypeSource.ToPtr(),
								ArtifactSelector: to.StringPtr("sub-module-1"),
								RelativePath:     to.StringPtr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
								Version:          to.StringPtr("1.0"),
							},
							Status: test.DeploymentResourceStatusRunning.ToPtr(),
						},
						SKU: &test.SKU{
							Name:     to.StringPtr("S0"),
							Capacity: to.Int32Ptr(1),
							Tier:     to.StringPtr("Standard"),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().DeploymentResourceCollection) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().DeploymentResourceCollection)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_ListForCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestDeployments_Start(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Start"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginStart(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json: %v", err)
	}
}

func TestDeployments_Stop(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Stop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginStop(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json: %v", err)
	}
}

func TestDeployments_Restart(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Restart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Operations_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.AvailableOperations{
				Value: []*test.OperationDetail{
					{
						Name: to.StringPtr("Microsoft.AppPlatform/Spring/read"),
						Display: &test.OperationDisplay{
							Description: to.StringPtr("Create or Update Managed Applications"),
							Operation:   to.StringPtr("Create or Update Managed Applications"),
							Provider:    to.StringPtr("Microsoft Azure Distributed Managed Service for Spring"),
							Resource:    to.StringPtr("Managed Applications"),
						},
						IsDataAction: to.BoolPtr(false),
						Origin:       to.StringPtr("user,system"),
						Properties:   &test.OperationProperties{},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().AvailableOperations) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().AvailableOperations)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestRuntimeVersions_ListRuntimeVersions(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RuntimeVersions_ListRuntimeVersions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewRuntimeVersionsClient(cred, &options)
	res, err := client.ListRuntimeVersions(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json: %v", err)
	}
	// Response check
	{
		exampleRes := test.AvailableRuntimeVersions{
			Value: []*test.SupportedRuntimeVersion{
				{
					Platform: test.SupportedRuntimePlatformJava.ToPtr(),
					Value:    test.SupportedRuntimeValueJava8.ToPtr(),
					Version:  to.StringPtr("8"),
				},
				{
					Platform: test.SupportedRuntimePlatformJava.ToPtr(),
					Value:    test.SupportedRuntimeValueJava11.ToPtr(),
					Version:  to.StringPtr("11"),
				},
				{
					Platform: test.SupportedRuntimePlatformNETCore.ToPtr(),
					Value:    test.SupportedRuntimeValueNetCore31.ToPtr(),
					Version:  to.StringPtr("3.1"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableRuntimeVersions) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableRuntimeVersions)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Skus_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := test.NewSKUsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Skus_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := test.ResourceSKUCollection{
				Value: []*test.ResourceSKU{
					{
						Name: to.StringPtr("B0"),
						Capacity: &test.SKUCapacity{
							Default:   to.Int32Ptr(1),
							Maximum:   to.Int32Ptr(20),
							Minimum:   to.Int32Ptr(1),
							ScaleType: test.SKUScaleTypeAutomatic.ToPtr(),
						},
						LocationInfo: []*test.ResourceSKULocationInfo{
							{
								Location:    to.StringPtr("eastus"),
								ZoneDetails: []*test.ResourceSKUZoneDetails{},
								Zones:       []*string{},
							}},
						Locations: []*string{
							to.StringPtr("eastus")},
						ResourceType: to.StringPtr("Spring"),
						Restrictions: []*test.ResourceSKURestrictions{},
						Tier:         to.StringPtr("Basic"),
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ResourceSKUCollection) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ResourceSKUCollection)
				t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Skus_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
