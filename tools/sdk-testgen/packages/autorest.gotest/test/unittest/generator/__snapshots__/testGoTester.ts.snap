// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GoTestGenerator from RP agrifood Generate MockTest and SDK example 1`] = `
Object {
  "ze_generated_example_extensions_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// x-ms-original-file: 
func ExampleExtensionsClient_Create() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Create(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatal(err)
	}
}



// x-ms-original-file: 
func ExampleExtensionsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Get(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf(\\"Response result: %#v\\\\n\\", res.ExtensionsClientGetResult)
}



// x-ms-original-file: 
func ExampleExtensionsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Update(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf(\\"Response result: %#v\\\\n\\", res.ExtensionsClientUpdateResult)
}



// x-ms-original-file: 
func ExampleExtensionsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Delete(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatal(err)
	}
}



// x-ms-original-file: 
func ExampleExtensionsClient_ListByFarmBeats() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListByFarmBeats(\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
&armagfood.ExtensionsListByFarmBeatsOptions{ExtensionIDs: []string{},
ExtensionCategories: []string{},
MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            log.Printf(\\"Pager result: %#v\\\\n\\", v)
		}
	}
}


",
  "ze_generated_example_farmbeatsextensions_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// x-ms-original-file: 
func ExampleFarmBeatsExtensionsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, nil)
	pager := client.List(&armagfood.FarmBeatsExtensionsListOptions{FarmBeatsExtensionIDs: []string{},
FarmBeatsExtensionNames: []string{},
ExtensionCategories: []string{},
PublisherIDs: []string{},
MaxPageSize: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            log.Printf(\\"Pager result: %#v\\\\n\\", v)
		}
	}
}



// x-ms-original-file: 
func ExampleFarmBeatsExtensionsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, nil)
	res, err := client.Get(ctx,
\\"<farm-beats-extension-id>\\",
nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf(\\"Response result: %#v\\\\n\\", res.FarmBeatsExtensionsClientGetResult)
}


",
  "ze_generated_example_farmbeatsmodels_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// x-ms-original-file: 
func ExampleFarmBeatsModelsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Get(ctx,
\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf(\\"Response result: %#v\\\\n\\", res.FarmBeatsModelsClientGetResult)
}



// x-ms-original-file: 
func ExampleFarmBeatsModelsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
armagfood.FarmBeats{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
Location: to.StringPtr(\\"<location>\\"),
},
nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf(\\"Response result: %#v\\\\n\\", res.FarmBeatsModelsClientCreateOrUpdateResult)
}



// x-ms-original-file: 
func ExampleFarmBeatsModelsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Update(ctx,
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
armagfood.FarmBeatsUpdateRequestModel{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
},
nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf(\\"Response result: %#v\\\\n\\", res.FarmBeatsModelsClientUpdateResult)
}



// x-ms-original-file: 
func ExampleFarmBeatsModelsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Delete(ctx,
\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
nil)
	if err != nil {
		log.Fatal(err)
	}
}



// x-ms-original-file: 
func ExampleFarmBeatsModelsClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListBySubscription(&armagfood.FarmBeatsModelsListBySubscriptionOptions{MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            log.Printf(\\"Pager result: %#v\\\\n\\", v)
		}
	}
}



// x-ms-original-file: 
func ExampleFarmBeatsModelsClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListByResourceGroup(\\"<resource-group-name>\\",
&armagfood.FarmBeatsModelsListByResourceGroupOptions{MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            log.Printf(\\"Pager result: %#v\\\\n\\", v)
		}
	}
}


",
  "ze_generated_example_locations_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// x-ms-original-file: 
func ExampleLocationsClient_CheckNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewLocationsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"<name>\\"),
Type: to.StringPtr(\\"<type>\\"),
},
nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf(\\"Response result: %#v\\\\n\\", res.LocationsClientCheckNameAvailabilityResult)
}


",
  "ze_generated_example_operations_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// x-ms-original-file: 
func ExampleOperationsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
	}
	ctx := context.Background()
	client := armagfood.NewOperationsClient(cred, nil)
	pager := client.List(nil)
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            log.Printf(\\"Pager result: %#v\\\\n\\", v)
		}
	}
}


",
  "zt_generated_mock_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"fmt\\"
	\\"net/http\\"
	\\"os\\"
	\\"runtime/debug\\"
	\\"testing\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
	\\"golang.org/x/net/http2\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



var (
	ctx            context.Context
    options        arm.ClientOptions
	cred           azcore.TokenCredential
	err            error
	mockHost       string
)



func TestExtensions_Create(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Create(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Get(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Update(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Update(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Delete(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Delete(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_ListByFarmBeats(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListByFarmBeats(\\"examples-rg\\",
\\"examples-farmbeatsResourceName\\",
&armagfood.ExtensionsListByFarmBeatsOptions{ExtensionIDs: []string{},
ExtensionCategories: []string{},
MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsExtensions_List(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, &options)
        pager := client.List(&armagfood.FarmBeatsExtensionsListOptions{FarmBeatsExtensionIDs: []string{},
FarmBeatsExtensionNames: []string{},
ExtensionCategories: []string{},
PublisherIDs: []string{},
MaxPageSize: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsExtensions_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, &options)
            res, err := client.Get(ctx,
\\"DTN.ContentServices\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Get(ctx,
\\"examples-rg\\",
\\"examples-farmBeatsResourceName\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_CreateOrUpdate(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.CreateOrUpdate(ctx,
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
armagfood.FarmBeats{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
Location: to.StringPtr(\\"eastus2\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Update(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Update(ctx,
\\"examples-farmBeatsResourceName\\",
\\"examples-rg\\",
armagfood.FarmBeatsUpdateRequestModel{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Delete(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Delete(ctx,
\\"examples-rg\\",
\\"examples-farmBeatsResourceName\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_ListBySubscription(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListBySubscription(&armagfood.FarmBeatsModelsListBySubscriptionOptions{MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsModels_ListByResourceGroup(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListByResourceGroup(\\"examples-rg\\",
&armagfood.FarmBeatsModelsListByResourceGroupOptions{MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestLocations_CheckNameAvailability(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewLocationsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"existingaccountname\\"),
Type: to.StringPtr(\\"Microsoft.AgFoodPlatform/farmBeats\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }

    
    // From example 
    client = armagfood.NewLocationsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err = client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"newaccountname\\"),
Type: to.StringPtr(\\"Microsoft.AgFoodPlatform/farmBeats\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestOperations_List(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewOperationsClient(cred, &options)
        pager := client.List(nil)
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
    if value, ok := os.LookupEnv(key); ok {
        return value
    }
    return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv(\\"AZURE_VIRTUAL_SERVER_HOST\\", \\"https://localhost:8443\\")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf(\\"Failed to configure http2 transport: %v\\", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	
    cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: \\"MockToken\\", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}",
}
`;

exports[`GoTestGenerator from RP signalR Generate scenario test 1`] = `
Object {
  "scenario/zt_generated_signalR_test.go": "//go:build go1.16
// +build go1.16



package armsignalr_test

import (
	\\"context\\"
	\\"log\\"
	\\"net/http\\"
	\\"os\\"
	\\"runtime/debug\\"
	\\"testing\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
	\\"golang.org/x/net/http2\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resources/armresources\\"
	\\"reflect\\"
	\\"time\\"
)



var (
	ctx            context.Context
	cred           azcore.TokenCredential
	con            *arm.Connection
	err            error
	resourceGroup	*armresources.ResourceGroup
    resourceName = \\"signalrswaggertest4\\"
    location  string
    resourceGroupName  string
    subscriptionId  string
    name string
)
func scenarioMicrosoftSignalrserviceBasicCrud(t *testing.T) {
    resourceName := \\"$(resourceName)\\"
	// From step Generate_Unique_Name
	{
	var deploymentExtend *armresources.DeploymentExtended
	deploymentExtend, err = createDeployment(ctx, \\"Generate_Unique_Name\\", getAnyJson([]byte(\`{\\"$schema\\":\\"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\\",\\"contentVersion\\":\\"1.0.0.0\\",\\"outputs\\":{\\"name\\":{\\"type\\":\\"string\\",\\"value\\":\\"[variables('name').value]\\"},\\"resourceName\\":{\\"type\\":\\"string\\",\\"value\\":\\"[variables('name').value]\\"}},\\"resources\\":[],\\"variables\\":{\\"name\\":{\\"type\\":\\"string\\",\\"metadata\\":{\\"description\\":\\"Name of the SignalR service.\\"},\\"value\\":\\"[concat('sw',uniqueString(resourceGroup().id))]\\"}}}\`)), getAnyJson([]byte(\`{}\`)))
	if err != nil {
		t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
	}
	resourceName = deploymentExtend.Properties.Outputs[\\"resourceName\\"].(map[string]interface{})[\\"value\\"].(string)
	}

    
	// From step SignalR_CheckNameAvailability
			SignalRClient := armsignalr.NewSignalRClient(subscriptionId)
	{
			signalRCheckNameAvailabilityResponse, err := SignalRClient.CheckNameAvailability(ctx,
location,
&armsignalr.SignalRCheckNameAvailabilityOptions{Parameters: &armsignalr.NameAvailabilityParameters{
Name: to.StringPtr(\\"my-signalr-service\\"),
Type: to.StringPtr(\\"Microsoft.SignalRService/SignalR\\"),
},
})
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
        log.Printf(\\"Response result: %#v\\\\n\\", signalRCheckNameAvailabilityResponse.SignalRCheckNameAvailabilityResult)
	}

    
	// From step SignalR_CreateOrUpdate
	{
			signalRCreateOrUpdatePollerResponse, err := SignalRClient.BeginCreateOrUpdate(ctx,
resourceGroupName,
resourceName,
&armsignalr.SignalRBeginCreateOrUpdateOptions{Parameters: &armsignalr.SignalRResource{
Location: to.StringPtr(location),
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
},
Identity: &armsignalr.ManagedIdentity{
Type: armsignalr.ManagedIdentityType(\\"SystemAssigned\\").ToPtr(),
},
Kind: armsignalr.ServiceKind(\\"SignalR\\").ToPtr(),
Properties: &armsignalr.SignalRProperties{
Cors: &armsignalr.SignalRCorsSettings{
AllowedOrigins: []*string{
to.StringPtr(\\"https://foo.com\\"),
to.StringPtr(\\"https://bar.com\\")},
},
Features: []*armsignalr.SignalRFeature{
{
Flag: armsignalr.FeatureFlags(\\"ServiceMode\\").ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"Serverless\\"),
},
{
Flag: armsignalr.FeatureFlags(\\"EnableConnectivityLogs\\").ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"True\\"),
},
{
Flag: armsignalr.FeatureFlags(\\"EnableMessagingLogs\\").ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"False\\"),
}},
NetworkACLs: &armsignalr.SignalRNetworkACLs{
DefaultAction: armsignalr.ACLAction(\\"Deny\\").ToPtr(),
PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestType(\\"ServerConnection\\").ToPtr()},
Name: to.StringPtr(\\"mySignalRService.1fa229cd-bf3f-47f0-8c49-afb36723997e\\"),
}},
PublicNetwork: &armsignalr.NetworkACL{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestType(\\"ClientConnection\\").ToPtr()},
},
},
Upstream: &armsignalr.ServerlessUpstreamSettings{
Templates: []*armsignalr.UpstreamTemplate{
{
Auth: &armsignalr.UpstreamAuthSettings{
Type: armsignalr.UpstreamAuthType(\\"ManagedIdentity\\").ToPtr(),
ManagedIdentity: &armsignalr.ManagedIdentitySettings{
Resource: to.StringPtr(\\"api://example\\"),
},
},
CategoryPattern: to.StringPtr(\\"*\\"),
EventPattern: to.StringPtr(\\"connect,disconnect\\"),
HubPattern: to.StringPtr(\\"*\\"),
URLTemplate: to.StringPtr(\\"https://example.com/chat/api/connect\\"),
}},
},
TLS: &armsignalr.SignalRTLSSettings{
ClientCertEnabled: to.BoolPtr(false),
},
},
SKU: &armsignalr.ResourceSKU{
Name: to.StringPtr(\\"Standard_S1\\"),
Capacity: to.Int32Ptr(1),
Tier: armsignalr.SignalRSKUTier(\\"Standard\\").ToPtr(),
},
},
})
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
		response, err := signalRCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
        log.Printf(\\"Response result: %#v\\\\n\\", response.SignalRCreateOrUpdateResult)
	}

    
	// From step SignalR_Get
	{
			signalRGetResponse, err := SignalRClient.Get(ctx,
resourceGroupName,
resourceName,
nil)
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
        log.Printf(\\"Response result: %#v\\\\n\\", signalRGetResponse.SignalRGetResult)
	}

    
	// From step SignalR_Update
	{
			signalRUpdatePollerResponse, err := SignalRClient.BeginUpdate(ctx,
resourceGroupName,
resourceName,
&armsignalr.SignalRBeginUpdateOptions{Parameters: &armsignalr.SignalRResource{
Location: to.StringPtr(location),
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
},
Identity: &armsignalr.ManagedIdentity{
Type: armsignalr.ManagedIdentityType(\\"SystemAssigned\\").ToPtr(),
},
Kind: armsignalr.ServiceKind(\\"SignalR\\").ToPtr(),
Properties: &armsignalr.SignalRProperties{
Cors: &armsignalr.SignalRCorsSettings{
AllowedOrigins: []*string{
to.StringPtr(\\"https://foo.com\\"),
to.StringPtr(\\"https://bar.com\\")},
},
Features: []*armsignalr.SignalRFeature{
{
Flag: armsignalr.FeatureFlags(\\"ServiceMode\\").ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"Serverless\\"),
},
{
Flag: armsignalr.FeatureFlags(\\"EnableConnectivityLogs\\").ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"True\\"),
},
{
Flag: armsignalr.FeatureFlags(\\"EnableMessagingLogs\\").ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"False\\"),
}},
NetworkACLs: &armsignalr.SignalRNetworkACLs{
DefaultAction: armsignalr.ACLAction(\\"Deny\\").ToPtr(),
PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestType(\\"ServerConnection\\").ToPtr()},
Name: to.StringPtr(resourceName + \\".1fa229cd-bf3f-47f0-8c49-afb36723997e\\"),
}},
PublicNetwork: &armsignalr.NetworkACL{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestType(\\"ClientConnection\\").ToPtr()},
},
},
Upstream: &armsignalr.ServerlessUpstreamSettings{
Templates: []*armsignalr.UpstreamTemplate{
{
Auth: &armsignalr.UpstreamAuthSettings{
Type: armsignalr.UpstreamAuthType(\\"ManagedIdentity\\").ToPtr(),
ManagedIdentity: &armsignalr.ManagedIdentitySettings{
Resource: to.StringPtr(\\"api://example\\"),
},
},
CategoryPattern: to.StringPtr(\\"*\\"),
EventPattern: to.StringPtr(\\"connect,disconnect\\"),
HubPattern: to.StringPtr(\\"*\\"),
URLTemplate: to.StringPtr(\\"https://example.com/chat/api/connect\\"),
}},
},
TLS: &armsignalr.SignalRTLSSettings{
ClientCertEnabled: to.BoolPtr(false),
},
},
SKU: &armsignalr.ResourceSKU{
Name: to.StringPtr(\\"Standard_S1\\"),
Capacity: to.Int32Ptr(1),
Tier: armsignalr.SignalRSKUTier(\\"Standard\\").ToPtr(),
},
},
})
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
		response, err := signalRUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
        log.Printf(\\"Response result: %#v\\\\n\\", response.SignalRUpdateResult)
	}

    
	// From step SignalR_ListKeys
	{
			signalRListKeysResponse, err := SignalRClient.ListKeys(ctx,
resourceGroupName,
resourceName,
nil)
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
        log.Printf(\\"Response result: %#v\\\\n\\", signalRListKeysResponse.SignalRListKeysResult)
	}

    
	// From step Usages_List
			UsagesClient := armsignalr.NewUsagesClient(subscriptionId)
	{
		usagesListPager := UsagesClient.List(location,
nil)
		for usagesListPager.NextPage(ctx) {
			if err := usagesListPager.Err(); err != nil {
				t.Fatalf(\\"failed to advance page: %v\\\\n %v\\", err, string(debug.Stack()))
			}
			for _, v := range usagesListPager.PageResponse().Value {
                log.Printf(\\"Pager result: %#v\\\\n\\", v)
			}
		}
	}

    
	// From step SignalR_ListByResourceGroup
	{
		signalRListByResourceGroupPager := SignalRClient.ListByResourceGroup(resourceGroupName,
nil)
		for signalRListByResourceGroupPager.NextPage(ctx) {
			if err := signalRListByResourceGroupPager.Err(); err != nil {
				t.Fatalf(\\"failed to advance page: %v\\\\n %v\\", err, string(debug.Stack()))
			}
			for _, v := range signalRListByResourceGroupPager.PageResponse().Value {
                log.Printf(\\"Pager result: %#v\\\\n\\", v)
			}
		}
	}

    
	// From step SignalR_ListBySubscription
	{
		signalRListBySubscriptionPager := SignalRClient.ListBySubscription(nil)
		for signalRListBySubscriptionPager.NextPage(ctx) {
			if err := signalRListBySubscriptionPager.Err(); err != nil {
				t.Fatalf(\\"failed to advance page: %v\\\\n %v\\", err, string(debug.Stack()))
			}
			for _, v := range signalRListBySubscriptionPager.PageResponse().Value {
                log.Printf(\\"Pager result: %#v\\\\n\\", v)
			}
		}
	}

    
	// From step Operations_List
			OperationsClient := armsignalr.NewOperationsClient()
	{
		operationsListPager := OperationsClient.List(nil)
		for operationsListPager.NextPage(ctx) {
			if err := operationsListPager.Err(); err != nil {
				t.Fatalf(\\"failed to advance page: %v\\\\n %v\\", err, string(debug.Stack()))
			}
			for _, v := range operationsListPager.PageResponse().Value {
                log.Printf(\\"Pager result: %#v\\\\n\\", v)
			}
		}
	}

    
	// From step SignalR_Delete
	{
			signalRDeletePollerResponse, err := SignalRClient.BeginDelete(ctx,
resourceGroupName,
resourceName,
nil)
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
		_, err = signalRDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
		if err != nil {
			t.Fatalf(\\"%v\\\\n %v\\", err, string(debug.Stack()))
		}
	}
}

func prepare() {
}

func TestSignalr(t *testing.T) {
	setUp()
	scenarioMicrosoftSignalrserviceBasicCrud(t)
	tearDown()
}

func getEnv(key, fallback string) string {
    if value, ok := os.LookupEnv(key); ok {
        return value
    }
    return fallback
}

func createResourceGroup(ctx context.Context, connection *arm.Connection) (*armresources.ResourceGroup, error) {
	rgClient := armresources.NewResourceGroupsClient(connection, subscriptionId)

	param := armresources.ResourceGroup{
		Location: to.StringPtr(location),
	}

	resp, err := rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)
	if err != nil {
		return nil, err
	}

	return resp.ResourceGroup, nil
}

func deleteResourceGroup(ctx context.Context, connection *arm.Connection) error {
	rgClient := armresources.NewResourceGroupsClient(connection, subscriptionId)

	poller, err := rgClient.BeginDelete(ctx, resourceGroupName, nil)
	if err != nil {
		return err
	}
	if _, err := poller.PollUntilDone(ctx, 10*time.Second); err != nil {
		return err
	}

	return nil
}

func setUp() {
	ctx = context.Background()
    location = getEnv(\\"LOCATION\\", \\"westus\\")
    resourceGroupName = getEnv(\\"RESOURCE_GROUP_NAME\\", \\"scenarioTestTempGroup\\")
    subscriptionId = getEnv(\\"SUBSCRIPTION_ID\\", \\"00000000-00000000-00000000-00000000\\")

	cred, err = azidentity.NewEnvironmentCredential(nil)
	if err != nil {
		panic(err)
	}

	con = arm.NewDefaultConnection(cred, &arm.ConnectionOptions{
		Logging: azcore.LogOptions{
			IncludeBody: true,
		},
	})
	resourceGroup, err := createResourceGroup(ctx, con)
	if err != nil {
		panic(err)
	}
	log.Printf(\\"Resource Group %s created\\", *resourceGroup.ID)
    prepare()
}

func tearDown() {
	deleteResourceGroup(ctx, con)
}

func createDeployment(ctx context.Context, deploymentName string, template, params map[string]interface{}) (de *armresources.DeploymentExtended, err error) {
	deployClient := armresources.NewDeploymentsClient(con, subscriptionId)
	poller, err := deployClient.BeginCreateOrUpdate(
		ctx,
		resourceGroupName,
		deploymentName,
		armresources.Deployment{
			Properties: &armresources.DeploymentProperties{
				Template:   template,
				Parameters: params,
				Mode:       armresources.DeploymentModeIncremental.ToPtr(),
			},
		},
		&armresources.DeploymentsBeginCreateOrUpdateOptions{},
	)
	if err != nil {
		return nil, err
	}

	res, err := poller.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		return nil, err
	}

	return res.DeploymentExtended, nil
}

func getAnyJson(customJSON []byte) map[string]interface{} {
	var anyJson map[string]interface{}
	_ = json.Unmarshal(customJSON, &anyJson)
	return anyJson
}",
}
`;
