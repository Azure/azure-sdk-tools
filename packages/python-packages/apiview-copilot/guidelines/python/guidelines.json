[
    {
      "id": "python_design.html#python-client-naming",
      "category": "Service client",
      "text": "DO name service client types with a Client suffix."
    },
    {
      "id": "python_design.html#python-client-sync-async-separate-clients",
      "category": "Service client",
      "text": "DO provide separate sync and async clients. See the Async Support section for more information.\n\n```python\n# Yes\nclass CosmosClient: ...\n\n# No\nclass CosmosProxy: ...\n\n# No\nclass CosmosUrl: ...\n\n```"
    },
    {
      "id": "python_design.html#python-client-constructor-form",
      "category": "Client configuration",
      "text": "DO provide a constructor that takes positional binding parameters (for example, the name of, or a URL pointing to the service instance, an endpoint), a positional credential parameter, and keyword-only arguments for passing settings through to individual HTTP pipeline policies."
    },
    {
      "id": "python_design.html#python-client-options-naming",
      "category": "Client configuration",
      "text": "DO NOT use an \"options bag\" object to group optional parameters. Instead, pass as individual keyword-only arguments."
    },
    {
      "id": "python_design.html#python-client-connection-string",
      "category": "Client configuration",
      "text": "DO use a separate factory classmethod from_connection_string to create a client from a connection string (if the client supports connection strings). The from_connection_string factory method should take the same set of arguments (excluding information provided in the connection string) as the constructor. The constructor (__init__ method) must not take a connection string, even if it means that using the from_connection_string is the only supported method to create an instance of the client."
    },
    {
      "id": "python_design.html#python-client-constructor-from-url",
      "category": "Client configuration",
      "text": "YOU MAY use a separate factory classmethod from_<resource type>_url (e.g. from_blob_url) to create a client from a URL (if the service relies on passing URLs to resources around - e.g. Azure Blob Storage). The from_url factory method should take the same set of optional keyword arguments as the constructor."
    },
    {
      "id": "python_design.html#python-client-constructor-api-version-argument-1",
      "category": "Specifying the Service Version",
      "text": "DO accept an optional api_version keyword-only argument of type string. If specified, the provided api version MUST be used when interacting with the service."
    },
    {
      "id": "python_design.html#python-client-service-verbs",
      "category": "Naming",
      "text": "YOU SHOULD prefer the usage one of the preferred verbs for method names. You should have a good (articulated) reason to have an alternate verb for one of these operations.\n\n|Verb|Parameters|Returns|Comments|\n|-|-|-|-|\n|create_\\<noun>|key, item, [allow_overwrite=False]|Created item|Create new item. Fails if item already exists.|\n|upsert_\\<noun>|key, item|item|Create new item, or update existing item. Verb is primarily used in database-like services |\n|set_\\<noun>|key, item|item|Create new item, or update existing item. Verb is primarily used for dictionary-like properties of a service |\n|update_\\<noun>|key, partial item|item|Fails if item doesn't exist. |\n|replace_\\<noun>|key, item|item|Completely replaces an existing item. Fails if the item doesn't exist. |\n|append_\\<noun>|item|item|Add item to a collection. Item will be added last. |\n|add_\\<noun>|index, item|item|Add item to a collection. Item will be added at the given index. |\n|get_\\<noun>|key|item|Raises an exception if item doesn't exist |\n|list_\\<noun>||azure.core.ItemPaged[Item]|Return an iterable of Items. Returns an iterable with no items if no items exist (doesn't return None or throw)|\n|\\<noun>\\_exists|key|bool|Return True if the item exists. Must raise an exception if the method failed to determine if the item exists (for example, the service returned an HTTP 503 response)|\n|delete_\\<noun>|key|None|Delete an existing item. Must succeed even if item didn't exist.|\n|remove_\\<noun>|key|removed item or None|Remove a reference to an item from a collection. This method doesn't delete the actual item, only the reference.|"
    },
    {
      "id": "python_design.html#python-paged-prefix",
      "category": "Naming",
      "text": "DO prefix methods with list_ for methods that enumerate (lists) resources."
    },
    {
      "id": "python_design.html#python-client-optional-arguments-keyword-only",
      "category": "Service Method Parameters",
      "text": "DO provide optional operation-specific arguments as keyword only."
    },
    {
      "id": "python_design.html#python-client-splat-args",
      "category": "Common service operation parameters",
      "text": "DO accept a Mapping (dict-like) object in the same shape as a serialized model object for parameters.\n\n```python\n# Yes:\nclass Thing:\n\n    def __init__(self, name, size):\n        self.name = name\n        self.size = size\n\ndef do_something(thing: \"Thing\"):\n    ...\n\ndo_something(Thing(name='a', size=17)) # Works\ndo_something({'name': 'a', 'size', '17'}) # Does the same thing...\n\n```"
    },
    {
      "id": "python_design.html#python-client-flatten-args",
      "category": "Common service operation parameters",
      "text": "DO use \"flattened\" named arguments for update_ methods. May additionally take the whole model instance as a named parameter. If the caller passes both a model instance and individual key=value parameters, the explicit key=value parameters override whatever was specified in the model instance.\n\n```python\nclass Thing:\n\n    def __init__(self, name, size, description):\n        self.name = name\n        self.size = size\n        self.description = description\n\n    def __repr__(self):\n        return json.dumps({\n            \"name\": self.name, \"size\": self.size, \"description\": self.description\n        })[:1024]\n\nclass Client:\n\n    def update_thing(self, name=None, size=None, thing=None): ...\n\nthing = Thing(name='hello', size=4711, description='This is a description...')\n\nclient.update_thing(thing=thing, size=4712) # Will send a request to the service to update the model's size to 4712\nthing.description = 'Updated'\nthing.size = -1\n# Will send a request to the service to update the model's size to 4713 and description to 'Updated'\nclient.update_thing(name='hello', size=4713, thing=thing)\n\n```\n\n"
    },
    {
      "id": "python_design.html#python-response-paged-protocol",
      "category": "Methods returning collections (paging)",
      "text": "DO return a value that implements the ItemPaged protocol for operations that return collections. The ItemPaged protocol allows the user to iterate through all items in a returned collection, and also provides a method that gives access to individual pages.\n\n```python\nclient = ExampleClient(...)\n\n# List all things - paging happens transparently in the\n# background.\nfor thing in client.list_things():\n    print(thing)\n\n# The protocol also allows you to list things by page...\nfor page_no, page in enumerate(client.list_things().by_page()):\n    print(page_no, page)\n\n```"
    },
    {
      "id": "python_design.html#python-response-paged-continuation",
      "category": "Methods returning collections (paging)",
      "text": "YOU SHOULD NOT expose a continuation parameter in the list_ client method - this is supported in the by_page() function.\n\n```python\nclient = ExampleClient(...)\n\n# No - don't pass in the continuation token directly to the method...\nfor thing in client.list_things(continuation_token='...'):\n    print(thing)\n\n# Yes - provide a continuation_token to in the `by_page` method...\nfor page in client.list_things().by_page(continuation_token='...'):\n    print(page)\n\n```"
    },
    {
      "id": "python_design.html#python-paged-non-server-paged-list",
      "category": "Methods returning collections (paging)",
      "text": "DO return a value that implements the ItemPaged protocol even if the service API currently do not support server driven paging. This allows server driven paging to be added to the service API without introducing breaking changes in the client library."
    },
    {
      "id": "python_design.html#python-lro-poller",
      "category": "Methods invoking long running operations",
      "text": "DO return an object that implements the Poller protocol for long running operations."
    },
    {
      "id": "python_design.html#python-lro-poller-begin-naming",
      "category": "Methods invoking long running operations",
      "text": "DO use a begin_ prefix for all long running operations."
    },
    {
      "id": "python_design.html#python-client-hierarchy",
      "category": "Hierarchical clients",
      "text": "DO create a client type corresponding to each level in the hierarchy except for leaf resource types. You may omit creating a client type for leaf node resources."
    },
    {
      "id": "python_design.html#python-client-hier-creation",
      "category": "Hierarchical clients",
      "text": "DO make it possible to directly create clients for each level in the hierarchy.  The constructor can be called directly or via the parent.\n\n```python\nclass ChildClient:\n    # Yes:\n    __init__(self, parent, name, credentials, **kwargs) ...\n\nclass ChildClient:\n    # Yes:\n    __init__(self, url, credentials, **kwargs) ...\n\n```"
    },
    {
      "id": "python_design.html#python-client-hier-vend",
      "category": "Hierarchical clients",
      "text": "DO provide a get_<child>_client(self, name, **kwargs) method to retrieve a client for the named child. The method must not make a network call to verify the existence of the child."
    },
    {
      "id": "python_design.html#python-client-hier-create",
      "category": "Hierarchical clients",
      "text": "DO provide method create_<child>(...) that creates a child resource. The method should return a client for the newly created child resource."
    },
    {
      "id": "python_design.html#python-client-hier-delete",
      "category": "Hierarchical clients",
      "text": "YOU SHOULD provide method delete_<child>(...) that deletes a child resource."
    },
    {
      "id": "python_design.html#python-models-input-dict",
      "category": "Model types",
      "text": "DO support dicts as alternative inputs to model types."
    },
    {
      "id": "python_design.html#python-models-input-constructor",
      "category": "Model types",
      "text": "DO craft a constructor for models that are intended to be instantiated by a user (i.e. non-result types) with minimal required information and optional information as keyword-only arguments."
    },
    {
      "id": "python_design.html#python-models-async",
      "category": "Model types",
      "text": "DO NOT duplicate models between the root and aio namespace."
    },
    {
      "id": "python_design.html#python-models-dict-result",
      "category": "Model types",
      "text": "DO use a simple Mapping (e.g. dict) rather than creating a <operation>Result class if the <operation>Result class is not used as an input parameter for other APIs.\n\nThe following table enumerates the various models you might create:\n\n|Type|Example|Usage|\n|-|-|\n||Secret|The full data for a resource|\n|Details|SecretDetails|Less important details about a resource. Attached to .details|\n|Item|SecretItem|A partial set of data returned for enumeration|\n|Result|AddSecretResult|A partial or different set of data for a single operation|\n|Result|SecretChangeResult|A partial or different set of data for multiple operations on a model|\n\n```python\n# An example of a model type.\nclass ConfigurationSetting:\n    \"\"\"Model type representing a configuration setting\n\n    :ivar name: The name of the setting\n    :vartype name: str\n    :ivar value: The value of the setting\n    :vartype value: object\n    \"\"\"\n\n    def __init__(self, name: str, value: object):\n        self.name = name\n        self.value = value\n\n    def __repr__(self) -&gt; str:\n        return json.dumps(self.__dict__)[:1024]\n\n```"
    },
    {
      "id": "python_design.html#python-models-enum-string",
      "category": "Enumerations",
      "text": "DO use extensible enumerations."
    },
    {
      "id": "python_design.html#python-models-enum-name-uppercase",
      "category": "Enumerations",
      "text": "DO use UPPERCASE for enum member names.\n\n```python\n\n# Yes\nclass MyGoodEnum(str, Enum):\n    ONE = 'one'\n    TWO = 'two'\n\n# No\nclass MyBadEnum(str, Enum):\n    One = 'one' # No - using PascalCased name.\n    two = 'two' # No - using all lower case name.\n\n```"
    },
    {
      "id": "python_design.html#python-errors-azure-exceptions",
      "category": "Exceptions",
      "text": "YOU SHOULD prefer raising existing exception types from the azure-core (https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/1.9.0/index.html#azure-core-library-exceptions) package over creating new exception types."
    },
    {
      "id": "python_design.html#python-errors-use-standard-exceptions",
      "category": "Exceptions",
      "text": "DO NOT create new exception types when a built-in exception type (https://docs.python.org/3/library/exceptions.html) will suffice."
    },
    {
      "id": "python_design.html#python-auth-credential-azure-core",
      "category": "Authentication",
      "text": "DO use the credentials classes in azure-core whenever possible."
    },
    {
      "id": "python_design.html#python-auth-policy-azure-core",
      "category": "Authentication",
      "text": "DO use authentication policy implementations in azure-core whenever possible."
    },
    {
      "id": "python_design.html#python-namespaces-prefix",
      "category": "Namespaces",
      "text": "DO implement your library as a sub-package of the azure root namespace.\n\nNote: You MUST NOT use microsoft as your root namespace. If you need to include microsoft in the namespace (e.g. because of policy requirements for extensions to other projects such as opentelemetry), you should concatenate it with the package specific namespace with an underscore (e.g. microsoft_myservice). You may still use microsoft-myservice as the distribution package name in this scenario."
    },
    {
      "id": "python_design.html#python-namespaces-grouping",
      "category": "Namespaces",
      "text": "YOU MAY include a group name segment in your namespace (for example, azure.<group>.<servicename>) if your service or family of services have common behavior (for example, shared authentication types)."
    },
    {
      "id": "python_design.html#python-namespaces-async",
      "category": "Namespaces",
      "text": "DO use an .aio suffix added to the namespace of the sync client for async clients.\n\nExample:\n\n```python\n# Yes:\nfrom azure.exampleservice.aio import ExampleServiceClient\n\n# No: Wrong namespace, wrong client name...\nfrom azure.exampleservice import AsyncExampleServiceClient\n\n```\n\nHere are some examples of namespaces that meet these guidelines:\nazure.storage.blob\nazure.keyvault.certificates\nazure.ai.textanalytics\nazure.mgmt.servicebus\n\nThe asyncio library has been available since Python 3.4, and the async/await keywords were introduced in Python 3.5. Despite such availability, most Python developers aren't familiar with or comfortable using libraries that only provide asynchronous methods."
    },
    {
      "id": "python_design.html#python-client-sync-async",
      "category": "Async support",
      "text": "DO provide both sync and async versions of your APIs"
    },
    {
      "id": "python_design.html#python-client-async-keywords",
      "category": "Async support",
      "text": "DO use the async/await keywords (requires Python 3.5+). Do not use the yield from coroutine or asyncio.coroutine (https://docs.python.org/3.4/library/asyncio-task.html) syntax."
    },
    {
      "id": "python_design.html#python-client-separate-sync-async",
      "category": "Async support",
      "text": "DO provide two separate client classes for synchronous and asynchronous operations.  Do not combine async and sync operations in the same class.\n\n```python\n# Yes\n# In module azure.example\nclass ExampleClient:\n    def some_service_operation(self, name, size) ...\n\n# In module azure.example.aio\nclass ExampleClient:\n    # Same method name as sync, different client\n    async def some_service_operation(self, name, size) ...\n\n# No\n# In module azure.example\nclass ExampleClient:\n    def some_service_operation(self, name, size) ...\n\nclass AsyncExampleClient: # No async/async pre/postfix.\n    async def some_service_operation(self, name, size) ...\n\n# No\n# In module azure.example\nclass ExampleClient: # Don't mix'n match with different method names\n    def some_service_operation(self, name, size) ...\n    async def some_service_operation_async(self, name, size) ...\n\n\n```"
    },
    {
      "id": "python_design.html#python-client-same-name-sync-async",
      "category": "Async support",
      "text": "DO use the same client name for sync and async packages\n\nExample:\n\n|Sync/async|Namespace|Distribution package name|Client name|\n|-|-|-|-|\n|Sync|azure.sampleservice|azure-sampleservice|azure.sampleservice.SampleServiceClient|\n|Async|azure.sampleservice.aio|azure-sampleservice-aio|azure.sampleservice.aio.SampleServiceClient|"
    },
    {
      "id": "python_design.html#python-client-namespace-sync",
      "category": "Async support",
      "text": "DO use the same namespace for the synchronous client as the synchronous version of the package with .aio appended.\n\nExample:\n\n```python\nfrom azure.storage.blob import BlobServiceClient # Sync client\n\nfrom azure.storage.blob.aio import BlobServiceClient # Async client\n\n```"
    },
    {
      "id": "python_design.html#python-client-same-pkg-name-sync-async",
      "category": "Async support",
      "text": "DO use the same name for the asynchronous version of the package as the synchronous version of the package with -aio appended."
    },
    {
      "id": "python_design.html#python-client-async-http-stack",
      "category": "Async support",
      "text": "DO use aiohttp (https://aiohttp.readthedocs.io/en/stable/) as the default HTTP stack for async operations. Use azure.core.pipeline.transport.AioHttpTransport as the default transport type for the async client."
    },
    {
      "id": "python_design.html#python-packaging-name",
      "category": "Packaging",
      "text": "DO name your package after the namespace of your main client class. For example, if your main client class is in the azure.data.tables namespace, your package name should be azure-data-tables."
    },
    {
      "id": "python_design.html#python-packaging-name-allowed-chars",
      "category": "Packaging",
      "text": "DO use all lowercase in your package name with a dash (-) as a separator."
    },
    {
      "id": "python_design.html#python-packaging-name-disallowed-chars",
      "category": "Packaging",
      "text": "DO NOT use underscore (_) or period (.) in your package name. If your namespace includes underscores, replace them with dash (-) in the distribution package name."
    },
    {
        "id": "python_implementation.html#python-codestyle-vars-naming",
        "category": "Naming conventions",
        "text": "DO use snake_case for variable, function, and method names:\n\n```python\n# Yes:\nservice_client = ServiceClient()\n\nservice_client.list_things()\n\ndef do_something():\n    ...\n\n# No:\nserviceClient = ServiceClient()\n\nservice_client.listThings()\n\ndef DoSomething():\n    ...\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-type-naming",
        "category": "Naming conventions",
        "text": "DO use Pascal case for types:\n\n```python\n# Yes:\nclass ThisIsCorrect(object):\n    pass\n\n# No:\nclass this_is_not_correct(object):\n    pass\n\n# No:\nclass camelCasedTypeName(object):\n    pass\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-const-naming",
        "category": "Naming conventions",
        "text": "DO use ALL CAPS for constants:\n\n```python\n# Yes:\nMAX_SIZE = 4711\n\n# No:\nmax_size = 4711\n\n# No:\nMaxSize = 4711\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-module-naming",
        "category": "Naming conventions",
        "text": "DO use snake_case for module names."
    },
    {
        "id": "python_implementation.html#python-codestyle-static-methods",
        "category": "Method signatures",
        "text": "DO NOT use static methods (staticmethod (https://docs.python.org/3/library/functions.html#staticmethod) . Prefer module level functions instead.\n\nStatic methods are rare and usually forced by other libraries."
    },
    {
        "id": "python_implementation.html#python-codestyle-properties",
        "category": "Method signatures",
        "text": "DO NOT use simple getter and setter functions. Use properties instead.\n\n```python\n# Yes\nclass GoodThing(object):\n\n    @property\n    def something(self):\n        \"\"\" Example of a good read-only property.\"\"\"\n        return self._something\n\n# No\nclass BadThing(object):\n\n    def get_something(self):\n        \"\"\" Example of a bad 'getter' style method.\"\"\"\n        return self._something\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-long-args",
        "category": "Method signatures",
        "text": "YOU SHOULD NOT have methods that require more than five positional parameters. Optional/flag parameters can be accepted using keyword-only arguments, or **kwargs.\n\nSee TODO: insert link for general guidance on positional vs. optional parameters here."
    },
    {
        "id": "python_implementation.html#python-codestyle-optional-args",
        "category": "Method signatures",
        "text": "DO use keyword-only arguments for optional or less-often-used arguments for modules that only need to support Python 3.\n\n```python\n# Yes\ndef foo(a, b, *, c, d=None):\n    # Note that I can even have required keyword-only arguments...\n    ...\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-kwargs",
        "category": "Method signatures",
        "text": "DO use keyword-only arguments for arguments that have no obvious ordering.\n\n```python\n# Yes - `source` and `dest` have logical order, `recurse` and `overwrite` do not.\ndef copy(source, dest, *, recurse=False, overwrite=False) ...\n\n\n# No\ndef copy(source, dest, recurse=False, overwrite=False) ...\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-positional-params",
        "category": "Method signatures",
        "text": "DO specify the parameter name when calling methods with more than two required positional parameters.\n\n```python\ndef foo(a, b, c):\n    pass\n\n\ndef bar(d, e):\n    pass\n\n\n# Yes:\nfoo(a=1, b=2, c=3)\nbar(1, 2)\nbar(e=3, d=4)\n\n# No:\nfoo(1, 2, 3)\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-optional-param-calling",
        "category": "Method signatures",
        "text": "DO specify the parameter name for optional parameters when calling functions.\n\n```python\ndef foo(a, b=1, c=None):\n    pass\n\n\n# Yes:\nfoo(1, b=2, c=3)\n\n# No:\nfoo(1, 2, 3)\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-private-api",
        "category": "Public vs \"private\"",
        "text": "DO use a single leading underscore to indicate that a name isn't part of the public API.  Non-public APIs aren't guaranteed to be stable."
    },
    {
        "id": "python_implementation.html#python-codestyle-double-underscore",
        "category": "Public vs \"private\"",
        "text": "DO NOT use leading double underscore prefixed method names unless name clashes in the inheritance hierarchy are likely.  Name clashes are rare."
    },
    {
        "id": "python_implementation.html#python-codestyle-public-api",
        "category": "Public vs \"private\"",
        "text": "DO add public methods and types to the module's __all__ attribute."
    },
    {
        "id": "python_implementation.html#python-codestyle-interal-module",
        "category": "Public vs \"private\"",
        "text": "DO use a leading underscore for internal modules. You may omit a leading underscore if the module is a submodule of an internal module.\n\n```python\n# Yes:\nazure.exampleservice._some_internal_module\n\n# Yes - some_internal_module is still considered internal since it is a submodule of an internal module:\nazure.exampleservice._internal.some_internal_module\n\n# No - some_internal_module is considered public:\nazure.exampleservice.some_internal_module\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-structural-subtyping",
        "category": "Types (or not)",
        "text": "DO prefer structural subtyping and protocols over explicit type checks."
    },
    {
        "id": "python_implementation.html#python-codestyle-abstract-collections",
        "category": "Types (or not)",
        "text": "DO derive from the abstract collections base classes collections.abc (or collections for Python 2.7) to provide custom mapping types."
    },
    {
        "id": "python_implementation.html#python-codestyle-pep484",
        "category": "Types (or not)",
        "text": "DO provide type hints PEP484 (https://www.python.org/dev/peps/pep-0484/) for publicly documented classes and functions"
    },
    {
        "id": "python_implementation.html#python-codestyle-vars-naming",
        "category": "Naming conventions",
        "text": "DO use snake_case for variable, function, and method names:\n\n```python\n# Yes:\nservice_client = ServiceClient()\n\nservice_client.list_things()\n\ndef do_something():\n    ...\n\n# No:\nserviceClient = ServiceClient()\n\nservice_client.listThings()\n\ndef DoSomething():\n    ...\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-type-naming",
        "category": "Naming conventions",
        "text": "DO use Pascal case for types:\n\n```python\n# Yes:\nclass ThisIsCorrect(object):\n    pass\n\n# No:\nclass this_is_not_correct(object):\n    pass\n\n# No:\nclass camelCasedTypeName(object):\n    pass\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-const-naming",
        "category": "Naming conventions",
        "text": "DO use ALL CAPS for constants:\n\n```python\n# Yes:\nMAX_SIZE = 4711\n\n# No:\nmax_size = 4711\n\n# No:\nMaxSize = 4711\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-module-naming",
        "category": "Naming conventions",
        "text": "DO use snake_case for module names."
    },
    {
        "id": "python_implementation.html#python-codestyle-static-methods",
        "category": "Method signatures",
        "text": "DO NOT use static methods (staticmethod (https://docs.python.org/3/library/functions.html#staticmethod) . Prefer module level functions instead.\n\nStatic methods are rare and usually forced by other libraries."
    },
    {
        "id": "python_implementation.html#python-codestyle-properties",
        "category": "Method signatures",
        "text": "DO NOT use simple getter and setter functions. Use properties instead.\n\n```python\n# Yes\nclass GoodThing(object):\n\n    @property\n    def something(self):\n        \"\"\" Example of a good read-only property.\"\"\"\n        return self._something\n\n# No\nclass BadThing(object):\n\n    def get_something(self):\n        \"\"\" Example of a bad 'getter' style method.\"\"\"\n        return self._something\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-long-args",
        "category": "Method signatures",
        "text": "YOU SHOULD NOT have methods that require more than five positional parameters. Optional/flag parameters can be accepted using keyword-only arguments, or **kwargs.\n\nSee TODO: insert link for general guidance on positional vs. optional parameters here."
    },
    {
        "id": "python_implementation.html#python-codestyle-optional-args",
        "category": "Method signatures",
        "text": "DO use keyword-only arguments for optional or less-often-used arguments for modules that only need to support Python 3.\n\n```python\n# Yes\ndef foo(a, b, *, c, d=None):\n    # Note that I can even have required keyword-only arguments...\n    ...\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-kwargs",
        "category": "Method signatures",
        "text": "DO use keyword-only arguments for arguments that have no obvious ordering.\n\n```python\n# Yes - `source` and `dest` have logical order, `recurse` and `overwrite` do not.\ndef copy(source, dest, *, recurse=False, overwrite=False) ...\n\n\n# No\ndef copy(source, dest, recurse=False, overwrite=False) ...\n\n```"
    },
    {
        "id": "python_implementation.html#python-codestyle-double-underscore",
        "category": "Public vs \"private\"",
        "text": "DO NOT use leading double underscore prefixed method names unless name clashes in the inheritance hierarchy are likely.  Name clashes are rare."
    },
    {
        "id": "python_implementation.html#python-codestyle-abstract-collections",
        "category": "Types (or not)",
        "text": "DO derive from the abstract collections base classes collections.abc (or collections for Python 2.7) to provide custom mapping types."
    },
    {
        "id": "python_implementation.html#python-codestyle-pep484",
        "category": "Types (or not)",
        "text": "DO provide type hints PEP484 (https://www.python.org/dev/peps/pep-0484/) for publicly documented classes and functions"
    }
  ]
  