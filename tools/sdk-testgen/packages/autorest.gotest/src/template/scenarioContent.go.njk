{%- set _ = allVariables.splice(0, allVariables.length) %}
{%- for step in steps %}
// From step {{step.step}}
    {%- if step.type == "restCall" %}
        {%- set example = step.exampleModel %}
        {%- set clientVariable = jsFunc.uncapitalize(example.operationGroup.language.go.clientName) %}
        {%- if allVariables.indexOf(clientVariable)<0 %}
{{clientVariable}} := {{packageName}}.{{example.operationGroup.language.go.clientCtorName}}({{example.clientParametersOutput + ", " if example.clientParametersOutput else ""}}cred, options)
            {%- set _ = allVariables.push(clientVariable) %}
        {%- endif %}
    {%- endif %}
{
    {%- for name, value in step.variables %}
{{name}} := {{value}}
    {%- endfor %}
    {%- if step.type == "restCall" %}		
        {%- if example.checkResponse %}
            {%- set resVariable = jsFunc.genVariableName(example.returnInfo[0]) %}
        {%- endif %}
        {%- if example.returnInfo.length == 2 %}
            {%- if example.isLRO %}
                {%- set pollerVariable = jsFunc.genVariableName(example.pollerType)%}
                {{pollerVariable}}, err := {{clientVariable}}.{{example.opName}}({{example.methodParametersOutput}})
            {%- else %}
                {% if example.checkResponse %}{{resVariable}}{%- else %}_{%- endif %}, err := {{clientVariable}}.{{example.opName}}({{example.methodParametersOutput}})
            {%- endif %}
            if err != nil {
                t.Fatalf("Request error: %v", err)
            }
            {%- if example.isLRO %}
            {%- if example.checkResponse %}
            var {{resVariable}} {{packageName}}.{{example.operationGroup.language.go.clientName}}{{example.operation.language.go.name}}Response
            {%- endif %}
            if recording.GetRecordMode() == recording.PlaybackMode {
                for {
                    _, err = {{pollerVariable}}.Poller.Poll(ctx)
                    if err != nil {
                        t.Fatalf("Request error: %v", err)
                    }
                    if {{pollerVariable}}.Poller.Done() {
                        {% if example.checkResponse %}{{resVariable}}{%- else %}_{%- endif %}, err = {{pollerVariable}}.Poller.FinalResponse(ctx)
                        if err != nil {
                            t.Fatalf("Request error: %v", err)
                        }
                        break
                    }
                }
            } else {
                {% if example.checkResponse %}{{resVariable}}{%- else %}_{%- endif %}, err = {{pollerVariable}}.PollUntilDone(ctx, 10*time.Second)
                if err != nil {
                    t.Fatalf("Request error: %v", err)
                }
            }
            {%- endif %}
        {%- elif  (example.returnInfo.length == 1) and (example.isPageable) %}
            {%- set pagerVariable = jsFunc.genVariableName(example.pageableType) %}
            {{pagerVariable}} := {{clientVariable}}.{{example.opName}}({{example.methodParametersOutput}})
            for {{pagerVariable}}.NextPage(ctx) {
                if err := {{pagerVariable}}.Err(); err != nil {
                    t.Fatalf("Failed to advance page: %v", err)
                }
                for _, v := range {{pagerVariable}}.PageResponse().{{example.pageableItemName}} {
                    t.Logf("Pager result: %#v\n", v)
                }
            }
        {%- else %}
            {{clientVariable}}.{{example.opName}}({{example.methodParametersOutput}})
        {%- endif %}

        {%- if example.isLRO and example.isPageable and example.checkResponse %}
            for {{resVariable}}.NextPage(ctx) {
                if err := {{resVariable}}.Err(); err != nil {
                    t.Fatalf("Failed to advance page: %v", err)
                }
                for _, v := range {{resVariable}}.PageResponse().{{example.pageableItemName}} {
                    t.Logf("Pager result: %#v\n", v)
                }
            }
        {%- endif %}

        {%- if example.checkResponse and not example.isPageable%}
            t.Logf("Response result: %#v\n", {{resVariable}}.{%- if example.isMultiRespOperation %}Value{%- else %}{{example.operationGroup.language.go.clientName}}{{example.operation.language.go.name}}Result{%- endif %})

            {%- for outputVariableName, variableConfigs in step.outputVariablesModel%}
                {{outputVariableName}} = {% if step.outputVariables[outputVariableName]["isPtr"] %}*{% endif %}{{resVariable}}.{% for variableConfig in variableConfigs %}{{variableConfig.languageName}}{% endfor %}
            {%- endfor %}
        {%- endif %}
    {%- elif step.type == "armTemplateDeployment" %}
        {%- if step.armTemplatePayload.outputs %}
        {%- set deploymentVariable = "deploymentExtend" %}
        {%- else %}
        {%- set deploymentVariable = "_" %}
        {%- endif %}
    template := {{step.armTemplateOutput}}
    params := map[string]interface{}{
        {%- for k, v in step.armTemplatePayload.parameters %}
        {%- if v.defaultValue === "$("  + k + ")" %}
    "{{k}}": map[string]interface{}{ "value": {{k}},},
        {%- endif %}
        {%- endfor %}
    }
    {{deploymentVariable}}, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "{{step.step}}", template, params)
    if err != nil {
        t.Fatalf("Deployment error: %v", err)
    }
    {%- for k,v in step.armTemplatePayload.outputs %}
    {{k}} = {{deploymentVariable}}.Properties.Outputs["{{k}}"].(map[string]interface{})["value"].(string)
    {%- endfor %}
    {%- endif %}
    }
    {%- if not loop.last %}

    {% endif %}
    {%- endfor %}