//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package spring_test

import (
	"context"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager//test/scenario_test"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
)

var (
	ctx                        context.Context
	cred                       azcore.TokenCredential
	pathToPackage              = "sdk/resourcemanager//test/scenario_test/spring/testdata"
	options                    *arm.ClientOptions
	resourceGroup              *armresources.ResourceGroup
	appName                    = "app01"
	ascDomainName              = ".azuremicroservices.io"
	dnsCname                   = "asc"
	insightsInstrumentationKey string
	serviceName                = "test-scenario-instance"
	blobUrl                    = scenario_test.GetEnv("BLOB_URL", "")
	customDomainName           = scenario_test.GetEnv("CUSTOM_DOMAIN_NAME", "")
	dnsResourceGroup           = scenario_test.GetEnv("DNS_RESOURCE_GROUP", "")
	dnsSubscriptionId          = scenario_test.GetEnv("DNS_SUBSCRIPTION_ID", "")
	location                   = scenario_test.GetEnv("LOCATION", "eastus")
	mysqlKey                   = scenario_test.GetEnv("MYSQL_KEY", "")
	resourceGroupName          = scenario_test.GetEnv("RESOURCE_GROUP_NAME", "")
	subscriptionId             = scenario_test.GetEnv("SUBSCRIPTION_ID", scenario_test.GetEnv("AZURE_SUBSCRIPTION_ID", ""))
	userAssignedIdentity       = scenario_test.GetEnv("USER_ASSIGNED_IDENTITY", "")
)

func TestSpring(t *testing.T) {
	// Setup for test
	scenario_test.StartRecording(t, pathToPackage)
	ctx = context.Background()
	options = scenario_test.CreateArmOptions(t)
	cred = scenario_test.CreateCred(t, ctx, options)
	resourceGroup = scenario_test.CreateResourceGroup(t, ctx, cred, subscriptionId, location, options)
	resourceGroupName = *resourceGroup.Name
	// Clenup for test
	t.Cleanup(func() {
		scenario_test.DeleteResourceGroup(t, ctx, cred, subscriptionId, resourceGroupName, options)
		scenario_test.StopRecording(t)
	})
	prepare(t)
	scenarioSpring(t)
	cleanup(t)
}

func prepare(t *testing.T) {
	// From step Generate_Unique_ServiceName
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"outputs": map[string]interface{}{
				"serviceName": map[string]interface{}{
					"type":  "string",
					"value": "[substring(variables('serviceNameLong'), 0, 12)]",
				},
			},
			"parameters": map[string]interface{}{
				"serviceNamePrefix": map[string]interface{}{
					"type":         "string",
					"defaultValue": "asc-",
				},
			},
			"resources": []interface{}{},
			"variables": map[string]interface{}{
				"serviceNameLong": "[concat(parameters('serviceNamePrefix'), uniqueString(resourceGroup().id))]",
			},
		}
		params := map[string]interface{}{}
		deploymentExtend, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "Generate_Unique_ServiceName", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
		serviceName = deploymentExtend.Properties.Outputs["serviceName"].(map[string]interface{})["value"].(string)
	}

	// From step Create_Application_Insight_Instance
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"outputs": map[string]interface{}{
				"insightsInstrumentationKey": map[string]interface{}{
					"type":  "string",
					"value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2014-04-01').InstrumentationKey]",
				},
			},
			"parameters": map[string]interface{}{
				"name": map[string]interface{}{
					"type":         "string",
					"defaultValue": "asc-api-ai-instance",
					"metadata": map[string]interface{}{
						"description": "Name of Application Insights resource.",
					},
				},
			},
			"resources": []interface{}{
				map[string]interface{}{
					"name":       "[parameters('name')]",
					"type":       "microsoft.insights/components",
					"apiVersion": "2014-04-01",
					"location":   "eastus",
					"properties": map[string]interface{}{
						"ApplicationId":    "[parameters('name')]",
						"Application_Type": "web",
						"Flow_Type":        "Redfield",
						"Request_Source":   "CustomDeployment",
					},
					"tags": map[string]interface{}{},
				},
			},
		}
		params := map[string]interface{}{}
		deploymentExtend, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "Create_Application_Insight_Instance", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
		insightsInstrumentationKey = deploymentExtend.Properties.Outputs["insightsInstrumentationKey"].(map[string]interface{})["value"].(string)
	}

	// From step Add_Dns_Cname_Record
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"parameters": map[string]interface{}{
				"userAssignedIdentity": map[string]interface{}{
					"type":         "string",
					"defaultValue": "$(userAssignedIdentity)",
				},
				"utcValue": map[string]interface{}{
					"type":         "string",
					"defaultValue": "[utcNow()]",
				},
			},
			"resources": []interface{}{
				map[string]interface{}{
					"name":       "Add_Dns_Cname_Record",
					"type":       "Microsoft.Resources/deploymentScripts",
					"apiVersion": "2020-10-01",
					"identity": map[string]interface{}{
						"type": "UserAssigned",
						"userAssignedIdentities": map[string]interface{}{
							"[parameters('userAssignedIdentity')]": map[string]interface{}{},
						},
					},
					"kind":     "AzurePowerShell",
					"location": "[resourceGroup().location]",
					"properties": map[string]interface{}{
						"azPowerShellVersion": "6.2",
						"cleanupPreference":   "OnSuccess",
						"environmentVariables": []interface{}{
							map[string]interface{}{
								"name":  "resourceGroupName",
								"value": dnsResourceGroup,
							},
							map[string]interface{}{
								"name":  "dnsZoneName",
								"value": customDomainName,
							},
							map[string]interface{}{
								"name":  "dnsCname",
								"value": "asc",
							},
							map[string]interface{}{
								"name":  "dnsCnameAlias",
								"value": serviceName + ".azuremicroservices.io",
							},
						},
						"forceUpdateTag":    "[parameters('utcValue')]",
						"retentionInterval": "P1D",
						"scriptContent":     "# Copyright (c) 2021 Microsoft Corporation\n# \n# This software is released under the MIT License.\n# https://opensource.org/licenses/MIT\n$resourceGroupName = ${Env:resourceGroupName}\n$dnsCname = ${Env:dnsCname}\n$dnsZoneName = ${Env:dnsZoneName}\n$dnsCnameAlias = ${Env:dnsCnameAlias}\nConnect-AzAccount -Identity\nNew-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ZoneName $dnsZoneName -ResourceGroupName $resourceGroupName -Ttl 3600 -DnsRecords (New-AzDnsRecordConfig -Cname $dnsCnameAlias) -Overwrite\n$RecordSet = Get-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ResourceGroupName $resourceGroupName -ZoneName $dnsZoneName\n$RecordSet",
						"timeout":           "PT1H",
					},
				},
			},
		}
		params := map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{"value": userAssignedIdentity},
		}
		_, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "Add_Dns_Cname_Record", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
	}
}

func scenarioSpring(t *testing.T) {
	var relativePath string
	var uploadUrl string
	// From step Services_CheckNameAvailability
	servicesClient := test.NewServicesClient(subscriptionId, cred, options)
	{
		servicesClientCheckNameAvailabilityResponse, err := servicesClient.CheckNameAvailability(ctx,
			location,
			test.NameAvailabilityParameters{
				Name: to.StringPtr(serviceName),
				Type: to.StringPtr("Microsoft.AppPlatform/Spring"),
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", servicesClientCheckNameAvailabilityResponse.ServicesClientCheckNameAvailabilityResult)
	}

	// From step Services_CreateOrUpdate
	{
		servicesClientCreateOrUpdatePollerResponse, err := servicesClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			serviceName,
			test.ServiceResource{
				Location: to.StringPtr(location),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				Properties: &test.ClusterResourceProperties{},
				SKU: &test.SKU{
					Name: to.StringPtr("S0"),
					Tier: to.StringPtr("Standard"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.ServicesClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = servicesClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if servicesClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = servicesClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = servicesClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.ServicesClientCreateOrUpdateResult)
	}

	// From step Services_Get
	{
		servicesClientGetResponse, err := servicesClient.Get(ctx,
			resourceGroupName,
			serviceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", servicesClientGetResponse.ServicesClientGetResult)
	}

	// From step Services_Update
	{
		servicesClientUpdatePollerResponse, err := servicesClient.BeginUpdate(ctx,
			resourceGroupName,
			serviceName,
			test.ServiceResource{
				Tags: map[string]*string{
					"created-by": to.StringPtr("api-test"),
					"hello":      to.StringPtr("world"),
				},
				SKU: &test.SKU{
					Name: to.StringPtr("S0"),
					Tier: to.StringPtr("Standard"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.ServicesClientUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = servicesClientUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if servicesClientUpdatePollerResponse.Poller.Done() {
					response, err = servicesClientUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = servicesClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.ServicesClientUpdateResult)
	}

	// From step Services_DisableTestEndpoint
	{
		_, err := servicesClient.DisableTestEndpoint(ctx,
			resourceGroupName,
			serviceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
	}

	// From step Services_EnableTestEndpoint
	{
		servicesClientEnableTestEndpointResponse, err := servicesClient.EnableTestEndpoint(ctx,
			resourceGroupName,
			serviceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", servicesClientEnableTestEndpointResponse.ServicesClientEnableTestEndpointResult)
	}

	// From step Services_RegenerateTestKey
	{
		servicesClientRegenerateTestKeyResponse, err := servicesClient.RegenerateTestKey(ctx,
			resourceGroupName,
			serviceName,
			test.RegenerateTestKeyRequestPayload{
				KeyType: test.TestKeyTypePrimary.ToPtr(),
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", servicesClientRegenerateTestKeyResponse.ServicesClientRegenerateTestKeyResult)
	}

	// From step Services_ListTestKeys
	{
		servicesClientListTestKeysResponse, err := servicesClient.ListTestKeys(ctx,
			resourceGroupName,
			serviceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", servicesClientListTestKeysResponse.ServicesClientListTestKeysResult)
	}

	// From step Certificates_CreateOrUpdate
	certificatesClient := test.NewCertificatesClient(subscriptionId, cred, options)
	{
		certificateName := "asc-certificate"
		certificatesClientCreateOrUpdatePollerResponse, err := certificatesClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			serviceName,
			certificateName,
			test.CertificateResource{
				Properties: &test.CertificateProperties{
					KeyVaultCertName: to.StringPtr("pfx-cert"),
					VaultURI:         to.StringPtr("https://integration-test-prod.vault.azure.net/"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.CertificatesClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = certificatesClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if certificatesClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = certificatesClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = certificatesClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.CertificatesClientCreateOrUpdateResult)
	}

	// From step Certificates_Get
	{
		certificateName := "asc-certificate"
		certificatesClientGetResponse, err := certificatesClient.Get(ctx,
			resourceGroupName,
			serviceName,
			certificateName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", certificatesClientGetResponse.CertificatesClientGetResult)
	}

	// From step Certificates_List
	{
		certificatesClientListPager := certificatesClient.List(resourceGroupName,
			serviceName,
			nil)
		for certificatesClientListPager.NextPage(ctx) {
			if err := certificatesClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range certificatesClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step ConfigServers_Validate
	configServersClient := test.NewConfigServersClient(subscriptionId, cred, options)
	{
		configServersClientValidatePollerResponse, err := configServersClient.BeginValidate(ctx,
			resourceGroupName,
			serviceName,
			test.ConfigServerSettings{
				GitProperty: &test.ConfigServerGitProperty{
					Label: to.StringPtr("master"),
					SearchPaths: []*string{
						to.StringPtr("/")},
					URI: to.StringPtr("https://github.com/VSChina/asc-config-server-test-public.git"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.ConfigServersClientValidateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = configServersClientValidatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if configServersClientValidatePollerResponse.Poller.Done() {
					response, err = configServersClientValidatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = configServersClientValidatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.ConfigServersClientValidateResult)
	}

	// From step ConfigServers_UpdatePut
	{
		configServersClientUpdatePutPollerResponse, err := configServersClient.BeginUpdatePut(ctx,
			resourceGroupName,
			serviceName,
			test.ConfigServerResource{
				Properties: &test.ConfigServerProperties{
					ConfigServer: &test.ConfigServerSettings{
						GitProperty: &test.ConfigServerGitProperty{
							Label: to.StringPtr("master"),
							SearchPaths: []*string{
								to.StringPtr("/")},
							URI: to.StringPtr("https://github.com/VSChina/asc-config-server-test-public.git"),
						},
					},
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.ConfigServersClientUpdatePutResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = configServersClientUpdatePutPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if configServersClientUpdatePutPollerResponse.Poller.Done() {
					response, err = configServersClientUpdatePutPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = configServersClientUpdatePutPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.ConfigServersClientUpdatePutResult)
	}

	// From step ConfigServers_UpdatePatch
	{
		configServersClientUpdatePatchPollerResponse, err := configServersClient.BeginUpdatePatch(ctx,
			resourceGroupName,
			serviceName,
			test.ConfigServerResource{
				Properties: &test.ConfigServerProperties{
					ConfigServer: &test.ConfigServerSettings{
						GitProperty: &test.ConfigServerGitProperty{
							URI: to.StringPtr("https://github.com/azure-samples/spring-petclinic-microservices-config"),
						},
					},
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.ConfigServersClientUpdatePatchResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = configServersClientUpdatePatchPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if configServersClientUpdatePatchPollerResponse.Poller.Done() {
					response, err = configServersClientUpdatePatchPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = configServersClientUpdatePatchPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.ConfigServersClientUpdatePatchResult)
	}

	// From step ConfigServers_Get
	{
		configServersClientGetResponse, err := configServersClient.Get(ctx,
			resourceGroupName,
			serviceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", configServersClientGetResponse.ConfigServersClientGetResult)
	}

	// From step MonitoringSettings_UpdatePut
	monitoringSettingsClient := test.NewMonitoringSettingsClient(subscriptionId, cred, options)
	{
		monitoringSettingsClientUpdatePutPollerResponse, err := monitoringSettingsClient.BeginUpdatePut(ctx,
			resourceGroupName,
			serviceName,
			test.MonitoringSettingResource{
				Properties: &test.MonitoringSettingProperties{
					AppInsightsInstrumentationKey: to.StringPtr(insightsInstrumentationKey),
					AppInsightsSamplingRate:       to.Float64Ptr(50),
					TraceEnabled:                  to.BoolPtr(true),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.MonitoringSettingsClientUpdatePutResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = monitoringSettingsClientUpdatePutPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if monitoringSettingsClientUpdatePutPollerResponse.Poller.Done() {
					response, err = monitoringSettingsClientUpdatePutPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = monitoringSettingsClientUpdatePutPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.MonitoringSettingsClientUpdatePutResult)
	}

	// From step MonitoringSettings_Get
	{
		monitoringSettingsClientGetResponse, err := monitoringSettingsClient.Get(ctx,
			resourceGroupName,
			serviceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", monitoringSettingsClientGetResponse.MonitoringSettingsClientGetResult)
	}

	// From step MonitoringSettings_UpdatePatch
	{
		monitoringSettingsClientUpdatePatchPollerResponse, err := monitoringSettingsClient.BeginUpdatePatch(ctx,
			resourceGroupName,
			serviceName,
			test.MonitoringSettingResource{
				Properties: &test.MonitoringSettingProperties{
					AppInsightsSamplingRate: to.Float64Ptr(100),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.MonitoringSettingsClientUpdatePatchResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = monitoringSettingsClientUpdatePatchPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if monitoringSettingsClientUpdatePatchPollerResponse.Poller.Done() {
					response, err = monitoringSettingsClientUpdatePatchPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = monitoringSettingsClientUpdatePatchPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.MonitoringSettingsClientUpdatePatchResult)
	}

	// From step Apps_Create
	appsClient := test.NewAppsClient(subscriptionId, cred, options)
	{
		appsClientCreateOrUpdatePollerResponse, err := appsClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			test.AppResource{
				Identity: &test.ManagedIdentityProperties{
					Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
					PrincipalID: to.StringPtr("principalid"),
					TenantID:    to.StringPtr("tenantid"),
				},
				Location: to.StringPtr(location),
				Properties: &test.AppResourceProperties{
					ActiveDeploymentName: to.StringPtr("mydeployment1"),
					EnableEndToEndTLS:    to.BoolPtr(false),
					Fqdn:                 to.StringPtr(appName + ".mydomain.com"),
					HTTPSOnly:            to.BoolPtr(false),
					Public:               to.BoolPtr(false),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.AppsClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = appsClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if appsClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = appsClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = appsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.AppsClientCreateOrUpdateResult)
	}

	// From step Apps_Get
	{
		appsClientGetResponse, err := appsClient.Get(ctx,
			resourceGroupName,
			serviceName,
			appName,
			&test.AppsClientGetOptions{SyncStatus: nil})
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", appsClientGetResponse.AppsClientGetResult)
	}

	// From step Deployments_CreateOrUpdate_Default
	deploymentsClient := test.NewDeploymentsClient(subscriptionId, cred, options)
	{
		deploymentName := "default"
		deploymentsClientCreateOrUpdatePollerResponse, err := deploymentsClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			deploymentName,
			test.DeploymentResource{
				Properties: &test.DeploymentResourceProperties{
					DeploymentSettings: &test.DeploymentSettings{
						CPU: to.Int32Ptr(1),
						EnvironmentVariables: map[string]*string{
							"env": to.StringPtr("test"),
						},
						JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
						MemoryInGB:     to.Int32Ptr(3),
						RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
					},
					Source: &test.UserSourceInfo{
						Type:             test.UserSourceTypeJar.ToPtr(),
						ArtifactSelector: to.StringPtr("sub-module-1"),
						RelativePath:     to.StringPtr("<default>"),
						Version:          to.StringPtr("1.0"),
					},
				},
				SKU: &test.SKU{
					Name:     to.StringPtr("S0"),
					Capacity: to.Int32Ptr(1),
					Tier:     to.StringPtr("Standard"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.DeploymentsClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = deploymentsClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if deploymentsClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = deploymentsClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = deploymentsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.DeploymentsClientCreateOrUpdateResult)
	}

	// From step Deployments_Get
	{
		deploymentName := "default"
		deploymentsClientGetResponse, err := deploymentsClient.Get(ctx,
			resourceGroupName,
			serviceName,
			appName,
			deploymentName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", deploymentsClientGetResponse.DeploymentsClientGetResult)
	}

	// From step Apps_Update_ActiveDeployment
	{
		appsClientUpdatePollerResponse, err := appsClient.BeginUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			test.AppResource{
				Identity: &test.ManagedIdentityProperties{
					Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
					PrincipalID: to.StringPtr("principalid"),
					TenantID:    to.StringPtr("tenantid"),
				},
				Properties: &test.AppResourceProperties{
					ActiveDeploymentName: to.StringPtr("default"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.AppsClientUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = appsClientUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if appsClientUpdatePollerResponse.Poller.Done() {
					response, err = appsClientUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = appsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.AppsClientUpdateResult)
	}

	// From step Apps_Update_Disk
	{
		appsClientUpdatePollerResponse, err := appsClient.BeginUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			test.AppResource{
				Identity: &test.ManagedIdentityProperties{
					Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
					PrincipalID: to.StringPtr("principalid"),
					TenantID:    to.StringPtr("tenantid"),
				},
				Properties: &test.AppResourceProperties{
					PersistentDisk: &test.PersistentDisk{
						MountPath: to.StringPtr("/data"),
						SizeInGB:  to.Int32Ptr(10),
					},
					TemporaryDisk: &test.TemporaryDisk{
						MountPath: to.StringPtr("/tmpdisk"),
						SizeInGB:  to.Int32Ptr(3),
					},
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.AppsClientUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = appsClientUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if appsClientUpdatePollerResponse.Poller.Done() {
					response, err = appsClientUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = appsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.AppsClientUpdateResult)
	}

	// From step Apps_List
	{
		appsClientListPager := appsClient.List(resourceGroupName,
			serviceName,
			nil)
		for appsClientListPager.NextPage(ctx) {
			if err := appsClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range appsClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Bindings_Create
	bindingsClient := test.NewBindingsClient(subscriptionId, cred, options)
	{
		bindingName := "mysql-binding"
		bindingsClientCreateOrUpdatePollerResponse, err := bindingsClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			bindingName,
			test.BindingResource{
				Properties: &test.BindingResourceProperties{
					BindingParameters: map[string]interface{}{
						"databaseName": "mysqldb",
						"username":     "test",
					},
					Key:        to.StringPtr(mysqlKey),
					ResourceID: to.StringPtr("/subscriptions/b46590cb-a111-4b84-935f-c305aaf1f424/resourceGroups/mary-west/providers/Microsoft.DBforMySQL/servers/fake-sql"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.BindingsClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = bindingsClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if bindingsClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = bindingsClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = bindingsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.BindingsClientCreateOrUpdateResult)
	}

	// From step Bindings_Update
	{
		bindingName := "mysql-binding"
		bindingsClientUpdatePollerResponse, err := bindingsClient.BeginUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			bindingName,
			test.BindingResource{
				Properties: &test.BindingResourceProperties{
					BindingParameters: map[string]interface{}{
						"databaseName": "mysqldb2",
						"username":     "test2",
					},
					Key:        to.StringPtr(mysqlKey),
					ResourceID: to.StringPtr("/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.BindingsClientUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = bindingsClientUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if bindingsClientUpdatePollerResponse.Poller.Done() {
					response, err = bindingsClientUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = bindingsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.BindingsClientUpdateResult)
	}

	// From step Bindings_Get
	{
		bindingName := "mysql-binding"
		bindingsClientGetResponse, err := bindingsClient.Get(ctx,
			resourceGroupName,
			serviceName,
			appName,
			bindingName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", bindingsClientGetResponse.BindingsClientGetResult)
	}

	// From step Bindings_List
	{
		bindingsClientListPager := bindingsClient.List(resourceGroupName,
			serviceName,
			appName,
			nil)
		for bindingsClientListPager.NextPage(ctx) {
			if err := bindingsClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range bindingsClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Bindings_Delete
	{
		bindingName := "mysql-binding"
		bindingsClientDeletePollerResponse, err := bindingsClient.BeginDelete(ctx,
			resourceGroupName,
			serviceName,
			appName,
			bindingName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = bindingsClientDeletePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if bindingsClientDeletePollerResponse.Poller.Done() {
					_, err = bindingsClientDeletePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = bindingsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Apps_ValidateDomain
	{
		appsClientValidateDomainResponse, err := appsClient.ValidateDomain(ctx,
			resourceGroupName,
			serviceName,
			appName,
			test.CustomDomainValidatePayload{
				Name: to.StringPtr(customDomainName),
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", appsClientValidateDomainResponse.AppsClientValidateDomainResult)
	}

	// From step CustomDomains_CreateOrUpdate
	customDomainsClient := test.NewCustomDomainsClient(subscriptionId, cred, options)
	{
		domainName := dnsCname + "." + customDomainName
		customDomainsClientCreateOrUpdatePollerResponse, err := customDomainsClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			domainName,
			test.CustomDomainResource{
				Properties: &test.CustomDomainProperties{
					CertName: to.StringPtr("asc-certificate"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.CustomDomainsClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = customDomainsClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if customDomainsClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = customDomainsClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = customDomainsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.CustomDomainsClientCreateOrUpdateResult)
	}

	// From step CustomDomains_Update
	{
		domainName := dnsCname + "." + customDomainName
		customDomainsClientUpdatePollerResponse, err := customDomainsClient.BeginUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			domainName,
			test.CustomDomainResource{
				Properties: &test.CustomDomainProperties{
					CertName: to.StringPtr("asc-certificate"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.CustomDomainsClientUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = customDomainsClientUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if customDomainsClientUpdatePollerResponse.Poller.Done() {
					response, err = customDomainsClientUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = customDomainsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.CustomDomainsClientUpdateResult)
	}

	// From step CustomDomains_Get
	{
		domainName := dnsCname + "." + customDomainName
		customDomainsClientGetResponse, err := customDomainsClient.Get(ctx,
			resourceGroupName,
			serviceName,
			appName,
			domainName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", customDomainsClientGetResponse.CustomDomainsClientGetResult)
	}

	// From step CustomDomains_List
	{
		customDomainsClientListPager := customDomainsClient.List(resourceGroupName,
			serviceName,
			appName,
			nil)
		for customDomainsClientListPager.NextPage(ctx) {
			if err := customDomainsClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range customDomainsClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Apps_GetResourceUploadUrl
	{
		appsClientGetResourceUploadURLResponse, err := appsClient.GetResourceUploadURL(ctx,
			resourceGroupName,
			serviceName,
			appName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", appsClientGetResourceUploadURLResponse.AppsClientGetResourceUploadURLResult)
		relativePath = *appsClientGetResourceUploadURLResponse.RelativePath
		uploadUrl = *appsClientGetResourceUploadURLResponse.UploadURL
	}

	// From step Upload_File
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"parameters": map[string]interface{}{
				"userAssignedIdentity": map[string]interface{}{
					"type":         "string",
					"defaultValue": "$(userAssignedIdentity)",
				},
				"utcValue": map[string]interface{}{
					"type":         "string",
					"defaultValue": "[utcNow()]",
				},
			},
			"resources": []interface{}{
				map[string]interface{}{
					"name":       "Upload_File",
					"type":       "Microsoft.Resources/deploymentScripts",
					"apiVersion": "2020-10-01",
					"identity": map[string]interface{}{
						"type": "UserAssigned",
						"userAssignedIdentities": map[string]interface{}{
							"[parameters('userAssignedIdentity')]": map[string]interface{}{},
						},
					},
					"kind":     "AzurePowerShell",
					"location": "[resourceGroup().location]",
					"properties": map[string]interface{}{
						"azPowerShellVersion": "6.2",
						"cleanupPreference":   "OnSuccess",
						"environmentVariables": []interface{}{
							map[string]interface{}{
								"name":        "uploadUrl",
								"secureValue": uploadUrl,
							},
							map[string]interface{}{
								"name":        "blobUrl",
								"secureValue": blobUrl,
							},
						},
						"forceUpdateTag":    "[parameters('utcValue')]",
						"retentionInterval": "P1D",
						"scriptContent": "$uploadUri = ${Env:uploadUrl}\n$blobUri = ${Env:blobUrl}\n$localFilePath = '/tmp/temp.file'\nfunction DownloadJarFromBlob([string]$blobUri, [string]$localOutputFilePath) {\n	$BlobFile = [Microsoft.WindowsAzure.Storage.Blob.CloudBlob]::new($blobUri)\n	$DownLoadTask = $BlobFile.DownloadToFileAsync($localOutputFilePath, 4)\n	$DownLoadTask\n}\n\nfunction UploadToFileShare([string]$uploadUri, [string]$localFilePath) {\n	$CloudFile = [Microsoft.WindowsAzure.Storage.File.CloudFile]::New($uploadUri)\n	$UploadTask = $CloudFile.UploadFromFileAsync($localFilePath)\n	$UploadTask\n}\n\nConnect-AzAccount -Identity\nDownloadJarFromBlob $blobUri $localFilePath\nUploadToFileShare $uploadUri $localFilePath",
						"timeout": "PT1H",
					},
				},
			},
		}
		params := map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{"value": userAssignedIdentity},
		}
		_, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "Upload_File", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
	}

	// From step Deployments_CreateOrUpdate
	{
		deploymentName := "blue"
		deploymentsClientCreateOrUpdatePollerResponse, err := deploymentsClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			deploymentName,
			test.DeploymentResource{
				Properties: &test.DeploymentResourceProperties{
					DeploymentSettings: &test.DeploymentSettings{
						CPU: to.Int32Ptr(1),
						EnvironmentVariables: map[string]*string{
							"env": to.StringPtr("test"),
						},
						JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
						MemoryInGB:     to.Int32Ptr(3),
						RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
					},
					Source: &test.UserSourceInfo{
						Type:             test.UserSourceTypeJar.ToPtr(),
						ArtifactSelector: to.StringPtr("sub-module-1"),
						RelativePath:     to.StringPtr(relativePath),
						Version:          to.StringPtr("1.0"),
					},
				},
				SKU: &test.SKU{
					Name:     to.StringPtr("S0"),
					Capacity: to.Int32Ptr(2),
					Tier:     to.StringPtr("Standard"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.DeploymentsClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = deploymentsClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if deploymentsClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = deploymentsClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = deploymentsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.DeploymentsClientCreateOrUpdateResult)
	}

	// From step Apps_Update
	{
		appsClientUpdatePollerResponse, err := appsClient.BeginUpdate(ctx,
			resourceGroupName,
			serviceName,
			appName,
			test.AppResource{
				Identity: &test.ManagedIdentityProperties{
					Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
					PrincipalID: to.StringPtr("principalid"),
					TenantID:    to.StringPtr("tenantid"),
				},
				Properties: &test.AppResourceProperties{
					ActiveDeploymentName: to.StringPtr("blue"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.AppsClientUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = appsClientUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if appsClientUpdatePollerResponse.Poller.Done() {
					response, err = appsClientUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = appsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.AppsClientUpdateResult)
	}

	// From step Deployments_Restart
	{
		deploymentName := "blue"
		deploymentsClientRestartPollerResponse, err := deploymentsClient.BeginRestart(ctx,
			resourceGroupName,
			serviceName,
			appName,
			deploymentName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = deploymentsClientRestartPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if deploymentsClientRestartPollerResponse.Poller.Done() {
					_, err = deploymentsClientRestartPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = deploymentsClientRestartPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Deployments_Stop
	{
		deploymentName := "blue"
		deploymentsClientStopPollerResponse, err := deploymentsClient.BeginStop(ctx,
			resourceGroupName,
			serviceName,
			appName,
			deploymentName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = deploymentsClientStopPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if deploymentsClientStopPollerResponse.Poller.Done() {
					_, err = deploymentsClientStopPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = deploymentsClientStopPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Deployments_Start
	{
		deploymentName := "blue"
		deploymentsClientStartPollerResponse, err := deploymentsClient.BeginStart(ctx,
			resourceGroupName,
			serviceName,
			appName,
			deploymentName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = deploymentsClientStartPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if deploymentsClientStartPollerResponse.Poller.Done() {
					_, err = deploymentsClientStartPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = deploymentsClientStartPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Deployments_GetLogFileUrl
	{
		deploymentName := "blue"
		deploymentsClientGetLogFileURLResponse, err := deploymentsClient.GetLogFileURL(ctx,
			resourceGroupName,
			serviceName,
			appName,
			deploymentName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", deploymentsClientGetLogFileURLResponse.DeploymentsClientGetLogFileURLResult)
	}

	// From step Deployments_List
	{
		deploymentsClientListPager := deploymentsClient.List(resourceGroupName,
			serviceName,
			appName,
			&test.DeploymentsClientListOptions{Version: []string{}})
		for deploymentsClientListPager.NextPage(ctx) {
			if err := deploymentsClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range deploymentsClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Deployments_ListForCluster
	{
		deploymentsClientListForClusterPager := deploymentsClient.ListForCluster(resourceGroupName,
			serviceName,
			&test.DeploymentsClientListForClusterOptions{Version: []string{}})
		for deploymentsClientListForClusterPager.NextPage(ctx) {
			if err := deploymentsClientListForClusterPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range deploymentsClientListForClusterPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Services_List
	{
		servicesClientListPager := servicesClient.List(resourceGroupName,
			nil)
		for servicesClientListPager.NextPage(ctx) {
			if err := servicesClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range servicesClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Services_ListBySubscription
	{
		servicesClientListBySubscriptionPager := servicesClient.ListBySubscription(nil)
		for servicesClientListBySubscriptionPager.NextPage(ctx) {
			if err := servicesClientListBySubscriptionPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range servicesClientListBySubscriptionPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Deployments_Delete
	{
		deploymentName := "blue"
		deploymentsClientDeletePollerResponse, err := deploymentsClient.BeginDelete(ctx,
			resourceGroupName,
			serviceName,
			appName,
			deploymentName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = deploymentsClientDeletePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if deploymentsClientDeletePollerResponse.Poller.Done() {
					_, err = deploymentsClientDeletePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = deploymentsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step CustomDomains_Delete
	{
		domainName := dnsCname + "." + customDomainName
		customDomainsClientDeletePollerResponse, err := customDomainsClient.BeginDelete(ctx,
			resourceGroupName,
			serviceName,
			appName,
			domainName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = customDomainsClientDeletePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if customDomainsClientDeletePollerResponse.Poller.Done() {
					_, err = customDomainsClientDeletePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = customDomainsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Apps_Delete
	{
		appName := "app01"
		appsClientDeletePollerResponse, err := appsClient.BeginDelete(ctx,
			resourceGroupName,
			serviceName,
			appName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = appsClientDeletePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if appsClientDeletePollerResponse.Poller.Done() {
					_, err = appsClientDeletePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = appsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Certificates_Delete
	{
		certificateName := "asc-certificate"
		certificatesClientDeletePollerResponse, err := certificatesClient.BeginDelete(ctx,
			resourceGroupName,
			serviceName,
			certificateName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = certificatesClientDeletePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if certificatesClientDeletePollerResponse.Poller.Done() {
					_, err = certificatesClientDeletePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = certificatesClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Services_Delete
	{
		servicesClientDeletePollerResponse, err := servicesClient.BeginDelete(ctx,
			resourceGroupName,
			serviceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = servicesClientDeletePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if servicesClientDeletePollerResponse.Poller.Done() {
					_, err = servicesClientDeletePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = servicesClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Skus_List
	sKUsClient := test.NewSKUsClient(subscriptionId, cred, options)
	{
		sKUsClientListPager := sKUsClient.List(nil)
		for sKUsClientListPager.NextPage(ctx) {
			if err := sKUsClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range sKUsClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Operations_List
	operationsClient := test.NewOperationsClient(cred, options)
	{
		operationsClientListPager := operationsClient.List(nil)
		for operationsClientListPager.NextPage(ctx) {
			if err := operationsClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range operationsClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}
}

func cleanup(t *testing.T) {
	// From step delete_cname_record
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"parameters": map[string]interface{}{
				"userAssignedIdentity": map[string]interface{}{
					"type":         "string",
					"defaultValue": "$(userAssignedIdentity)",
				},
				"utcValue": map[string]interface{}{
					"type":         "string",
					"defaultValue": "[utcNow()]",
				},
			},
			"resources": []interface{}{
				map[string]interface{}{
					"name":       "delete_cname_record",
					"type":       "Microsoft.Resources/deploymentScripts",
					"apiVersion": "2020-10-01",
					"identity": map[string]interface{}{
						"type": "UserAssigned",
						"userAssignedIdentities": map[string]interface{}{
							"[parameters('userAssignedIdentity')]": map[string]interface{}{},
						},
					},
					"kind":     "AzurePowerShell",
					"location": "[resourceGroup().location]",
					"properties": map[string]interface{}{
						"azPowerShellVersion": "6.2",
						"cleanupPreference":   "OnSuccess",
						"environmentVariables": []interface{}{
							map[string]interface{}{
								"name":  "resourceGroupName",
								"value": dnsResourceGroup,
							},
							map[string]interface{}{
								"name":  "dnsCname",
								"value": "asc",
							},
							map[string]interface{}{
								"name":  "dnsZoneName",
								"value": customDomainName,
							},
						},
						"forceUpdateTag":    "[parameters('utcValue')]",
						"retentionInterval": "P1D",
						"scriptContent":     "$resourceGroupName = ${Env:resourceGroupName}\n$dnsCNAME = ${Env:dnsCname}\n$dnsZoneName = ${Env:dnsZoneName}\n\nConnect-AzAccount -Identity\n\n$RecordSet = Get-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ResourceGroupName $resourceGroupName -ZoneName $dnsZoneName\n$Result = Remove-AzDnsRecordSet -RecordSet $RecordSet\n$Result",
						"timeout":           "PT1H",
					},
				},
			},
		}
		params := map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{"value": userAssignedIdentity},
		}
		_, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "delete_cname_record", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
	}
}
