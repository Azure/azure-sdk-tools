[
    {
        "testcase": "small_apiview_few_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the __init__ method and instead implement a separate from_connection_string class method.",
                    "comment": "The constructor should not accept a connection string per the guideline. Instead, a factory method (from_connection_string) must be provided if supported.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 171,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Using 'list' as an attribute name shadows the built-in list type and may be ambiguous. A more descriptive name such as 'captions' would better convey its intent.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Remove PeopleResult from the aio sub-namespace and define it only once in the shared models namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespace per the guidelines. Reuse the model from azure.ai.vision.imageanalysis.models.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nService Purpose  \nThis API provides image analysis capabilities. It enables clients to analyze images provided as raw binary data or accessible via a URL. The analysis extracts visual features such as captions, dense captions, object detection, people detection, text recognition, smart cropping suggestions, and tagging.\n\nAPI Version  \nThe service allows the client to specify the API version through an `api_version` parameter in the client\u2019s initialization. There is no separate API Version object provided; the version is determined by the string supplied at construction.\n\nClient Classes  \nThe primary classes are the synchronous `ImageAnalysisClient` from the azure.ai.vision.imageanalysis namespace and the asynchronous `ImageAnalysisClient` from the azure.ai.vision.imageanalysis.aio namespace. The synchronous client exposes the methods `analyze`, `analyze_from_url`, `close`, and `send_request`. The asynchronous client similarly includes `analyze`, `analyze_from_url`, `close`, and `send_request`.\n\nModel Classes  \nThe API also includes a range of models in the azure.ai.vision.imageanalysis.models namespace. These include classes such as `CaptionResult`, `CropRegion`, `DenseCaption`, `DenseCaptionsResult`, `DetectedTextBlock`, `DetectedTextLine`, `DetectedTextWord`, `ImageAnalysisResult`, `ImageBoundingBox`, `ImageMetadata`, `ImagePoint`, `ObjectsResult`, `PeopleResult`, `ReadResult`, `SmartCropsResult`, and `TagsResult`, along with the `VisualFeatures` enum. These model classes define the structures used to convey details of image metadata and analysis outcomes.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": null,
                    "comment": "The constructor should not accept a connection_string parameter. Instead, a from_connection_string factory method should be provided.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 171,
                    "bad_code": "    ivar list: List[DenseCaption]",
                    "suggestion": "    ivar captions: List[DenseCaption]",
                    "comment": "Rename the 'list' attribute to avoid shadowing the built\u2011in list type and improve clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": null,
                    "comment": "Models should not be duplicated in the async namespace; PeopleResult should be defined only once in the shared models module.",
                    "source": "guideline"
                }
            ]
        },
        "expected_comments": 2,
        "comments_found": 3,
        "valid_generic_comments": 1,
        "invalid_generic_comments": [],
        "true_positives": 2,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 100.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 4,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately reflecting both guidelines without adding or omitting information.",
        "overall_score": 97
    },
    {
        "testcase": "small_apiview_many_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from __init__ and add a separate factory method (e.g. from_connection_string) to create the client.",
                    "comment": "The __init__ method accepts a connection_string parameter, which violates the guideline that the constructor must not take a connection string.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 30,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "Insert a '*' after the required parameters to enforce keyword-only optional arguments, e.g.,\n\ndef analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., ...):",
                    "comment": "Optional parameters in analyze_from_url must be keyword-only according to the SDK guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 53,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.AsyncImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client to 'ImageAnalysisClient' so it matches the synchronous client name in the aio package.",
                    "comment": "The asynchronous client should use the same client name as the synchronous one; having 'AsyncImageAnalysisClient' violates the naming guideline for sync/async clients.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-constructor-api-version-argument-1"
                    ],
                    "line_no": 54,
                    "bad_code": "def __init__(\n        self, \n        endpoint: str, \n        credential: Union[AzureKeyCredential, AsyncTokenCredential], \n    ) -> None",
                    "suggestion": "Add an optional keyword-only api_version parameter to the async client __init__ signature, for example: \n    def __init__(self, endpoint: str, credential: Union[AzureKeyCredential, AsyncTokenCredential], *, api_version: str = ..., **kwargs: Any) -> None",
                    "comment": "The async client constructor is missing the optional api_version parameter required by the guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-static-methods"
                    ],
                    "line_no": 88,
                    "bad_code": "@staticmethod",
                    "suggestion": "Remove the staticmethod decorator and refactor send_request as an instance method or a module-level function.",
                    "comment": "Static methods are discouraged; module-level functions or instance methods should be used instead.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 168,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "Use a less ambiguous attribute name such as 'items' or 'captions' to avoid shadowing the built-in 'list' type.",
                    "comment": "Naming an attribute 'list' can lead to confusion with Python\u2019s built-in type. Choosing a more descriptive name improves clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to 'DetectedPerson' using PascalCase.",
                    "comment": "Type names must be in PascalCase; 'detectedPerson' should be renamed to 'DetectedPerson'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace this getter method with a property (e.g. @property def result(self): ...).",
                    "comment": "Simple getter methods are discouraged; use a property to expose the value instead.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 413,
                    "bad_code": "def set_result(self, obj) -> None",
                    "suggestion": "Replace this setter method with a property setter (e.g. @result.setter def result(self, value): ...).",
                    "comment": "Simple setter methods are discouraged; use a property setter to update the value.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 432,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Move PeopleResult to the common models namespace (azure.ai.vision.imageanalysis.models) instead of duplicating it in the aio sub-namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespaces.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "    tags = 'tags'",
                    "suggestion": "Change the enum member to uppercase: TAGS = 'tags'",
                    "comment": "Enum member names must be in UPPERCASE; 'tags' should be renamed to 'TAGS'.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nService Purpose  \nThis API provides image analysis capabilities by processing images supplied either as raw bytes or via URLs. It supports extraction of visual features such as captions, dense captions, object detection, people detection, text extraction, smart crop suggestions, and tags. The service is designed for use with context management and offers both synchronous and asynchronous methods to interact with image analysis functionalities.\n\nAPI Version  \nThere is no distinct API version object provided. The clients accept an `api_version` parameter that allows users to specify the target version of the service.\n\nPrimary Client Classes  \nThe API exposes the `ImageAnalysisClient` class with methods `analyze`, `analyze_from_url`, `close`, and `send_request`. Its asynchronous counterpart, `AsyncImageAnalysisClient`, provides similar functionalities through methods `analyze`, `analyze_from_url`, `close`, and `send_request`.\n\nSupporting Models and Enums  \nThe API includes a range of model classes defined in the `azure.ai.vision.imageanalysis.models` namespace. These classes represent components of the image analysis results such as `CaptionResult`, `CropRegion`, `DenseCaption`, `DenseCaptionsResult`, `DetectedObject`, `detectedPerson`, `DetectedTag`, `DetectedTextBlock`, `DetectedTextLine`, `DetectedTextWord`, `ImageAnalysisResult`, `ImageBoundingBox`, `ImageMetadata`, `ImagePoint`, `ObjectsResult`, `PeopleResult`, `ReadResult`, `SmartCropsResult`, and `TagsResult`. In addition, the `VisualFeatures` enumeration specifies available analysis options including caption, dense captions, objects, people, read, smart crops, and tags.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": null,
                    "comment": "The constructor must not accept a connection string; instead, provide a separate from_connection_string factory method.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 90,
                    "bad_code": "self,",
                    "suggestion": null,
                    "comment": "Static methods should not include 'self' in their parameter list; remove it from the signature.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 168,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Avoid using built-in names like 'list' for attributes; choose a more descriptive name such as 'captions' to improve clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "class azure.ai.vision.imageanalysis.models.DetectedPerson(MutableMapping[str, Any]):",
                    "comment": "Class names should use PascalCase (CapWords) as per naming conventions; rename 'detectedPerson' to 'DetectedPerson'.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "def result(self) -> ObjectsResult",
                    "comment": "Consider replacing the getter method with a property to provide a more idiomatic Python interface.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 432,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "class azure.ai.vision.imageanalysis.models.PeopleResult(MutableMapping[str, Any]):",
                    "comment": "Models should not be duplicated in the aio namespace; PeopleResult should reside in the shared models package.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 492,
                    "bad_code": "ivar list: List[DetectedTag]",
                    "suggestion": "ivar detected_tags: List[DetectedTag]",
                    "comment": "Rename the instance variable to avoid shadowing the built-in 'list'.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 498,
                    "bad_code": "list: List[DetectedTag]",
                    "suggestion": "detected_tags: List[DetectedTag]",
                    "comment": "Rename the parameter to avoid using a built-in name and improve clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 504,
                    "bad_code": "def __init__(self, *args: Any, **kwargs: Any) -> None",
                    "suggestion": null,
                    "comment": "Using *args and **kwargs hides the intended signature. Consider explicitly declaring parameters if possible.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "tags = 'tags'",
                    "suggestion": "TAGS = 'tags'",
                    "comment": "Enum member names should be uppercase to ensure consistency and adhere to naming conventions.",
                    "source": "merged"
                }
            ]
        },
        "expected_comments": 10,
        "comments_found": 10,
        "valid_generic_comments": 6,
        "invalid_generic_comments": [],
        "true_positives": 4,
        "false_positives": 0,
        "false_negatives": 6,
        "percent_coverage": 40.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately reflecting the guidelines and providing precise, relevant feedback for each rule without adding or omitting information.",
        "overall_score": 53
    },
    {
        "testcase": "small_apiview_no_violations",
        "expected": {
            "comments": []
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nThis API provides image analysis functionality, enabling users to submit images either as raw binary data or via URLs. The service analyzes the images to extract visual features such as captions, dense captions, objects, people, read text, smart crops, and tags. It supports operations that return detailed analysis results including bounding boxes, metadata, and detected text information.\n\nThe API constructor for the client classes accepts an `api_version` parameter, though there is no dedicated API Version object explicitly defined. The clients rely on this parameter to work with a particular API release.\n\nThe primary client classes of interest are `azure.ai.vision.imageanalysis.ImageAnalysisClient` and `azure.ai.vision.imageanalysis.aio.ImageAnalysisClient`. The synchronous client exposes methods `analyze`, `analyze_from_url`, `close`, and `send_request`. The asynchronous client similarly provides methods `analyze`, `analyze_from_url`, `close`, and `send_request`.\n\nIn addition, the API includes multiple model classes under the `azure.ai.vision.imageanalysis.models` namespace. These models represent the structure of results from image analysis operations, such as `ImageAnalysisResult`, `DenseCaptionsResult`, `DetectedTextBlock`, `ImageBoundingBox`, and others. The `VisualFeatures` enumeration defines the valid feature types that can be requested during analysis.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 170,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Rename 'list' to 'captions' to avoid overshadowing the built-in list and to be more descriptive.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 362,
                    "bad_code": "ivar list: List[DetectedObject]",
                    "suggestion": "ivar objects: List[DetectedObject]",
                    "comment": "Rename the attribute from 'list' to 'objects' for clarity and to prevent conflicts with built-in names.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 382,
                    "bad_code": "ivar list: List[DetectedPerson]",
                    "suggestion": "ivar people: List[DetectedPerson]",
                    "comment": "Rename 'list' to 'people' to improve readability and avoid shadowing the built-in type.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 422,
                    "bad_code": "ivar list: List[CropRegion]",
                    "suggestion": "ivar smart_crops: List[CropRegion]",
                    "comment": "Use a more descriptive name like 'smart_crops' instead of 'list' to reflect the content and avoid name conflicts.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 441,
                    "bad_code": "ivar list: List[DetectedTag]",
                    "suggestion": "ivar tags: List[DetectedTag]",
                    "comment": "Rename 'list' to 'tags' to prevent overshadowing the built-in and enhance clarity.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 0,
        "comments_found": 5,
        "valid_generic_comments": 4,
        "invalid_generic_comments": [
            {
                "rule_ids": [],
                "line_no": 382,
                "bad_code": "ivar list: List[DetectedPerson]",
                "suggestion": "ivar people: List[DetectedPerson]",
                "comment": "Rename 'list' to 'people' to improve readability and avoid shadowing the built-in type.",
                "source": "generic",
                "valid": false
            }
        ],
        "true_positives": 0,
        "false_positives": 1,
        "false_negatives": 0,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 0.0
    },
    {
        "testcase": "small_apiview_multiple_same_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 16,
                    "bad_code": "def analyze(",
                    "suggestion": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the 'analyze' method should be keyword-only. Insert a '*' after the required parameters so that all optional parameters must be specified by name.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 28,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters in the 'analyze_from_url' method should be keyword-only. Adding a '*' after the required parameters will enforce this design guideline.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 62,
                    "bad_code": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "For async methods, optional parameters must also be keyword-only. Insert '*' to force keyword-only usage.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 74,
                    "bad_code": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be made keyword-only by inserting '*' after the required parameters.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 166,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar captions: List[DenseCaption]",
                    "comment": "Using 'list' as an attribute name shadows the built-in list type in Python. Renaming this attribute to something more descriptive (like 'captions' or 'dense_captions') will avoid potential conflicts and improve code clarity.",
                    "source": "generic"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nOverview:  \nThis API provides image analysis capabilities, enabling users to process images provided as raw bytes or via URLs. The service supports extraction of numerous visual features, including captioning, dense captioning, object detection, people detection, text recognition, smart cropping, and tag assignment. The analysis results are encapsulated in detailed models that describe captions, bounding box information, dense captions, recognized texts, and other image properties.\n\nAPI Version:  \nAn API version is accepted through the `api_version` parameter in the client initializers; however, no separate API Version object is explicitly defined within the APIView.\n\nClient Classes:  \nThe service exposes a synchronous `ImageAnalysisClient` in the primary namespace and an asynchronous `ImageAnalysisClient` in the `aio` namespace. The synchronous client offers the methods `analyze`, `analyze_from_url`, `close`, and `send_request`. The asynchronous client provides the corresponding methods `analyze`, `analyze_from_url`, `close`, and `send_request`.\n\nModel Classes:  \nA range of model classes defines the structure of the image analysis responses. These include models for representing captions (`CaptionResult`), dense captions (`DenseCaption` and `DenseCaptionsResult`), cropping regions (`CropRegion`), detected texts (`DetectedTextBlock`, `DetectedTextLine`, and `DetectedTextWord`), as well as models for image metadata (`ImageMetadata` and `ImageBoundingBox`), objects (`ObjectsResult`), people (`PeopleResult`), read results (`ReadResult`), smart crops (`SmartCropsResult`), and tags (`TagsResult`). Additionally, the `VisualFeatures` enumeration lists the supported feature types such as caption, dense captions, objects, people, read, smart crops, and tags.\n\nAdditional Details:  \nThe client classes are designed for context management and incorporate distributed tracing for both synchronous and asynchronous operations. These capabilities, alongside the tightly integrated data models, support diverse image analysis scenarios and facilitate customized feature extraction workflows.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 166,
                    "bad_code": "ivar list: List[DenseCaption]",
                    "suggestion": "ivar items: List[DenseCaption]",
                    "comment": "Rename the attribute from 'list' to 'items' to avoid shadowing the built-in and improve clarity.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 4,
        "comments_found": 1,
        "valid_generic_comments": 1,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 4,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 0
    },
    {
        "testcase": "medium_apiview_few_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 78,
                    "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatchingAsyncClient(ClinicalMatchingClientOperationsMixin): implements AsyncContextManager",
                    "suggestion": "Place the async client in an '.aio' subpackage and name it identically to the sync client (i.e. ClinicalMatchingClient). For example:\n\n# In module azure.healthinsights.clinicalmatching.aio\nclass ClinicalMatchingClient(ClinicalMatchingClientOperationsMixin):\n    async def begin_match_trials(...): ...\n    async def close(...): ...",
                    "comment": "The async client does not follow the naming and namespace conventions. According to the guidelines (python_design.html#python-client-same-name-sync-async and python_design.html#python-client-namespace-async), the async client should have the same name as its synchronous counterpart and reside in an '.aio' namespace.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 91,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "async def begin_match_trials(self, body: Union[TrialMatcherData, JSON, IO], *, content_type: str = \"application/json\", repeatability_first_sent: Optional[datetime] = None, repeatability_request_id: Optional[str] = None, **kwargs: Any) -> LROPoller[TrialMatcherResult]:",
                    "comment": "Public asynchronous methods must include full PEP484 type annotations. The async overloads for 'begin_match_trials' are missing explicit type hints.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 368,
                    "bad_code": "contacts: Optional[List[ForwardRef('ContactDetails')]]",
                    "suggestion": "Add 'from __future__ import annotations' at the top of the module to simplify forward references in type hints.",
                    "comment": "$Explicit use of ForwardRef can be avoided in Python 3.10+ using postponed evaluation of annotations. This change can improve readability and reduce boilerplate in type annotations. (general comment)",
                    "source": "generic"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nOverview  \nThe API provides a service for clinical trial matching as part of the Azure HealthInsights offering. It accepts clinical data such as patient records, clinical documents, and demographic information and processes trial matching requests. The design includes support for long-running operations and distributed tracing, allowing users to initiate, monitor, and retrieve results for clinical trial matching jobs.\n\nAPI Version  \nBoth the synchronous and asynchronous client classes accept an `api_version` string parameter during initialization. No standalone API version object is defined in this view and no explicit latest version is provided.\n\nClient Classes  \nThe service exposes a synchronous client, `ClinicalMatchingClient`, and its asynchronous counterpart, `ClinicalMatchingAsyncClient`. The `ClinicalMatchingClient` offers methods such as `__init__`, `begin_match_trials`, `close`, and `send_request`. Similarly, the `ClinicalMatchingAsyncClient` provides `__init__`, `begin_match_trials`, `close`, and `send_request`.\n\nOther Classes and Models  \nBeyond the client classes, the API defines a credential class, `HealthInsightsKeyCredential`, for authentication purposes. In addition, a wide range of model classes is provided under the models namespace. These models cover aspects such as accepted age, age ranges, geographic areas, clinical coded elements, various clinical trial details and metadata, patient records, document content, error handling, and trial matching results. Enumerations are also defined for units of age, document types, clinical document types, clinical trial phases, purposes and recruitment statuses, among other aspects.\n\nOverall, the structure and associated models of this APIaim to support detailed and traceable clinical trial matching workflows while enabling both synchronous and asynchronous interaction patterns.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 91,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "async def begin_match_trials(self, body: Union[TrialMatcherData, JSON, IO], *, content_type: str = 'application/json', repeatability_first_sent: Optional[datetime] = None, repeatability_request_id: Optional[str] = None, **kwargs: Any) -> LROPoller[TrialMatcherResult]",
                    "comment": "The async overload is missing required type hints for parameters and the return type. Please provide complete type annotations and default values for clarity and compliance with PEP484.",
                    "source": "merged"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 102,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "async def begin_match_trials(self, body: JSON, *, content_type: str = 'application/json', repeatability_first_sent: Optional[datetime] = None, repeatability_request_id: Optional[str] = None, **kwargs: Any) -> LROPoller[TrialMatcherResult]:",
                    "comment": "The async overload definition is missing type annotations for parameters and the return type.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 113,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "async def begin_match_trials(self, body: IO, *, content_type: str = 'application/json', repeatability_first_sent: Optional[datetime] = None, repeatability_request_id: Optional[str] = None, **kwargs: Any) -> LROPoller[TrialMatcherResult]:",
                    "comment": "The async overload definition is missing type annotations for parameters and the return type.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 124,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "async def begin_match_trials(self, body: Union[TrialMatcherData, JSON, IO], *, content_type: str = 'application/json', continuation_token: Optional[str] = None, polling: Union[bool, PollingMethod] = False, polling_interval: Optional[int] = None, repeatability_first_sent: Optional[datetime] = None, repeatability_request_id: Optional[str] = None, **kwargs: Any) -> LROPoller[TrialMatcherResult]:",
                    "comment": "The async implementation of begin_match_trials should include full type annotations for all parameters and the return type, and provide explicit default values as appropriate, to comply with PEP484 and improve code clarity.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 502,
                    "bad_code": "PATIENT_REGISTRIES = \"patientRegistries\"",
                    "suggestion": "PATIENT_REGISTRIES = \"patient_registries\"",
                    "comment": "Constant string values should follow a consistent snake_case style to match Python conventions.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 522,
                    "bad_code": "    *args: Any,",
                    "suggestion": "    mapping: Optional[Mapping[str, Any]] = None,",
                    "comment": "Replacing *args with an explicit 'mapping' parameter improves readability and type inference.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 580,
                    "bad_code": "    FHIR_BUNDLE = \"fhirBundle\"",
                    "suggestion": "    FHIR_BUNDLE = \"fhir_bundle\"",
                    "comment": "Enum member values should use a consistent snake_case style to align with Python naming conventions.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 728,
                    "bad_code": "    PARTIALLY_COMPLETED = \"partiallyCompleted\"",
                    "suggestion": "    PARTIALLY_COMPLETED = \"partially_completed\"",
                    "comment": "Ensure enum strings follow a consistent naming scheme (e.g. snake_case) unless dictated by external requirements.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 2,
        "comments_found": 8,
        "valid_generic_comments": 3,
        "invalid_generic_comments": [
            {
                "rule_ids": [],
                "line_no": 522,
                "bad_code": "    *args: Any,",
                "suggestion": "    mapping: Optional[Mapping[str, Any]] = None,",
                "comment": "Replacing *args with an explicit 'mapping' parameter improves readability and type inference.",
                "source": "generic",
                "valid": false
            }
        ],
        "true_positives": 1,
        "false_positives": 4,
        "false_negatives": 1,
        "percent_coverage": 50.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 2,
        "groundedness": 4,
        "groundedness_reason": "The RESPONSE accurately addresses the PEP484 type hint rule but omits the client naming convention rule, making it incomplete.",
        "overall_score": 38
    },
    {
        "testcase": "medium_apiview_many_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-naming",
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 6,
                    "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatching(ClinicalMatchingClientOperationsMixin): implements ContextManager",
                    "suggestion": "class azure.healthinsights.clinicalmatching.ClinicalMatchingClient(ClinicalMatchingClientOperationsMixin): implements ContextManager",
                    "comment": "Service client types should be named with a 'Client' suffix. In addition, the sync and async clients must share the same name. Rename the sync client from 'ClinicalMatching' to 'ClinicalMatchingClient' to comply with these guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-auth-credential-azure-core"
                    ],
                    "line_no": 11,
                    "bad_code": "api_key: str",
                    "suggestion": "Use a credential object from azure.core.credentials (e.g., AzureKeyCredential) instead of a raw string for the api key.",
                    "comment": "Authentication parameters should leverage azure-core credential classes rather than using a simple string.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-options-naming"
                    ],
                    "line_no": 70,
                    "bad_code": "    options: Optional[CreateTrialsOptions] = None,",
                    "suggestion": "    <individual keyword parameters> instead of an options bag",
                    "comment": "Avoid using an options bag object to group optional parameters. Pass each optional parameter as a separate keyword-only argument.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-lro-poller-begin-naming"
                    ],
                    "line_no": 93,
                    "bad_code": "def create_trials(",
                    "suggestion": "def begin_create_trials(",
                    "comment": "Long running operations must use a 'begin_' prefix. Rename 'create_trials' to 'begin_create_trials' per the long running operations naming guideline.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix"
                    ],
                    "line_no": 102,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Methods that enumerate resources should be prefixed with 'list_'. Rename 'trials' to 'list_trials' to follow the paging method naming guideline.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 108,
                    "bad_code": "def erase_trials(",
                    "suggestion": "def delete_trials(",
                    "comment": "For deletion operations the preferred verb is 'delete_'. Rename 'erase_trials' to 'delete_trials' per the service verb naming guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-lro-poller-begin-naming"
                    ],
                    "line_no": 214,
                    "bad_code": "async def create_trials(",
                    "suggestion": "async def begin_create_trials(",
                    "comment": "Long running operations should use a 'begin_' prefix. Rename the async 'create_trials' method to 'begin_create_trials'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix"
                    ],
                    "line_no": 223,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Methods that enumerate resources should be prefixed with 'list_'. Consider renaming 'trials' to 'list_trials' and returning an ItemPaged type.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 229,
                    "bad_code": "async def erase_trials(",
                    "suggestion": "async def delete_trials(",
                    "comment": "Deletion operation names should use the 'delete_' prefix rather than 'erase_'. Rename 'erase_trials' to 'delete_trials' in the async client.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 824,
                    "bad_code": "ivar innerrror: Optional[InnerError]",
                    "suggestion": "ivar inner_error: Optional[InnerError]",
                    "comment": "There is a typo in the attribute name ('innerrror'). Correcting it to 'inner_error' (or a similar consistent name) improves clarity and consistency in the API.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 998,
                    "bad_code": "ivar eligibilityCriteriaEvidence: Optional[str]",
                    "suggestion": "ivar eligibility_criteria_evidence: Optional[str]",
                    "comment": "Variable names should use snake_case instead of camelCase.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1000,
                    "bad_code": "ivar patientDataEvidence: Optional[ClinicalNoteEvidence]",
                    "suggestion": "ivar patient_data_evidence: Optional[ClinicalNoteEvidence]",
                    "comment": "Variable names should use snake_case instead of camelCase.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1001,
                    "bad_code": "ivar patientInfoEvidence: Optional[ClinicalCodedElement]",
                    "suggestion": "ivar patient_info_evidence: Optional[ClinicalCodedElement]",
                    "comment": "Variable names should use snake_case instead of camelCase.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nPurpose  \nThis API offers clinical trial matching functionality. It accepts patient and clinical document data to find relevant clinical trials, supporting both trial creation and matching operations. The service is built to handle long-running operations and includes facilities for distributed tracing.\n\nAPI Version  \nBoth the synchronous and asynchronous client classes accept an `api_version` parameter during initialization. No dedicated API version object is defined, and the latest version is not explicitly stated in this view.\n\nClient Classes  \nThe primary client classes are the synchronous `ClinicalMatching` and the asynchronous `ClinicalMatchingClient`. Their methods include:  \n`__init__`, `begin_match_trials`, `create_trials`, `trials`, `erase_trials`, `close`, and `send_request`.\n\nAdditional Classes and Methods  \nThe API includes a comprehensive set of model classes within the models namespace. These models represent clinical trial data structures, patient records, trial matching configurations and results, along with various supporting types such as `ClinicalTrialDetails`, `PatientRecord`, `TrialMatcherData`, and `TrialMatcherResult`. Several enumerations such as `AgeUnit`, `ClinicalDocumentType`, `JobStatus`, and others encapsulate domain-specific constants. The models also include classes for handling geographic data, clinical coded elements, and error information.  \nThe service integrates synchronous and asynchronous patterns and uses long-running operation pollers (`LROPoller` and `AsyncLROPoller`) to manage operations that require polling.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-options-naming"
                    ],
                    "line_no": 70,
                    "bad_code": "options: Optional[CreateTrialsOptions] = None,",
                    "suggestion": "unit: Optional[Union[str, AgeUnit]] = None, value: Optional[float] = None, language: Optional[str] = None, date: Optional[datetime.datetime] = None,",
                    "comment": "Avoid using an options bag; expose each optional parameter individually as keyword-only arguments.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 102,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Rename the method to include a verb, clarifying that it returns a list of trial results.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 108,
                    "bad_code": "def erase_trials(",
                    "suggestion": "def delete_trials(",
                    "comment": "Deletion methods should use the 'delete_' prefix rather than 'erase_'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 223,
                    "bad_code": "def trials(",
                    "suggestion": "async def trials(",
                    "comment": "Asynchronous client methods must be defined with 'async def' to use async/await properly.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 229,
                    "bad_code": "async def erase_trials(",
                    "suggestion": "async def delete_trials(",
                    "comment": "Deletion methods should use the 'delete_' prefix rather than 'erase_'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 548,
                    "bad_code": "ivar facility_areas: Optional[List[ForwardRef('GeographicArea')]]",
                    "suggestion": "ivar facility_areas: Optional[List['GeographicArea']]",
                    "comment": "Use a string literal for forward references instead of ForwardRef for simplicity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 824,
                    "bad_code": "ivar innerrror: Optional[InnerError]",
                    "suggestion": "ivar innererror: Optional[InnerError]",
                    "comment": "Fix the typo in the attribute name to correctly spell 'innererror'.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 869,
                    "bad_code": "    type: Union[str, DocumentType]",
                    "suggestion": "    document_type: Union[str, DocumentType]",
                    "comment": "Avoid using the built-in name 'type'; rename the parameter to something more descriptive.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 998,
                    "bad_code": "ivar eligibilityCriteriaEvidence: Optional[str]",
                    "suggestion": "eligibility_criteria_evidence: Optional[str] = None",
                    "comment": "Rename the instance variable to use snake_case for consistency with Python naming conventions, and define it using standard PEP 526 style with a default value.",
                    "source": "merged"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1000,
                    "bad_code": "ivar patientDataEvidence: Optional[ClinicalNoteEvidence]",
                    "suggestion": "patient_data_evidence: Optional[ClinicalNoteEvidence] = None",
                    "comment": "Rename the instance variable to use snake_case for consistency with Python conventions, and initialize it with a default value as per PEP 526.",
                    "source": "merged"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1001,
                    "bad_code": "ivar patientInfoEvidence: Optional[ClinicalCodedElement]",
                    "suggestion": "patient_info_evidence: Optional[ClinicalCodedElement] = None",
                    "comment": "Use snake_case for attribute names and standard type annotation syntax with a default value to follow naming conventions and improve consistency.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 1052,
                    "bad_code": "ivar id: str",
                    "suggestion": "patient_id: str",
                    "comment": "Avoid shadowing the built-in 'id'; use a more descriptive name such as 'patient_id'.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 12,
        "comments_found": 12,
        "valid_generic_comments": 4,
        "invalid_generic_comments": [
            {
                "rule_ids": [],
                "line_no": 824,
                "bad_code": "ivar innerrror: Optional[InnerError]",
                "suggestion": "ivar innererror: Optional[InnerError]",
                "comment": "Fix the typo in the attribute name to correctly spell 'innererror'.",
                "source": "generic",
                "valid": false
            }
        ],
        "true_positives": 6,
        "false_positives": 2,
        "false_negatives": 6,
        "percent_coverage": 50.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE accurately and thoroughly applies the guidelines from the CONTEXT to specific code examples, without adding unsupported information or omitting critical details.",
        "overall_score": 55
    },
    {
        "testcase": "medium_apiview_no_violations",
        "expected": {
            "comments": []
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nOverview  \nThis API provides a service for clinical matching, primarily focused on processing and evaluating clinical trial data in relation to patient records. The service enables initiating long\u2010running trial matching operations, handling HTTP requests and responses, and processing clinical and geographic data to support trial eligibility determination.\n\nAPI Version  \nThe client initialization accepts an `api_version` string parameter. No explicit API version object is defined within this API; instead, the version is provided at runtime.\n\nClient Classes  \nThe service exposes a synchronous `ClinicalMatchingClient` and its asynchronous counterpart in the `aio` namespace. The synchronous client offers methods: `__init__`, `begin_match_trials`, `close`, and `send_request`. The asynchronous client mirrors these with methods: `__init__`, `begin_match_trials`, `close`, and `send_request`.\n\nSupporting Models  \nWithin the `models` namespace, the API defines a comprehensive suite of model classes that represent various clinical and trial matching entities. These include models for age details (`AcceptedAge`, `AcceptedAgeRange`, `AgeUnit`), clinical content (`ClinicalCodedElement`, `ExtendedClinicalCodedElement`, `ClinicalNoteEvidence`), trial information (`ClinicalTrialDetails`, `ClinicalTrialMetadata`, `ClinicalTrialPhase`, `ClinicalTrialPurpose`, `ClinicalTrialRecruitmentStatus`, `ClinicalTrials`, `TrialMatcherResult`, `TrialMatcherResults`), geographic data (`AreaGeometry`, `AreaProperties`, `GeographicArea`, `GeographicLocation`, `GeoJsonGeometryType`, `GeoJsonPropertiesSubType`, `GeoJsonType`), patient records (`PatientDocument`, `PatientInfo`, `PatientRecord`, `PatientInfoSex`), and additional supporting entities such as `Error`, `InnerError` and various enumeration types. This structure facilitates detailed clinical trial matching, capturing elements such as patient demographics, evidence inferences, and trial registry filtering.\n\nFunctional and Structural Details  \nThe API is designed to support both synchronous and asynchronous long-running operations via poller objects. It incorporates enhanced HTTP tracing and streaming support via methods like `send_request`. The extensive models illustrate a domain-specific design that captures a wide array of clinical, geographic, and trial-related metadata required for effective clinical matching operations.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 501,
                    "bad_code": "ivar custom_trials: Optional[List[ForwardRef('ClinicalTrialDetails')]]",
                    "suggestion": "ivar custom_trials: Optional[List[ClinicalTrialDetails]]",
                    "comment": "Use 'from __future__ import annotations' to simplify forward references and remove the need for explicit ForwardRef.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 502,
                    "bad_code": "ivar registry_filters: Optional[List[ForwardRef('ClinicalTrialRegistryFilter')]]",
                    "suggestion": "ivar registry_filters: Optional[List[ClinicalTrialRegistryFilter]]",
                    "comment": "Eliminate explicit ForwardRef usage by leveraging postponed evaluation of annotations via 'from __future__ import annotations'.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 575,
                    "bad_code": "FHIR_BUNDLE = \"fhirBundle\"",
                    "suggestion": null,
                    "comment": "If external constraints do not mandate this format, consider normalizing enum value naming for consistency across members.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 0,
        "comments_found": 3,
        "valid_generic_comments": 3,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 100.0
    },
    {
        "testcase": "medium_apiview_multiple_same_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 194,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.AgeUnit(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.AgeUnit(str, Enum):",
                    "comment": "Enum types should be implemented as extensible enumerations by inheriting from both str and Enum, per the guideline 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 270,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(str, Enum):",
                    "comment": "This enum should be extensible; inherit from str along with Enum as recommended by 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 307,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(str, Enum):",
                    "comment": "For extensibility, the enum should inherit from str and Enum as per the guideline 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 393,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(str, Enum):",
                    "comment": "Implement the enum as an extensible enumeration by subclassing from str and Enum ('python-models-enum-string').",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 402,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(str, Enum):",
                    "comment": "Extend the enum by inheriting from str along with Enum, following 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 415,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(str, Enum):",
                    "comment": "This enum should inherit from str and Enum to be extensible, as described in 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 488,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialSource(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialSource(str, Enum):",
                    "comment": "For extensibility, implement the enum by inheriting from both str and Enum ('python-models-enum-string').",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 493,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(str, Enum):",
                    "comment": "Change the enum declaration to inherit from str and Enum to comply with 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 568,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(str, Enum):",
                    "comment": "To allow for extensibility, the enum should subclass both str and Enum ('python-models-enum-string').",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 573,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.DocumentType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.DocumentType(str, Enum):",
                    "comment": "This enum should also be extensible by inheriting from str alongside Enum, as per 'python-models-enum-string'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 720,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.JobStatus(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.JobStatus(str, Enum):",
                    "comment": "For consistency and extensibility, define the enum by inheriting from str and Enum ('python-models-enum-string').",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 812,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.RepeatabilityResultType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.RepeatabilityResultType(str, Enum):",
                    "comment": "$The enum should be made extensible by subclassing both str and Enum, following 'python-models-enum-string'. (general comment)",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 899,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(str, Enum):",
                    "comment": "Implement this enum as an extensible enumeration by inheriting from str in addition to Enum ('python-models-enum-string').",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nThe API provides functionality for clinical matching operations by processing patient data along with clinical trial configuration information to initiate trial matching. It enables users to submit data\u2014using various input types\u2014to generate long-running trial matching operations that yield detailed trial matching results and inferences, all within a health insights context.\n\nThe API supports versioning through the use of an `api_version` parameter in the client constructors; however, no dedicated API Version object is defined, and no explicit latest version is indicated.\n\nThe primary client classes of interest are the synchronous `ClinicalMatchingClient` in the main namespace and the asynchronous `ClinicalMatchingClient` in the asynchronous namespace. In both, the available methods are `__init__`, `begin_match_trials`, `close`, and `send_request`.\n\nIn addition, the API comprises an extensive suite of model classes that cover aspects such as patient records, clinical trial details, trial inferences, and geographic information. Examples include data models like `TrialMatcherData`, `TrialMatcherResult`, `ClinicalTrialDetails`, `ClinicalTrialMetadata`, and `PatientRecord`, alongside several enumerations such as `AgeUnit`, `ClinicalDocumentType`, `ClinicalTrialPhase`, and others. These models define the detailed schema for the inputs and outputs related to the clinical matching process while also addressing error handling and auxiliary data representations.\n\nThe overall design is structured to support both synchronous and asynchronous workflows and leverages long-running operation pollers to manage the trial matching process, providing a comprehensive framework for integrating clinical matching into client applications.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 568,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(str, Enum):",
                    "comment": "Subclass str alongside Enum for better interoperability when using enum values as strings.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 573,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.DocumentType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.DocumentType(str, Enum):",
                    "comment": "Subclass str with Enum for consistent string conversion and usage.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 13,
        "comments_found": 2,
        "valid_generic_comments": 2,
        "invalid_generic_comments": [],
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 13,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 0,
        "groundedness": 0,
        "groundedness_reason": "No comments found.",
        "overall_score": 0
    },
    {
        "testcase": "large_apiview_few_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-separate-sync-async"
                    ],
                    "line_no": 326,
                    "bad_code": "async def analyze_document_async(self, model_id: str, body: Union[AnalyzeDocumentRequest, JSON, IO[bytes]], **kwargs: Any) -> AnalyzeResult",
                    "suggestion": "Remove this asynchronous method from the synchronous client. Instead, offer an equivalent async method only in the async client located under the azure.ai.documentintelligence.aio namespace.",
                    "comment": "Synchronous client classes must not mix in async methods. The 'analyze_document_async' method in the sync client violates the guideline for providing separate sync and async clients.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 937,
                    "bad_code": "    @asyncio.coroutine",
                    "suggestion": "Replace the use of '@asyncio.coroutine' with an 'async def' definition. For example, remove the decorator and define the method with 'async def get_classifier_old(...):'.",
                    "comment": "The use of '@asyncio.coroutine' is deprecated; the guidelines require using async/await syntax for asynchronous methods.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nPurpose  \nThis API provides a comprehensive document intelligence service that enables document analysis, classification, and model building. It supports operations for authorizing the copying of classifiers and models, initiating long\u2010running operations to build, compose, and analyze documents (both individually and in batches), retrieving operation results such as analyzed content, figures, and PDFs, and managing the lifecycle of document-related resources.\n\nAPI Version  \nThe clients accept an `api_version` parameter during initialization to indicate the version of the service to use. Although there is no distinct API version object, the latest version is determined by the default value configured by the client initializers.\n\nPrimary Client Classes  \nThe synchronous `DocumentIntelligenceAdministrationClient` provides methods including `authorize_classifier_copy`, `authorize_model_copy`, `begin_build_classifier`, `begin_build_document_model`, `begin_compose_model`, `begin_copy_classifier_to`, `begin_copy_model_to`, `close`, `delete_classifier`, `delete_model`, `get_classifier`, `get_model`, `get_operation`, `get_resource_details`, `list_classifiers`, `list_models`, `list_operations`, `analyze_document_async`, and `send_request`. The synchronous `DocumentIntelligenceClient` offers methods such as `begin_analyze_batch_documents`, `begin_analyze_document`, `begin_classify_document`, `close`, `delete_analyze_batch_result`, `delete_analyze_result`, `get_analyze_batch_result`, `get_analyze_result_figure`, `get_analyze_result_pdf`, `list_analyze_batch_results`, and `send_request`. Their asynchronous counterparts in the `aio` namespace mirror these functionalities with asynchronous implementations.\n\nOther Classes and Methods  \nAdditional classes include the pollers such as `AnalyzeDocumentLROPoller` and its async equivalent, which manage the long\u2010running operations. A broad set of model classes (found under the `models` namespace) defines the data structures for document analysis requests and results. These include representations for addresses, analyzed documents, batch operations and results, classifier and model details, bounding regions, document fields, spans, styles, tables, and various enumerations for options like content formatting and operation statuses.\n\nAdditional Functional and Structural Details  \nThe API is structured to support both synchronous and asynchronous use cases and follows a context management pattern for resource cleanup. It employs long\u2010running operation pollers to manage tasks that do not complete immediately. The flexibility in input types (for example, supporting JSON, byte streams, and file-like objects) and the comprehensive suite of models facilitate a wide range of document processing and analysis scenarios.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 6,
                    "bad_code": "class azure.ai.documentintelligence.AnalyzeDocumentLROPoller(LROPoller[+PollingReturnType_co]):",
                    "suggestion": "class azure.ai.documentintelligence.AnalyzeDocumentLROPoller(LROPoller[PollingReturnType_co]):",
                    "comment": "Remove the '+' from the generic type parameter to adhere to standard Python type hint syntax.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-separate-sync-async"
                    ],
                    "line_no": 326,
                    "bad_code": "async def analyze_document_async(",
                    "suggestion": null,
                    "comment": "The async method is defined in a client class that otherwise provides synchronous operations. Async operations should reside in a separate async client in the .aio namespace.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 492,
                    "bad_code": "body: JSON",
                    "suggestion": "body: Dict[str, Any]",
                    "comment": "Use a standard dict type alias for JSON payloads to clarify expected input.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 937,
                    "bad_code": "@asyncio.coroutine",
                    "suggestion": "async def get_classifier_old(",
                    "comment": "Replace the deprecated asyncio.coroutine decorator with an async def declaration to comply with modern async/await syntax guidelines.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 1047,
                    "bad_code": "    *,",
                    "suggestion": "    *, content_type: str = \"application/json\",",
                    "comment": "The final implementation of begin_analyze_batch_documents omits the content_type parameter specified in the overloads. Including it improves consistency.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-separate-sync-async"
                    ],
                    "line_no": 1266,
                    "bad_code": "def list_analyze_batch_results(",
                    "suggestion": "async def list_analyze_batch_results(",
                    "comment": "This method is defined synchronously even though it returns an async iterable, mixing sync and async patterns. In an async client all methods should be declared async.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 1496,
                    "bad_code": "model_id: str",
                    "suggestion": null,
                    "comment": "Group required keyword-only parameters together before the optional ones for improved clarity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2037,
                    "bad_code": "ivar tags: dict[str, str]",
                    "suggestion": "ivar tags: Optional[Dict[str, str]]",
                    "comment": "Align the field type with the constructor\u2019s Optional annotation for consistency.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2077,
                    "bad_code": "def __init__(self, *args: Any, **kwargs: Any) -> None",
                    "suggestion": null,
                    "comment": "Avoid a catch\u2010all initializer with *args and **kwargs; an explicit constructor or factory methods would improve parameter discoverability.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2093,
                    "bad_code": "ivar warnings: Optional[List[ForwardRef('DocumentIntelligenceWarning')]]",
                    "suggestion": null,
                    "comment": "Enable postponed evaluation of annotations (e.g. via 'from __future__ import annotations') to eliminate the need for explicit ForwardRef usage.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2507,
                    "bad_code": "def __init__(",
                    "suggestion": "def __init__(self, mapping: Optional[Mapping[str, Any]] = None, **kwargs: Any) -> None:",
                    "comment": "Avoid the ambiguous use of *args and **kwargs; use an explicit signature (or separate factory methods) to improve clarity and type safety.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2983,
                    "bad_code": "ivar footnotes: Optional[List[ForwardRef('DocumentFootnote')]]",
                    "suggestion": "ivar footnotes: Optional[List[DocumentFootnote]]",
                    "comment": "Leverage postponed evaluation of annotations (e.g. via 'from __future__ import annotations') to eliminate explicit ForwardRef usage and simplify type hints.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 3005,
                    "bad_code": "    *args: Any,",
                    "suggestion": null,
                    "comment": "Using generic *args in the __init__ implementation obscures the explicit parameters declared in the overloads. Consider using an explicit __init__ signature with keyword-only parameters (and a separate factory method for mapping initialization) to improve discoverability.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 2,
        "comments_found": 13,
        "valid_generic_comments": 10,
        "invalid_generic_comments": [],
        "true_positives": 2,
        "false_positives": 1,
        "false_negatives": 0,
        "percent_coverage": 100.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately reflecting all essential points without adding or omitting information.",
        "overall_score": 93
    },
    {
        "testcase": "large_apiview_many_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-namespaces-prefix"
                    ],
                    "line_no": 3,
                    "bad_code": "namespace microsoft.azure.ai.documentintelligence",
                    "suggestion": "namespace azure.ai.documentintelligence",
                    "comment": "The namespace declaration includes a 'microsoft' prefix. According to the guidelines, the library should be implemented as a sub\u2010package of the azure root namespace (and must not use 'microsoft' as the root namespace).",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-hier-vend"
                    ],
                    "line_no": 332,
                    "bad_code": "def client(self, name, **kwargs) -> DocumentIntelligenceClient",
                    "suggestion": "def get_client(self, name, **kwargs) -> DocumentIntelligenceClient",
                    "comment": "For hierarchical clients the method retrieving a child client should be named with a 'get_' prefix (e.g. get_client) according to the guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-long-args"
                    ],
                    "line_no": 629,
                    "bad_code": "def process_document(self, model_id, doc_type, source, version, locale, format, pages, fields, timeout) -> AnalyzeResult",
                    "suggestion": "def process_document(self, model_id, *, doc_type, source, version, locale, format, pages, fields, timeout) -> AnalyzeResult",
                    "comment": "The process_document method takes too many positional parameters (nine in total). This violates the guideline that advises against methods requiring more than five positional parameters. Refactor these parameters to be keyword-only.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-optional-args"
                    ],
                    "line_no": 643,
                    "bad_code": "def analyze_batch(",
                    "suggestion": "def analyze_batch(self, model_id, body, *, features=None, locale=None, output=None) -> LROPoller[AnalyzeBatchResult]",
                    "comment": "Optional parameters in the analyze_batch method should be declared as keyword\u2011only. This helps improve clarity and conforms to SDK design guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-namespaces-async"
                    ],
                    "line_no": 661,
                    "bad_code": "namespace azure.ai.documentintelligence.async",
                    "suggestion": "namespace azure.ai.documentintelligence.aio",
                    "comment": "Asynchronous client types should reside in an '.aio' subpackage rather than '.async'. This change conforms with SDK guidelines for async namespacing.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-auth-credential-azure-core"
                    ],
                    "line_no": 995,
                    "bad_code": "api_key: str",
                    "suggestion": "credential: Union[AzureKeyCredential, AsyncTokenCredential]",
                    "comment": "In the async DocumentIntelligenceClient constructor the parameter is defined as a plain string (api_key: str). The guidelines require using the credential types provided by azure-core (e.g. AzureKeyCredential or AsyncTokenCredential) for authentication.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1427,
                    "bad_code": "ivar failedCount: int",
                    "suggestion": "ivar failed_count: int",
                    "comment": "The attribute name 'failedCount' does not follow snake_case conventions. It should be renamed to 'failed_count' to comply with the naming guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1428,
                    "bad_code": "ivar skippedCount: int",
                    "suggestion": "ivar skipped_count: int",
                    "comment": "Variable names should use snake_case. 'skippedCount' should be renamed to 'skipped_count'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1429,
                    "bad_code": "ivar succeededCount: int",
                    "suggestion": "ivar succeeded_count: int",
                    "comment": "Variable names should use snake_case. 'succeededCount' should be renamed to 'succeeded_count'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 1948,
                    "bad_code": "neural = \"neural\"",
                    "suggestion": "NEURAL = \"neural\" (and similarly, use TEMPLATE = \"template\" for the other member)",
                    "comment": "Enum member names must be in UPPERCASE. The current definition of DocumentBuildMode uses lower-case member names.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-errors-use-standard-exceptions"
                    ],
                    "line_no": 3160,
                    "bad_code": "class DocumentIntelligenceCustomError(Exception):",
                    "suggestion": "Consider using an existing exception type from azure-core (for example, subclass AzureError) or a built-in exception if appropriate, rather than creating a new custom exception.",
                    "comment": "Custom exceptions should be avoided if a standard or azure-core exception type can convey the error, per SDK guidelines.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nService Purpose  \nThis API offers document intelligence capabilities. It provides functionality for analyzing documents, building and composing document models, classifying documents, and performing related long\u2011running operations. The service is designed for both synchronous and asynchronous use cases and supports operations such as authorization for copying classifiers and models as well as retrieving detailed operation and resource information.\n\nAPI Version  \nThe client initializers include an `api_version` parameter to specify the target API version. Although the default value is unspecified in the stub, version management is supported through this parameter.\n\nKey Client Classes  \nThe service exposes a `DocumentIntelligenceAdministrationClient` class with methods such as `authorize_classifier_copy`, `authorize_model_copy`, `begin_build_classifier`, `begin_build_document_model`, `begin_compose_model`, `begin_copy_classifier_to`, `begin_copy_model_to`, `close`, `delete_classifier`, `delete_model`, `get_classifier`, `get_model`, `get_operation`, `get_resource_details`, `list_classifiers`, `list_models`, `list_operations`, `send_request`, and `client`. In addition, the `DocumentIntelligenceClient` class provides methods including `begin_analyze_batch_documents`, `begin_analyze_document`, `begin_classify_document`, `close`, `delete_analyze_batch_result`, `delete_analyze_result`, `get_analyze_batch_result`, `get_analyze_result_figure`, `get_analyze_result_pdf`, `list_analyze_batch_results`, `process_document`, `analyze_batch`, and `send_request`.\n\nAsynchronous Variants  \nWithin the asynchronous namespace, the API provides corresponding classes such as `azure.ai.documentintelligence.async.DocumentIntelligenceAdministrationClient` and `azure.ai.documentintelligence.async.DocumentIntelligenceClient`. These classes mirror the synchronous methods (for example, `authorize_classifier_copy`, `begin_build_document_model`, `begin_analyze_document`, and so on) and include asynchronous operations and poller classes such as `AsyncAnalyzeDocumentLROPoller`.\n\nAdditional Structures and Models  \nA wide range of supporting types is defined in the models namespace. These include data structures for requests (for example, `AnalyzeBatchDocumentsRequest`, `AnalyzeDocumentRequest`, `BuildDocumentClassifierRequest`, and `BuildDocumentModelRequest`), operation and result details (such as `AnalyzeBatchOperation`, `AnalyzeBatchResult`, `AnalyzeResult`, `DocumentClassifierDetails`, and `DocumentModelDetails`), and error handling (including `DocumentIntelligenceError` and related inner error types). There are also several models to describe document structure and content such as `AddressValue`, `AnalyzedDocument`, `DocumentBarcode`, `DocumentFigure`, `DocumentField`, `DocumentKeyValuePair`, and various enums for content formats and operation kinds.\n\nThis structure assists in the management and analysis of document data while providing detailed, asynchronous and synchronous control over long\u2011running operations.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 316,
                    "bad_code": "def list_classifiers(self, **kwargs: Any) -> Iterable[DocumentClassifierDetails]",
                    "suggestion": "def list_classifiers(self, **kwargs: Any) -> ItemPaged[DocumentClassifierDetails]",
                    "comment": "List methods should return a paged response object that implements the ItemPaged protocol.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-hier-vend"
                    ],
                    "line_no": 332,
                    "bad_code": "def client(self, name, **kwargs) -> DocumentIntelligenceClient",
                    "suggestion": "def get_document_intelligence_client(self, name, **kwargs) -> DocumentIntelligenceClient",
                    "comment": "The method should be renamed to follow the 'get_<child>_client' naming convention for hierarchical clients, improving clarity and aligning with design guidelines.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 517,
                    "bad_code": "def begin_analyze_document(",
                    "suggestion": "def begin_analyze_document(self, model_id: str, body: Union[AnalyzeDocumentRequest, JSON, IO[bytes]], *, content_type: str = 'application/json', features: Optional[List[Union[str, DocumentAnalysisFeature]]] = None, locale: Optional[str] = None, output: Optional[List[Union[str, AnalyzeOutputOption]]] = None, output_content_format: Optional[Union[str, DocumentContentFormat]] = None, pages: Optional[str] = None, query_fields: Optional[List[str]] = None, string_index_type: Optional[Union[str, StringIndexType]] = None, **kwargs: Any) -> AnalyzeDocumentLROPoller[AnalyzeResult]",
                    "comment": "The final implementation of begin_analyze_document is missing the 'content_type' parameter present in other overloads; adding it improves consistency and discoverability.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 572,
                    "bad_code": "def begin_classify_document(",
                    "suggestion": "def begin_classify_document(self, classifier_id: str, body: Union[ClassifyDocumentRequest, JSON, IO[bytes]], *, content_type: str = 'application/json', pages: Optional[str] = None, split: Optional[Union[str, SplitMode]] = None, string_index_type: Optional[Union[str, StringIndexType]] = None, **kwargs: Any) -> LROPoller[AnalyzeResult]",
                    "comment": "Include the 'content_type' parameter in the implementation to align with the overload signatures for begin_classify_document.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-lro-poller-begin-naming"
                    ],
                    "line_no": 602,
                    "bad_code": "def get_analyze_batch_result(self, continuation_token: str) -> LROPoller[AnalyzeBatchResult]",
                    "suggestion": "def begin_get_analyze_batch_result(self, continuation_token: str) -> LROPoller[AnalyzeBatchResult]",
                    "comment": "Long running operations must use the begin_ prefix when returning an LROPoller.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-optional-args",
                        "python_implementation.html#python-codestyle-long-args"
                    ],
                    "line_no": 629,
                    "bad_code": "def process_document(",
                    "suggestion": "def process_document(self, model_id, doc_type, source, version, *, locale, format, pages, fields, timeout) -> AnalyzeResult",
                    "comment": "This method has too many positional parameters and should use a * to enforce keyword-only parameters for the optional ones.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 636,
                    "bad_code": "format,",
                    "suggestion": "doc_format,",
                    "comment": "Rename the 'format' parameter to 'doc_format' to avoid shadowing the built-in name.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-optional-args",
                        "python_design.html#python-lro-poller-begin-naming"
                    ],
                    "line_no": 643,
                    "bad_code": "def analyze_batch(",
                    "suggestion": "def begin_analyze_batch(self, model_id, body, *, features=None, locale=None, output=None) -> LROPoller[AnalyzeBatchResult]",
                    "comment": "The method should be renamed with a begin_ prefix to indicate it is a long running operation, and optional parameters should be made keyword-only. Additionally, add explicit type annotations to parameters to improve clarity.",
                    "source": "merged"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-namespaces-async"
                    ],
                    "line_no": 661,
                    "bad_code": "namespace azure.ai.documentintelligence.async",
                    "suggestion": "namespace azure.ai.documentintelligence.aio",
                    "comment": "Async clients should be placed in an '.aio' sub-namespace rather than '.async'.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 973,
                    "bad_code": "def list_classifiers(self, **kwargs: Any) -> AsyncIterable[DocumentClassifierDetails]",
                    "suggestion": "async def list_classifiers(self, **kwargs: Any) -> AsyncIterable[DocumentClassifierDetails]",
                    "comment": "Async operations must be defined with 'async def' to properly support asynchronous execution.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 976,
                    "bad_code": "def list_models(self, **kwargs: Any) -> AsyncIterable[DocumentModelDetails]",
                    "suggestion": "async def list_models(self, **kwargs: Any) -> AsyncIterable[DocumentModelDetails]",
                    "comment": "Async methods should use the async/await syntax; use 'async def' here.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-sync-async-separate-clients"
                    ],
                    "line_no": 1276,
                    "bad_code": "def list_analyze_batch_results(",
                    "suggestion": null,
                    "comment": "Mixing synchronous and asynchronous methods in the same client violates the guideline to provide separate clients for sync and async operations.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1427,
                    "bad_code": "ivar failedCount: int",
                    "suggestion": "ivar failed_count: int",
                    "comment": "Variable names should use snake_case for consistency and to follow Python naming conventions.",
                    "source": "merged"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1428,
                    "bad_code": "ivar skippedCount: int",
                    "suggestion": "ivar skipped_count: int",
                    "comment": "Instance variable names should use snake_case instead of camelCase.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1429,
                    "bad_code": "ivar succeededCount: int",
                    "suggestion": "ivar succeeded_count: int",
                    "comment": "Instance variable names should use snake_case instead of camelCase.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 1948,
                    "bad_code": "neural = \"neural\"",
                    "suggestion": "NEURAL = 'neural'",
                    "comment": "Enum member names should be uppercase for consistency and to follow naming conventions.",
                    "source": "merged"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 1949,
                    "bad_code": "template = \"template\"",
                    "suggestion": "TEMPLATE = 'template'",
                    "comment": "Enum member names should be uppercase for consistency and to follow naming conventions.",
                    "source": "merged"
                },
                {
                    "rule_ids": [],
                    "line_no": 2047,
                    "bad_code": "ivar tags: dict[str, str]",
                    "suggestion": "ivar tags: Optional[Dict[str, str]]",
                    "comment": "Ensure the attribute type aligns with the __init__ signature by marking tags as Optional and using consistent generic types.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2139,
                    "bad_code": "ivar type: Union[str, DocumentFieldType]",
                    "suggestion": "ivar field_type: Union[str, DocumentFieldType]",
                    "comment": "Rename the 'type' attribute to 'field_type' to avoid shadowing the built-in name.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2493,
                    "bad_code": "def __init__(",
                    "suggestion": null,
                    "comment": "Using *args and **kwargs in the constructor obscures the intended parameter list. Prefer explicit, keyword-only parameters to improve discoverability and type-checker support.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 3011,
                    "bad_code": "def __init__(self, mapping: Mapping[str, Any]) -> None",
                    "suggestion": "def from_dict(cls, mapping: Mapping[str, Any]) -> DocumentTable:",
                    "comment": "Introduce a dedicated class method for dict\u2010based initialization to separate concerns and provide a clearer, more idiomatic API.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-namespaces-prefix",
                        "python_design.html#python-errors-azure-exceptions"
                    ],
                    "line_no": 3160,
                    "bad_code": "class DocumentIntelligenceCustomError(Exception):",
                    "suggestion": "class azure.ai.documentintelligence.DocumentIntelligenceCustomError(azure.core.exceptions.AzureError):",
                    "comment": "The custom exception should be fully namespaced under the azure.ai.documentintelligence package and should inherit from an azure-core exception type such as AzureError rather than directly from Exception.",
                    "source": "merged"
                }
            ]
        },
        "expected_comments": 11,
        "comments_found": 22,
        "valid_generic_comments": 7,
        "invalid_generic_comments": [],
        "true_positives": 8,
        "false_positives": 7,
        "false_negatives": 3,
        "percent_coverage": 72.7272727273,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is entirely based on the CONTEXT, accurately and thoroughly conveying all essential information without introducing unsupported details or omitting critical points.",
        "overall_score": 66
    },
    {
        "testcase": "large_apiview_no_violations",
        "expected": {
            "comments": []
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nOverview  \nThe API provides document intelligence capabilities. It enables users to analyze, classify, and build document models as well as manage document classifiers through both long\u2010running operations and immediate responses. The service supports synchronous and asynchronous interactions and includes utilities such as HTTP request sending and context management.\n\nAPI Version  \nClient constructors accept an `api_version` parameter. There is no distinct API version object exposed here; users specify the version during client initialization.\n\nSynchronous *Client Classes  \nThe synchronous administration client, `DocumentIntelligenceAdministrationClient`, offers methods such as `authorize_classifier_copy`, `authorize_model_copy`, `begin_build_classifier`, `begin_build_document_model`, `begin_compose_model`, `begin_copy_classifier_to`, `begin_copy_model_to`, `close`, `delete_classifier`, `delete_model`, `get_classifier`, `get_model`, `get_operation`, `get_resource_details`, `list_classifiers`, `list_models`, `list_operations`, and `send_request`. The synchronous processing client, `DocumentIntelligenceClient`, exposes methods including `begin_analyze_batch_documents`, `begin_analyze_document`, `begin_classify_document`, `close`, `delete_analyze_batch_result`, `delete_analyze_result`, `get_analyze_batch_result`, `get_analyze_result_figure`, `get_analyze_result_pdf`, `list_analyze_batch_results`, and `send_request`.\n\nAsynchronous *Client Classes  \nWithin the asynchronous namespace the API provides `AsyncAnalyzeDocumentLROPoller` with its `from_continuation_token` method and asynchronous versions of the administration and processing clients. The asynchronous administration client (also named `DocumentIntelligenceAdministrationClient` in the aio namespace) includes methods such as `authorize_classifier_copy`, `authorize_model_copy`, `begin_build_classifier`, `begin_build_document_model`, `begin_compose_model`, `begin_copy_classifier_to`, `begin_copy_model_to`, `close`, `delete_classifier`, `delete_model`, `get_classifier`, `get_model`, `get_operation`, `get_resource_details`, `list_classifiers`, `list_models`, `list_operations`, and `send_request`. The asynchronous processing client, `DocumentIntelligenceClient` in the aio namespace, includes methods like `begin_analyze_batch_documents`, `begin_analyze_document`, `begin_classify_document`, `close`, `delete_analyze_batch_result`, `delete_analyze_result`, `get_analyze_batch_result`, `get_analyze_result_figure`, `get_analyze_result_pdf`, `list_analyze_batch_results`, and `send_request`.\n\nAdditional Model Classes  \nIn the `models` namespace the API defines many classes that encapsulate the structure of document analysis requests and responses. These include data models such as `AddressValue`, `AnalyzeBatchDocumentsRequest`, `AnalyzeBatchOperation`, `AnalyzeBatchResult`, `AnalyzeDocumentRequest`, `AnalyzeResult`, and many others related to document pages, paragraphs, fields, tables, barcodes, formulas, errors, warnings, and operation details. These models are used to structure detailed information about document contents, layout elements, classification parameters, and operational metadata.\n\nFunctionality and Structure  \nThe API is organized to support advanced document analysis workflows. It uses long-running pollers (for example, via `AnalyzeDocumentLROPoller` and its asynchronous variant) to handle operations that require significant processing time. Distributed tracing wrappers are applied to many methods, indicating built-in support for telemetry and monitoring. In addition to high-level document analysis and classification operations, lower-level HTTP request sending is available for custom interactions. The combination of synchronous and asynchronous clients and a comprehensive set of model classes supports a wide range of document intelligence use cases.",
                    "source": "summary"
                },
                {
                    "rule_ids": [],
                    "line_no": 6,
                    "bad_code": "class azure.ai.documentintelligence.AnalyzeDocumentLROPoller(LROPoller[+PollingReturnType_co]):",
                    "suggestion": "class AnalyzeDocumentLROPoller(LROPoller[PollingReturnType_co]):",
                    "comment": "Avoid embedding fully\u2010qualified names and non\u2010standard generic syntax (the '+' marker) in class definitions; rely on module structure and standard TypeVar usage.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 317,
                    "bad_code": "def list_classifiers(self, **kwargs: Any) -> Iterable[DocumentClassifierDetails]",
                    "suggestion": "def list_classifiers(self, **kwargs: Any) -> ItemPaged[DocumentClassifierDetails]",
                    "comment": "List operations should return an object that implements the ItemPaged protocol, which supports paging, instead of a plain Iterable.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 499,
                    "bad_code": "def begin_analyze_document(",
                    "suggestion": null,
                    "comment": "If many optional parameters accumulate, consider grouping related options into a configuration object to reduce signature complexity.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 519,
                    "bad_code": "body: Union[AnalyzeDocumentRequest, JSON, IO[bytes]],",
                    "suggestion": null,
                    "comment": "Consider using a type alias for frequently repeated union types to enhance readability.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 621,
                    "bad_code": "def list_analyze_batch_results(",
                    "suggestion": "def list_analyze_batch_results(self, model_id: str, **kwargs: Any) -> ItemPaged[AnalyzeBatchOperation]",
                    "comment": "Listing methods should return a paging object that implements the ItemPaged protocol (with support for by_page()) rather than a plain Iterable.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 951,
                    "bad_code": "def list_models(self, **kwargs: Any) -> AsyncIterable[DocumentModelDetails]",
                    "suggestion": "def list_models(self, **kwargs: Any) -> AsyncItemPaged[DocumentModelDetails]",
                    "comment": "Async listing methods should return a paging type (AsyncItemPaged) that supports page\u2010wise iteration rather than a generic AsyncIterable.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 954,
                    "bad_code": "def list_operations(self, **kwargs: Any) -> AsyncIterable[DocumentIntelligenceOperationDetails]",
                    "suggestion": "def list_operations(self, **kwargs: Any) -> AsyncItemPaged[DocumentIntelligenceOperationDetails]",
                    "comment": "Async listing methods should return a paging type (AsyncItemPaged) to facilitate both item\u2010by\u2010item and page\u2010by\u2010page iteration.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 1494,
                    "bad_code": "def __init__(",
                    "suggestion": null,
                    "comment": "Remove this global __init__ function; __init__ should only be defined within a class to avoid confusion.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1502,
                    "bad_code": "ivar bounding_regions: Optional[List[ForwardRef('BoundingRegion')]]",
                    "suggestion": "ivar bounding_regions: Optional[List[BoundingRegion]]",
                    "comment": "Leverage postponed annotation evaluation (e.g. via \u2018from __future__ import annotations\u2019) to remove redundant ForwardRef usage, simplifying the type hints.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1522,
                    "bad_code": "def __init__(",
                    "suggestion": null,
                    "comment": "Avoid using a catch\u2010all constructor with *args and **kwargs as it obscures the intended parameters. Consider making the constructor explicit or providing a dedicated factory method.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1964,
                    "bad_code": "ivar tags: dict[str, str]",
                    "suggestion": null,
                    "comment": "Maintain consistency in type annotations across the API by standardizing on either built-in generics or typing aliases.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2062,
                    "bad_code": "def __init__(",
                    "suggestion": null,
                    "comment": "Avoid relying on a catch\u2010all *args and **kwargs implementation; use a more explicit constructor signature to enhance discoverability and type safety.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2110,
                    "bad_code": "ivar bounding_regions: Optional[List[ForwardRef('BoundingRegion')]]",
                    "suggestion": "ivar bounding_regions: Optional[List['BoundingRegion']]",
                    "comment": "Prefer using string literal annotations for forward references to improve readability.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2494,
                    "bad_code": "*args: Any,",
                    "suggestion": null,
                    "comment": "Using *args and **kwargs across overloads obscures the expected parameters. Consider providing an explicit __init__ signature for direct keyword arguments and a separate factory (e.g. from_mapping) for dict-based initialization.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2988,
                    "bad_code": "def __init__(self, *args: Any, **kwargs: Any) -> None",
                    "suggestion": null,
                    "comment": "Avoid using a catch-all initializer; consider explicit alternative constructors (e.g. a from_mapping classmethod) to improve type safety and discoverability.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 0,
        "comments_found": 15,
        "valid_generic_comments": 10,
        "invalid_generic_comments": [
            {
                "rule_ids": [],
                "line_no": 2062,
                "bad_code": "def __init__(",
                "suggestion": null,
                "comment": "Avoid relying on a catch\u2010all *args and **kwargs implementation; use a more explicit constructor signature to enhance discoverability and type safety.",
                "source": "generic",
                "valid": false
            }
        ],
        "true_positives": 0,
        "false_positives": 5,
        "false_negatives": 0,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 1,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE accurately and completely reflects the information in the CONTEXT, without adding or omitting any critical details.",
        "overall_score": 0.0
    },
    {
        "testcase": "large_apiview_multiple_same_violations",
        "expected": {
            "comments": [
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 1448,
                    "bad_code": "class azure.ai.documentintelligence.models.AnalyzeOutputOption(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.AnalyzeOutputOption(str, Enum):",
                    "comment": "Enums in the SDK should be extensible by inheriting from str as well as Enum. This allows for flexible comparisons and future extensions.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python-models-enum-string"
                    ],
                    "line_no": 1811,
                    "bad_code": "class azure.ai.documentintelligence.models.ContentSourceKind(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.ContentSourceKind(str, Enum):",
                    "comment": "Enums should extend str to adhere to the guideline of using extensible enumerations in the SDK.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python-models-enum-string"
                    ],
                    "line_no": 1864,
                    "bad_code": "class azure.ai.documentintelligence.models.DocumentAnalysisFeature(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.DocumentAnalysisFeature(str, Enum):",
                    "comment": "Enums should extend str to adhere to the guideline of using extensible enumerations in the SDK.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python-models-enum-string"
                    ],
                    "line_no": 1902,
                    "bad_code": "class azure.ai.documentintelligence.models.DocumentBarcodeKind(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.DocumentBarcodeKind(str, Enum):",
                    "comment": "Enum members should be based on str to ensure extensibility and compliance with SDK guidelines.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python-models-enum-string"
                    ],
                    "line_no": 1922,
                    "bad_code": "class azure.ai.documentintelligence.models.DocumentBuildMode(Enum):",
                    "suggestion": "class azure.ai.documentintelligence.models.DocumentBuildMode(str, Enum):",
                    "comment": "For consistency and extensibility, enums should inherit from str alongside Enum.",
                    "source": "guideline"
                }
            ]
        },
        "actual": {
            "comments": [
                {
                    "rule_ids": [],
                    "line_no": 1,
                    "bad_code": "",
                    "suggestion": null,
                    "comment": "Here is a summary of the service described by this APIView:\n\nService Overview  \nThis API provides a comprehensive document intelligence service that supports the analysis, classification, and management of documents and custom models. It enables users to initiate long\u2010running operations for analyzing individual documents or batches, build and copy classifiers and models, retrieve detailed results, and handle various document processing tasks. The service accommodates both content extraction and structural analysis as well as administrative operations related to document model lifecycle management.\n\nAPI Version  \nThe client initialization methods accept an `api_version` parameter to specify the service version. No dedicated API version object is explicitly defined here, but the clients are designed to work with versioned endpoints where the latest version is used when the parameter is not overridden.\n\nSynchronous Client Classes  \nThe primary client classes for synchronous operations are the `DocumentIntelligenceAdministrationClient` and the `DocumentIntelligenceClient`. The administration client exposes methods including `authorize_classifier_copy`, `authorize_model_copy`, `begin_build_classifier`, `begin_build_document_model`, `begin_compose_model`, `begin_copy_classifier_to`, `begin_copy_model_to`, `close`, `delete_classifier`, `delete_model`, `get_classifier`, `get_model`, `get_operation`, `get_resource_details`, `list_classifiers`, `list_models`, `list_operations`, and `send_request`. The main document intelligence client provides operations via methods such as `begin_analyze_batch_documents`, `begin_analyze_document`, `begin_classify_document`, `close`, `delete_analyze_batch_result`, `delete_analyze_result`, `get_analyze_batch_result`, `get_analyze_result_figure`, `get_analyze_result_pdf`, `list_analyze_batch_results`, and `send_request`.\n\nAsynchronous Client Classes  \nFor asynchronous use cases, corresponding client classes are available in the asynchronous namespace. The asynchronous administration client offers methods that mirror its synchronous counterpart, including `authorize_classifier_copy`, `authorize_model_copy`, `begin_build_classifier`, `begin_build_document_model`, `begin_compose_model`, `begin_copy_classifier_to`, `begin_copy_model_to`, `close`, `delete_classifier`, `delete_model`, `get_classifier`, `get_model`, `get_operation`, `get_resource_details`, `list_classifiers`, `list_models`, `list_operations`, and `send_request`. Similarly, the asynchronous document intelligence client provides methods such as `begin_analyze_batch_documents`, `begin_analyze_document`, `begin_classify_document`, `close`, `delete_analyze_batch_result`, `delete_analyze_result`, `get_analyze_batch_result`, `get_analyze_result_figure`, `get_analyze_result_pdf`, `list_analyze_batch_results`, and `send_request`. In addition, long-running operation poller classes like `AsyncAnalyzeDocumentLROPoller` facilitate asynchronous operation tracking.\n\nSupporting Models and Utilities  \nA wide array of model classes in the `azure.ai.documentintelligence.models` namespace defines the request and response schemas, error handling structures, and domain-specific entities for document representation. These include classes for document requests and results (such as `AnalyzeDocumentRequest`, `AnalyzeBatchDocumentsRequest`, `AnalyzeResult`, and `AnalyzeBatchResult`), representations of document elements (for example, `AnalyzedDocument`, `DocumentPage`, `DocumentLine`, `DocumentTable`, and `DocumentField`), geographic and stylistic details (such as `BoundingRegion` and `DocumentStyle`), and several enumeration types that control aspects of processing (for instance, `AnalyzeOutputOption`, `DocumentAnalysisFeature`, `ContentSourceKind`, and `StringIndexType`). The models cover both the operational aspects of initiating analysis and the detailed structure of the output generated from document processing.\n\nIn summary, this API is structured to support complex workflows in document analysis and model management through both synchronous and asynchronous patterns while offering a rich set of models to represent document content, errors, and configuration details.",
                    "source": "summary"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 317,
                    "bad_code": "def list_classifiers(self, **kwargs: Any) -> Iterable[DocumentClassifierDetails]",
                    "suggestion": "def list_classifiers(self, **kwargs: Any) -> ItemPaged[DocumentClassifierDetails]",
                    "comment": "List methods should return a pager type that implements the ItemPaged protocol rather than a generic Iterable.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 320,
                    "bad_code": "def list_models(self, **kwargs: Any) -> Iterable[DocumentModelDetails]",
                    "suggestion": "def list_models(self, **kwargs: Any) -> ItemPaged[DocumentModelDetails]",
                    "comment": "List methods should return a pager type that implements the ItemPaged protocol rather than a generic Iterable.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 321,
                    "bad_code": "def list_operations(self, **kwargs: Any) -> Iterable[DocumentIntelligenceOperationDetails]",
                    "suggestion": "def list_operations(self, **kwargs: Any) -> ItemPaged[DocumentIntelligenceOperationDetails]",
                    "comment": "List methods should return a pager type that implements the ItemPaged protocol rather than a generic Iterable.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 948,
                    "bad_code": "def list_classifiers(self, **kwargs: Any) -> AsyncIterable[DocumentClassifierDetails]",
                    "suggestion": "async def list_classifiers(self, **kwargs: Any) -> AsyncIterable[DocumentClassifierDetails]",
                    "comment": "Async methods in the aio namespace should be declared using async def.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 1031,
                    "bad_code": "body: Union[AnalyzeBatchDocumentsRequest, JSON, IO[bytes]],",
                    "suggestion": "body: BodyType,",
                    "comment": "Introduce a type alias (e.g., BodyType) to simplify the union type annotation in method signatures.",
                    "source": "generic"
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-separate-sync-async"
                    ],
                    "line_no": 1251,
                    "bad_code": "def list_analyze_batch_results(",
                    "suggestion": null,
                    "comment": "A synchronous method is defined in an otherwise asynchronous client. Synchronous operations should be provided in a separate client.",
                    "source": "guideline"
                },
                {
                    "rule_ids": [],
                    "line_no": 1502,
                    "bad_code": "ivar bounding_regions: Optional[List[ForwardRef('BoundingRegion')]]",
                    "suggestion": "ivar bounding_regions: Optional[List[BoundingRegion]]",
                    "comment": "Leverage postponed evaluation of annotations (e.g. via from __future__ import annotations) to avoid explicit ForwardRef usage.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 1812,
                    "bad_code": "AZURE_BLOB = \"azureBlob\"",
                    "suggestion": null,
                    "comment": "Enum member values mix casing styles; consider standardizing the value formatting to be consistent with Python conventions where possible.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2006,
                    "bad_code": "    *args: Any,",
                    "suggestion": null,
                    "comment": "Avoid using a catch\u2010all *args in the constructor. An explicit signature improves discoverability and type checking.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2078,
                    "bad_code": "ivar warnings: Optional[List[ForwardRef('DocumentIntelligenceWarning')]]",
                    "suggestion": "warnings: Optional[List[DocumentIntelligenceWarning]]",
                    "comment": "Leverage 'from __future__ import annotations' to simplify forward references in type hints.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2582,
                    "bad_code": "ivar tags: dict[str, str]",
                    "suggestion": "ivar tags: Optional[Dict[str, str]]",
                    "comment": "Align the attribute annotation with the constructor signature by marking tags as optional if they can be omitted.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2990,
                    "bad_code": "*args: Any,",
                    "suggestion": null,
                    "comment": "Avoid overly generic *args collection in the initializer to enhance static type checking and developer auto-completion.",
                    "source": "generic"
                },
                {
                    "rule_ids": [],
                    "line_no": 2996,
                    "bad_code": "ivar bounding_regions: Optional[List[ForwardRef('BoundingRegion')]]",
                    "suggestion": null,
                    "comment": "Replace 'ivar' comments with PEP 526 style type annotations to leverage Python\u2019s static analysis capabilities.",
                    "source": "generic"
                }
            ]
        },
        "expected_comments": 5,
        "comments_found": 13,
        "valid_generic_comments": 7,
        "invalid_generic_comments": [
            {
                "rule_ids": [],
                "line_no": 2006,
                "bad_code": "    *args: Any,",
                "suggestion": null,
                "comment": "Avoid using a catch\u2010all *args in the constructor. An explicit signature improves discoverability and type checking.",
                "source": "generic",
                "valid": false
            }
        ],
        "true_positives": 0,
        "false_positives": 6,
        "false_negatives": 5,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_line_details": [],
        "fuzzy_matches": 0,
        "similarity": 1,
        "groundedness": 1,
        "groundedness_reason": "The RESPONSE is entirely unrelated to the CONTEXT and introduces topics not present in the provided material.",
        "overall_score": 0
    },
    {
        "average_score": 41.833333333333336,
        "total_evals": 12
    }
]