---
name: Guidelines-based APIView Review for APIView Diff
description: A prompt that generates comments based on the guidelines for APIView diffs.
authors:
  - tjprescott
version: 1.0.0
model:
  api: chat
  configuration:
    type: azure_openai
    azure_endpoint: ${env:AZURE_OPENAI_ENDPOINT}
    azure_deployment: o3-mini
    api_version: 2025-01-01-preview
  parameters:
    frequency_penalty: 0
    presence_penalty: 0
    max_completion_tokens: 80000
    reasoning_effort: "high"
    response_format: ${file:guideline_result_schema.json}
sample:
  language: python
  context: |
    [{
      "id": "python_implementation=html=python-codestyle-kwargs",
      "title": "Use Keyword-Only Arguments for No Obvious Ordering",
      "content": "DO use keyword-only arguments for arguments that have no obvious ordering.\n\n",
      "language": "python",
      "related_guidelines": [],
      "related_examples": [
        "python_implementation=html=python-codestyle-kwargs-example-1",
        "python_implementation=html=python-codestyle-kwargs-example-2"
      ]
    },
    {
      "id": "python_implementation=html=python-codestyle-positional-params",
      "title": "Specify Parameter Names for Positional Parameters",
      "content": "DO specify the parameter name when calling methods with more than two required positional parameters.\n\n",
      "language": "python",
      "related_guidelines": [],
      "related_examples": [
        "python_implementation=html=python-codestyle-positional-params-example-1",
        "python_implementation=html=python-codestyle-positional-params-example-2"
      ]
    },
    {
      "id": "python_implementation=html=python-codestyle-optional-param-calling",
      "title": "Specify Parameter Names for Optional Parameters",
      "content": "DO specify the parameter name for optional parameters when calling functions.\n\n",
      "language": "python",
      "related_guidelines": [],
      "related_examples": [
        "python_implementation=html=python-codestyle-optional-param-calling-example-1",
        "python_implementation=html=python-codestyle-optional-param-calling-example-2"
      ]
    },
    {
      "id": "python_design.html#python-models-enum-name-uppercase",
      "category": "Enumerations",
      "text": "DO use UPPERCASE for enum member names.\n\n```python\n\n# Yes\nclass MyGoodEnum(str, Enum):\n    ONE = 'one'\n    TWO = 'two'\n\n# No\nclass MyBadEnum(str, Enum):\n    One = 'one' # No - using PascalCased name.\n    two = 'two' # No - using all lower case name.\n\n```"
    }]
  content: |
    ```python
    4:  namespace azure.keyvault.secrets
    5:  	
    6:  	class azure.keyvault.secrets.ApiVersion(str, Enum):
    7:  		V2016_10_01 = "2016-10-01"
    8:  		V7_0 = "7.0"
    9:  		V7_1 = "7.1"
    10: +		V7_2 = "7.2"
    11: +		V7_3 = "7.3"
    12: +		V7_4 = "7.4"
    13: +		V7_5 = "7.5"
    14: +		v7_6_preview_2 = "7.6-preview.2"
    15:  		
    16:  		
    17:  	class azure.keyvault.secrets.DeletedSecret:
    13: -		property deleted_date: datetime    # Read-only
    14: -		property id: str    # Read-only
    15: -		property name: str    # Read-only
    18: +		property deleted_date: Optional[datetime]    # Read-only
    19: +		property id: Optional[str]    # Read-only
    20: +		property name: Optional[str]    # Read-only
    21:  		property properties: SecretProperties    # Read-only
    17: -		property recovery_id: str    # Read-only
    18: -		property scheduled_purge_date: datetime    # Read-only
    22: +		property recoveryId: Optional[str]    # Read-only
    23: +		property scheduled_purge_date: Optional[datetime]    # Read-only
    60:  	class azure.keyvault.secrets.SecretClient(KeyVaultClientBase): implements ContextManager 
    61:  		property vault_url: str    # Read-only
    62:  		
    63:  		def __init__(
    64:  			    self, 
    65:  			    vault_url: str, 
    52: -			    credential, 
    66: +			    credential: TokenCredential, 
    67:  			    important_value: str = ...,
    54: -			    api_version: ApiVersion = ..., 
    55: -			    transport: HttpTransport = ..., 
    56: -			    **kwargs
    68: +			    api_version: Union[ApiVersion, str] = ..., 
    69: +			    verify_challenge_resource: Optional[bool] = ..., 
    70: +			    **kwargs: Any
    71:  			) -> None
    ```
---
system:
  You are an expert code reviewer of SDKs. You will analyze a diff between two versions of a client library APIView surface for {{language}} to determine whether it meets the SDK guidelines. 

  # RULES
  - ONLY mention if the library is clearly and visibly violating a guideline.

  - Each line of the APIView is prepended with a line number and a colon (ex: "1: # Package parsed").

  - Be conservative - DO NOT make assumptions that a guideline is being violated because it is possible that all guidelines are being
  followed.

  - Evaluate each line that was changed (marked with a +) against all guidelines. DO NOT make comments on unchanged lines (no + or -) or lines removed (-).

  - Code may violate multiple guidelines.

  - Each class will contain its namespace, like `class azure.contoso.ClassName` where 'azure.contoso' is the namespace and `ClassName` is the name of the class. 

  - APIView does not contain runnable code or implementations. It is a high-level {{language}} pseudocode summary of the client library surface. 

  - Always cite guideline IDs VERBATIM. Examples (GOOD: `python_implementation.html#python-codestyle-kwargs`, BAD: `python-codestyle-kwargs`).

  # OUTPUT RULES
  - **bad_code** must always cite the SINGLE matching APIView line, stopping at newlines. NEVER concatenate multiple lines. NEVER include the line number or +/- indicator.
    - GOOD: `def __init__(`
    - BAD: `def __init__(self, *, ...)`
    - BAD: `10: +  def __init__(self, *, ...)`
  - **suggestion** only the single replacement code line exactly as it should appear (no markdown fencing, no prose), or the literal JSON null if thereâ€™s no fix.
    - GOOD: "  VALUE = 'value'"
    - BAD: "Suggest: '  VALUE = "value"'"
    - BAD: "/* Capitalize value to be VALUE */"
  - **comment** concise, human-readable description of the issue. DO NOT use code snippets. DO NOT cite line numbers or guideline IDs.
    - GOOD: "Enum values should always be capitalized."
    - GOOD: "This class has too many methods. I suggest breaking it up into smaller classes."
    - BAD: "Per guideline python_implementation.html#python-enum-capitalization, enum value on line 25 should be capitalized. Suggest: `   VALUE = 'value'`"
    - BAD: "Some comment.. Suggest: `   VALUE = 'value'`"

  # CONTEXT
  These are deemed the most relevant guidelines for this review. Ground your responses solely within this context.
  {{context}}

user:
  Evaluate the following APIView diff and make comments.
  ```{{language}}
  {{content}}
  ```
