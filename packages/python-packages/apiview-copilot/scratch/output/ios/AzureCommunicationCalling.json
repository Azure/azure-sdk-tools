{
    "comments": [
        {
            "rule_ids": [],
            "line_no": 7,
            "bad_code": "@available(*, deprecated, message: \"Use IncomingVideoOptions and OutgoingVideoOptions instead\") open var videoOptions: VideoOptions?",
            "suggestion": "/* Consider removing this deprecated property in the next major release, and ensure that documentation clearly points to IncomingVideoOptions and OutgoingVideoOptions as replacements. */",
            "comment": "While using @available for deprecation is good for guiding developers, maintaining deprecated API members increases clutter. A plan to phase them out in future major versions would improve maintainability.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 14,
            "bad_code": "open class AddPhoneNumberOptions: NSObject {",
            "suggestion": "/* Consider using a Swift struct or a plain class that does not inherit from NSObject if Objective-C interoperability isn’t required. */",
            "comment": "The heavy reliance on NSObject throughout the API may indicate legacy design. Using value types or pure Swift classes can lead to more idiomatic, lightweight APIs.",
            "source": "generic"
        },
        {
            "rule_ids": [
                "ios_design.html#ios-language-swift-idiomatic",
                "ios_implementation.html#ios-implementation"
            ],
            "line_no": 16,
            "bad_code": "open func dealloc()",
            "suggestion": "Remove the public dealloc() method and implement cleanup in a deinit instead.",
            "comment": "Publicly exposing dealloc() is not idiomatic in Swift. Memory management in Swift is handled automatically by ARC (using deinit), so dealloc methods should be hidden (made internal or removed) to avoid exposing implementation details as part of the public API.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "ios_design.html#ios-language-swift-idiomatic"
            ],
            "line_no": 17,
            "bad_code": "open var alternateCallerId: UnsafeMutablePointer<Int32>",
            "suggestion": "Use a Swift native value type such as Int32 (or an Optional<Int32>) instead of an unsafe pointer.",
            "comment": "Exposing an UnsafeMutablePointer in the public API is non‐idiomatic in Swift and undermines safety. Prefer using Swift’s native value types to ensure memory safety and to keep the API idiomatic.",
            "source": "guideline"
        },
        {
            "rule_ids": [],
            "line_no": 147,
            "bad_code": "open func mute(completionHandler: @escaping (Error?) -> Void)",
            "suggestion": "/* If supporting modern Swift, consider favoring the async/await variant and potentially deprecating the callback-based method. */",
            "comment": "Offering both callback and async versions increases the API surface. While it improves compatibility, simplifying to a modern async interface can enhance clarity for Swift developers.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 157,
            "bad_code": "open func add(participant: Any) throws -> RemoteParticipant?",
            "suggestion": "/* Replace 'Any' with a more specific type (e.g., a protocol like CallParticipant or a concrete identifier type) to ensure type safety. */",
            "comment": "Using Any lessens compile‐time checking and obscures API intent. A strongly typed parameter improves clarity and developer experience.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 158,
            "bad_code": "open func add(participant: Any!, options: AddPhoneNumberOptions?) throws -> RemoteParticipant?",
            "suggestion": "/* Avoid force-unwrapped parameters. Use a clearly defined, non-optional type instead of 'Any!'. */",
            "comment": "Using an implicitly unwrapped 'Any!' risks runtime crashes and reduces type safety. It's better to design with explicit, meaningful types.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 2144,
            "bad_code": "open class TeamsCallAgentEvents: NSObject {",
            "suggestion": "/* Consider unifying event types across similar modules (e.g., CallEvents, TeamsCallEvents) where possible or document the differences clearly. */",
            "comment": "Even though naming is fairly consistent, the coexistence of very similarly named types (e.g. TeamsCall vs. Call) can confuse the API consumer. A clearer module or namespace strategy could enhance discoverability.",
            "source": "generic"
        }
    ]
}