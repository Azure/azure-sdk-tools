//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningservices_test

import (
	"context"
	"net/http"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices"
	"github.com/stretchr/testify/suite"
	"golang.org/x/net/http2"
)

type MockTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *MockTestSuite) SetupSuite() {
	mockHost := testutil.GetEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	err := http2.ConfigureTransport(tr)
	testsuite.Require().NoError(err, "Failed to configure http2 transport")
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	testsuite.cred = &testutil.FakeCredential{}

	testsuite.options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func TestMockTest(t *testing.T) {
	suite.Run(t, new(MockTestSuite))
}

func (testsuite *MockTestSuite) TestOperations_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/operationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	client, err := armmachinelearningservices.NewOperationsClient(testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/operationsList.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.AmlOperationListResult{
			Value: []*armmachinelearningservices.AmlOperation{
				{
					Name: to.Ptr("Microsoft.MachineLearningServices/workspaces/write"),
					Display: &armmachinelearningservices.AmlOperationDisplay{
						Operation: to.Ptr("Create/Update Machine Learning workspaces"),
						Provider:  to.Ptr("Microsoft MachineLearningServices"),
						Resource:  to.Ptr("workspaces"),
					},
				},
				{
					Name: to.Ptr("Microsoft.MachineLearningServices/workspaces/delete"),
					Display: &armmachinelearningservices.AmlOperationDisplay{
						Operation: to.Ptr("Delete Machine Learning workspaces"),
						Provider:  to.Ptr("Microsoft MachineLearningServices"),
						Resource:  to.Ptr("workspaces"),
					},
				},
				{
					Name: to.Ptr("Microsoft.MachineLearningServices/workspaces/listkeys/action"),
					Display: &armmachinelearningservices.AmlOperationDisplay{
						Operation: to.Ptr("List workspace Keys"),
						Provider:  to.Ptr("Microsoft MachineLearningServices"),
						Resource:  to.Ptr("workspaces"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AmlOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AmlOperationListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/operationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Workspace"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"workspace-1234",
		"testworkspace",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/get.json")
	// Response check
	exampleRes := armmachinelearningservices.Workspace{
		Name: to.Ptr("testworkspace"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Location: to.Ptr("eastus2euap"),
		Properties: &armmachinelearningservices.WorkspaceProperties{
			Description:                     to.Ptr("test description"),
			AllowPublicAccessWhenBehindVnet: to.Ptr(false),
			ApplicationInsights:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
			ContainerRegistry:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
			DiscoveryURL:                    to.Ptr("http://example.com"),
			Encryption: &armmachinelearningservices.EncryptionProperty{
				Identity: &armmachinelearningservices.IdentityForCmk{
					UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
				},
				KeyVaultProperties: &armmachinelearningservices.EncryptionKeyVaultProperties{
					IdentityClientID: to.Ptr(""),
					KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
					KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				},
				Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
			},
			FriendlyName:      to.Ptr("HelloName"),
			HbiWorkspace:      to.Ptr(false),
			ImageBuildCompute: to.Ptr("testcompute"),
			KeyVault:          to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
			PrivateEndpointConnections: []*armmachinelearningservices.PrivateEndpointConnection{
				{
					Name: to.Ptr("testprivatelinkconnection"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/testprivatelinkconnection"),
					Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
			PrivateLinkCount:                to.Ptr[int32](0),
			PublicNetworkAccess:             to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
			ServiceProvisionedResourceGroup: to.Ptr("testworkspace_0000111122223333"),
			SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
				{
					Name: to.Ptr("testcosmosdbresource"),
					Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
						GroupID:               to.Ptr("Sql"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testcosmosdbresource/privateLinkResources/Sql"),
						RequestMessage:        to.Ptr("Please approve"),
						Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
					},
				}},
			StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Workspace) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Workspace)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Workspace"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"workspace-1234",
		"testworkspace",
		armmachinelearningservices.Workspace{
			Identity: &armmachinelearningservices.ManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": &armmachinelearningservices.UserAssignedIdentity{},
				},
			},
			Location: to.Ptr("eastus2euap"),
			Properties: &armmachinelearningservices.WorkspaceProperties{
				Description:         to.Ptr("test description"),
				ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
				ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
				Encryption: &armmachinelearningservices.EncryptionProperty{
					Identity: &armmachinelearningservices.IdentityForCmk{
						UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
					},
					KeyVaultProperties: &armmachinelearningservices.EncryptionKeyVaultProperties{
						IdentityClientID: to.Ptr(""),
						KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
						KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
					},
					Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
				},
				FriendlyName: to.Ptr("HelloName"),
				HbiWorkspace: to.Ptr(false),
				KeyVault:     to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
					{
						Name: to.Ptr("testdbresource"),
						Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
							GroupID:               to.Ptr("Sql"),
							PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkResources/Sql"),
							RequestMessage:        to.Ptr("Please approve"),
							Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
					}},
				StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/create.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/create.json")
	// Response check
	exampleRes := armmachinelearningservices.Workspace{
		Name: to.Ptr("testworkspace"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Location: to.Ptr("eastus2euap"),
		Properties: &armmachinelearningservices.WorkspaceProperties{
			Description:                     to.Ptr("test description"),
			AllowPublicAccessWhenBehindVnet: to.Ptr(false),
			ApplicationInsights:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
			ContainerRegistry:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
			DiscoveryURL:                    to.Ptr("http://example.com"),
			Encryption: &armmachinelearningservices.EncryptionProperty{
				Identity: &armmachinelearningservices.IdentityForCmk{
					UserAssignedIdentity: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"),
				},
				KeyVaultProperties: &armmachinelearningservices.EncryptionKeyVaultProperties{
					IdentityClientID: to.Ptr(""),
					KeyIdentifier:    to.Ptr("https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb"),
					KeyVaultArmID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				},
				Status: to.Ptr(armmachinelearningservices.EncryptionStatusEnabled),
			},
			FriendlyName:        to.Ptr("HelloName"),
			HbiWorkspace:        to.Ptr(false),
			KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
			PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
			SharedPrivateLinkResources: []*armmachinelearningservices.SharedPrivateLinkResource{
				{
					Name: to.Ptr("testdbresource"),
					Properties: &armmachinelearningservices.SharedPrivateLinkResourceProperty{
						GroupID:               to.Ptr("Sql"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkResources/Sql"),
						RequestMessage:        to.Ptr("Please approve"),
						Status:                to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
					},
				}},
			StorageAccount: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Workspace) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Workspace)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Workspace"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"workspace-1234",
		"testworkspace",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/delete.json")
}

func (testsuite *MockTestSuite) TestWorkspaces_Update() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Workspace"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"workspace-1234",
		"testworkspace",
		armmachinelearningservices.WorkspaceUpdateParameters{
			Properties: &armmachinelearningservices.WorkspacePropertiesUpdateParameters{
				Description:         to.Ptr("new description"),
				FriendlyName:        to.Ptr("New friendly name"),
				PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/update.json")
	// Response check
	exampleRes := armmachinelearningservices.Workspace{
		Name: to.Ptr("testworkspace"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
		},
		Location: to.Ptr("eastus2euap"),
		Properties: &armmachinelearningservices.WorkspaceProperties{
			Description:         to.Ptr("new description"),
			ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
			ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
			DiscoveryURL:        to.Ptr("http://example.com"),
			FriendlyName:        to.Ptr("New friendly name"),
			KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
			PublicNetworkAccess: to.Ptr(armmachinelearningservices.PublicNetworkAccessDisabled),
			StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Workspace) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Workspace)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Workspaces by Resource Group"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("workspace-1234",
		&armmachinelearningservices.WorkspacesClientListByResourceGroupOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listByResourceGroup.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.WorkspaceListResult{
			Value: []*armmachinelearningservices.Workspace{
				{
					Name:     to.Ptr("testworkspace"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armmachinelearningservices.WorkspaceProperties{
						Description:         to.Ptr("test description"),
						ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
						ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
						DiscoveryURL:        to.Ptr("http://example.com"),
						FriendlyName:        to.Ptr("HelloName"),
						KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
						StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
					},
				},
				{
					Name:     to.Ptr("testworkspace1"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace1"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armmachinelearningservices.WorkspaceProperties{
						Description:         to.Ptr("test description"),
						ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
						ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistryNew"),
						DiscoveryURL:        to.Ptr("http://example.com"),
						FriendlyName:        to.Ptr("HelloName 1"),
						KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkvNew"),
						StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccountOld"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_Diagnose() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/diagnose.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Diagnose Workspace"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDiagnose(ctx,
		"workspace-1234",
		"testworkspace",
		&armmachinelearningservices.WorkspacesClientBeginDiagnoseOptions{Parameters: &armmachinelearningservices.DiagnoseWorkspaceParameters{
			Value: &armmachinelearningservices.DiagnoseRequestProperties{
				ApplicationInsights: map[string]interface{}{},
				ContainerRegistry:   map[string]interface{}{},
				DNSResolution:       map[string]interface{}{},
				KeyVault:            map[string]interface{}{},
				Nsg:                 map[string]interface{}{},
				Others:              map[string]interface{}{},
				ResourceLock:        map[string]interface{}{},
				StorageAccount:      map[string]interface{}{},
				Udr:                 map[string]interface{}{},
			},
		},
		})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/diagnose.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/diagnose.json")
	// Response check
	exampleRes := armmachinelearningservices.DiagnoseResponseResult{
		Value: &armmachinelearningservices.DiagnoseResponseResultValue{
			ApplicationInsightsResults: []*armmachinelearningservices.DiagnoseResult{},
			ContainerRegistryResults:   []*armmachinelearningservices.DiagnoseResult{},
			DNSResolutionResults: []*armmachinelearningservices.DiagnoseResult{
				{
					Code:    to.Ptr("CustomDNSInUse"),
					Level:   to.Ptr(armmachinelearningservices.DiagnoseResultLevelWarning),
					Message: to.Ptr("We have detected an on-premise dns server is configured. Please make sure conditional forwarding is configured correctly according to doc https://foo"),
				}},
			KeyVaultResults:            []*armmachinelearningservices.DiagnoseResult{},
			NetworkSecurityRuleResults: []*armmachinelearningservices.DiagnoseResult{},
			OtherResults:               []*armmachinelearningservices.DiagnoseResult{},
			ResourceLockResults:        []*armmachinelearningservices.DiagnoseResult{},
			StorageAccountResults:      []*armmachinelearningservices.DiagnoseResult{},
			UserDefinedRouteResults:    []*armmachinelearningservices.DiagnoseResult{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiagnoseResponseResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiagnoseResponseResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/diagnose.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_ListKeys() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListKeys(ctx,
		"testrg123",
		"workspaces123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listKeys.json")
	// Response check
	exampleRes := armmachinelearningservices.ListWorkspaceKeysResult{
		ContainerRegistryCredentials: &armmachinelearningservices.RegistryListCredentialsResult{
			Passwords: []*armmachinelearningservices.Password{
				{
					Name:  to.Ptr("password"),
					Value: to.Ptr("<value>"),
				},
				{
					Name:  to.Ptr("password2"),
					Value: to.Ptr("0KARRQoQHSUq1yViPWg7YFernOS=Ic/t"),
				}},
			Username: to.Ptr("testdemoworkjmjmeykp"),
		},
		NotebookAccessKeys:    &armmachinelearningservices.ListNotebookKeysResult{},
		UserStorageResourceID: to.Ptr("/subscriptions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee/resourceGroups/ragargeastus2euap/providers/Microsoft.Storage/storageAccounts/testdemoworkazashomr"),
	}
	if !reflect.DeepEqual(exampleRes, res.ListWorkspaceKeysResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ListWorkspaceKeysResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_ResyncKeys() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/resyncKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resync Workspace Keys"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginResyncKeys(ctx,
		"testrg123",
		"workspaces123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/resyncKeys.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/resyncKeys.json")
}

func (testsuite *MockTestSuite) TestWorkspaces_ListBySubscription() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Workspaces by subscription"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListBySubscriptionPager(&armmachinelearningservices.WorkspacesClientListBySubscriptionOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listBySubscription.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.WorkspaceListResult{
			Value: []*armmachinelearningservices.Workspace{
				{
					Name:     to.Ptr("testworkspace"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armmachinelearningservices.WorkspaceProperties{
						Description:         to.Ptr("test description"),
						ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
						ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistry"),
						DiscoveryURL:        to.Ptr("http://example.com"),
						FriendlyName:        to.Ptr("HelloName"),
						KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkv"),
						StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
					},
				},
				{
					Name:     to.Ptr("testworkspace"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-5678/providers/Microsoft.MachineLearningServices/workspaces/testworkspace"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armmachinelearningservices.WorkspaceProperties{
						Description:         to.Ptr("test description"),
						ApplicationInsights: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/microsoft.insights/components/testinsights"),
						ContainerRegistry:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ContainerRegistry/registries/testRegistryNew"),
						DiscoveryURL:        to.Ptr("http://example.com"),
						FriendlyName:        to.Ptr("HelloName"),
						KeyVault:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.KeyVault/vaults/testkvNew"),
						StorageAccount:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccountOld"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_ListNotebookAccessToken() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listNotebookAccessToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListNotebookAccessToken(ctx,
		"workspace-1234",
		"testworkspace",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listNotebookAccessToken.json")
	// Response check
	exampleRes := armmachinelearningservices.NotebookAccessTokenResult{
		ExpiresIn:          to.Ptr[int32](28800),
		HostName:           to.Ptr("Host product name"),
		NotebookResourceID: to.Ptr("94350843095843059"),
		PublicDNS:          to.Ptr("resource.notebooks.azure.net"),
		Scope:              to.Ptr("aznb_identity"),
		TokenType:          to.Ptr("Bearer"),
	}
	if !reflect.DeepEqual(exampleRes, res.NotebookAccessTokenResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NotebookAccessTokenResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listNotebookAccessToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_PrepareNotebook() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/prepare.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Prepare Notebook"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginPrepareNotebook(ctx,
		"testrg123",
		"workspaces123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/prepare.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/prepare.json")
	// Response check
	exampleRes := armmachinelearningservices.NotebookResourceInfo{
		Fqdn: to.Ptr("testnotebook.notebooks.azure.com"),
		NotebookPreparationError: &armmachinelearningservices.NotebookPreparationError{
			ErrorMessage: to.Ptr("general error"),
			StatusCode:   to.Ptr[int32](500),
		},
		ResourceID: to.Ptr("aabbccddee112233445566778899"),
	}
	if !reflect.DeepEqual(exampleRes, res.NotebookResourceInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NotebookResourceInfo)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/prepare.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_ListStorageAccountKeys() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listStorageAccountKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListStorageAccountKeys(ctx,
		"testrg123",
		"workspaces123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listStorageAccountKeys.json")
	// Response check
	exampleRes := armmachinelearningservices.ListStorageAccountKeysResult{}
	if !reflect.DeepEqual(exampleRes, res.ListStorageAccountKeysResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ListStorageAccountKeysResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Workspace/listStorageAccountKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_ListNotebookKeys() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace Keys"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListNotebookKeys(ctx,
		"testrg123",
		"workspaces123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/listKeys.json")
	// Response check
	exampleRes := armmachinelearningservices.ListNotebookKeysResult{}
	if !reflect.DeepEqual(exampleRes, res.ListNotebookKeysResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ListNotebookKeysResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Notebook/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaces_ListOutboundNetworkDependenciesEndpoints() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ExternalFQDN/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOutboundNetworkDependenciesEndpoints"},
	})
	client, err := armmachinelearningservices.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListOutboundNetworkDependenciesEndpoints(ctx,
		"workspace-1234",
		"testworkspace",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ExternalFQDN/get.json")
	// Response check
	exampleRes := armmachinelearningservices.ExternalFQDNResponse{
		Value: []*armmachinelearningservices.FQDNEndpoints{
			{
				Properties: &armmachinelearningservices.FQDNEndpointsProperties{
					Category: to.Ptr("Azure Active Directory"),
					Endpoints: []*armmachinelearningservices.FQDNEndpoint{
						{
							DomainName: to.Ptr("login.microsoftonline.com"),
							EndpointDetails: []*armmachinelearningservices.FQDNEndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
			},
			{
				Properties: &armmachinelearningservices.FQDNEndpointsProperties{
					Category: to.Ptr("Azure portal"),
					Endpoints: []*armmachinelearningservices.FQDNEndpoint{
						{
							DomainName: to.Ptr("management.azure.com"),
							EndpointDetails: []*armmachinelearningservices.FQDNEndpointDetail{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ExternalFQDNResponse) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ExternalFQDNResponse)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ExternalFQDN/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestUsages_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Usage/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Usages"},
	})
	client, err := armmachinelearningservices.NewUsagesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Usage/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.ListUsagesResult{
			Value: []*armmachinelearningservices.Usage{
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Clusters"),
						Value:          to.Ptr("Clusters"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/totalCores/usages"),
					CurrentValue: to.Ptr[int64](7),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Total Cluster Dedicated Regional vCPUs"),
						Value:          to.Ptr("Total Cluster Dedicated Regional vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/dedicatedCores/usages"),
					CurrentValue: to.Ptr[int64](14),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](48),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/usages"),
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
					CurrentValue: to.Ptr[int64](2),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_dsv2/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster2_dsv2/usages/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](12),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_nc/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspaces/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluser1_nc/usages/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](0),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](0),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](0),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](0),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit:        to.Ptr[int64](24),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Total Cluster LowPriority Regional vCPUs"),
						Value:          to.Ptr("Total Cluster LowPriority Regional vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/lowPriorityCores/usages"),
					CurrentValue: to.Ptr[int64](18),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages"),
					Limit:        to.Ptr[int64](50),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard D Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_D_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_DSv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_Dv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_FSv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](18),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/computes/demo_cluster1_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/usages"),
					CurrentValue: to.Ptr[int64](12),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluster2_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/workspace/computes/usages"),
					CurrentValue: to.Ptr[int64](6),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/computes/demo_cluster3_lowPriority_nc/usages/Standard_NC_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NCv3_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_ND_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NDv2_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				},
				{
					Name: &armmachinelearningservices.UsageName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster LowPriority vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster LowPriority vCPUs"),
					},
					Type:         to.Ptr("Microsoft.MachineLearningServices/vmFamily/usages"),
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/usages/Standard_NV_Family_Cluster_LowPriority_vCPUs"),
					Limit:        to.Ptr[int64](-1),
					Unit:         to.Ptr(armmachinelearningservices.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListUsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListUsagesResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Usage/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineSizes_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/VirtualMachineSize/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List VM Sizes"},
	})
	client, err := armmachinelearningservices.NewVirtualMachineSizesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.List(ctx,
		"eastus",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/VirtualMachineSize/list.json")
	// Response check
	exampleRes := armmachinelearningservices.VirtualMachineSizeListResult{
		Value: []*armmachinelearningservices.VirtualMachineSize{
			{
				Name: to.Ptr("Standard_DS1_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.13),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.01),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.07),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.05),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](7168),
				MemoryGB:            to.Ptr[float64](3.5),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](1),
			},
			{
				Name: to.Ptr("Standard_DS2_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.03),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.15),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.1),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.25),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](14336),
				MemoryGB:            to.Ptr[float64](7),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance"),
					to.Ptr("MIR")},
				VCPUs: to.Ptr[int32](2),
			},
			{
				Name: to.Ptr("Standard_DS3_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.2),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.06),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.5),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.29),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](28672),
				MemoryGB:            to.Ptr[float64](14),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance"),
					to.Ptr("MIR")},
				VCPUs: to.Ptr[int32](4),
			},
			{
				Name: to.Ptr("Standard_DS4_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.12),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.4),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](1.01),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.58),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](57344),
				MemoryGB:            to.Ptr[float64](28),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance"),
					to.Ptr("MIR")},
				VCPUs: to.Ptr[int32](8),
			},
			{
				Name: to.Ptr("Standard_DS5_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](1.17),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.81),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](2.02),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.23),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](114688),
				MemoryGB:            to.Ptr[float64](56),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance"),
					to.Ptr("MIR")},
				VCPUs: to.Ptr[int32](16),
			},
			{
				Name: to.Ptr("Standard_DS11_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.26),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.18),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.11),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.04),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](28672),
				MemoryGB:            to.Ptr[float64](14),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](2),
			},
			{
				Name: to.Ptr("Standard_DS12_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.37),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.53),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.21),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.07),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](57344),
				MemoryGB:            to.Ptr[float64](28),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](4),
			},
			{
				Name: to.Ptr("Standard_DS13_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.15),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.42),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.74),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](1.06),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](114688),
				MemoryGB:            to.Ptr[float64](56),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](8),
			},
			{
				Name: to.Ptr("Standard_DS14_v2"),
				EstimatedVMPrices: &armmachinelearningservices.EstimatedVMPrices{
					BillingCurrency: to.Ptr(armmachinelearningservices.BillingCurrencyUSD),
					UnitOfMeasure:   to.Ptr(armmachinelearningservices.UnitOfMeasureOneHour),
					Values: []*armmachinelearningservices.EstimatedVMPrice{
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](0.3),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeLinux),
							RetailPrice: to.Ptr[float64](1.48),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](0.84),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierLowPriority),
						},
						{
							OSType:      to.Ptr(armmachinelearningservices.VMPriceOSTypeWindows),
							RetailPrice: to.Ptr[float64](2.11),
							VMTier:      to.Ptr(armmachinelearningservices.VMTierStandard),
						}},
				},
				Family:              to.Ptr("standardDSv2Family"),
				Gpus:                to.Ptr[int32](0),
				LowPriorityCapable:  to.Ptr(true),
				MaxResourceVolumeMB: to.Ptr[int32](229376),
				MemoryGB:            to.Ptr[float64](112),
				OSVhdSizeMB:         to.Ptr[int32](1047552),
				PremiumIO:           to.Ptr(true),
				SupportedComputeTypes: []*string{
					to.Ptr("AmlCompute"),
					to.Ptr("ComputeInstance")},
				VCPUs: to.Ptr[int32](16),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineSizeListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineSizeListResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/VirtualMachineSize/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestQuotas_Update() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"update quotas"},
	})
	client, err := armmachinelearningservices.NewQuotasClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Update(ctx,
		"eastus",
		armmachinelearningservices.QuotaUpdateParameters{
			Value: []*armmachinelearningservices.QuotaBaseProperties{
				{
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](100),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](200),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				}},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/update.json")
	// Response check
	exampleRes := armmachinelearningservices.UpdateWorkspaceQuotasResult{
		Value: []*armmachinelearningservices.UpdateWorkspaceQuotas{
			{
				Type:   to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:  to.Ptr[int64](100),
				Status: to.Ptr(armmachinelearningservices.StatusSuccess),
				Unit:   to.Ptr(armmachinelearningservices.QuotaUnitCount),
			},
			{
				Type:   to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
				ID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
				Limit:  to.Ptr[int64](200),
				Status: to.Ptr(armmachinelearningservices.StatusSuccess),
				Unit:   to.Ptr(armmachinelearningservices.QuotaUnitCount),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.UpdateWorkspaceQuotasResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.UpdateWorkspaceQuotasResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestQuotas_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List workspace quotas by VMFamily"},
	})
	client, err := armmachinelearningservices.NewQuotasClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.ListWorkspaceQuotas{
			Value: []*armmachinelearningservices.ResourceQuota{
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](48),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard D Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_D_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quota"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard DSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_DSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_Dv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard FSv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_FSv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](12),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NC Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NC_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NCv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NCv3 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NCv3_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard ND Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_ND_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NDv2 Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NDv2_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](0),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/vmFamily/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace1/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace2/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				},
				{
					Name: &armmachinelearningservices.ResourceName{
						LocalizedValue: to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
						Value:          to.Ptr("Standard NV Family Cluster Dedicated vCPUs"),
					},
					Type:  to.Ptr("Microsoft.MachineLearningServices/workspaces/quotas"),
					ID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MachineLearningServices/workspaces/demo_workspace3/quotas/Standard_NV_Family_Cluster_Dedicated_vCPUs"),
					Limit: to.Ptr[int64](24),
					Unit:  to.Ptr(armmachinelearningservices.QuotaUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListWorkspaceQuotas) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListWorkspaceQuotas)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Quota/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCompute_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Computes"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("testrg123",
		"workspaces123",
		&armmachinelearningservices.ComputeClientListOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.PaginatedComputeResourcesList{
			Value: []*armmachinelearningservices.ComputeResource{
				{
					Properties: &armmachinelearningservices.AKS{
						Description:       to.Ptr("some compute"),
						ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
						CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
						ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
						ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
						ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
					},
					Name:     to.Ptr("compute123"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
					Location: to.Ptr("eastus"),
				},
				{
					Properties: &armmachinelearningservices.AKS{
						Description:       to.Ptr("some compute"),
						ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
						CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
						ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
						ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
						ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute1234-56826-c9b00420020b2"),
					},
					Name:     to.Ptr("compute1234"),
					Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute1234"),
					Location: to.Ptr("eastus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PaginatedComputeResourcesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PaginatedComputeResourcesList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCompute_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AKSCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a AKS Compute"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AKSCompute.json")
	// Response check
	exampleRes := armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AKS{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AKSCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AmlCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a AML Compute"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AmlCompute.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			Properties: &armmachinelearningservices.AmlComputeProperties{
				AllocationState:               to.Ptr(armmachinelearningservices.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-27T22:28:08.998Z"); return t }()),
				CurrentNodeCount:              to.Ptr[int32](0),
				EnableNodePublicIP:            to.Ptr(true),
				IsolatedNetwork:               to.Ptr(false),
				NodeStateCounts: &armmachinelearningservices.NodeStateCounts{
					IdleNodeCount:      to.Ptr[int32](0),
					LeavingNodeCount:   to.Ptr[int32](0),
					PreemptedNodeCount: to.Ptr[int32](0),
					PreparingNodeCount: to.Ptr[int32](0),
					RunningNodeCount:   to.Ptr[int32](0),
					UnusableNodeCount:  to.Ptr[int32](0),
				},
				OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
				RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessEnabled),
				ScaleSettings: &armmachinelearningservices.ScaleSettings{
					MaxNodeCount:                to.Ptr[int32](1),
					MinNodeCount:                to.Ptr[int32](0),
					NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
				},
				Subnet: &armmachinelearningservices.ResourceID{
					ID: to.Ptr("test-subnet-resource-id"),
				},
				TargetNodeCount: to.Ptr[int32](1),
				VMPriority:      to.Ptr(armmachinelearningservices.VMPriorityDedicated),
				VMSize:          to.Ptr("STANDARD_NC6"),
			},
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus2"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/AmlCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/KubernetesCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Kubernetes Compute"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/KubernetesCompute.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.Kubernetes{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			IsAttachedCompute: to.Ptr(true),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
			Properties: &armmachinelearningservices.KubernetesProperties{
				DefaultInstanceType:           to.Ptr("defaultInstanceType"),
				ExtensionInstanceReleaseTrain: to.Ptr("stable"),
				InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
					"defaultInstanceType": &armmachinelearningservices.InstanceTypeSchema{
						Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
							Limits: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
							Requests: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
						},
					},
				},
				Namespace: to.Ptr("default"),
			},
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/KubernetesCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/ComputeInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an ComputeInstance"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/ComputeInstance.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.ComputeInstance{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			Properties: &armmachinelearningservices.ComputeInstanceProperties{
				ApplicationSharingPolicy: to.Ptr(armmachinelearningservices.ApplicationSharingPolicyShared),
				Applications: []*armmachinelearningservices.ComputeInstanceApplication{
					{
						DisplayName: to.Ptr("Jupyter"),
						EndpointURI: to.Ptr("https://compute123.eastus2.azureml.net/jupyter"),
					}},
				ComputeInstanceAuthorizationType: to.Ptr(armmachinelearningservices.ComputeInstanceAuthorizationTypePersonal),
				ConnectivityEndpoints: &armmachinelearningservices.ComputeInstanceConnectivityEndpoints{
					PrivateIPAddress: to.Ptr("10.0.0.1"),
					PublicIPAddress:  to.Ptr("10.0.0.1"),
				},
				CreatedBy: &armmachinelearningservices.ComputeInstanceCreatedBy{
					UserID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					UserName:  to.Ptr("foobar@microsoft.com"),
					UserOrgID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				},
				PersonalComputeInstanceSettings: &armmachinelearningservices.PersonalComputeInstanceSettings{
					AssignedUser: &armmachinelearningservices.AssignedUser{
						ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				SSHSettings: &armmachinelearningservices.ComputeInstanceSSHSettings{
					AdminUserName:   to.Ptr("azureuser"),
					SSHPort:         to.Ptr[int32](22),
					SSHPublicAccess: to.Ptr(armmachinelearningservices.SSHPublicAccessEnabled),
				},
				State: to.Ptr(armmachinelearningservices.ComputeInstanceStateRunning),
				Subnet: &armmachinelearningservices.ResourceID{
					ID: to.Ptr("test-subnet-resource-id"),
				},
				VMSize: to.Ptr("STANDARD_NC6"),
			},
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus2"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/get/ComputeInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCompute_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/KubernetesCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Attach a Kubernetes Compute"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.Kubernetes{
				Description: to.Ptr("some compute"),
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
				ResourceID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
				Properties: &armmachinelearningservices.KubernetesProperties{
					DefaultInstanceType: to.Ptr("defaultInstanceType"),
					InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
						"defaultInstanceType": &armmachinelearningservices.InstanceTypeSchema{
							Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
								Limits: map[string]*string{
									"cpu":            to.Ptr("1"),
									"memory":         to.Ptr("4Gi"),
									"nvidia.com/gpu": nil,
								},
								Requests: map[string]*string{
									"cpu":            to.Ptr("1"),
									"memory":         to.Ptr("4Gi"),
									"nvidia.com/gpu": nil,
								},
							},
						},
					},
					Namespace: to.Ptr("default"),
				},
			},
			Location: to.Ptr("eastus"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/KubernetesCompute.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/KubernetesCompute.json")
	// Response check
	exampleRes := armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.Kubernetes{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeKubernetes),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
			Properties: &armmachinelearningservices.KubernetesProperties{
				DefaultInstanceType:           to.Ptr("defaultInstanceType"),
				ExtensionInstanceReleaseTrain: to.Ptr("stable"),
				InstanceTypes: map[string]*armmachinelearningservices.InstanceTypeSchema{
					"defaultInstanceType": &armmachinelearningservices.InstanceTypeSchema{
						Resources: &armmachinelearningservices.InstanceTypeSchemaResources{
							Limits: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
							Requests: map[string]*string{
								"cpu":            to.Ptr("1"),
								"memory":         to.Ptr("4Gi"),
								"nvidia.com/gpu": nil,
							},
						},
					},
				},
				Namespace: to.Ptr("default"),
			},
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/KubernetesCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAmlCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a AML Compute"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AmlCompute{
				Properties: &armmachinelearningservices.AmlComputeProperties{
					EnableNodePublicIP:          to.Ptr(true),
					IsolatedNetwork:             to.Ptr(false),
					OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
					RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessNotSpecified),
					ScaleSettings: &armmachinelearningservices.ScaleSettings{
						MaxNodeCount:                to.Ptr[int32](1),
						MinNodeCount:                to.Ptr[int32](0),
						NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
					},
					VirtualMachineImage: &armmachinelearningservices.VirtualMachineImage{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1"),
					},
					VMPriority: to.Ptr(armmachinelearningservices.VMPriorityDedicated),
					VMSize:     to.Ptr("STANDARD_NC6"),
				},
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			},
			Location: to.Ptr("eastus"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAmlCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAmlCompute.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAmlCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a DataFactory Compute"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.DataFactory{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeDataFactory),
			},
			Location: to.Ptr("eastus"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.DataFactory{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeDataFactory),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicDataFactoryCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAKSCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an AKS Compute"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AKS{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			},
			Location: to.Ptr("eastus"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAKSCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAKSCompute.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AKS{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/BasicAKSCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ComputeInstance Compute"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.ComputeInstance{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
				Properties: &armmachinelearningservices.ComputeInstanceProperties{
					ApplicationSharingPolicy:         to.Ptr(armmachinelearningservices.ApplicationSharingPolicyPersonal),
					ComputeInstanceAuthorizationType: to.Ptr(armmachinelearningservices.ComputeInstanceAuthorizationTypePersonal),
					PersonalComputeInstanceSettings: &armmachinelearningservices.PersonalComputeInstanceSettings{
						AssignedUser: &armmachinelearningservices.AssignedUser{
							ObjectID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						},
					},
					SSHSettings: &armmachinelearningservices.ComputeInstanceSSHSettings{
						SSHPublicAccess: to.Ptr(armmachinelearningservices.SSHPublicAccessDisabled),
					},
					Subnet: &armmachinelearningservices.ResourceID{
						ID: to.Ptr("test-subnet-resource-id"),
					},
					VMSize: to.Ptr("STANDARD_NC6"),
				},
			},
			Location: to.Ptr("eastus"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstance.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstance.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.ComputeInstance{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ComputeInstance Compute with minimal inputs"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.ComputeInstance{
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
				Properties: &armmachinelearningservices.ComputeInstanceProperties{
					VMSize: to.Ptr("STANDARD_NC6"),
				},
			},
			Location: to.Ptr("eastus"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.ComputeInstance{
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeComputeInstance),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/ComputeInstanceMinimal.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AmlCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a AML Compute"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AmlCompute{
				Properties: &armmachinelearningservices.AmlComputeProperties{
					ScaleSettings: &armmachinelearningservices.ScaleSettings{
						MaxNodeCount:                to.Ptr[int32](4),
						MinNodeCount:                to.Ptr[int32](4),
						NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
					},
				},
				Description: to.Ptr("some compute"),
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			},
			Location: to.Ptr("eastus"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AmlCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AmlCompute.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			Properties: &armmachinelearningservices.AmlComputeProperties{
				AllocationState:               to.Ptr(armmachinelearningservices.AllocationStateResizing),
				AllocationStateTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-27T22:28:08.998Z"); return t }()),
				CurrentNodeCount:              to.Ptr[int32](0),
				EnableNodePublicIP:            to.Ptr(true),
				IsolatedNetwork:               to.Ptr(false),
				NodeStateCounts: &armmachinelearningservices.NodeStateCounts{
					IdleNodeCount:      to.Ptr[int32](0),
					LeavingNodeCount:   to.Ptr[int32](0),
					PreemptedNodeCount: to.Ptr[int32](0),
					PreparingNodeCount: to.Ptr[int32](0),
					RunningNodeCount:   to.Ptr[int32](0),
					UnusableNodeCount:  to.Ptr[int32](0),
				},
				OSType:                      to.Ptr(armmachinelearningservices.OsTypeWindows),
				RemoteLoginPortPublicAccess: to.Ptr(armmachinelearningservices.RemoteLoginPortPublicAccessEnabled),
				ScaleSettings: &armmachinelearningservices.ScaleSettings{
					MaxNodeCount:                to.Ptr[int32](1),
					MinNodeCount:                to.Ptr[int32](0),
					NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
				},
				Subnet: &armmachinelearningservices.ResourceID{
					ID: to.Ptr("test-subnet-resource-id"),
				},
				TargetNodeCount: to.Ptr[int32](1),
				VMPriority:      to.Ptr(armmachinelearningservices.VMPriorityDedicated),
				VMSize:          to.Ptr("STANDARD_NC6"),
			},
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			CreatedOn:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ModifiedOn:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T22:00:00.0000000+00:00"); return t }()),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus2"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AmlCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AKSCompute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an AKS Compute"},
	})
	client, err = armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ComputeResource{
			Properties: &armmachinelearningservices.AKS{
				Properties: &armmachinelearningservices.AKSSchemaProperties{
					AgentCount: to.Ptr[int32](4),
				},
				Description: to.Ptr("some compute"),
				ComputeType: to.Ptr(armmachinelearningservices.ComputeTypeAKS),
				ResourceID:  to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
			},
			Location: to.Ptr("eastus"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AKSCompute.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AKSCompute.json")
	// Response check
	exampleRes = armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AKS{
			Properties: &armmachinelearningservices.AKSSchemaProperties{
				AgentCount: to.Ptr[int32](4),
			},
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAKS),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
			ResourceID:        to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2"),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/createOrUpdate/AKSCompute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCompute_Update() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a AmlCompute Compute"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.ClusterUpdateParameters{
			Properties: &armmachinelearningservices.ClusterUpdateProperties{
				Properties: &armmachinelearningservices.ScaleSettingsInformation{
					ScaleSettings: &armmachinelearningservices.ScaleSettings{
						MaxNodeCount:                to.Ptr[int32](4),
						MinNodeCount:                to.Ptr[int32](4),
						NodeIdleTimeBeforeScaleDown: to.Ptr("PT5M"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/patch.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/patch.json")
	// Response check
	exampleRes := armmachinelearningservices.ComputeResource{
		Properties: &armmachinelearningservices.AmlCompute{
			Description:       to.Ptr("some compute"),
			ComputeType:       to.Ptr(armmachinelearningservices.ComputeTypeAmlCompute),
			ProvisioningState: to.Ptr(armmachinelearningservices.ProvisioningStateSucceeded),
		},
		Name:     to.Ptr("compute123"),
		Type:     to.Ptr("Microsoft.MachineLearningServices/workspaces/computes"),
		ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123"),
		Location: to.Ptr("eastus2"),
	}
	if !reflect.DeepEqual(exampleRes, res.ComputeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComputeResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCompute_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Compute"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		armmachinelearningservices.UnderlyingResourceActionDelete,
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/delete.json")
}

func (testsuite *MockTestSuite) TestCompute_ListNodes() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listNodes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get compute nodes information for a compute"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListNodesPager("testrg123",
		"workspaces123",
		"compute123",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listNodes.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.AmlComputeNodesInformation{
			Nodes: []*armmachinelearningservices.AmlComputeNodeInformation{
				{
					NodeID:           to.Ptr("tvm-3601533753_1-20170719t162906z"),
					NodeState:        to.Ptr(armmachinelearningservices.NodeStateRunning),
					Port:             to.Ptr[int32](50000),
					PrivateIPAddress: to.Ptr("13.84.190.124"),
					PublicIPAddress:  to.Ptr("13.84.190.134"),
					RunID:            to.Ptr("2f378a44-38f2-443a-9f0d-9909d0b47890"),
				},
				{
					NodeID:           to.Ptr("tvm-3601533753_2-20170719t162906z"),
					NodeState:        to.Ptr(armmachinelearningservices.NodeStateIdle),
					Port:             to.Ptr[int32](50001),
					PrivateIPAddress: to.Ptr("13.84.190.124"),
					PublicIPAddress:  to.Ptr("13.84.190.134"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AmlComputeNodesInformation) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AmlComputeNodesInformation)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listNodes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCompute_ListKeys() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List AKS Compute Keys"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListKeys(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listKeys.json")
	// Response check
	exampleRes := armmachinelearningservices.ComputeClientListKeysResponse{
		ComputeSecretsClassification: &armmachinelearningservices.AksComputeSecrets{
			AdminKubeConfig:     to.Ptr("admin kube config..."),
			ImagePullSecretName: to.Ptr("the image pull secret name"),
			UserKubeConfig:      to.Ptr("user kube config..."),
			ComputeType:         to.Ptr(armmachinelearningservices.ComputeTypeAKS),
		},
	}
	if !reflect.DeepEqual(exampleRes, res) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCompute_Start() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start ComputeInstance Compute"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginStart(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/start.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/start.json")
}

func (testsuite *MockTestSuite) TestCompute_Stop() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop ComputeInstance Compute"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginStop(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/stop.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/stop.json")
}

func (testsuite *MockTestSuite) TestCompute_Restart() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart ComputeInstance Compute"},
	})
	client, err := armmachinelearningservices.NewComputeClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRestart(ctx,
		"testrg123",
		"workspaces123",
		"compute123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/restart.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Compute/restart.json")
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageAccountListPrivateEndpointConnections"},
	})
	client, err := armmachinelearningservices.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("rg-1234",
		"testworkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.PrivateEndpointConnectionListResult{
			Value: []*armmachinelearningservices.PrivateEndpointConnection{
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceGetPrivateEndpointConnection"},
	})
	client, err := armmachinelearningservices.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/get.json")
	// Response check
	exampleRes := armmachinelearningservices.PrivateEndpointConnection{
		Name: to.Ptr("{privateEndpointConnectionName}"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
		Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
			},
			PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacePutPrivateEndpointConnection"},
	})
	client, err := armmachinelearningservices.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		armmachinelearningservices.PrivateEndpointConnection{
			Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.PrivateEndpointConnection{
		Name: to.Ptr("{privateEndpointConnectionName}"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateEndpointConnections/{privateEndpointConnectionName}"),
		Properties: &armmachinelearningservices.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armmachinelearningservices.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.Network/privateEndpoints/petest01"),
			},
			PrivateLinkServiceConnectionState: &armmachinelearningservices.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armmachinelearningservices.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armmachinelearningservices.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestPrivateEndpointConnections_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceDeletePrivateEndpointConnection"},
	})
	client, err := armmachinelearningservices.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"rg-1234",
		"testworkspace",
		"{privateEndpointConnectionName}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateEndpointConnection/delete.json")
}

func (testsuite *MockTestSuite) TestPrivateLinkResources_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateLinkResource/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceListPrivateLinkResources"},
	})
	client, err := armmachinelearningservices.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.List(ctx,
		"rg-1234",
		"testworkspace",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateLinkResource/list.json")
	// Response check
	exampleRes := armmachinelearningservices.PrivateLinkResourceListResult{
		Value: []*armmachinelearningservices.PrivateLinkResource{
			{
				Name: to.Ptr("amlworkspace"),
				Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/privateLinkResources"),
				ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg-1234/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/privateLinkResources/amlworkspace"),
				Properties: &armmachinelearningservices.PrivateLinkResourceProperties{
					GroupID: to.Ptr("amlworkspace"),
					RequiredMembers: []*string{
						to.Ptr("default")},
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/PrivateLinkResource/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaceConnections_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListWorkspaceConnections"},
	})
	client, err := armmachinelearningservices.NewWorkspaceConnectionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("resourceGroup-1",
		"workspace-1",
		&armmachinelearningservices.WorkspaceConnectionsClientListOptions{Target: to.Ptr("www.facebook.com"),
			Category: to.Ptr("ACR"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.PaginatedWorkspaceConnectionsList{
			Value: []*armmachinelearningservices.WorkspaceConnection{
				{
					Name: to.Ptr("connection-1"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/linkedWorkspaces/connection-1"),
					Properties: &armmachinelearningservices.WorkspaceConnectionProps{
						AuthType: to.Ptr("PAT"),
						Category: to.Ptr("ACR"),
						Target:   to.Ptr("www.facebook.com"),
						Value:    to.Ptr("secrets"),
					},
				},
				{
					Name: to.Ptr("connection-2"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/linkedWorkspaces/connection-2"),
					Properties: &armmachinelearningservices.WorkspaceConnectionProps{
						AuthType: to.Ptr("PAT"),
						Category: to.Ptr("ACR"),
						Target:   to.Ptr("www.facebook.com"),
						Value:    to.Ptr("secrets"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PaginatedWorkspaceConnectionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PaginatedWorkspaceConnectionsList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestWorkspaceConnections_Create() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateWorkspaceConnection"},
	})
	client, err := armmachinelearningservices.NewWorkspaceConnectionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Create(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		armmachinelearningservices.WorkspaceConnection{
			Properties: &armmachinelearningservices.WorkspaceConnectionProps{
				AuthType: to.Ptr("PAT"),
				Category: to.Ptr("ACR"),
				Target:   to.Ptr("www.facebook.com"),
				Value:    to.Ptr("secrets"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/create.json")
	// Response check
	exampleRes := armmachinelearningservices.WorkspaceConnection{
		Name: to.Ptr("connection-1"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/connections/connection-1"),
		Properties: &armmachinelearningservices.WorkspaceConnectionProps{
			AuthType: to.Ptr("PAT"),
			Category: to.Ptr("ACR"),
			Target:   to.Ptr("www.facebook.com"),
			Value:    to.Ptr("secrets"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.WorkspaceConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.WorkspaceConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaceConnections_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetWorkspaceConnection"},
	})
	client, err := armmachinelearningservices.NewWorkspaceConnectionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/get.json")
	// Response check
	exampleRes := armmachinelearningservices.WorkspaceConnection{
		Name: to.Ptr("connection-1"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/connections"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup-1/providers/Microsoft.MachineLearningServices/workspaces/workspace-1/connections/connection-1"),
		Properties: &armmachinelearningservices.WorkspaceConnectionProps{
			AuthType: to.Ptr("PAT"),
			Category: to.Ptr("ACR"),
			Target:   to.Ptr("www.facebook.com"),
			Value:    to.Ptr("secrets"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.WorkspaceConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.WorkspaceConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaceConnections_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteWorkspaceConnection"},
	})
	client, err := armmachinelearningservices.NewWorkspaceConnectionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"resourceGroup-1",
		"workspace-1",
		"connection-1",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/delete.json")
}

func (testsuite *MockTestSuite) TestBatchEndpoints_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Batch Endpoint."},
	})
	client, err := armmachinelearningservices.NewBatchEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.BatchEndpointsClientListOptions{Count: to.Ptr[int32](1),
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.BatchEndpointTrackedResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.BatchEndpointData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Location: to.Ptr("string"),
					Tags:     map[string]*string{},
					Identity: &armmachinelearningservices.ManagedServiceIdentity{
						Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
						UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
							"string": &armmachinelearningservices.UserAssignedIdentity{
								ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
								PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
							},
						},
					},
					Kind: to.Ptr("string"),
					Properties: &armmachinelearningservices.BatchEndpointDetails{
						Description: to.Ptr("string"),
						AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						ScoringURI: to.Ptr("https://www.contoso.com/example"),
						SwaggerURI: to.Ptr("https://www.contoso.com/example"),
						Defaults: &armmachinelearningservices.BatchEndpointDefaults{
							DeploymentName: to.Ptr("string"),
						},
					},
					SKU: &armmachinelearningservices.SKU{
						Name:     to.Ptr("string"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("string"),
						Size:     to.Ptr("string"),
						Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BatchEndpointTrackedResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BatchEndpointTrackedResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestBatchEndpoints_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Batch Endpoint."},
	})
	client, err := armmachinelearningservices.NewBatchEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup-1234",
		"testworkspace",
		"testBatchEndpoint",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/delete.json")
}

func (testsuite *MockTestSuite) TestBatchEndpoints_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Batch Endpoint."},
	})
	client, err := armmachinelearningservices.NewBatchEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/get.json")
	// Response check
	exampleRes := armmachinelearningservices.BatchEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI: to.Ptr("https://www.contoso.com/example"),
			SwaggerURI: to.Ptr("https://www.contoso.com/example"),
			Defaults: &armmachinelearningservices.BatchEndpointDefaults{
				DeploymentName: to.Ptr("string"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BatchEndpointData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BatchEndpointData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestBatchEndpoints_Update() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Batch Endpoint."},
	})
	client, err := armmachinelearningservices.NewBatchEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		armmachinelearningservices.PartialBatchEndpointPartialTrackedResource{
			Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]interface{}{
					"string": map[string]interface{}{},
				},
			},
			Kind:     to.Ptr("string"),
			Location: to.Ptr("string"),
			Properties: &armmachinelearningservices.PartialBatchEndpoint{
				Defaults: &armmachinelearningservices.BatchEndpointDefaults{
					DeploymentName: to.Ptr("string"),
				},
			},
			SKU: &armmachinelearningservices.PartialSKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
			Tags: map[string]*string{},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/update.json")
	// Response check
	exampleRes := armmachinelearningservices.BatchEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI: to.Ptr("https://www.contoso.com/example"),
			SwaggerURI: to.Ptr("https://www.contoso.com/example"),
			Defaults: &armmachinelearningservices.BatchEndpointDefaults{
				DeploymentName: to.Ptr("string"),
			},
			ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BatchEndpointData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BatchEndpointData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestBatchEndpoints_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Batch Endpoint."},
	})
	client, err := armmachinelearningservices.NewBatchEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		armmachinelearningservices.BatchEndpointData{
			Location: to.Ptr("string"),
			Tags:     map[string]*string{},
			Identity: &armmachinelearningservices.ManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"string": &armmachinelearningservices.UserAssignedIdentity{},
				},
			},
			Kind: to.Ptr("string"),
			Properties: &armmachinelearningservices.BatchEndpointDetails{
				Description: to.Ptr("string"),
				AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Defaults: &armmachinelearningservices.BatchEndpointDefaults{
					DeploymentName: to.Ptr("string"),
				},
			},
			SKU: &armmachinelearningservices.SKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/createOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.BatchEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI: to.Ptr("https://www.contoso.com/example"),
			SwaggerURI: to.Ptr("https://www.contoso.com/example"),
			Defaults: &armmachinelearningservices.BatchEndpointDefaults{
				DeploymentName: to.Ptr("string"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BatchEndpointData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BatchEndpointData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestBatchEndpoints_ListKeys() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListKeys Batch Endpoint."},
	})
	client, err := armmachinelearningservices.NewBatchEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListKeys(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/listKeys.json")
	// Response check
	exampleRes := armmachinelearningservices.EndpointAuthKeys{
		PrimaryKey:   to.Ptr("string"),
		SecondaryKey: to.Ptr("string"),
	}
	if !reflect.DeepEqual(exampleRes, res.EndpointAuthKeys) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.EndpointAuthKeys)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestBatchDeployments_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Batch Deployment."},
	})
	client, err := armmachinelearningservices.NewBatchDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		"testEndpointName",
		&armmachinelearningservices.BatchDeploymentsClientListOptions{OrderBy: to.Ptr("string"),
			Top:  to.Ptr[int32](1),
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.BatchDeploymentTrackedResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.BatchDeploymentData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Location: to.Ptr("string"),
					Tags:     map[string]*string{},
					Identity: &armmachinelearningservices.ManagedServiceIdentity{
						Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
						UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
							"string": &armmachinelearningservices.UserAssignedIdentity{
								ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
								PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
							},
						},
					},
					Kind: to.Ptr("string"),
					Properties: &armmachinelearningservices.BatchDeploymentDetails{
						Description: to.Ptr("string"),
						CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
							CodeID:        to.Ptr("string"),
							ScoringScript: to.Ptr("string"),
						},
						EnvironmentID: to.Ptr("string"),
						EnvironmentVariables: map[string]*string{
							"string": to.Ptr("string"),
						},
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Compute:                   to.Ptr("string"),
						ErrorThreshold:            to.Ptr[int32](1),
						LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
						MaxConcurrencyPerInstance: to.Ptr[int32](1),
						MiniBatchSize:             to.Ptr[int64](1),
						Model: &armmachinelearningservices.IDAssetReference{
							ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
							AssetID:       to.Ptr("string"),
						},
						OutputAction:      to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
						OutputFileName:    to.Ptr("string"),
						ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
						Resources: &armmachinelearningservices.ResourceConfiguration{
							InstanceCount: to.Ptr[int32](1),
							InstanceType:  to.Ptr("string"),
							Properties: map[string]interface{}{
								"string": map[string]interface{}{
									"a3c13e2e-a213-4cac-9f5a-b49966906ad6": nil,
								},
							},
						},
						RetrySettings: &armmachinelearningservices.BatchRetrySettings{
							MaxRetries: to.Ptr[int32](1),
							Timeout:    to.Ptr("PT5M"),
						},
					},
					SKU: &armmachinelearningservices.SKU{
						Name:     to.Ptr("string"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("string"),
						Size:     to.Ptr("string"),
						Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BatchDeploymentTrackedResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BatchDeploymentTrackedResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestBatchDeployments_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Batch Deployment."},
	})
	client, err := armmachinelearningservices.NewBatchDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/delete.json")
}

func (testsuite *MockTestSuite) TestBatchDeployments_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Batch Deployment."},
	})
	client, err := armmachinelearningservices.NewBatchDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/get.json")
	// Response check
	exampleRes := armmachinelearningservices.BatchDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchDeploymentDetails{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Compute:                   to.Ptr("string"),
			ErrorThreshold:            to.Ptr[int32](1),
			LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
			MaxConcurrencyPerInstance: to.Ptr[int32](1),
			MiniBatchSize:             to.Ptr[int64](1),
			Model: &armmachinelearningservices.IDAssetReference{
				ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
				AssetID:       to.Ptr("string"),
			},
			OutputAction:      to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
			OutputFileName:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]interface{}{
					"string": map[string]interface{}{
						"843c2bb4-e5f1-4267-98c8-ba22a99dbb00": nil,
					},
				},
			},
			RetrySettings: &armmachinelearningservices.BatchRetrySettings{
				MaxRetries: to.Ptr[int32](1),
				Timeout:    to.Ptr("PT5M"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BatchDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BatchDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestBatchDeployments_Update() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Batch Deployment."},
	})
	client, err := armmachinelearningservices.NewBatchDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		armmachinelearningservices.PartialBatchDeploymentPartialTrackedResource{
			Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]interface{}{
					"string": map[string]interface{}{},
				},
			},
			Kind:     to.Ptr("string"),
			Location: to.Ptr("string"),
			Properties: &armmachinelearningservices.PartialBatchDeployment{
				Description: to.Ptr("string"),
				CodeConfiguration: &armmachinelearningservices.PartialCodeConfiguration{
					CodeID:        to.Ptr("string"),
					ScoringScript: to.Ptr("string"),
				},
				Compute:       to.Ptr("string"),
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				ErrorThreshold:            to.Ptr[int32](1),
				LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
				MaxConcurrencyPerInstance: to.Ptr[int32](1),
				MiniBatchSize:             to.Ptr[int64](1),
				Model: &armmachinelearningservices.PartialIDAssetReference{
					ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
					AssetID:       to.Ptr("string"),
				},
				OutputAction:   to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
				OutputFileName: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				RetrySettings: &armmachinelearningservices.PartialBatchRetrySettings{
					MaxRetries: to.Ptr[int32](1),
					Timeout:    to.Ptr("PT5M"),
				},
			},
			SKU: &armmachinelearningservices.PartialSKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
			Tags: map[string]*string{},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/update.json")
	// Response check
	exampleRes := armmachinelearningservices.BatchDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchDeploymentDetails{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Compute:                   to.Ptr("string"),
			ErrorThreshold:            to.Ptr[int32](1),
			LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
			MaxConcurrencyPerInstance: to.Ptr[int32](1),
			MiniBatchSize:             to.Ptr[int64](1),
			Model: &armmachinelearningservices.IDAssetReference{
				ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
				AssetID:       to.Ptr("string"),
			},
			OutputAction:      to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
			OutputFileName:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]interface{}{
					"string": map[string]interface{}{
						"1e5e1cf9-b0ea-4cf6-9764-e750bf85c10a": nil,
					},
				},
			},
			RetrySettings: &armmachinelearningservices.BatchRetrySettings{
				MaxRetries: to.Ptr[int32](1),
				Timeout:    to.Ptr("PT5M"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BatchDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BatchDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestBatchDeployments_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Batch Deployment."},
	})
	client, err := armmachinelearningservices.NewBatchDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		armmachinelearningservices.BatchDeploymentData{
			Location: to.Ptr("string"),
			Tags:     map[string]*string{},
			Identity: &armmachinelearningservices.ManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"string": &armmachinelearningservices.UserAssignedIdentity{},
				},
			},
			Kind: to.Ptr("string"),
			Properties: &armmachinelearningservices.BatchDeploymentDetails{
				Description: to.Ptr("string"),
				CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
					CodeID:        to.Ptr("string"),
					ScoringScript: to.Ptr("string"),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Compute:                   to.Ptr("string"),
				ErrorThreshold:            to.Ptr[int32](1),
				LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
				MaxConcurrencyPerInstance: to.Ptr[int32](1),
				MiniBatchSize:             to.Ptr[int64](1),
				Model: &armmachinelearningservices.IDAssetReference{
					ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
					AssetID:       to.Ptr("string"),
				},
				OutputAction:   to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
				OutputFileName: to.Ptr("string"),
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]interface{}{
						"string": map[string]interface{}{
							"cd3c37dc-2876-4ca4-8a54-21bd7619724a": nil,
						},
					},
				},
				RetrySettings: &armmachinelearningservices.BatchRetrySettings{
					MaxRetries: to.Ptr[int32](1),
					Timeout:    to.Ptr("PT5M"),
				},
			},
			SKU: &armmachinelearningservices.SKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/createOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.BatchDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.BatchDeploymentDetails{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Compute:                   to.Ptr("string"),
			ErrorThreshold:            to.Ptr[int32](1),
			LoggingLevel:              to.Ptr(armmachinelearningservices.BatchLoggingLevelInfo),
			MaxConcurrencyPerInstance: to.Ptr[int32](1),
			MiniBatchSize:             to.Ptr[int64](1),
			Model: &armmachinelearningservices.IDAssetReference{
				ReferenceType: to.Ptr(armmachinelearningservices.ReferenceTypeID),
				AssetID:       to.Ptr("string"),
			},
			OutputAction:      to.Ptr(armmachinelearningservices.BatchOutputActionSummaryOnly),
			OutputFileName:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]interface{}{
					"string": map[string]interface{}{
						"4939850d-8eae-4343-8566-0826259a2ad1": nil,
					},
				},
			},
			RetrySettings: &armmachinelearningservices.BatchRetrySettings{
				MaxRetries: to.Ptr[int32](1),
				Timeout:    to.Ptr("PT5M"),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BatchDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BatchDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCodeContainers_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Code Container."},
	})
	client, err := armmachinelearningservices.NewCodeContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("testrg123",
		"testworkspace",
		&armmachinelearningservices.CodeContainersClientListOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.CodeContainerResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.CodeContainerData{
				{
					Name: to.Ptr("testContainer"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/codes"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/codes/testContainer"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
						CreatedBy:          to.Ptr("John Smith"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("John Smith"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.CodeContainerDetails{
						Description: to.Ptr("string"),
						Tags: map[string]*string{
							"property1": to.Ptr("string"),
							"property2": to.Ptr("string"),
						},
					},
				},
				{
					Name: to.Ptr("testContainer2"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/codes"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/codes/testContainer2"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
						CreatedBy:          to.Ptr("John Smith"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("John Smith"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.CodeContainerDetails{
						Description: to.Ptr("string"),
						Tags: map[string]*string{
							"property1": to.Ptr("string"),
							"property2": to.Ptr("string"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CodeContainerResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CodeContainerResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCodeContainers_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Code Container."},
	})
	client, err := armmachinelearningservices.NewCodeContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"testrg123",
		"testworkspace",
		"testContainer",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/delete.json")
}

func (testsuite *MockTestSuite) TestCodeContainers_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Code Container."},
	})
	client, err := armmachinelearningservices.NewCodeContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"testrg123",
		"testworkspace",
		"testContainer",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/get.json")
	// Response check
	exampleRes := armmachinelearningservices.CodeContainerData{
		Name: to.Ptr("testContainer"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/codes"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/codes/testContainer"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CodeContainerDetails{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"property1": to.Ptr("string"),
				"property2": to.Ptr("string"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CodeContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CodeContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCodeContainers_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Code Container."},
	})
	client, err := armmachinelearningservices.NewCodeContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testworkspace",
		"testContainer",
		armmachinelearningservices.CodeContainerData{
			Properties: &armmachinelearningservices.CodeContainerDetails{
				Description: to.Ptr("string"),
				Tags: map[string]*string{
					"tag1": to.Ptr("value1"),
					"tag2": to.Ptr("value2"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.CodeContainerData{
		Name: to.Ptr("testContainer"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/codes"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/codes/testContainer"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CodeContainerDetails{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"property1": to.Ptr("string"),
				"property2": to.Ptr("string"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CodeContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CodeContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeContainer/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCodeVersions_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Code Version."},
	})
	client, err := armmachinelearningservices.NewCodeVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		"string",
		&armmachinelearningservices.CodeVersionsClientListOptions{OrderBy: to.Ptr("string"),
			Top:  to.Ptr[int32](1),
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.CodeVersionResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.CodeVersionData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.CodeVersionDetails{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						IsAnonymous: to.Ptr(false),
						CodeURI:     to.Ptr("https://blobStorage/folderName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CodeVersionResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CodeVersionResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCodeVersions_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Code Version."},
	})
	client, err := armmachinelearningservices.NewCodeVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/delete.json")
}

func (testsuite *MockTestSuite) TestCodeVersions_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Code Version."},
	})
	client, err := armmachinelearningservices.NewCodeVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/get.json")
	// Response check
	exampleRes := armmachinelearningservices.CodeVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CodeVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			CodeURI:     to.Ptr("https://blobStorage/folderName"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CodeVersionData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CodeVersionData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCodeVersions_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Code Version."},
	})
	client, err := armmachinelearningservices.NewCodeVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		armmachinelearningservices.CodeVersionData{
			Properties: &armmachinelearningservices.CodeVersionDetails{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				IsAnonymous: to.Ptr(false),
				CodeURI:     to.Ptr("https://blobStorage/folderName"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.CodeVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CodeVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			CodeURI:     to.Ptr("https://blobStorage/folderName"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CodeVersionData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CodeVersionData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/CodeVersion/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestComponentContainers_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Component Container."},
	})
	client, err := armmachinelearningservices.NewComponentContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.ComponentContainersClientListOptions{Skip: nil,
			ListViewType: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.ComponentContainerResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.ComponentContainerData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.ComponentContainerDetails{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ComponentContainerResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ComponentContainerResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestComponentContainers_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Component Container."},
	})
	client, err := armmachinelearningservices.NewComponentContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/delete.json")
}

func (testsuite *MockTestSuite) TestComponentContainers_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Component Container."},
	})
	client, err := armmachinelearningservices.NewComponentContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/get.json")
	// Response check
	exampleRes := armmachinelearningservices.ComponentContainerData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ComponentContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ComponentContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComponentContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestComponentContainers_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Component Container."},
	})
	client, err := armmachinelearningservices.NewComponentContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.ComponentContainerData{
			Properties: &armmachinelearningservices.ComponentContainerDetails{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.ComponentContainerData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ComponentContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ComponentContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComponentContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentContainer/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestComponentVersions_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Component Version."},
	})
	client, err := armmachinelearningservices.NewComponentVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		"string",
		&armmachinelearningservices.ComponentVersionsClientListOptions{OrderBy: to.Ptr("string"),
			Top:          to.Ptr[int32](1),
			Skip:         nil,
			ListViewType: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.ComponentVersionResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.ComponentVersionData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.ComponentVersionDetails{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						IsAnonymous: to.Ptr(false),
						ComponentSpec: map[string]interface{}{
							"50acbce5-cccc-475a-8ac6-c4da402afbd8": nil,
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ComponentVersionResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ComponentVersionResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestComponentVersions_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Component Version."},
	})
	client, err := armmachinelearningservices.NewComponentVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/delete.json")
}

func (testsuite *MockTestSuite) TestComponentVersions_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Component Version."},
	})
	client, err := armmachinelearningservices.NewComponentVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/get.json")
	// Response check
	exampleRes := armmachinelearningservices.ComponentVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ComponentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			ComponentSpec: map[string]interface{}{
				"1a7c40b5-2029-4f5f-a8d6-fd0822038773": nil,
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ComponentVersionData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComponentVersionData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestComponentVersions_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Component Version."},
	})
	client, err := armmachinelearningservices.NewComponentVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		armmachinelearningservices.ComponentVersionData{
			Properties: &armmachinelearningservices.ComponentVersionDetails{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				IsAnonymous: to.Ptr(false),
				ComponentSpec: map[string]interface{}{
					"8ced901b-d826-477d-bfef-329da9672513": nil,
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.ComponentVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ComponentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			ComponentSpec: map[string]interface{}{
				"2de2e74e-457d-4447-a581-933abc2b9d96": nil,
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ComponentVersionData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ComponentVersionData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ComponentVersion/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDataContainers_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Data Container."},
	})
	client, err := armmachinelearningservices.NewDataContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("testrg123",
		"workspace123",
		&armmachinelearningservices.DataContainersClientListOptions{Skip: nil,
			ListViewType: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.DataContainerResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.DataContainerData{
				{
					Name: to.Ptr("datastore123"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/data"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/data/datacontainer123"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
						CreatedBy:          to.Ptr("John Smith"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("John Smith"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.DataContainerDetails{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"properties1": to.Ptr("value1"),
							"properties2": to.Ptr("value2"),
						},
						Tags: map[string]*string{
							"tag1": to.Ptr("value1"),
							"tag2": to.Ptr("value2"),
						},
						DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
					},
				},
				{
					Name: to.Ptr("datastore124"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/data"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/data/datacontainer124"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
						CreatedBy:          to.Ptr("John Smith"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("John Smith"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.DataContainerDetails{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"properties1": to.Ptr("value1"),
							"properties2": to.Ptr("value2"),
						},
						Tags: map[string]*string{
							"tag1": to.Ptr("value1"),
							"tag2": to.Ptr("value2"),
						},
						DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataContainerResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataContainerResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDataContainers_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Data Container."},
	})
	client, err := armmachinelearningservices.NewDataContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"testrg123",
		"workspace123",
		"datacontainer123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/delete.json")
}

func (testsuite *MockTestSuite) TestDataContainers_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Data Container."},
	})
	client, err := armmachinelearningservices.NewDataContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"testrg123",
		"workspace123",
		"datacontainer123",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/get.json")
	// Response check
	exampleRes := armmachinelearningservices.DataContainerData{
		Name: to.Ptr("datacontainer123"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/data"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/data/datacontainer123"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.DataContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"properties1": to.Ptr("value1"),
				"properties2": to.Ptr("value2"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DataContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DataContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDataContainers_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Data Container."},
	})
	client, err := armmachinelearningservices.NewDataContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"workspace123",
		"datacontainer123",
		armmachinelearningservices.DataContainerData{
			Properties: &armmachinelearningservices.DataContainerDetails{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"properties1": to.Ptr("value1"),
					"properties2": to.Ptr("value2"),
				},
				Tags: map[string]*string{
					"tag1": to.Ptr("value1"),
					"tag2": to.Ptr("value2"),
				},
				DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.DataContainerData{
		Name: to.Ptr("datacontainer123"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/data"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/data/datacontainer123"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.DataContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"properties1": to.Ptr("value1"),
				"properties2": to.Ptr("value2"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			DataType: to.Ptr(armmachinelearningservices.DataTypeURIFile),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DataContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DataContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataContainer/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDataVersions_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Data Version Base."},
	})
	client, err := armmachinelearningservices.NewDataVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		"string",
		&armmachinelearningservices.DataVersionsClientListOptions{OrderBy: to.Ptr("string"),
			Top:          to.Ptr[int32](1),
			Skip:         nil,
			Tags:         to.Ptr("string"),
			ListViewType: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.DataVersionBaseResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.DataVersionBaseData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.URIFileDataVersion{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						IsAnonymous: to.Ptr(false),
						DataType:    to.Ptr(armmachinelearningservices.DataTypeURIFile),
						DataURI:     to.Ptr("string"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataVersionBaseResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataVersionBaseResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDataVersions_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Data Version Base."},
	})
	client, err := armmachinelearningservices.NewDataVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/delete.json")
}

func (testsuite *MockTestSuite) TestDataVersions_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Data Version Base."},
	})
	client, err := armmachinelearningservices.NewDataVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/get.json")
	// Response check
	exampleRes := armmachinelearningservices.DataVersionBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.URIFileDataVersion{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			DataType:    to.Ptr(armmachinelearningservices.DataTypeURIFile),
			DataURI:     to.Ptr("string"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DataVersionBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DataVersionBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDataVersions_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Data Version Base."},
	})
	client, err := armmachinelearningservices.NewDataVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		armmachinelearningservices.DataVersionBaseData{
			Properties: &armmachinelearningservices.URIFileDataVersion{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				IsAnonymous: to.Ptr(false),
				DataType:    to.Ptr(armmachinelearningservices.DataTypeURIFile),
				DataURI:     to.Ptr("string"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.DataVersionBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.URIFileDataVersion{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			DataType:    to.Ptr(armmachinelearningservices.DataTypeURIFile),
			DataURI:     to.Ptr("string"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DataVersionBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DataVersionBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/DataVersionBase/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDatastores_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List datastores."},
	})
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.DatastoresClientListOptions{Skip: nil,
			Count:     to.Ptr[int32](1),
			IsDefault: to.Ptr(false),
			Names: []string{
				"string"},
			SearchText: to.Ptr("string"),
			OrderBy:    to.Ptr("string"),
			OrderByAsc: to.Ptr(false),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.DatastoreResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.DatastoreData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.AzureBlobDatastore{
						Description: to.Ptr("string"),
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
							CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
						},
						DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
						IsDefault:     to.Ptr(false),
						AccountName:   to.Ptr("string"),
						ContainerName: to.Ptr("string"),
						Endpoint:      to.Ptr("core.windows.net"),
						Protocol:      to.Ptr("https"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatastoreResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatastoreResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDatastores_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete datastore."},
	})
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/delete.json")
}

func (testsuite *MockTestSuite) TestDatastores_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get datastore."},
	})
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/get.json")
	// Response check
	exampleRes := armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureBlobDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
			IsDefault:     to.Ptr(false),
			AccountName:   to.Ptr("string"),
			ContainerName: to.Ptr("string"),
			Endpoint:      to.Ptr("core.windows.net"),
			Protocol:      to.Ptr("https"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DatastoreData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DatastoreData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDatastores_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen1WServicePrincipal/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate datastore (Azure Data Lake Gen1 w/ ServicePrincipal)."},
	})
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.DatastoreData{
			Properties: &armmachinelearningservices.AzureDataLakeGen1Datastore{
				Description: to.Ptr("string"),
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
					CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
					AuthorityURL:    to.Ptr("string"),
					ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
					ResourceURL:     to.Ptr("string"),
					Secrets: &armmachinelearningservices.ServicePrincipalDatastoreSecrets{
						SecretsType:  to.Ptr(armmachinelearningservices.SecretsTypeServicePrincipal),
						ClientSecret: to.Ptr("string"),
					},
					TenantID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen1),
				StoreName:     to.Ptr("string"),
			},
		},
		&armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen1WServicePrincipal/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureDataLakeGen1Datastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
				AuthorityURL:    to.Ptr("string"),
				ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
				ResourceURL:     to.Ptr("string"),
				TenantID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen1),
			StoreName:     to.Ptr("string"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DatastoreData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DatastoreData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen1WServicePrincipal/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen2WServicePrincipal/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate datastore (Azure Data Lake Gen2 w/ Service Principal)."},
	})
	client, err = armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.DatastoreData{
			Properties: &armmachinelearningservices.AzureDataLakeGen2Datastore{
				Description: to.Ptr("string"),
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
					CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
					AuthorityURL:    to.Ptr("string"),
					ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
					ResourceURL:     to.Ptr("string"),
					Secrets: &armmachinelearningservices.ServicePrincipalDatastoreSecrets{
						SecretsType:  to.Ptr(armmachinelearningservices.SecretsTypeServicePrincipal),
						ClientSecret: to.Ptr("string"),
					},
					TenantID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen2),
				AccountName:   to.Ptr("string"),
				Endpoint:      to.Ptr("string"),
				Filesystem:    to.Ptr("string"),
				Protocol:      to.Ptr("string"),
			},
		},
		&armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen2WServicePrincipal/createOrUpdate.json")
	// Response check
	exampleRes = armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureDataLakeGen2Datastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.ServicePrincipalDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeServicePrincipal),
				AuthorityURL:    to.Ptr("string"),
				ClientID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
				ResourceURL:     to.Ptr("string"),
				TenantID:        to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureDataLakeGen2),
			AccountName:   to.Ptr("string"),
			Endpoint:      to.Ptr("string"),
			Filesystem:    to.Ptr("string"),
			Protocol:      to.Ptr("string"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DatastoreData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DatastoreData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureDataLakeGen2WServicePrincipal/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureFileWAccountKey/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate datastore (Azure File store w/ AccountKey)."},
	})
	client, err = armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.DatastoreData{
			Properties: &armmachinelearningservices.AzureFileDatastore{
				Description: to.Ptr("string"),
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
					CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
					Secrets: &armmachinelearningservices.AccountKeyDatastoreSecrets{
						SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
						Key:         to.Ptr("string"),
					},
				},
				DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureFile),
				AccountName:   to.Ptr("string"),
				Endpoint:      to.Ptr("string"),
				FileShareName: to.Ptr("string"),
				Protocol:      to.Ptr("string"),
			},
		},
		&armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureFileWAccountKey/createOrUpdate.json")
	// Response check
	exampleRes = armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureFileDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureFile),
			AccountName:   to.Ptr("string"),
			Endpoint:      to.Ptr("string"),
			FileShareName: to.Ptr("string"),
			Protocol:      to.Ptr("string"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DatastoreData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DatastoreData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureFileWAccountKey/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureBlobWAccountKey/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate datastore (AzureBlob w/ AccountKey)."},
	})
	client, err = armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.DatastoreData{
			Properties: &armmachinelearningservices.AzureBlobDatastore{
				Description: to.Ptr("string"),
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
					CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
					Secrets: &armmachinelearningservices.AccountKeyDatastoreSecrets{
						SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
						Key:         to.Ptr("string"),
					},
				},
				DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
				AccountName:   to.Ptr("string"),
				ContainerName: to.Ptr("string"),
				Endpoint:      to.Ptr("core.windows.net"),
				Protocol:      to.Ptr("https"),
			},
		},
		&armmachinelearningservices.DatastoresClientCreateOrUpdateOptions{SkipValidation: to.Ptr(false)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureBlobWAccountKey/createOrUpdate.json")
	// Response check
	exampleRes = armmachinelearningservices.DatastoreData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.AzureBlobDatastore{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			Credentials: &armmachinelearningservices.AccountKeyDatastoreCredentials{
				CredentialsType: to.Ptr(armmachinelearningservices.CredentialsTypeAccountKey),
			},
			DatastoreType: to.Ptr(armmachinelearningservices.DatastoreTypeAzureBlob),
			IsDefault:     to.Ptr(false),
			AccountName:   to.Ptr("string"),
			ContainerName: to.Ptr("string"),
			Endpoint:      to.Ptr("core.windows.net"),
			Protocol:      to.Ptr("https"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DatastoreData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DatastoreData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/AzureBlobWAccountKey/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDatastores_ListSecrets() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/listSecrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get datastore secrets."},
	})
	client, err := armmachinelearningservices.NewDatastoresClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListSecrets(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/listSecrets.json")
	// Response check
	exampleRes := armmachinelearningservices.DatastoresClientListSecretsResponse{
		DatastoreSecretsClassification: &armmachinelearningservices.AccountKeyDatastoreSecrets{
			SecretsType: to.Ptr(armmachinelearningservices.SecretsTypeAccountKey),
			Key:         to.Ptr("string"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Datastore/listSecrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestEnvironmentContainers_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Environment Container."},
	})
	client, err := armmachinelearningservices.NewEnvironmentContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("testrg123",
		"testworkspace",
		&armmachinelearningservices.EnvironmentContainersClientListOptions{Skip: nil,
			ListViewType: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.EnvironmentContainerResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.EnvironmentContainerData{
				{
					Name: to.Ptr("testEnvironment"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/environments"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/environments/testEnvironment"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
						CreatedBy:          to.Ptr("John Smith"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("John Smith"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.EnvironmentContainerDetails{
						Description: to.Ptr("string"),
						Tags: map[string]*string{
							"tag1": to.Ptr("value1"),
							"tag2": to.Ptr("value2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EnvironmentContainerResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EnvironmentContainerResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestEnvironmentContainers_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Environment Container."},
	})
	client, err := armmachinelearningservices.NewEnvironmentContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"testrg123",
		"testworkspace",
		"testContainer",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/delete.json")
}

func (testsuite *MockTestSuite) TestEnvironmentContainers_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Environment Container."},
	})
	client, err := armmachinelearningservices.NewEnvironmentContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"testrg123",
		"testworkspace",
		"testEnvironment",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/get.json")
	// Response check
	exampleRes := armmachinelearningservices.EnvironmentContainerData{
		Name: to.Ptr("testEnvironment"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/environments"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/environments/testEnvironment"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.EnvironmentContainerDetails{
			Description: to.Ptr("string"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.EnvironmentContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.EnvironmentContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestEnvironmentContainers_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Environment Container."},
	})
	client, err := armmachinelearningservices.NewEnvironmentContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testworkspace",
		"testEnvironment",
		armmachinelearningservices.EnvironmentContainerData{
			Properties: &armmachinelearningservices.EnvironmentContainerDetails{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"additionalProp1": to.Ptr("string"),
					"additionalProp2": to.Ptr("string"),
					"additionalProp3": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"additionalProp1": to.Ptr("string"),
					"additionalProp2": to.Ptr("string"),
					"additionalProp3": to.Ptr("string"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.EnvironmentContainerData{
		Name: to.Ptr("testEnvironment"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/environments"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/testworkspace/environments/testEnvironment"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-04T03:39:11.300Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-04T03:39:11.300Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.EnvironmentContainerDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
				"additionalProp2": to.Ptr("string"),
				"additionalProp3": to.Ptr("string"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.EnvironmentContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.EnvironmentContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentContainer/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestEnvironmentVersions_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Environment Version."},
	})
	client, err := armmachinelearningservices.NewEnvironmentVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		"string",
		&armmachinelearningservices.EnvironmentVersionsClientListOptions{OrderBy: to.Ptr("string"),
			Top:          to.Ptr[int32](1),
			Skip:         nil,
			ListViewType: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.EnvironmentVersionResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.EnvironmentVersionData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.EnvironmentVersionDetails{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						IsAnonymous: to.Ptr(false),
						Build: &armmachinelearningservices.BuildContext{
							ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
							DockerfilePath: to.Ptr("prod/Dockerfile"),
						},
						CondaFile:       to.Ptr("string"),
						EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
						Image:           to.Ptr("docker.io/tensorflow/serving:latest"),
						InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
							LivenessRoute: &armmachinelearningservices.Route{
								Path: to.Ptr("string"),
								Port: to.Ptr[int32](1),
							},
							ReadinessRoute: &armmachinelearningservices.Route{
								Path: to.Ptr("string"),
								Port: to.Ptr[int32](1),
							},
							ScoringRoute: &armmachinelearningservices.Route{
								Path: to.Ptr("string"),
								Port: to.Ptr[int32](1),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EnvironmentVersionResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EnvironmentVersionResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestEnvironmentVersions_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Environment Version."},
	})
	client, err := armmachinelearningservices.NewEnvironmentVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/delete.json")
}

func (testsuite *MockTestSuite) TestEnvironmentVersions_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Environment Version."},
	})
	client, err := armmachinelearningservices.NewEnvironmentVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/get.json")
	// Response check
	exampleRes := armmachinelearningservices.EnvironmentVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.EnvironmentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Build: &armmachinelearningservices.BuildContext{
				ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
				DockerfilePath: to.Ptr("prod/Dockerfile"),
			},
			CondaFile:       to.Ptr("string"),
			EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
			Image:           to.Ptr("docker.io/tensorflow/serving:latest"),
			InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
				LivenessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ReadinessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ScoringRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.EnvironmentVersionData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.EnvironmentVersionData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestEnvironmentVersions_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Environment Version."},
	})
	client, err := armmachinelearningservices.NewEnvironmentVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		armmachinelearningservices.EnvironmentVersionData{
			Properties: &armmachinelearningservices.EnvironmentVersionDetails{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				IsAnonymous: to.Ptr(false),
				Build: &armmachinelearningservices.BuildContext{
					ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
					DockerfilePath: to.Ptr("prod/Dockerfile"),
				},
				CondaFile: to.Ptr("string"),
				Image:     to.Ptr("docker.io/tensorflow/serving:latest"),
				InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
					LivenessRoute: &armmachinelearningservices.Route{
						Path: to.Ptr("string"),
						Port: to.Ptr[int32](1),
					},
					ReadinessRoute: &armmachinelearningservices.Route{
						Path: to.Ptr("string"),
						Port: to.Ptr[int32](1),
					},
					ScoringRoute: &armmachinelearningservices.Route{
						Path: to.Ptr("string"),
						Port: to.Ptr[int32](1),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.EnvironmentVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.EnvironmentVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Build: &armmachinelearningservices.BuildContext{
				ContextURI:     to.Ptr("https://storage-account.blob.core.windows.net/azureml/DockerBuildContext/95ddede6b9b8c4e90472db3acd0a8d28/"),
				DockerfilePath: to.Ptr("prod/Dockerfile"),
			},
			CondaFile:       to.Ptr("string"),
			EnvironmentType: to.Ptr(armmachinelearningservices.EnvironmentTypeCurated),
			Image:           to.Ptr("docker.io/tensorflow/serving:latest"),
			InferenceConfig: &armmachinelearningservices.InferenceContainerProperties{
				LivenessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ReadinessRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
				ScoringRoute: &armmachinelearningservices.Route{
					Path: to.Ptr("string"),
					Port: to.Ptr[int32](1),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.EnvironmentVersionData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.EnvironmentVersionData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/EnvironmentVersion/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestJobs_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List AutoML Job."},
	})
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.JobsClientListOptions{Skip: nil,
			JobType:      nil,
			Tag:          nil,
			ListViewType: nil,
			Scheduled:    nil,
			ScheduleID:   nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.JobBaseResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.JobBaseData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeManagedIdentity),
					},
					Properties: &armmachinelearningservices.AutoMLJob{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						ComputeID:      to.Ptr("string"),
						DisplayName:    to.Ptr("string"),
						ExperimentName: to.Ptr("string"),
						Identity: &armmachinelearningservices.AmlToken{
							IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
						},
						IsArchived: to.Ptr(false),
						JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
						Schedule: &armmachinelearningservices.CronSchedule{
							EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
							ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
							ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
							StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
							TimeZone:       to.Ptr("string"),
							Expression:     to.Ptr("string"),
						},
						Services: map[string]*armmachinelearningservices.JobService{
							"string": &armmachinelearningservices.JobService{
								Endpoint:       to.Ptr("string"),
								ErrorMessage:   to.Ptr("string"),
								JobServiceType: to.Ptr("string"),
								Port:           to.Ptr[int32](1),
								Properties: map[string]*string{
									"string": to.Ptr("string"),
								},
								Status: to.Ptr("string"),
							},
						},
						Status:        to.Ptr(armmachinelearningservices.JobStatusScheduled),
						EnvironmentID: to.Ptr("string"),
						EnvironmentVariables: map[string]*string{
							"string": to.Ptr("string"),
						},
						Outputs: map[string]armmachinelearningservices.JobOutputClassification{
							"string": &armmachinelearningservices.URIFileJobOutput{
								Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
								URI:           to.Ptr("string"),
								Description:   to.Ptr("string"),
								JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
							},
						},
						Resources: &armmachinelearningservices.ResourceConfiguration{
							InstanceCount: to.Ptr[int32](1),
							InstanceType:  to.Ptr("string"),
							Properties: map[string]interface{}{
								"string": map[string]interface{}{
									"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
								},
							},
						},
						TaskDetails: &armmachinelearningservices.ImageClassification{
							TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
							DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
								TargetColumnName: to.Ptr("string"),
								TrainingData: &armmachinelearningservices.TrainingDataSettings{
									Data: &armmachinelearningservices.MLTableJobInput{
										URI:          to.Ptr("string"),
										JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
									},
								},
							},
							LimitSettings: &armmachinelearningservices.ImageLimitSettings{
								MaxTrials: to.Ptr[int32](2),
							},
							ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
								ValidationCropSize: to.Ptr[int32](2),
							},
							SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
								{
									ValidationCropSize: to.Ptr("choice(2, 360)"),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobBaseResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobBaseResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Command Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager = client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.JobsClientListOptions{Skip: nil,
			JobType:      to.Ptr("string"),
			Tag:          to.Ptr("string"),
			ListViewType: nil,
			Scheduled:    nil,
			ScheduleID:   nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.JobBaseResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.JobBaseData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.CommandJob{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						ComputeID:      to.Ptr("string"),
						DisplayName:    to.Ptr("string"),
						ExperimentName: to.Ptr("string"),
						Identity: &armmachinelearningservices.AmlToken{
							IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
						},
						JobType: to.Ptr(armmachinelearningservices.JobTypeCommand),
						Services: map[string]*armmachinelearningservices.JobService{
							"string": &armmachinelearningservices.JobService{
								Endpoint:       to.Ptr("string"),
								ErrorMessage:   to.Ptr("string"),
								JobServiceType: to.Ptr("string"),
								Port:           to.Ptr[int32](1),
								Properties: map[string]*string{
									"string": to.Ptr("string"),
								},
								Status: to.Ptr("string"),
							},
						},
						Status:  to.Ptr(armmachinelearningservices.JobStatusNotStarted),
						CodeID:  to.Ptr("string"),
						Command: to.Ptr("string"),
						Distribution: &armmachinelearningservices.TensorFlow{
							DistributionType:     to.Ptr(armmachinelearningservices.DistributionTypeTensorFlow),
							ParameterServerCount: to.Ptr[int32](1),
							WorkerCount:          to.Ptr[int32](1),
						},
						EnvironmentID: to.Ptr("string"),
						EnvironmentVariables: map[string]*string{
							"string": to.Ptr("string"),
						},
						Inputs: map[string]armmachinelearningservices.JobInputClassification{
							"string": &armmachinelearningservices.LiteralJobInput{
								Description:  to.Ptr("string"),
								JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
								Value:        to.Ptr("string"),
							},
						},
						Limits: &armmachinelearningservices.CommandJobLimits{
							JobLimitsType: to.Ptr(armmachinelearningservices.JobLimitsTypeCommand),
							Timeout:       to.Ptr("PT5M"),
						},
						Outputs: map[string]armmachinelearningservices.JobOutputClassification{
							"string": &armmachinelearningservices.URIFileJobOutput{
								Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
								URI:           to.Ptr("string"),
								Description:   to.Ptr("string"),
								JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
							},
						},
						Parameters: map[string]interface{}{
							"string": "string",
						},
						Resources: &armmachinelearningservices.ResourceConfiguration{
							InstanceCount: to.Ptr[int32](1),
							InstanceType:  to.Ptr("string"),
							Properties: map[string]interface{}{
								"string": map[string]interface{}{
									"7aad5998-6c83-4ca9-b50a-b44dfc43f420": nil,
								},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobBaseResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobBaseResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Pipeline Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager = client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.JobsClientListOptions{Skip: nil,
			JobType:      to.Ptr("string"),
			Tag:          to.Ptr("string"),
			ListViewType: nil,
			Scheduled:    nil,
			ScheduleID:   nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.JobBaseResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.JobBaseData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.PipelineJob{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						ComputeID:      to.Ptr("string"),
						DisplayName:    to.Ptr("string"),
						ExperimentName: to.Ptr("string"),
						JobType:        to.Ptr(armmachinelearningservices.JobTypePipeline),
						Services: map[string]*armmachinelearningservices.JobService{
							"string": &armmachinelearningservices.JobService{
								Endpoint:       to.Ptr("string"),
								ErrorMessage:   to.Ptr("string"),
								JobServiceType: to.Ptr("string"),
								Port:           to.Ptr[int32](1),
								Properties: map[string]*string{
									"string": to.Ptr("string"),
								},
								Status: to.Ptr("string"),
							},
						},
						Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
						Inputs: map[string]armmachinelearningservices.JobInputClassification{
							"string": &armmachinelearningservices.LiteralJobInput{
								Description:  to.Ptr("string"),
								JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
								Value:        to.Ptr("string"),
							},
						},
						Outputs: map[string]armmachinelearningservices.JobOutputClassification{
							"string": &armmachinelearningservices.URIFileJobOutput{
								Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeUpload),
								URI:           to.Ptr("string"),
								Description:   to.Ptr("string"),
								JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
							},
						},
						Settings: map[string]interface{}{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobBaseResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobBaseResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Sweep Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager = client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.JobsClientListOptions{Skip: nil,
			JobType:      to.Ptr("string"),
			Tag:          to.Ptr("string"),
			ListViewType: nil,
			Scheduled:    nil,
			ScheduleID:   nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.JobBaseResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.JobBaseData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.SweepJob{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						ComputeID:      to.Ptr("string"),
						DisplayName:    to.Ptr("string"),
						ExperimentName: to.Ptr("string"),
						JobType:        to.Ptr(armmachinelearningservices.JobTypeSweep),
						Services: map[string]*armmachinelearningservices.JobService{
							"string": &armmachinelearningservices.JobService{
								Endpoint:       to.Ptr("string"),
								ErrorMessage:   to.Ptr("string"),
								JobServiceType: to.Ptr("string"),
								Port:           to.Ptr[int32](1),
								Properties: map[string]*string{
									"string": to.Ptr("string"),
								},
								Status: to.Ptr("string"),
							},
						},
						Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
						EarlyTermination: &armmachinelearningservices.MedianStoppingPolicy{
							DelayEvaluation:    to.Ptr[int32](1),
							EvaluationInterval: to.Ptr[int32](1),
							PolicyType:         to.Ptr(armmachinelearningservices.EarlyTerminationPolicyTypeMedianStopping),
						},
						Limits: &armmachinelearningservices.SweepJobLimits{
							JobLimitsType:       to.Ptr(armmachinelearningservices.JobLimitsTypeSweep),
							MaxConcurrentTrials: to.Ptr[int32](1),
							MaxTotalTrials:      to.Ptr[int32](1),
							TrialTimeout:        to.Ptr("PT1S"),
						},
						Objective: &armmachinelearningservices.Objective{
							Goal:          to.Ptr(armmachinelearningservices.GoalMinimize),
							PrimaryMetric: to.Ptr("string"),
						},
						SamplingAlgorithm: &armmachinelearningservices.GridSamplingAlgorithm{
							SamplingAlgorithmType: to.Ptr(armmachinelearningservices.SamplingAlgorithmTypeGrid),
						},
						SearchSpace: map[string]interface{}{
							"string": map[string]interface{}{},
						},
						Trial: &armmachinelearningservices.TrialComponent{
							CodeID:  to.Ptr("string"),
							Command: to.Ptr("string"),
							Distribution: &armmachinelearningservices.Mpi{
								DistributionType:        to.Ptr(armmachinelearningservices.DistributionTypeMpi),
								ProcessCountPerInstance: to.Ptr[int32](1),
							},
							EnvironmentID: to.Ptr("string"),
							EnvironmentVariables: map[string]*string{
								"string": to.Ptr("string"),
							},
							Resources: &armmachinelearningservices.ResourceConfiguration{
								InstanceCount: to.Ptr[int32](1),
								InstanceType:  to.Ptr("string"),
								Properties: map[string]interface{}{
									"string": map[string]interface{}{
										"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
									},
								},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobBaseResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobBaseResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestJobs_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Job."},
	})
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/delete.json")
}

func (testsuite *MockTestSuite) TestJobs_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get AutoML Job."},
	})
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/get.json")
	// Response check
	exampleRes := armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeManagedIdentity),
		},
		Properties: &armmachinelearningservices.AutoMLJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			IsArchived: to.Ptr(false),
			JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
			Schedule: &armmachinelearningservices.CronSchedule{
				EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
				ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
				StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				TimeZone:       to.Ptr("string"),
				Expression:     to.Ptr("string"),
			},
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status:        to.Ptr(armmachinelearningservices.JobStatusScheduled),
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]interface{}{
					"string": map[string]interface{}{
						"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
					},
				},
			},
			TaskDetails: &armmachinelearningservices.ImageClassification{
				TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
				DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
					TargetColumnName: to.Ptr("string"),
					TrainingData: &armmachinelearningservices.TrainingDataSettings{
						Data: &armmachinelearningservices.MLTableJobInput{
							URI:          to.Ptr("string"),
							JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
						},
					},
				},
				LimitSettings: &armmachinelearningservices.ImageLimitSettings{
					MaxTrials: to.Ptr[int32](2),
				},
				ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
					ValidationCropSize: to.Ptr[int32](2),
				},
				SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
					{
						ValidationCropSize: to.Ptr("choice(2, 360)"),
					}},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.JobBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.JobBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Command Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/get.json")
	// Response check
	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CommandJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			JobType: to.Ptr(armmachinelearningservices.JobTypeCommand),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status:  to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			CodeID:  to.Ptr("string"),
			Command: to.Ptr("string"),
			Distribution: &armmachinelearningservices.TensorFlow{
				DistributionType:     to.Ptr(armmachinelearningservices.DistributionTypeTensorFlow),
				ParameterServerCount: to.Ptr[int32](1),
				WorkerCount:          to.Ptr[int32](1),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Limits: &armmachinelearningservices.CommandJobLimits{
				JobLimitsType: to.Ptr(armmachinelearningservices.JobLimitsTypeCommand),
				Timeout:       to.Ptr("PT5M"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Parameters: map[string]interface{}{
				"string": "string",
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]interface{}{
					"string": map[string]interface{}{
						"8385cf05-78c0-41ef-b31d-36796a678e19": nil,
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.JobBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.JobBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Pipeline Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/get.json")
	// Response check
	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.PipelineJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypePipeline),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeUpload),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Settings: map[string]interface{}{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.JobBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.JobBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Sweep Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/get.json")
	// Response check
	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.SweepJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypeSweep),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			EarlyTermination: &armmachinelearningservices.MedianStoppingPolicy{
				DelayEvaluation:    to.Ptr[int32](1),
				EvaluationInterval: to.Ptr[int32](1),
				PolicyType:         to.Ptr(armmachinelearningservices.EarlyTerminationPolicyTypeMedianStopping),
			},
			Limits: &armmachinelearningservices.SweepJobLimits{
				JobLimitsType:       to.Ptr(armmachinelearningservices.JobLimitsTypeSweep),
				MaxConcurrentTrials: to.Ptr[int32](1),
				MaxTotalTrials:      to.Ptr[int32](1),
				TrialTimeout:        to.Ptr("PT1S"),
			},
			Objective: &armmachinelearningservices.Objective{
				Goal:          to.Ptr(armmachinelearningservices.GoalMinimize),
				PrimaryMetric: to.Ptr("string"),
			},
			SamplingAlgorithm: &armmachinelearningservices.GridSamplingAlgorithm{
				SamplingAlgorithmType: to.Ptr(armmachinelearningservices.SamplingAlgorithmTypeGrid),
			},
			SearchSpace: map[string]interface{}{
				"string": map[string]interface{}{},
			},
			Trial: &armmachinelearningservices.TrialComponent{
				CodeID:  to.Ptr("string"),
				Command: to.Ptr("string"),
				Distribution: &armmachinelearningservices.Mpi{
					DistributionType:        to.Ptr(armmachinelearningservices.DistributionTypeMpi),
					ProcessCountPerInstance: to.Ptr[int32](1),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]interface{}{
						"string": map[string]interface{}{
							"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
						},
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.JobBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.JobBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestJobs_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate AutoML Job."},
	})
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.JobBaseData{
			Properties: &armmachinelearningservices.AutoMLJob{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				ComputeID:      to.Ptr("string"),
				DisplayName:    to.Ptr("string"),
				ExperimentName: to.Ptr("string"),
				Identity: &armmachinelearningservices.AmlToken{
					IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
				},
				IsArchived: to.Ptr(false),
				JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
				Schedule: &armmachinelearningservices.CronSchedule{
					EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
					ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					TimeZone:       to.Ptr("string"),
					Expression:     to.Ptr("string"),
				},
				Services: map[string]*armmachinelearningservices.JobService{
					"string": &armmachinelearningservices.JobService{
						Endpoint:       to.Ptr("string"),
						JobServiceType: to.Ptr("string"),
						Port:           to.Ptr[int32](1),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
					},
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Outputs: map[string]armmachinelearningservices.JobOutputClassification{
					"string": &armmachinelearningservices.URIFileJobOutput{
						Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
						URI:           to.Ptr("string"),
						Description:   to.Ptr("string"),
						JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
					},
				},
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]interface{}{
						"string": map[string]interface{}{
							"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
						},
					},
				},
				TaskDetails: &armmachinelearningservices.ImageClassification{
					TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
					DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
						TargetColumnName: to.Ptr("string"),
						TrainingData: &armmachinelearningservices.TrainingDataSettings{
							Data: &armmachinelearningservices.MLTableJobInput{
								URI:          to.Ptr("string"),
								JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
							},
						},
					},
					LimitSettings: &armmachinelearningservices.ImageLimitSettings{
						MaxTrials: to.Ptr[int32](2),
					},
					ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
						ValidationCropSize: to.Ptr[int32](2),
					},
					SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
						{
							ValidationCropSize: to.Ptr("choice(2, 360)"),
						}},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeManagedIdentity),
		},
		Properties: &armmachinelearningservices.AutoMLJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			IsArchived: to.Ptr(false),
			JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
			Schedule: &armmachinelearningservices.CronSchedule{
				EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
				ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
				StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
				TimeZone:       to.Ptr("string"),
				Expression:     to.Ptr("string"),
			},
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status:        to.Ptr(armmachinelearningservices.JobStatusScheduled),
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]interface{}{
					"string": map[string]interface{}{
						"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
					},
				},
			},
			TaskDetails: &armmachinelearningservices.ImageClassification{
				TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
				DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
					TargetColumnName: to.Ptr("string"),
					TrainingData: &armmachinelearningservices.TrainingDataSettings{
						Data: &armmachinelearningservices.MLTableJobInput{
							URI:          to.Ptr("string"),
							JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
						},
					},
				},
				LimitSettings: &armmachinelearningservices.ImageLimitSettings{
					MaxTrials: to.Ptr[int32](2),
				},
				ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
					ValidationCropSize: to.Ptr[int32](2),
				},
				SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
					{
						ValidationCropSize: to.Ptr("choice(2, 360)"),
					}},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.JobBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.JobBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Command Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.JobBaseData{
			Properties: &armmachinelearningservices.CommandJob{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				ComputeID:      to.Ptr("string"),
				DisplayName:    to.Ptr("string"),
				ExperimentName: to.Ptr("string"),
				Identity: &armmachinelearningservices.AmlToken{
					IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
				},
				JobType: to.Ptr(armmachinelearningservices.JobTypeCommand),
				Services: map[string]*armmachinelearningservices.JobService{
					"string": &armmachinelearningservices.JobService{
						Endpoint:       to.Ptr("string"),
						JobServiceType: to.Ptr("string"),
						Port:           to.Ptr[int32](1),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
					},
				},
				CodeID:  to.Ptr("string"),
				Command: to.Ptr("string"),
				Distribution: &armmachinelearningservices.TensorFlow{
					DistributionType:     to.Ptr(armmachinelearningservices.DistributionTypeTensorFlow),
					ParameterServerCount: to.Ptr[int32](1),
					WorkerCount:          to.Ptr[int32](1),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Inputs: map[string]armmachinelearningservices.JobInputClassification{
					"string": &armmachinelearningservices.LiteralJobInput{
						Description:  to.Ptr("string"),
						JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
						Value:        to.Ptr("string"),
					},
				},
				Limits: &armmachinelearningservices.CommandJobLimits{
					JobLimitsType: to.Ptr(armmachinelearningservices.JobLimitsTypeCommand),
					Timeout:       to.Ptr("PT5M"),
				},
				Outputs: map[string]armmachinelearningservices.JobOutputClassification{
					"string": &armmachinelearningservices.URIFileJobOutput{
						Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
						URI:           to.Ptr("string"),
						Description:   to.Ptr("string"),
						JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
					},
				},
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]interface{}{
						"string": map[string]interface{}{
							"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/createOrUpdate.json")
	// Response check
	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.CommandJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			Identity: &armmachinelearningservices.AmlToken{
				IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
			},
			JobType: to.Ptr(armmachinelearningservices.JobTypeCommand),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status:  to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			CodeID:  to.Ptr("string"),
			Command: to.Ptr("string"),
			Distribution: &armmachinelearningservices.TensorFlow{
				DistributionType:     to.Ptr(armmachinelearningservices.DistributionTypeTensorFlow),
				ParameterServerCount: to.Ptr[int32](1),
				WorkerCount:          to.Ptr[int32](1),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Limits: &armmachinelearningservices.CommandJobLimits{
				JobLimitsType: to.Ptr(armmachinelearningservices.JobLimitsTypeCommand),
				Timeout:       to.Ptr("PT5M"),
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Parameters: map[string]interface{}{
				"string": "string",
			},
			Resources: &armmachinelearningservices.ResourceConfiguration{
				InstanceCount: to.Ptr[int32](1),
				InstanceType:  to.Ptr("string"),
				Properties: map[string]interface{}{
					"string": map[string]interface{}{
						"a0847709-f5aa-4561-8ba5-d915d403fdcf": nil,
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.JobBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.JobBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/CommandJob/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Pipeline Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.JobBaseData{
			Properties: &armmachinelearningservices.PipelineJob{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				ComputeID:      to.Ptr("string"),
				DisplayName:    to.Ptr("string"),
				ExperimentName: to.Ptr("string"),
				JobType:        to.Ptr(armmachinelearningservices.JobTypePipeline),
				Services: map[string]*armmachinelearningservices.JobService{
					"string": &armmachinelearningservices.JobService{
						Endpoint:       to.Ptr("string"),
						JobServiceType: to.Ptr("string"),
						Port:           to.Ptr[int32](1),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
					},
				},
				Inputs: map[string]armmachinelearningservices.JobInputClassification{
					"string": &armmachinelearningservices.LiteralJobInput{
						Description:  to.Ptr("string"),
						JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
						Value:        to.Ptr("string"),
					},
				},
				Outputs: map[string]armmachinelearningservices.JobOutputClassification{
					"string": &armmachinelearningservices.URIFileJobOutput{
						Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeUpload),
						URI:           to.Ptr("string"),
						Description:   to.Ptr("string"),
						JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
					},
				},
				Settings: map[string]interface{}{},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/createOrUpdate.json")
	// Response check
	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.PipelineJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypePipeline),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			Inputs: map[string]armmachinelearningservices.JobInputClassification{
				"string": &armmachinelearningservices.LiteralJobInput{
					Description:  to.Ptr("string"),
					JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeLiteral),
					Value:        to.Ptr("string"),
				},
			},
			Outputs: map[string]armmachinelearningservices.JobOutputClassification{
				"string": &armmachinelearningservices.URIFileJobOutput{
					Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeUpload),
					URI:           to.Ptr("string"),
					Description:   to.Ptr("string"),
					JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
				},
			},
			Settings: map[string]interface{}{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.JobBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.JobBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/PipelineJob/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Sweep Job."},
	})
	client, err = armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.JobBaseData{
			Properties: &armmachinelearningservices.SweepJob{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				ComputeID:      to.Ptr("string"),
				DisplayName:    to.Ptr("string"),
				ExperimentName: to.Ptr("string"),
				JobType:        to.Ptr(armmachinelearningservices.JobTypeSweep),
				Services: map[string]*armmachinelearningservices.JobService{
					"string": &armmachinelearningservices.JobService{
						Endpoint:       to.Ptr("string"),
						JobServiceType: to.Ptr("string"),
						Port:           to.Ptr[int32](1),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
					},
				},
				EarlyTermination: &armmachinelearningservices.MedianStoppingPolicy{
					DelayEvaluation:    to.Ptr[int32](1),
					EvaluationInterval: to.Ptr[int32](1),
					PolicyType:         to.Ptr(armmachinelearningservices.EarlyTerminationPolicyTypeMedianStopping),
				},
				Limits: &armmachinelearningservices.SweepJobLimits{
					JobLimitsType:       to.Ptr(armmachinelearningservices.JobLimitsTypeSweep),
					MaxConcurrentTrials: to.Ptr[int32](1),
					MaxTotalTrials:      to.Ptr[int32](1),
					TrialTimeout:        to.Ptr("PT1S"),
				},
				Objective: &armmachinelearningservices.Objective{
					Goal:          to.Ptr(armmachinelearningservices.GoalMinimize),
					PrimaryMetric: to.Ptr("string"),
				},
				SamplingAlgorithm: &armmachinelearningservices.GridSamplingAlgorithm{
					SamplingAlgorithmType: to.Ptr(armmachinelearningservices.SamplingAlgorithmTypeGrid),
				},
				SearchSpace: map[string]interface{}{
					"string": map[string]interface{}{},
				},
				Trial: &armmachinelearningservices.TrialComponent{
					CodeID:  to.Ptr("string"),
					Command: to.Ptr("string"),
					Distribution: &armmachinelearningservices.Mpi{
						DistributionType:        to.Ptr(armmachinelearningservices.DistributionTypeMpi),
						ProcessCountPerInstance: to.Ptr[int32](1),
					},
					EnvironmentID: to.Ptr("string"),
					EnvironmentVariables: map[string]*string{
						"string": to.Ptr("string"),
					},
					Resources: &armmachinelearningservices.ResourceConfiguration{
						InstanceCount: to.Ptr[int32](1),
						InstanceType:  to.Ptr("string"),
						Properties: map[string]interface{}{
							"string": map[string]interface{}{
								"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
							},
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/createOrUpdate.json")
	// Response check
	exampleRes = armmachinelearningservices.JobBaseData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.SweepJob{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			ComputeID:      to.Ptr("string"),
			DisplayName:    to.Ptr("string"),
			ExperimentName: to.Ptr("string"),
			JobType:        to.Ptr(armmachinelearningservices.JobTypeSweep),
			Services: map[string]*armmachinelearningservices.JobService{
				"string": &armmachinelearningservices.JobService{
					Endpoint:       to.Ptr("string"),
					ErrorMessage:   to.Ptr("string"),
					JobServiceType: to.Ptr("string"),
					Port:           to.Ptr[int32](1),
					Properties: map[string]*string{
						"string": to.Ptr("string"),
					},
					Status: to.Ptr("string"),
				},
			},
			Status: to.Ptr(armmachinelearningservices.JobStatusNotStarted),
			EarlyTermination: &armmachinelearningservices.MedianStoppingPolicy{
				DelayEvaluation:    to.Ptr[int32](1),
				EvaluationInterval: to.Ptr[int32](1),
				PolicyType:         to.Ptr(armmachinelearningservices.EarlyTerminationPolicyTypeMedianStopping),
			},
			Limits: &armmachinelearningservices.SweepJobLimits{
				JobLimitsType:       to.Ptr(armmachinelearningservices.JobLimitsTypeSweep),
				MaxConcurrentTrials: to.Ptr[int32](1),
				MaxTotalTrials:      to.Ptr[int32](1),
				TrialTimeout:        to.Ptr("PT1S"),
			},
			Objective: &armmachinelearningservices.Objective{
				Goal:          to.Ptr(armmachinelearningservices.GoalMinimize),
				PrimaryMetric: to.Ptr("string"),
			},
			SamplingAlgorithm: &armmachinelearningservices.GridSamplingAlgorithm{
				SamplingAlgorithmType: to.Ptr(armmachinelearningservices.SamplingAlgorithmTypeGrid),
			},
			SearchSpace: map[string]interface{}{
				"string": map[string]interface{}{},
			},
			Trial: &armmachinelearningservices.TrialComponent{
				CodeID:  to.Ptr("string"),
				Command: to.Ptr("string"),
				Distribution: &armmachinelearningservices.Mpi{
					DistributionType:        to.Ptr(armmachinelearningservices.DistributionTypeMpi),
					ProcessCountPerInstance: to.Ptr[int32](1),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]interface{}{
						"string": map[string]interface{}{
							"e6b6493e-7d5e-4db3-be1e-306ec641327e": nil,
						},
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.JobBaseData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.JobBaseData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/SweepJob/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestJobs_Cancel() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel Job."},
	})
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Cancel(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/cancel.json")
}

func (testsuite *MockTestSuite) TestModelContainers_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Model Container."},
	})
	client, err := armmachinelearningservices.NewModelContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("testrg123",
		"workspace123",
		&armmachinelearningservices.ModelContainersClientListOptions{Skip: nil,
			Count:        nil,
			ListViewType: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.ModelContainerResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.ModelContainerData{
				{
					Name: to.Ptr("testContainer"),
					Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/models"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/models/testContainer"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
						CreatedBy:          to.Ptr("John Smith"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
						LastModifiedBy:     to.Ptr("John Smith"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.ModelContainerDetails{
						Description: to.Ptr("Model container description"),
						Tags: map[string]*string{
							"tag1": to.Ptr("value1"),
							"tag2": to.Ptr("value2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ModelContainerResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ModelContainerResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestModelContainers_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Model Container."},
	})
	client, err := armmachinelearningservices.NewModelContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"testrg123",
		"workspace123",
		"testContainer",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/delete.json")
}

func (testsuite *MockTestSuite) TestModelContainers_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Model Container."},
	})
	client, err := armmachinelearningservices.NewModelContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"testrg123",
		"workspace123",
		"testContainer",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/get.json")
	// Response check
	exampleRes := armmachinelearningservices.ModelContainerData{
		Name: to.Ptr("testContainer"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/models"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/models/testContainer"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ModelContainerDetails{
			Description: to.Ptr("Model container description"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ModelContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ModelContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestModelContainers_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Model Container."},
	})
	client, err := armmachinelearningservices.NewModelContainersClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"workspace123",
		"testContainer",
		armmachinelearningservices.ModelContainerData{
			Properties: &armmachinelearningservices.ModelContainerDetails{
				Description: to.Ptr("Model container description"),
				Tags: map[string]*string{
					"tag1": to.Ptr("value1"),
					"tag2": to.Ptr("value2"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.ModelContainerData{
		Name: to.Ptr("testContainer"),
		Type: to.Ptr("Microsoft.MachineLearningServices/workspaces/models"),
		ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspace123/models/testContainer"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			CreatedBy:          to.Ptr("John Smith"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T12:00:00.000Z"); return t }()),
			LastModifiedBy:     to.Ptr("John Smith"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ModelContainerDetails{
			Description: to.Ptr("Model container description"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ModelContainerData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ModelContainerData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelContainer/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestModelVersions_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Model Version."},
	})
	client, err := armmachinelearningservices.NewModelVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		"string",
		&armmachinelearningservices.ModelVersionsClientListOptions{Skip: nil,
			OrderBy:      to.Ptr("string"),
			Top:          to.Ptr[int32](1),
			Version:      to.Ptr("string"),
			Description:  to.Ptr("string"),
			Offset:       to.Ptr[int32](1),
			Tags:         to.Ptr("string"),
			Properties:   to.Ptr("string"),
			Feed:         nil,
			ListViewType: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.ModelVersionResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.ModelVersionData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Properties: &armmachinelearningservices.ModelVersionDetails{
						Description: to.Ptr("string"),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						Tags: map[string]*string{
							"string": to.Ptr("string"),
						},
						IsAnonymous: to.Ptr(false),
						Flavors: map[string]*armmachinelearningservices.FlavorData{
							"string": &armmachinelearningservices.FlavorData{
								Data: map[string]*string{
									"string": to.Ptr("string"),
								},
							},
						},
						ModelType: to.Ptr(armmachinelearningservices.ModelTypeCustomModel),
						ModelURI:  to.Ptr("string"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ModelVersionResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ModelVersionResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestModelVersions_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Model Version."},
	})
	client, err := armmachinelearningservices.NewModelVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/delete.json")
}

func (testsuite *MockTestSuite) TestModelVersions_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Model Version."},
	})
	client, err := armmachinelearningservices.NewModelVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/get.json")
	// Response check
	exampleRes := armmachinelearningservices.ModelVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ModelVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Flavors: map[string]*armmachinelearningservices.FlavorData{
				"string": &armmachinelearningservices.FlavorData{
					Data: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			ModelType: to.Ptr(armmachinelearningservices.ModelTypeCustomModel),
			ModelURI:  to.Ptr("string"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ModelVersionData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ModelVersionData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestModelVersions_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Model Version."},
	})
	client, err := armmachinelearningservices.NewModelVersionsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		"string",
		armmachinelearningservices.ModelVersionData{
			Properties: &armmachinelearningservices.ModelVersionDetails{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				IsAnonymous: to.Ptr(false),
				Flavors: map[string]*armmachinelearningservices.FlavorData{
					"string": &armmachinelearningservices.FlavorData{
						Data: map[string]*string{
							"string": to.Ptr("string"),
						},
					},
				},
				ModelType: to.Ptr(armmachinelearningservices.ModelTypeCustomModel),
				ModelURI:  to.Ptr("string"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.ModelVersionData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Properties: &armmachinelearningservices.ModelVersionDetails{
			Description: to.Ptr("string"),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			Tags: map[string]*string{
				"string": to.Ptr("string"),
			},
			IsAnonymous: to.Ptr(false),
			Flavors: map[string]*armmachinelearningservices.FlavorData{
				"string": &armmachinelearningservices.FlavorData{
					Data: map[string]*string{
						"string": to.Ptr("string"),
					},
				},
			},
			ModelType: to.Ptr(armmachinelearningservices.ModelTypeCustomModel),
			ModelURI:  to.Ptr("string"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ModelVersionData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ModelVersionData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/ModelVersion/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineEndpoints_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Online Endpoint."},
	})
	client, err := armmachinelearningservices.NewOnlineEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.OnlineEndpointsClientListOptions{Name: to.Ptr("string"),
			Count:       to.Ptr[int32](1),
			ComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			Skip:        nil,
			Tags:        to.Ptr("string"),
			Properties:  to.Ptr("string"),
			OrderBy:     to.Ptr(armmachinelearningservices.OrderStringCreatedAtDesc),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.OnlineEndpointTrackedResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.OnlineEndpointData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Location: to.Ptr("string"),
					Tags:     map[string]*string{},
					Identity: &armmachinelearningservices.ManagedServiceIdentity{
						Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
						UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
							"string": &armmachinelearningservices.UserAssignedIdentity{
								ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
								PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
							},
						},
					},
					Kind: to.Ptr("string"),
					Properties: &armmachinelearningservices.OnlineEndpointDetails{
						Description: to.Ptr("string"),
						AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						ScoringURI:        to.Ptr("https://www.contoso.com/example"),
						SwaggerURI:        to.Ptr("https://www.contoso.com/example"),
						Compute:           to.Ptr("string"),
						ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
						Traffic: map[string]*int32{
							"string": to.Ptr[int32](1),
						},
					},
					SKU: &armmachinelearningservices.SKU{
						Name:     to.Ptr("string"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("string"),
						Size:     to.Ptr("string"),
						Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OnlineEndpointTrackedResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OnlineEndpointTrackedResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestOnlineEndpoints_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Online Endpoint."},
	})
	client, err := armmachinelearningservices.NewOnlineEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/delete.json")
}

func (testsuite *MockTestSuite) TestOnlineEndpoints_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Online Endpoint."},
	})
	client, err := armmachinelearningservices.NewOnlineEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/get.json")
	// Response check
	exampleRes := armmachinelearningservices.OnlineEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.OnlineEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI:        to.Ptr("https://www.contoso.com/example"),
			SwaggerURI:        to.Ptr("https://www.contoso.com/example"),
			Compute:           to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
			Traffic: map[string]*int32{
				"string": to.Ptr[int32](1),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineEndpointData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineEndpointData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineEndpoints_Update() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Online Endpoint."},
	})
	client, err := armmachinelearningservices.NewOnlineEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		armmachinelearningservices.PartialOnlineEndpointPartialTrackedResource{
			Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]interface{}{
					"string": map[string]interface{}{},
				},
			},
			Kind:     to.Ptr("string"),
			Location: to.Ptr("string"),
			Properties: &armmachinelearningservices.PartialOnlineEndpoint{
				Traffic: map[string]*int32{
					"string": to.Ptr[int32](1),
				},
			},
			SKU: &armmachinelearningservices.PartialSKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
			Tags: map[string]*string{},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/update.json")
	// Response check
	exampleRes := armmachinelearningservices.OnlineEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.OnlineEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI:        to.Ptr("https://www.contoso.com/example"),
			SwaggerURI:        to.Ptr("https://www.contoso.com/example"),
			Compute:           to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
			Traffic: map[string]*int32{
				"string": to.Ptr[int32](1),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineEndpointData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineEndpointData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineEndpoints_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Online Endpoint."},
	})
	client, err := armmachinelearningservices.NewOnlineEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		armmachinelearningservices.OnlineEndpointData{
			Location: to.Ptr("string"),
			Tags:     map[string]*string{},
			Identity: &armmachinelearningservices.ManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"string": &armmachinelearningservices.UserAssignedIdentity{},
				},
			},
			Kind: to.Ptr("string"),
			Properties: &armmachinelearningservices.OnlineEndpointDetails{
				Description: to.Ptr("string"),
				AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Compute: to.Ptr("string"),
				Traffic: map[string]*int32{
					"string": to.Ptr[int32](1),
				},
			},
			SKU: &armmachinelearningservices.SKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/createOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.OnlineEndpointData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.OnlineEndpointDetails{
			Description: to.Ptr("string"),
			AuthMode:    to.Ptr(armmachinelearningservices.EndpointAuthModeAMLToken),
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			ScoringURI:        to.Ptr("https://www.contoso.com/example"),
			SwaggerURI:        to.Ptr("https://www.contoso.com/example"),
			Compute:           to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.EndpointProvisioningStateSucceeded),
			Traffic: map[string]*int32{
				"string": to.Ptr[int32](1),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineEndpointData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineEndpointData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineEndpoints_ListKeys() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/listKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListKeys Online Endpoint."},
	})
	client, err := armmachinelearningservices.NewOnlineEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListKeys(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/listKeys.json")
	// Response check
	exampleRes := armmachinelearningservices.EndpointAuthKeys{
		PrimaryKey:   to.Ptr("string"),
		SecondaryKey: to.Ptr("string"),
	}
	if !reflect.DeepEqual(exampleRes, res.EndpointAuthKeys) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.EndpointAuthKeys)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/listKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineEndpoints_RegenerateKeys() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/regenerateKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegenerateKeys Online Endpoint."},
	})
	client, err := armmachinelearningservices.NewOnlineEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRegenerateKeys(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		armmachinelearningservices.RegenerateEndpointKeysRequest{
			KeyType:  to.Ptr(armmachinelearningservices.KeyTypePrimary),
			KeyValue: to.Ptr("string"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/regenerateKeys.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/regenerateKeys.json")
}

func (testsuite *MockTestSuite) TestOnlineEndpoints_GetToken() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/getToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetToken Online Endpoint."},
	})
	client, err := armmachinelearningservices.NewOnlineEndpointsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetToken(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/getToken.json")
	// Response check
	exampleRes := armmachinelearningservices.EndpointAuthToken{
		AccessToken:         to.Ptr("string"),
		ExpiryTimeUTC:       to.Ptr[int64](1),
		RefreshAfterTimeUTC: to.Ptr[int64](1),
		TokenType:           to.Ptr("string"),
	}
	if !reflect.DeepEqual(exampleRes, res.EndpointAuthToken) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.EndpointAuthToken)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineEndpoint/getToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineDeployments_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Online Deployments."},
	})
	client, err := armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		"testEndpointName",
		&armmachinelearningservices.OnlineDeploymentsClientListOptions{OrderBy: to.Ptr("string"),
			Top:  to.Ptr[int32](1),
			Skip: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.OnlineDeploymentTrackedResourceArmPaginatedResult{
			Value: []*armmachinelearningservices.OnlineDeploymentData{
				{
					Name: to.Ptr("string"),
					Type: to.Ptr("string"),
					ID:   to.Ptr("string"),
					SystemData: &armmachinelearningservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
					},
					Location: to.Ptr("string"),
					Tags:     map[string]*string{},
					Identity: &armmachinelearningservices.ManagedServiceIdentity{
						Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
						UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
							"string": &armmachinelearningservices.UserAssignedIdentity{
								ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
								PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
							},
						},
					},
					Kind: to.Ptr("string"),
					Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
						Description: to.Ptr("string"),
						CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
							CodeID:        to.Ptr("string"),
							ScoringScript: to.Ptr("string"),
						},
						EnvironmentID: to.Ptr("string"),
						EnvironmentVariables: map[string]*string{
							"string": to.Ptr("string"),
						},
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
						AppInsightsEnabled:  to.Ptr(false),
						EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
						InstanceType:        to.Ptr("string"),
						LivenessProbe: &armmachinelearningservices.ProbeSettings{
							FailureThreshold: to.Ptr[int32](1),
							InitialDelay:     to.Ptr("PT5M"),
							Period:           to.Ptr("PT5M"),
							SuccessThreshold: to.Ptr[int32](1),
							Timeout:          to.Ptr("PT5M"),
						},
						Model:             to.Ptr("string"),
						ModelMountPath:    to.Ptr("string"),
						ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
						RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
							MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
							MaxQueueWait:                     to.Ptr("PT5M"),
							RequestTimeout:                   to.Ptr("PT5M"),
						},
						ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
							ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
						},
						ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
							ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
								CPU:    to.Ptr("\"1\""),
								Gpu:    to.Ptr("\"1\""),
								Memory: to.Ptr("\"2Gi\""),
							},
							ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
								CPU:    to.Ptr("\"1\""),
								Gpu:    to.Ptr("\"1\""),
								Memory: to.Ptr("\"2Gi\""),
							},
						},
					},
					SKU: &armmachinelearningservices.SKU{
						Name:     to.Ptr("string"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("string"),
						Size:     to.Ptr("string"),
						Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OnlineDeploymentTrackedResourceArmPaginatedResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OnlineDeploymentTrackedResourceArmPaginatedResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestOnlineDeployments_Delete() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Online Deployment."},
	})
	client, err := armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"testrg123",
		"workspace123",
		"testEndpoint",
		"testDeployment",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/delete.json")
}

func (testsuite *MockTestSuite) TestOnlineDeployments_Get() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Kubernetes Online Deployment."},
	})
	client, err := armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/get.json")
	// Response check
	exampleRes := armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
			ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
				ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
				ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Online Deployment."},
	})
	client, err = armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/get.json")
	// Response check
	exampleRes = armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.ManagedOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			ReadinessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](30),
				InitialDelay:     to.Ptr("PT1S"),
				Period:           to.Ptr("PT10S"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT2S"),
			},
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineDeployments_Update() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Kubernetes Online Deployment."},
	})
	client, err := armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		armmachinelearningservices.PartialOnlineDeploymentPartialTrackedResource{
			Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]interface{}{
					"string": map[string]interface{}{},
				},
			},
			Kind:     to.Ptr("string"),
			Location: to.Ptr("string"),
			Properties: &armmachinelearningservices.PartialKubernetesOnlineDeployment{
				EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
			},
			SKU: &armmachinelearningservices.PartialSKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
			Tags: map[string]*string{},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/update.json")
	// Response check
	exampleRes := armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
			ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
				ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
				ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Managed Online Deployment."},
	})
	client, err = armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		armmachinelearningservices.PartialOnlineDeploymentPartialTrackedResource{
			Identity: &armmachinelearningservices.PartialManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]interface{}{
					"string": map[string]interface{}{},
				},
			},
			Kind:     to.Ptr("string"),
			Location: to.Ptr("string"),
			Properties: &armmachinelearningservices.PartialManagedOnlineDeployment{
				EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			},
			SKU: &armmachinelearningservices.PartialSKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
			Tags: map[string]*string{},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/update.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/update.json")
	// Response check
	exampleRes = armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.ManagedOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			ReadinessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](30),
				InitialDelay:     to.Ptr("PT1S"),
				Period:           to.Ptr("PT10S"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT2S"),
			},
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineDeployments_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Kubernetes Online Deployment."},
	})
	client, err := armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		armmachinelearningservices.OnlineDeploymentData{
			Location: to.Ptr("string"),
			Tags:     map[string]*string{},
			Identity: &armmachinelearningservices.ManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"string": &armmachinelearningservices.UserAssignedIdentity{},
				},
			},
			Kind: to.Ptr("string"),
			Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
				Description: to.Ptr("string"),
				CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
					CodeID:        to.Ptr("string"),
					ScoringScript: to.Ptr("string"),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				AppInsightsEnabled:  to.Ptr(false),
				EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
				InstanceType:        to.Ptr("string"),
				LivenessProbe: &armmachinelearningservices.ProbeSettings{
					FailureThreshold: to.Ptr[int32](1),
					InitialDelay:     to.Ptr("PT5M"),
					Period:           to.Ptr("PT5M"),
					SuccessThreshold: to.Ptr[int32](1),
					Timeout:          to.Ptr("PT5M"),
				},
				Model:          to.Ptr("string"),
				ModelMountPath: to.Ptr("string"),
				RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
					MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
					MaxQueueWait:                     to.Ptr("PT5M"),
					RequestTimeout:                   to.Ptr("PT5M"),
				},
				ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
					ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
				},
				ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
					ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
						CPU:    to.Ptr("\"1\""),
						Gpu:    to.Ptr("\"1\""),
						Memory: to.Ptr("\"2Gi\""),
					},
					ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
						CPU:    to.Ptr("\"1\""),
						Gpu:    to.Ptr("\"1\""),
						Memory: to.Ptr("\"2Gi\""),
					},
				},
			},
			SKU: &armmachinelearningservices.SKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/createOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/createOrUpdate.json")
	// Response check
	exampleRes := armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.KubernetesOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeKubernetes),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
			ContainerResourceRequirements: &armmachinelearningservices.ContainerResourceRequirements{
				ContainerResourceLimits: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
				ContainerResourceRequests: &armmachinelearningservices.ContainerResourceSettings{
					CPU:    to.Ptr("\"1\""),
					Gpu:    to.Ptr("\"1\""),
					Memory: to.Ptr("\"2Gi\""),
				},
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/KubernetesOnlineDeployment/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate Managed Online Deployment."},
	})
	client, err = armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"testEndpointName",
		"testDeploymentName",
		armmachinelearningservices.OnlineDeploymentData{
			Location: to.Ptr("string"),
			Tags:     map[string]*string{},
			Identity: &armmachinelearningservices.ManagedServiceIdentity{
				Type: to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
					"string": &armmachinelearningservices.UserAssignedIdentity{},
				},
			},
			Kind: to.Ptr("string"),
			Properties: &armmachinelearningservices.ManagedOnlineDeployment{
				Description: to.Ptr("string"),
				CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
					CodeID:        to.Ptr("string"),
					ScoringScript: to.Ptr("string"),
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				AppInsightsEnabled:  to.Ptr(false),
				EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
				InstanceType:        to.Ptr("string"),
				LivenessProbe: &armmachinelearningservices.ProbeSettings{
					FailureThreshold: to.Ptr[int32](1),
					InitialDelay:     to.Ptr("PT5M"),
					Period:           to.Ptr("PT5M"),
					SuccessThreshold: to.Ptr[int32](1),
					Timeout:          to.Ptr("PT5M"),
				},
				Model:          to.Ptr("string"),
				ModelMountPath: to.Ptr("string"),
				ReadinessProbe: &armmachinelearningservices.ProbeSettings{
					FailureThreshold: to.Ptr[int32](30),
					InitialDelay:     to.Ptr("PT1S"),
					Period:           to.Ptr("PT10S"),
					SuccessThreshold: to.Ptr[int32](1),
					Timeout:          to.Ptr("PT2S"),
				},
				RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
					MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
					MaxQueueWait:                     to.Ptr("PT5M"),
					RequestTimeout:                   to.Ptr("PT5M"),
				},
				ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
					ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
				},
			},
			SKU: &armmachinelearningservices.SKU{
				Name:     to.Ptr("string"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("string"),
				Size:     to.Ptr("string"),
				Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/createOrUpdate.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/createOrUpdate.json")
	// Response check
	exampleRes = armmachinelearningservices.OnlineDeploymentData{
		Name: to.Ptr("string"),
		Type: to.Ptr("string"),
		ID:   to.Ptr("string"),
		SystemData: &armmachinelearningservices.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armmachinelearningservices.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armmachinelearningservices.CreatedByTypeUser),
		},
		Location: to.Ptr("string"),
		Tags:     map[string]*string{},
		Identity: &armmachinelearningservices.ManagedServiceIdentity{
			Type:        to.Ptr(armmachinelearningservices.ManagedServiceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
			TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			UserAssignedIdentities: map[string]*armmachinelearningservices.UserAssignedIdentity{
				"string": &armmachinelearningservices.UserAssignedIdentity{
					ClientID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
			},
		},
		Kind: to.Ptr("string"),
		Properties: &armmachinelearningservices.ManagedOnlineDeployment{
			Description: to.Ptr("string"),
			CodeConfiguration: &armmachinelearningservices.CodeConfiguration{
				CodeID:        to.Ptr("string"),
				ScoringScript: to.Ptr("string"),
			},
			EnvironmentID: to.Ptr("string"),
			EnvironmentVariables: map[string]*string{
				"string": to.Ptr("string"),
			},
			Properties: map[string]*string{
				"string": to.Ptr("string"),
			},
			AppInsightsEnabled:  to.Ptr(false),
			EndpointComputeType: to.Ptr(armmachinelearningservices.EndpointComputeTypeManaged),
			InstanceType:        to.Ptr("string"),
			LivenessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](1),
				InitialDelay:     to.Ptr("PT5M"),
				Period:           to.Ptr("PT5M"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT5M"),
			},
			Model:             to.Ptr("string"),
			ModelMountPath:    to.Ptr("string"),
			ProvisioningState: to.Ptr(armmachinelearningservices.DeploymentProvisioningStateSucceeded),
			ReadinessProbe: &armmachinelearningservices.ProbeSettings{
				FailureThreshold: to.Ptr[int32](30),
				InitialDelay:     to.Ptr("PT1S"),
				Period:           to.Ptr("PT10S"),
				SuccessThreshold: to.Ptr[int32](1),
				Timeout:          to.Ptr("PT2S"),
			},
			RequestSettings: &armmachinelearningservices.OnlineRequestSettings{
				MaxConcurrentRequestsPerInstance: to.Ptr[int32](1),
				MaxQueueWait:                     to.Ptr("PT5M"),
				RequestTimeout:                   to.Ptr("PT5M"),
			},
			ScaleSettings: &armmachinelearningservices.DefaultScaleSettings{
				ScaleType: to.Ptr(armmachinelearningservices.ScaleTypeDefault),
			},
		},
		SKU: &armmachinelearningservices.SKU{
			Name:     to.Ptr("string"),
			Capacity: to.Ptr[int32](1),
			Family:   to.Ptr("string"),
			Size:     to.Ptr("string"),
			Tier:     to.Ptr(armmachinelearningservices.SKUTierFree),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OnlineDeploymentData) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OnlineDeploymentData)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/ManagedOnlineDeployment/createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestOnlineDeployments_GetLogs() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/getLogs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Online Deployment Logs."},
	})
	client, err := armmachinelearningservices.NewOnlineDeploymentsClient("00000000-1111-2222-3333-444444444444", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetLogs(ctx,
		"testrg123",
		"workspace123",
		"testEndpoint",
		"testDeployment",
		armmachinelearningservices.DeploymentLogsRequest{
			ContainerType: to.Ptr(armmachinelearningservices.ContainerTypeStorageInitializer),
			Tail:          to.Ptr[int32](0),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/getLogs.json")
	// Response check
	exampleRes := armmachinelearningservices.DeploymentLogs{
		Content: to.Ptr("string"),
	}
	if !reflect.DeepEqual(exampleRes, res.DeploymentLogs) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DeploymentLogs)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/OnlineDeployment/getLogs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestWorkspaceFeatures_List() {
	ctx := context.Background()
	// From example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceFeature/list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Workspace features"},
	})
	client, err := armmachinelearningservices.NewWorkspaceFeaturesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myResourceGroup",
		"testworkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceFeature/list.json")
		// Response check
		pagerExampleRes := armmachinelearningservices.ListAmlUserFeatureResult{
			Value: []*armmachinelearningservices.AmlUserFeature{
				{
					Description: to.Ptr("Create, edit or delete AutoML experiments in the SDK"),
					DisplayName: to.Ptr("Create edit experiments UI"),
					ID:          to.Ptr("automatedml_createeditexperimentsui"),
				},
				{
					Description: to.Ptr("Upgrade workspace from Basic to enterprise from the UI"),
					DisplayName: to.Ptr("Upgrade workspace UI"),
					ID:          to.Ptr("workspace_upgradeworkspaceui"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListAmlUserFeatureResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListAmlUserFeatureResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceFeature/list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}
