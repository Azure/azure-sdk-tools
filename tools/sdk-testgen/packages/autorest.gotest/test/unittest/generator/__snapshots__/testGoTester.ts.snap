// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GoTestGenerator from RP agrifood Generate MockTest and SDK example 1`] = `
Object {
  "ze_generated_example_extensions_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_Create() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Create(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Get(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.ExtensionsClientGetResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Update(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.ExtensionsClientUpdateResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Delete(ctx,
\\"<extension-id>\\",
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleExtensionsClient_ListByFarmBeats() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewExtensionsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListByFarmBeats(\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
&armagfood.ExtensionsListByFarmBeatsOptions{ExtensionIDs: []string{},
ExtensionCategories: []string{},
MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}


",
  "ze_generated_example_farmbeatsextensions_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsExtensionsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, nil)
	pager := client.List(&armagfood.FarmBeatsExtensionsListOptions{FarmBeatsExtensionIDs: []string{},
FarmBeatsExtensionNames: []string{},
ExtensionCategories: []string{},
PublisherIDs: []string{},
MaxPageSize: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsExtensionsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, nil)
	res, err := client.Get(ctx,
\\"<farm-beats-extension-id>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.FarmBeatsExtensionsClientGetResult
}


",
  "ze_generated_example_farmbeatsmodels_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Get(ctx,
\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.FarmBeatsModelsClientGetResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
armagfood.FarmBeats{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
Location: to.StringPtr(\\"<location>\\"),
},
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.FarmBeatsModelsClientCreateOrUpdateResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.Update(ctx,
\\"<farm-beats-resource-name>\\",
\\"<resource-group-name>\\",
armagfood.FarmBeatsUpdateRequestModel{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
},
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.FarmBeatsModelsClientUpdateResult
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	_, err = client.Delete(ctx,
\\"<resource-group-name>\\",
\\"<farm-beats-resource-name>\\",
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListBySubscription(&armagfood.FarmBeatsModelsListBySubscriptionOptions{MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleFarmBeatsModelsClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewFarmBeatsModelsClient(\\"<subscription-id>\\", cred, nil)
	pager := client.ListByResourceGroup(\\"<resource-group-name>\\",
&armagfood.FarmBeatsModelsListByResourceGroupOptions{MaxPageSize: nil,
SkipToken: nil,
})
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}


",
  "ze_generated_example_locations_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleLocationsClient_CheckNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewLocationsClient(\\"<subscription-id>\\", cred, nil)
	res, err := client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"<name>\\"),
Type: to.StringPtr(\\"<type>\\"),
},
nil)
	if err != nil {
		log.Fatalf(\\"failed to finish the request: %v\\", err)
        return
	}
    // TODO: use response item
    _ = res.LocationsClientCheckNameAvailabilityResult
}


",
  "ze_generated_example_operations_client_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"log\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/
func ExampleOperationsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf(\\"failed to obtain a credential: %v\\", err)
        return
	}

	ctx := context.Background()
	client := armagfood.NewOperationsClient(cred, nil)
	pager := client.List(nil)
	for {
        nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf(\\"failed to advance page: %v\\", err)
            return
		}
        if !nextResult {
            break
        }
		for _, v := range pager.PageResponse().Value {
            // TODO: use page item
            _ = v
		}
	}
}


",
  "zt_generated_mock_test.go": "//go:build go1.16
// +build go1.16



package armagfood_test

import (
	\\"context\\"
	\\"fmt\\"
	\\"net/http\\"
	\\"os\\"
	\\"runtime/debug\\"
	\\"testing\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
	\\"golang.org/x/net/http2\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/agfood/armagfood\\"
	\\"reflect\\"
	\\"time\\"
)



var (
	ctx            context.Context
    options        arm.ClientOptions
	cred           azcore.TokenCredential
	err            error
	mockHost       string
)



func TestExtensions_Create(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Create(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Get(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Update(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Update(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_Delete(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Delete(ctx,
\\"provider.extension\\",
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestExtensions_ListByFarmBeats(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewExtensionsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListByFarmBeats(\\"examples-rg\\",
\\"examples-farmbeatsResourceName\\",
&armagfood.ExtensionsListByFarmBeatsOptions{ExtensionIDs: []string{},
ExtensionCategories: []string{},
MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsExtensions_List(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, &options)
        pager := client.List(&armagfood.FarmBeatsExtensionsListOptions{FarmBeatsExtensionIDs: []string{},
FarmBeatsExtensionNames: []string{},
ExtensionCategories: []string{},
PublisherIDs: []string{},
MaxPageSize: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsExtensions_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsExtensionsClient(cred, &options)
            res, err := client.Get(ctx,
\\"DTN.ContentServices\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Get(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Get(ctx,
\\"examples-rg\\",
\\"examples-farmBeatsResourceName\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_CreateOrUpdate(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.CreateOrUpdate(ctx,
\\"examples-farmbeatsResourceName\\",
\\"examples-rg\\",
armagfood.FarmBeats{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
Location: to.StringPtr(\\"eastus2\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Update(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.Update(ctx,
\\"examples-farmBeatsResourceName\\",
\\"examples-rg\\",
armagfood.FarmBeatsUpdateRequestModel{
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
\\"key2\\": to.StringPtr(\\"value2\\"),
},
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_Delete(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            _, err := client.Delete(ctx,
\\"examples-rg\\",
\\"examples-farmBeatsResourceName\\",
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestFarmBeatsModels_ListBySubscription(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListBySubscription(&armagfood.FarmBeatsModelsListBySubscriptionOptions{MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestFarmBeatsModels_ListByResourceGroup(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewFarmBeatsModelsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
        pager := client.ListByResourceGroup(\\"examples-rg\\",
&armagfood.FarmBeatsModelsListByResourceGroupOptions{MaxPageSize: nil,
SkipToken: nil,
})
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


func TestLocations_CheckNameAvailability(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewLocationsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err := client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"existingaccountname\\"),
Type: to.StringPtr(\\"Microsoft.AgFoodPlatform/farmBeats\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }

    
    // From example 
    client = armagfood.NewLocationsClient(\\"11111111-2222-3333-4444-555555555555\\", cred, &options)
            res, err = client.CheckNameAvailability(ctx,
armagfood.CheckNameAvailabilityRequest{
Name: to.StringPtr(\\"newaccountname\\"),
Type: to.StringPtr(\\"Microsoft.AgFoodPlatform/farmBeats\\"),
},
nil)
        if err != nil {
            t.Fatalf(\\"Failed to get result for example : %v\\", err)
        }
}


func TestOperations_List(t *testing.T) {
    // From example 
	defer func() {
		if r := recover(); r != nil {
			t.Fatal(\\"stacktrace from panic: \\\\n\\" + string(debug.Stack()))
		}
	}()
	client := armagfood.NewOperationsClient(cred, &options)
        pager := client.List(nil)
        for {
            nextResult := pager.NextPage(ctx)
            if err := pager.Err(); err != nil {
                t.Fatalf(\\"Failed to advance page for example : %v\\", err)
            }
            if !nextResult {
                break
            }
        }
}


// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
    if value, ok := os.LookupEnv(key); ok {
        return value
    }
    return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv(\\"AZURE_VIRTUAL_SERVER_HOST\\", \\"https://localhost:8443\\")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf(\\"Failed to configure http2 transport: %v\\", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	
    cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: \\"MockToken\\", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}",
}
`;

exports[`GoTestGenerator from RP signalR Generate scenario test 1`] = `
Object {
  "scenario_test/signalr/zt_generated_signalr_test.go": "//go:build go1.16
// +build go1.16



package signalr_test

import (
	\\"context\\"
	\\"testing\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/internal/recording\\"
    \\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager//armsignalr/scenario_test\\"
)
import (
	\\"encoding/json\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr\\"
	\\"reflect\\"
	\\"time\\"
)



var (
	ctx            context.Context
	cred           azcore.TokenCredential
    pathToPackage  = \\"sdk/resourcemanager//armsignalr/scenario_test/signalr/testdata\\"
	options        *arm.ClientOptions
	resourceGroup	*armresources.ResourceGroup
    resourceName = \\"signalrswaggertest4\\"
    location = scenario_test.GetEnv(\\"LOCATION\\", \\"eastus\\")
    resourceGroupName = scenario_test.GetEnv(\\"RESOURCE_GROUP_NAME\\", \\"\\")
    subscriptionId = scenario_test.GetEnv(\\"SUBSCRIPTION_ID\\", scenario_test.GetEnv(\\"AZURE_SUBSCRIPTION_ID\\", \\"\\"))
)

func TestSignalr(t *testing.T) {
    // Setup for test
	scenario_test.StartRecording(t, pathToPackage)
	ctx = context.Background()
	options = scenario_test.CreateArmOptions(t)
	cred = scenario_test.CreateCred(t, ctx, options)
	resourceGroup = scenario_test.CreateResourceGroup(t, ctx, cred, subscriptionId, location, options)
	resourceGroupName = *resourceGroup.Name
	// Clenup for test
	t.Cleanup(func() {
		scenario_test.DeleteResourceGroup(t, ctx, cred, subscriptionId, resourceGroupName, options)
		scenario_test.StopRecording(t)
	})
	prepare(t)
	scenarioMicrosoftSignalrserviceBasicCrud(t)
	cleanup(t)
}

func prepare(t *testing.T) {
}


func scenarioMicrosoftSignalrserviceBasicCrud(t *testing.T) {
    resourceName := resourceName
// From step Generate_Unique_Name
{
    template := map[string]interface{}{
\\"$schema\\": \\"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\\",
\\"contentVersion\\": \\"1.0.0.0\\",
\\"outputs\\":map[string]interface{}{
\\"name\\":map[string]interface{}{
\\"type\\": \\"string\\",
\\"value\\": \\"[variables('name').value]\\",
},
\\"resourceName\\":map[string]interface{}{
\\"type\\": \\"string\\",
\\"value\\": \\"[variables('name').value]\\",
},
},
\\"resources\\":[]interface{}{
},
\\"variables\\":map[string]interface{}{
\\"name\\":map[string]interface{}{
\\"type\\": \\"string\\",
\\"metadata\\":map[string]interface{}{
\\"description\\": \\"Name of the SignalR service.\\",
},
\\"value\\": \\"[concat('sw',uniqueString(resourceGroup().id))]\\",
},
},
}
    params := map[string]interface{}{
    }
    deploymentExtend, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, \\"Generate_Unique_Name\\", template, params)
    if err != nil {
        t.Fatalf(\\"Deployment error: %v\\", err)
    }
    name = deploymentExtend.Properties.Outputs[\\"name\\"].(map[string]interface{})[\\"value\\"].(string)
    resourceName = deploymentExtend.Properties.Outputs[\\"resourceName\\"].(map[string]interface{})[\\"value\\"].(string)
    }

    
// From step SignalR_CheckNameAvailability
signalRClient := armsignalr.NewSignalRClient(subscriptionId, cred, options)
{
                signalRCheckNameAvailabilityResponse, err := signalRClient.CheckNameAvailability(ctx,
location,
&armsignalr.SignalRCheckNameAvailabilityOptions{Parameters: &armsignalr.NameAvailabilityParameters{
Name: to.StringPtr(\\"my-signalr-service\\"),
Type: to.StringPtr(\\"Microsoft.SignalRService/SignalR\\"),
},
})
            if err != nil {
                t.Fatalf(\\"Request error: %v\\", err)
            }
            t.Logf(\\"Response result: %#v\\\\n\\", signalRCheckNameAvailabilityResponse.SignalRClientCheckNameAvailabilityResult)
    }

    
// From step SignalR_CreateOrUpdate
{
                signalRCreateOrUpdatePollerResponse, err := signalRClient.BeginCreateOrUpdate(ctx,
resourceGroupName,
resourceName,
&armsignalr.SignalRBeginCreateOrUpdateOptions{Parameters: &armsignalr.SignalRResource{
Location: to.StringPtr(location),
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
},
Identity: &armsignalr.ManagedIdentity{
Type: armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
},
Kind: armsignalr.ServiceKindSignalR.ToPtr(),
Properties: &armsignalr.SignalRProperties{
Cors: &armsignalr.SignalRCorsSettings{
AllowedOrigins: []*string{
to.StringPtr(\\"https://foo.com\\"),
to.StringPtr(\\"https://bar.com\\")},
},
Features: []*armsignalr.SignalRFeature{
{
Flag: armsignalr.FeatureFlagsServiceMode.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"Serverless\\"),
},
{
Flag: armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"True\\"),
},
{
Flag: armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"False\\"),
}},
NetworkACLs: &armsignalr.SignalRNetworkACLs{
DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
Name: to.StringPtr(\\"mySignalRService.1fa229cd-bf3f-47f0-8c49-afb36723997e\\"),
}},
PublicNetwork: &armsignalr.NetworkACL{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
},
},
Upstream: &armsignalr.ServerlessUpstreamSettings{
Templates: []*armsignalr.UpstreamTemplate{
{
Auth: &armsignalr.UpstreamAuthSettings{
Type: armsignalr.UpstreamAuthTypeManagedIdentity.ToPtr(),
ManagedIdentity: &armsignalr.ManagedIdentitySettings{
Resource: to.StringPtr(\\"api://example\\"),
},
},
CategoryPattern: to.StringPtr(\\"*\\"),
EventPattern: to.StringPtr(\\"connect,disconnect\\"),
HubPattern: to.StringPtr(\\"*\\"),
URLTemplate: to.StringPtr(\\"https://example.com/chat/api/connect\\"),
}},
},
TLS: &armsignalr.SignalRTLSSettings{
ClientCertEnabled: to.BoolPtr(false),
},
},
SKU: &armsignalr.ResourceSKU{
Name: to.StringPtr(\\"Standard_S1\\"),
Capacity: to.Int32Ptr(1),
Tier: armsignalr.SignalRSKUTierStandard.ToPtr(),
},
},
})
            if err != nil {
                t.Fatalf(\\"Request error: %v\\", err)
            }
            var response armsignalr.SignalRClientCreateOrUpdateResponse
            if recording.GetRecordMode() == recording.PlaybackMode {
                for {
                    _, err = signalRCreateOrUpdatePollerResponse.Poller.Poll(ctx)
                    if err != nil {
                        t.Fatalf(\\"Request error: %v\\", err)
                    }
                    if signalRCreateOrUpdatePollerResponse.Poller.Done() {
                        response, err = signalRCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
                        if err != nil {
                            t.Fatalf(\\"Request error: %v\\", err)
                        }
                        break
                    }
                }
            } else {
                response, err = signalRCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
                if err != nil {
                    t.Fatalf(\\"Request error: %v\\", err)
                }
            }
            t.Logf(\\"Response result: %#v\\\\n\\", response.SignalRClientCreateOrUpdateResult)
    }

    
// From step SignalR_Get
{
                signalRGetResponse, err := signalRClient.Get(ctx,
resourceGroupName,
resourceName,
nil)
            if err != nil {
                t.Fatalf(\\"Request error: %v\\", err)
            }
            t.Logf(\\"Response result: %#v\\\\n\\", signalRGetResponse.SignalRClientGetResult)
    }

    
// From step SignalR_Update
{
                signalRUpdatePollerResponse, err := signalRClient.BeginUpdate(ctx,
resourceGroupName,
resourceName,
&armsignalr.SignalRBeginUpdateOptions{Parameters: &armsignalr.SignalRResource{
Location: to.StringPtr(location),
Tags: map[string]*string{
\\"key1\\": to.StringPtr(\\"value1\\"),
},
Identity: &armsignalr.ManagedIdentity{
Type: armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
},
Kind: armsignalr.ServiceKindSignalR.ToPtr(),
Properties: &armsignalr.SignalRProperties{
Cors: &armsignalr.SignalRCorsSettings{
AllowedOrigins: []*string{
to.StringPtr(\\"https://foo.com\\"),
to.StringPtr(\\"https://bar.com\\")},
},
Features: []*armsignalr.SignalRFeature{
{
Flag: armsignalr.FeatureFlagsServiceMode.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"Serverless\\"),
},
{
Flag: armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"True\\"),
},
{
Flag: armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
Properties: map[string]*string{
},
Value: to.StringPtr(\\"False\\"),
}},
NetworkACLs: &armsignalr.SignalRNetworkACLs{
DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
Name: to.StringPtr(resourceName + \\".1fa229cd-bf3f-47f0-8c49-afb36723997e\\"),
}},
PublicNetwork: &armsignalr.NetworkACL{
Allow: []*armsignalr.SignalRRequestType{
armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
},
},
Upstream: &armsignalr.ServerlessUpstreamSettings{
Templates: []*armsignalr.UpstreamTemplate{
{
Auth: &armsignalr.UpstreamAuthSettings{
Type: armsignalr.UpstreamAuthTypeManagedIdentity.ToPtr(),
ManagedIdentity: &armsignalr.ManagedIdentitySettings{
Resource: to.StringPtr(\\"api://example\\"),
},
},
CategoryPattern: to.StringPtr(\\"*\\"),
EventPattern: to.StringPtr(\\"connect,disconnect\\"),
HubPattern: to.StringPtr(\\"*\\"),
URLTemplate: to.StringPtr(\\"https://example.com/chat/api/connect\\"),
}},
},
TLS: &armsignalr.SignalRTLSSettings{
ClientCertEnabled: to.BoolPtr(false),
},
},
SKU: &armsignalr.ResourceSKU{
Name: to.StringPtr(\\"Standard_S1\\"),
Capacity: to.Int32Ptr(1),
Tier: armsignalr.SignalRSKUTierStandard.ToPtr(),
},
},
})
            if err != nil {
                t.Fatalf(\\"Request error: %v\\", err)
            }
            var response armsignalr.SignalRClientUpdateResponse
            if recording.GetRecordMode() == recording.PlaybackMode {
                for {
                    _, err = signalRUpdatePollerResponse.Poller.Poll(ctx)
                    if err != nil {
                        t.Fatalf(\\"Request error: %v\\", err)
                    }
                    if signalRUpdatePollerResponse.Poller.Done() {
                        response, err = signalRUpdatePollerResponse.Poller.FinalResponse(ctx)
                        if err != nil {
                            t.Fatalf(\\"Request error: %v\\", err)
                        }
                        break
                    }
                }
            } else {
                response, err = signalRUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
                if err != nil {
                    t.Fatalf(\\"Request error: %v\\", err)
                }
            }
            t.Logf(\\"Response result: %#v\\\\n\\", response.SignalRClientUpdateResult)
    }

    
// From step SignalR_ListKeys
{
                signalRListKeysResponse, err := signalRClient.ListKeys(ctx,
resourceGroupName,
resourceName,
nil)
            if err != nil {
                t.Fatalf(\\"Request error: %v\\", err)
            }
            t.Logf(\\"Response result: %#v\\\\n\\", signalRListKeysResponse.SignalRClientListKeysResult)
    }

    
// From step Usages_List
usagesClient := armsignalr.NewUsagesClient(subscriptionId, cred, options)
{
            usagesListPager := usagesClient.List(location,
nil)
            for usagesListPager.NextPage(ctx) {
                if err := usagesListPager.Err(); err != nil {
                    t.Fatalf(\\"Failed to advance page: %v\\", err)
                }
                for _, v := range usagesListPager.PageResponse().Value {
                    t.Logf(\\"Pager result: %#v\\\\n\\", v)
                }
            }
    }

    
// From step SignalR_ListByResourceGroup
{
            signalRListByResourceGroupPager := signalRClient.ListByResourceGroup(resourceGroupName,
nil)
            for signalRListByResourceGroupPager.NextPage(ctx) {
                if err := signalRListByResourceGroupPager.Err(); err != nil {
                    t.Fatalf(\\"Failed to advance page: %v\\", err)
                }
                for _, v := range signalRListByResourceGroupPager.PageResponse().Value {
                    t.Logf(\\"Pager result: %#v\\\\n\\", v)
                }
            }
    }

    
// From step SignalR_ListBySubscription
{
            signalRListBySubscriptionPager := signalRClient.ListBySubscription(nil)
            for signalRListBySubscriptionPager.NextPage(ctx) {
                if err := signalRListBySubscriptionPager.Err(); err != nil {
                    t.Fatalf(\\"Failed to advance page: %v\\", err)
                }
                for _, v := range signalRListBySubscriptionPager.PageResponse().Value {
                    t.Logf(\\"Pager result: %#v\\\\n\\", v)
                }
            }
    }

    
// From step Operations_List
operationsClient := armsignalr.NewOperationsClient(cred, options)
{
            operationsListPager := operationsClient.List(nil)
            for operationsListPager.NextPage(ctx) {
                if err := operationsListPager.Err(); err != nil {
                    t.Fatalf(\\"Failed to advance page: %v\\", err)
                }
                for _, v := range operationsListPager.PageResponse().Value {
                    t.Logf(\\"Pager result: %#v\\\\n\\", v)
                }
            }
    }

    
// From step SignalR_Delete
{
                signalRDeletePollerResponse, err := signalRClient.BeginDelete(ctx,
resourceGroupName,
resourceName,
nil)
            if err != nil {
                t.Fatalf(\\"Request error: %v\\", err)
            }
            if recording.GetRecordMode() == recording.PlaybackMode {
                for {
                    _, err = signalRDeletePollerResponse.Poller.Poll(ctx)
                    if err != nil {
                        t.Fatalf(\\"Request error: %v\\", err)
                    }
                    if signalRDeletePollerResponse.Poller.Done() {
                        _, err = signalRDeletePollerResponse.Poller.FinalResponse(ctx)
                        if err != nil {
                            t.Fatalf(\\"Request error: %v\\", err)
                        }
                        break
                    }
                }
            } else {
                _, err = signalRDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
                if err != nil {
                    t.Fatalf(\\"Request error: %v\\", err)
                }
            }
    }
}

func cleanup(t *testing.T) {
}",
  "scenario_test/zt_generated_scenario_test_util.go": "//go:build go1.16
// +build go1.16



package scenario_test

import (
	\\"context\\"
	\\"fmt\\"
	\\"math/rand\\"
	\\"net/http\\"
	\\"os\\"
	\\"testing\\"
	\\"time\\"

	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azcore/to\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/internal/recording\\"
	\\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources\\"
)

type recordingPolicy struct {
	options recording.RecordingOptions
	t       *testing.T
}

func (r recordingPolicy) Host() string {
	if r.options.UseHTTPS {
		return \\"localhost:5001\\"
	}
	return \\"localhost:5000\\"
}

func (r recordingPolicy) Scheme() string {
	if r.options.UseHTTPS {
		return \\"https\\"
	}
	return \\"http\\"
}

func NewRecordingPolicy(t *testing.T, o *recording.RecordingOptions) policy.Policy {
	if o == nil {
		o = &recording.RecordingOptions{UseHTTPS: true}
	}
	p := &recordingPolicy{options: *o, t: t}
	return p
}

func (p *recordingPolicy) Do(req *policy.Request) (resp *http.Response, err error) {
	if recording.GetRecordMode() != \\"live\\" && !recording.IsLiveOnly(p.t) {
		oriSchema := req.Raw().URL.Scheme
		oriHost := req.Raw().URL.Host
		req.Raw().URL.Scheme = p.Scheme()
		req.Raw().URL.Host = p.Host()
		req.Raw().Host = p.Host()

		req.Raw().Header.Set(recording.UpstreamURIHeader, fmt.Sprintf(\\"%v://%v\\", oriSchema, oriHost))
		req.Raw().Header.Set(recording.ModeHeader, recording.GetRecordMode())
		req.Raw().Header.Set(recording.IDHeader, recording.GetRecordingId(p.t))

		resp, err = req.Next()
		if resp != nil {
			resp.Request.URL.Scheme = oriSchema
			resp.Request.URL.Host = oriHost
		}
		return resp, err
	} else {
		return req.Next()
	}
}

func StartRecording(t *testing.T, pathToPackage string) {
	err := recording.ResetProxy(nil)
	if err != nil {
		t.Fatalf(\\"Failed to add uuid sanitizer: %v\\", err)
	}
	err = recording.AddGeneralRegexSanitizer(\\"00000000-0000-0000-0000-000000000000\\", \`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}\`, nil)
	if err != nil {
		t.Fatalf(\\"Failed to add uuid sanitizer: %v\\", err)
	}
	err = recording.AddGeneralRegexSanitizer(\\"go-scenario-test-recording\\", \`go-scenario-test-\\\\d+\`, nil)
	if err != nil {
		t.Fatalf(\\"Failed to add resource group name sanitizer: %v\\", err)
	}
	err = recording.AddOAuthResponseSanitizer(nil)
	if err != nil {
		t.Fatalf(\\"Failed to add oauth response sanitizer: %v\\", err)
	}
	err = recording.Start(t, pathToPackage, nil)
	if err != nil {
		t.Fatalf(\\"Failed to start recording: %v\\", err)
	}
}

func StopRecording(t *testing.T) {
	err := recording.Stop(t, nil)
	if err != nil {
		t.Fatalf(\\"Failed to stop recording: %v\\", err)
	}
}

func CreateArmOptions(t *testing.T) *arm.ClientOptions {
	p := NewRecordingPolicy(t, &recording.RecordingOptions{UseHTTPS: true})
	client, err := recording.GetHTTPClient(t)
	if err != nil {
		t.Fatalf(\\"Failed to create recording client: %v\\", err)
	}
	return &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			PerCallPolicies: []policy.Policy{p},
			Transport:       client,
		},
	}
}

func CreateCred(t *testing.T, ctx context.Context, options *arm.ClientOptions) azcore.TokenCredential {
	var cred azcore.TokenCredential
	var err error
	if recording.GetRecordMode() == recording.PlaybackMode {
		cred = &FakeCredential{}
	} else {
		cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{ClientOptions: options.ClientOptions})
		if err != nil {
			t.Fatalf(\\"Failed to create credential: %v\\", err)
		}
	}
	return cred
}

func CreateResourceGroup(t *testing.T, ctx context.Context, cred azcore.TokenCredential, subscriptionId, location string, options *arm.ClientOptions) *armresources.ResourceGroup {
	rand.Seed(time.Now().UnixNano())
	resourceGroupName := fmt.Sprintf(\\"go-scenario-test-%d\\", rand.Intn(1000))
	rgClient := armresources.NewResourceGroupsClient(subscriptionId, cred, options)
	param := armresources.ResourceGroup{
		Location: to.StringPtr(location),
	}
	resp, err := rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)
	if err != nil {
		t.Fatalf(\\"Failed to create resource group: %v\\", err)
	}
	t.Logf(\\"Resource group created: id - %s name - %s\\", *resp.ResourceGroup.ID, *resp.ResourceGroup.Name)
	return &resp.ResourceGroup
}

func DeleteResourceGroup(t *testing.T, ctx context.Context, cred azcore.TokenCredential, subscriptionId, resourceGroupName string, options *arm.ClientOptions) {
	rgClient := armresources.NewResourceGroupsClient(subscriptionId, cred, options)
	poller, err := rgClient.BeginDelete(ctx, resourceGroupName, nil)
	if err != nil {
		t.Fatalf(\\"Failed to delete resource group: %v\\", err)
	}
	if recording.GetRecordMode() == recording.PlaybackMode {
		for {
			_, err = poller.Poller.Poll(ctx)
			if err != nil {
				t.Fatalf(\\"Failed to delete resource group: %v\\", err)
			}
			if poller.Poller.Done() {
				_, err = poller.Poller.FinalResponse(ctx)
				if err != nil {
					t.Fatalf(\\"Failed to delete resource group: %v\\", err)
				}
				break
			}
		}
	} else {
		if _, err = poller.PollUntilDone(ctx, 10*time.Second); err != nil {
			t.Fatalf(\\"Failed to delete resource group: %v\\", err)
		}
	}
	t.Logf(\\"Resource group deleted\\")
}

func GetEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func CreateDeployment(ctx context.Context, cred azcore.TokenCredential, options *arm.ClientOptions, subscriptionId, resourceGroupName, deploymentName string, template, params map[string]interface{}) (de *armresources.DeploymentExtended, err error) {
	deployClient := armresources.NewDeploymentsClient(subscriptionId, cred, options)
	poller, err := deployClient.BeginCreateOrUpdate(
		ctx,
		resourceGroupName,
		deploymentName,
		armresources.Deployment{
			Properties: &armresources.DeploymentProperties{
				Template:   template,
				Parameters: params,
				Mode:       armresources.DeploymentModeIncremental.ToPtr(),
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{},
	)
	if err != nil {
		return nil, err
	}
	var res armresources.DeploymentsClientCreateOrUpdateResponse
	if recording.GetRecordMode() == recording.PlaybackMode {
		for {
			_, err = poller.Poller.Poll(ctx)
			if err != nil {
				return nil, err
			}
			if poller.Poller.Done() {
				res, err = poller.Poller.FinalResponse(ctx)
				if err != nil {
					return nil, err
				}
				break
			}
		}
	} else {
		res, err = poller.PollUntilDone(ctx, 10*time.Second)
		if err != nil {
			return nil, err
		}
	}
	return &res.DeploymentExtended, nil
}

type FakeCredential struct {
}

func (c *FakeCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: \\"FakeToken\\", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
",
}
`;
