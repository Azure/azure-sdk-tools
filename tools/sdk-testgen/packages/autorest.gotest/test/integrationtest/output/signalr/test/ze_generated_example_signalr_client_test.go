//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package test_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
)

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json
func ExampleSignalRClient_CheckNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	res, err := client.CheckNameAvailability(ctx,
		"<location>",
		test.NameAvailabilityParameters{
			Name: to.StringPtr("<name>"),
			Type: to.StringPtr("<type>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.SignalRClientCheckNameAvailabilityResult)
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json
func ExampleSignalRClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	pager := client.ListBySubscription(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json
func ExampleSignalRClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	pager := client.ListByResourceGroup("<resource-group-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json
func ExampleSignalRClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.SignalRClientGetResult)
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json
func ExampleSignalRClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<resource-name>",
		test.ResourceInfo{
			Location: to.StringPtr("<location>"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Identity: &test.ManagedIdentity{
				Type: test.ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Kind: test.ServiceKindSignalR.ToPtr(),
			Properties: &test.SignalRProperties{
				Cors: &test.SignalRCorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				Features: []*test.SignalRFeature{
					{
						Flag:       test.FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("<value>"),
					},
					{
						Flag:       test.FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("<value>"),
					},
					{
						Flag:       test.FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("<value>"),
					},
					{
						Flag:       test.FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("<value>"),
					}},
				NetworkACLs: &test.SignalRNetworkACLs{
					DefaultAction: test.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*test.PrivateEndpointACL{
						{
							Allow: []*test.SignalRRequestType{
								test.SignalRRequestTypeServerConnection.ToPtr()},
							Name: to.StringPtr("<name>"),
						}},
					PublicNetwork: &test.NetworkACL{
						Allow: []*test.SignalRRequestType{
							test.SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PublicNetworkAccess: to.StringPtr("<public-network-access>"),
				TLS: &test.SignalRTLSSettings{
					ClientCertEnabled: to.BoolPtr(false),
				},
				Upstream: &test.ServerlessUpstreamSettings{
					Templates: []*test.UpstreamTemplate{
						{
							Auth: &test.UpstreamAuthSettings{
								Type: test.UpstreamAuthTypeManagedIdentity.ToPtr(),
								ManagedIdentity: &test.ManagedIdentitySettings{
									Resource: to.StringPtr("<resource>"),
								},
							},
							CategoryPattern: to.StringPtr("<category-pattern>"),
							EventPattern:    to.StringPtr("<event-pattern>"),
							HubPattern:      to.StringPtr("<hub-pattern>"),
							URLTemplate:     to.StringPtr("<urltemplate>"),
						}},
				},
			},
			SKU: &test.ResourceSKU{
				Name:     to.StringPtr("<name>"),
				Capacity: to.Int32Ptr(1),
				Tier:     test.SignalRSKUTierStandard.ToPtr(),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.SignalRClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json
func ExampleSignalRClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json
func ExampleSignalRClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<resource-name>",
		test.ResourceInfo{
			Location: to.StringPtr("<location>"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Identity: &test.ManagedIdentity{
				Type: test.ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Kind: test.ServiceKindSignalR.ToPtr(),
			Properties: &test.SignalRProperties{
				Cors: &test.SignalRCorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				Features: []*test.SignalRFeature{
					{
						Flag:       test.FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("<value>"),
					},
					{
						Flag:       test.FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("<value>"),
					},
					{
						Flag:       test.FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("<value>"),
					},
					{
						Flag:       test.FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("<value>"),
					}},
				NetworkACLs: &test.SignalRNetworkACLs{
					DefaultAction: test.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*test.PrivateEndpointACL{
						{
							Allow: []*test.SignalRRequestType{
								test.SignalRRequestTypeServerConnection.ToPtr()},
							Name: to.StringPtr("<name>"),
						}},
					PublicNetwork: &test.NetworkACL{
						Allow: []*test.SignalRRequestType{
							test.SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PublicNetworkAccess: to.StringPtr("<public-network-access>"),
				TLS: &test.SignalRTLSSettings{
					ClientCertEnabled: to.BoolPtr(false),
				},
				Upstream: &test.ServerlessUpstreamSettings{
					Templates: []*test.UpstreamTemplate{
						{
							Auth: &test.UpstreamAuthSettings{
								Type: test.UpstreamAuthTypeManagedIdentity.ToPtr(),
								ManagedIdentity: &test.ManagedIdentitySettings{
									Resource: to.StringPtr("<resource>"),
								},
							},
							CategoryPattern: to.StringPtr("<category-pattern>"),
							EventPattern:    to.StringPtr("<event-pattern>"),
							HubPattern:      to.StringPtr("<hub-pattern>"),
							URLTemplate:     to.StringPtr("<urltemplate>"),
						}},
				},
			},
			SKU: &test.ResourceSKU{
				Name:     to.StringPtr("<name>"),
				Capacity: to.Int32Ptr(1),
				Tier:     test.SignalRSKUTierStandard.ToPtr(),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.SignalRClientUpdateResult)
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json
func ExampleSignalRClient_ListKeys() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	res, err := client.ListKeys(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.SignalRClientListKeysResult)
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json
func ExampleSignalRClient_BeginRegenerateKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	poller, err := client.BeginRegenerateKey(ctx,
		"<resource-group-name>",
		"<resource-name>",
		test.RegenerateKeyParameters{
			KeyType: test.KeyTypePrimary.ToPtr(),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json
func ExampleSignalRClient_BeginRestart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := test.NewSignalRClient("<subscription-id>", cred, nil)
	poller, err := client.BeginRestart(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
