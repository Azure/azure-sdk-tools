//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package test_test

import (
	"context"
	"os"
	"testing"

	"encoding/json"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	"github.com/go-openapi/jsonpointer"
)

var (
	ctx               context.Context
	cred              azcore.TokenCredential
	resourceGroup     *armresources.ResourceGroup
	fakeStepVar       = "signalrswaggertest4"
	resourceName      = "signalrswaggertest4"
	location          = getEnv("LOCATION", "")
	resourceGroupName = getEnv("RESOURCE_GROUP_NAME", "")
	subscriptionId    = getEnv("SUBSCRIPTION_ID", "")
)

func TestSample(t *testing.T) {
	setUp(t)
	scenarioMicrosoftSignalrserviceBasicCrud(t)
	scenarioMicrosoftSignalrserviceDeleteonly(t)
	tearDown(t)
}

func setUp(t *testing.T) {
	var err error
	ctx = context.Background()
	cred, err = azidentity.NewEnvironmentCredential(nil)
	if err != nil {
		t.Fatalf("Failed to create credential: %v", err)
	}
	resourceGroup, err = createResourceGroup(ctx, cred)
	if err != nil {
		t.Fatalf("Failed to create resource group: %v", err)
	}
	t.Logf("Resource group created: id - %s name - %s", *resourceGroup.ID, *resourceGroup.Name)
	prepare(t)
}

func createResourceGroup(ctx context.Context, cred azcore.TokenCredential) (*armresources.ResourceGroup, error) {
	rgClient := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)
	param := armresources.ResourceGroup{
		Location: to.StringPtr(location),
	}
	resp, err := rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)
	if err != nil {
		return nil, err
	}
	return &resp.ResourceGroup, nil
}

func deleteResourceGroup(ctx context.Context, cred azcore.TokenCredential) error {
	rgClient := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)
	poller, err := rgClient.BeginDelete(ctx, resourceGroupName, nil)
	if err != nil {
		return err
	}
	if _, err := poller.PollUntilDone(ctx, 10*time.Second); err != nil {
		return err
	}
	return nil
}

func tearDown(t *testing.T) {
	cleanup(t)
	err := deleteResourceGroup(ctx, cred)
	if err != nil {
		t.Fatalf("Failed to delete resource group: %v", err)
	}
	t.Logf("Resource group deleted")
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func createDeployment(deploymentName string, template, params map[string]interface{}) (de *armresources.DeploymentExtended, err error) {
	deployClient := armresources.NewDeploymentsClient(subscriptionId, cred, nil)
	poller, err := deployClient.BeginCreateOrUpdate(
		ctx,
		resourceGroupName,
		deploymentName,
		armresources.Deployment{
			Properties: &armresources.DeploymentProperties{
				Template:   template,
				Parameters: params,
				Mode:       armresources.DeploymentModeIncremental.ToPtr(),
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{},
	)
	if err != nil {
		return nil, err
	}
	res, err := poller.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		return nil, err
	}
	return &res.DeploymentExtended, nil
}

func prepare(t *testing.T) {
	// From step Delete-proximity-placement-group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, nil)
	{
		_, err := proximityPlacementGroupsClient.Delete(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
	}
}
func scenarioMicrosoftSignalrserviceBasicCrud(t *testing.T) {
	fakeScenarioVar := "signalrswaggertest5"
	resourceName := resourceName
	// From step Generate_Unique_Name
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"outputs": map[string]interface{}{
				"name": map[string]interface{}{
					"type":  "string",
					"value": "[variables('name').value]",
				},
				"resourceName": map[string]interface{}{
					"type":  "string",
					"value": "[variables('name').value]",
				},
			},
			"resources": []interface{}{},
			"variables": map[string]interface{}{
				"name": map[string]interface{}{
					"type": "string",
					"metadata": map[string]interface{}{
						"description": "Name of the SignalR service.",
					},
					"value": "[concat('sw',uniqueString(resourceGroup().id))]",
				},
			},
		}
		params := map[string]interface{}{}
		deploymentExtend, err := createDeployment("Generate_Unique_Name", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
		name = deploymentExtend.Properties.Outputs["name"].(map[string]interface{})["value"].(string)
		resourceName = deploymentExtend.Properties.Outputs["resourceName"].(map[string]interface{})["value"].(string)
	}

	// From step Create-or-Update-a-proximity-placement-group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, nil)
	{
		proximityPlacementGroupsClientCreateOrUpdateResponse, err := proximityPlacementGroupsClient.CreateOrUpdate(ctx,
			resourceGroupName,
			resourceName,
			test.ProximityPlacementGroup{
				Location: to.StringPtr(location),
				Properties: &test.ProximityPlacementGroupProperties{
					ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", proximityPlacementGroupsClientCreateOrUpdateResponse.ProximityPlacementGroupsClientCreateOrUpdateResult)

		var respBody interface{}
		byteBody, err := json.Marshal(proximityPlacementGroupsClientCreateOrUpdateResponse.ProximityPlacementGroupsClientCreateOrUpdateResult)
		if err != nil {
			t.Fatalf("Marshall response body failed: %v", err)
		}
		err = json.Unmarshal(byteBody, &respBody)
		if err != nil {
			t.Fatalf("Unmarshall response body to JSON failed: %v", err)
		}
		pointer, err := jsonpointer.New("/id")
		if err != nil {
			t.Fatalf("Unable to create Jsonpointer for /id : %v", err)
		}
		tmp, _, err := pointer.Get(respBody)
		if err != nil {
			t.Fatalf("Get JsonPointer failed /id in %v: %v", byteBody[:], err)
		}
		fakeScenarioVar = tmp.(string)
	}

	// From step Delete-proximity_placement_group
	{
		_, err := proximityPlacementGroupsClient.Delete(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
	}

	// From step Create_a_vm_with_Host_Encryption_using_encryptionAtHost_property
	virtualMachinesClient := test.NewVirtualMachinesClient(subscriptionId, cred, nil)
	{
		fakeStepVar := "signalrswaggertest6"
		virtualMachinesClientCreateOrUpdatePollerResponse, err := virtualMachinesClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			"myVM",
			test.VirtualMachine{
				Location: to.StringPtr(location),
				Plan: &test.Plan{
					Name:      to.StringPtr(fakeStepVar),
					Product:   to.StringPtr("windows-data-science-vm"),
					Publisher: to.StringPtr("microsoft-ads"),
				},
				Properties: &test.VirtualMachineProperties{
					HardwareProfile: &test.HardwareProfile{
						VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
					},
					NetworkProfile: &test.NetworkProfile{
						NetworkInterfaces: []*test.NetworkInterfaceReference{
							{
								ID: to.StringPtr("/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
								Properties: &test.NetworkInterfaceReferenceProperties{
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.OSProfile{
						AdminPassword: to.StringPtr("{your-password}"),
						AdminUsername: to.StringPtr("{your-username}"),
						ComputerName:  to.StringPtr("myVM"),
					},
					SecurityProfile: &test.SecurityProfile{
						EncryptionAtHost: to.BoolPtr(true),
					},
					StorageProfile: &test.StorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("windows-data-science-vm"),
							Publisher: to.StringPtr(fakeScenarioVar),
							SKU:       to.StringPtr("windows2016"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.OSDisk{
							Name:         to.StringPtr("myVMosdisk"),
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.ManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		response, err := virtualMachinesClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", response.VirtualMachinesClientCreateOrUpdateResult)
	}
}
func scenarioMicrosoftSignalrserviceDeleteonly(t *testing.T) {
	// From step Delete_proximity_placement_group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, nil)
	{
		_, err := proximityPlacementGroupsClient.Delete(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
	}
}

func cleanup(t *testing.T) {
}
