using Microsoft.ApplicationInsights.Channel;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;

namespace Azure.Sdk.Tools.PipelineWitness.ApplicationInsights
{
    public class BlobNotFoundTelemetryProcessor : ITelemetryProcessor
    {
        private readonly ITelemetryProcessor next;

        // next will point to the next TelemetryProcessor in the chain.
        public BlobNotFoundTelemetryProcessor(ITelemetryProcessor next)
        {
            this.next = next;
        }
  
        public void Process(ITelemetry telemetry)
        {
            switch (telemetry)
            {
                case DependencyTelemetry { Success: false, Type: "Azure blob" or "Microsoft.Storage" } blobRequestTelemetry:
                {
                    blobRequestTelemetry.Properties.TryGetValue("Error", out var errorProperty);

                    var isNotFound = blobRequestTelemetry.ResultCode is "404" or "409"
                                     || (blobRequestTelemetry.ResultCode == "" && errorProperty?.Contains("Status: 404") == true);

                    if (isNotFound)
                    {
                        // Set implicit 404 and 409 failures from azure storage to success
                        blobRequestTelemetry.Success = true;
                        blobRequestTelemetry.Properties.Remove("Error");
                    }

                    break;
                }
                case TraceTelemetry traceTelemetry:
                {
                    // Avoid emitting autogenerated traces that report blob not found responses as errors
                    if (traceTelemetry.Properties.TryGetValue("CategoryName", out var categoryName) && categoryName == "Azure.Core" &&
                        traceTelemetry.Properties.TryGetValue("EventName", out var eventName) && eventName == "ErrorResponse" && 
                        traceTelemetry.Message.Contains("404 The specified blob does not exist"))
                    {
                        return;
                    }

                    break;
                }
            }

            this.next.Process(telemetry);
        }
    }
}
