{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{# actual template starts here #}
# coding=utf-8
{{ code_model.options['license_header'] }}

{{ imports }}

{{ serializer.class_definition(async_mode) }}
    """{{ code_model.description }}

    {{ op_tools.serialize_with_wrap(serializer.property_descriptions(async_mode), "\n     ") | indent }}
    {{ serializer.init_signature_and_response_type_annotation(async_mode) | indent }}
        {% if not code_model.service_client.base_url %}
        base_url = {{ keywords.escape_str(code_model.service_client.custom_base_url) }}
        {% else %}
        if not base_url:
            base_url = {{ keywords.escape_str(code_model.service_client.base_url) }}
        {% endif %}
        self._config = {{ code_model.class_name }}Configuration({{ code_model.service_client.config_initialization }})
        self._client = {{ code_model.service_client.pipeline_class(async_mode) }}(base_url=base_url, config=self._config, **kwargs)

        {{ op_tools.serialize(serializer.serializers_and_operation_groups_properties()) | indent(8) }}

    {% set http_response = keywords.async_class + "HttpResponse" %}
    {{ serializer.send_request_signature_and_response_type_annotation(async_mode) | indent }}
        {{ op_tools.serialize(serializer.send_request_description(async_mode)) | indent(8) }}
        request_copy = deepcopy(request)
        {% if code_model.global_parameters.path %}
        {{ op_tools.path_format_arguments(code_model.global_parameters.path)|indent(8) }}
        {{ op_tools.format_path_format_arguments(url_name="request_copy.url")|indent(8) }}
        {% else %}
        request_copy.url = self._client.format_url(request_copy.url)
        {% endif %}
        return self._client.send_request(request_copy, **kwargs)

    {{ keywords.def }} close(self){{ " -> None" if async_mode else "" }}:
        {% if not async_mode %}
        # type: () -> None
        {% endif %}
        {{ keywords.await }}self._client.close()

    {{ keywords.def }} __{{ keywords.async_prefix }}enter__(self){{ (" -> \"" + code_model.class_name + "\"") if async_mode else "" }}:
        {% if not async_mode %}
        # type: () -> {{ code_model.class_name }}
        {% endif %}
        {{ keywords.await }}self._client.__{{ keywords.async_prefix }}enter__()
        return self

    {{ keywords.def }} __{{ keywords.async_prefix }}exit__(self, *exc_details){{ " -> None" if async_mode else "" }}:
        {% if not async_mode %}
        # type: (Any) -> None
        {% endif %}
        {{ keywords.await }}self._client.__{{ keywords.async_prefix }}exit__(*exc_details)
