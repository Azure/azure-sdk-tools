@page "{id}/{revisionId?}"
@model APIViewWeb.Pages.Assemblies.ReviewPageModel
@using APIViewWeb.Helpers
@using APIViewWeb.LeanModels;
@using APIViewWeb.Models
@{
    Layout = "Shared/_Layout";
    ViewData["Title"] = Model.ReviewContent.Review.PackageName;
    TempData["UserPreference"] = Model.UserPreference;
    TempData["LanguageCssSafeName"] = PageModelHelpers.GetLanguageCssSafeName(Model.ReviewContent.Review.Language);
    TempData["Comments"] = Model.Comments;
    ViewBag.HasSections = Model.ReviewContent.PageHasLoadableSections;
}
@{
    var rightOffCanvasClass = " show-right-offcanvas";
    var leftOffCanvasClass = " show-left-offcanvas";
    var mainContainerLeftClass = " move-main-content-container-left";
    var mainContainerRightClass = " move-main-content-container-right";
    if (Model.UserPreference.HideReviewPageOptions.HasValue && Model.UserPreference.HideReviewPageOptions == true)
    {
        rightOffCanvasClass = String.Empty;
        mainContainerRightClass = String.Empty;
    }
    var mainContainerClass = mainContainerLeftClass + mainContainerRightClass;
}

<div id="left-offcanvas-menu" class="left-offcanvas@(leftOffCanvasClass)">
    <div class="left-offcanvas-menu-content" id="left-offcanvas-menu-content">
        <div class="btn-group-vertical" role="group" aria-label="Vertical button group">
            <a type="button" class="btn btn-lg btn-link mb-2" data-bs-toggle="tooltip" data-bs-placement="right" title="API" active-if="@TempData["page"].Equals("api")"><i class="bi bi-braces"></i></a>
            <a type="button" class="btn btn-lg btn-link mb-2" data-bs-toggle="offcanvas" data-bs-target="#apiRevisions-context" aria-controls="apiRevisions-context"><i class="bi bi-clock-history" data-bs-toggle="tooltip" data-bs-placement="right" title="Revisions"></i></a>
            <a type="button" class="btn btn-lg btn-link mb-2" asp-page="Conversation" asp-route-id="@Model.ReviewContent.Review.Id"><i class="bi bi-chat-left-dots" data-bs-toggle="tooltip" data-bs-placement="right" title="Conversations"></i>
                @if (Model.ReviewContent.ActiveConversationsInActiveAPIRevision > 0)
                {
                    var count = (Model.ReviewContent.ActiveConversationsInActiveAPIRevision > 10) ? "9+" : $"{Model.ReviewContent.ActiveConversationsInActiveAPIRevision}";
                    <span class="position-absolute start translate-middle badge rounded-pill bg-danger" id="jump-to-first-comment">
                        @count
                        <span class="visually-hidden">unread messages</span>
                    </span>                }
            </a>
            <a type="button" class="btn btn-lg btn-link mb-2" asp-page="Samples" asp-route-id="@Model.ReviewContent.Review.Id"><i class="bi bi-puzzle" data-bs-toggle="tooltip" data-bs-placement="right" title="Samples"></i></a>
        </div>
    </div>
</div>
<div id="right-offcanvas-menu" class="right-offcanvas@(rightOffCanvasClass)">
    <div class="right-offcanvas-menu-content" id="right-offcanvas-menu-content">
        <p class="h6">
            <a data-bs-toggle="collapse" href="#approveCollapse" aria-expanded="true" aria-controls="approveCollapse">Approval&nbsp;&nbsp;<i class="fa-solid fa-ellipsis"></i></a>
        </p>
        @{
            var approvalCollapseState = " show";
            if (Request.Cookies.ContainsKey("approveCollapse"))
            {
                if (!Request.Cookies["approveCollapse"].Equals("shown"))
                    approvalCollapseState = String.Empty;
            }
        }
        <ul class="list-group collapse mb-3@(approvalCollapseState)" id="approveCollapse">
            <li class="list-group-item text-center">
                <form asp-resource="@Model.ReviewContent.ActiveAPIRevision" class="form-inline" asp-page-handler="ToggleAPIRevisionApproval" method="post" asp-requirement="@ApproverRequirement.Instance">
                    <input type="hidden" name="revisionId" value="@Model.ReviewContent.ActiveAPIRevision.Id" />
                    @if (Model.ReviewContent.DiffAPIRevision == null || Model.ReviewContent.DiffAPIRevision.Approvers.Any())
                    {
                        @if (Model.ReviewContent.ActiveAPIRevision.Approvers.Contains(User.GetGitHubLogin()))
                        {
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-outline-secondary">Revert API Approval</button>
                            </div>
                        }
                        else
                        {
                            var isActiveRevisionAhead = (Model.ReviewContent.DiffAPIRevision == null)? true: Model.ReviewContent.ActiveAPIRevision.CreatedOn > Model.ReviewContent.DiffAPIRevision.CreatedOn;
                            @if ((Model.ReviewContent.ActiveConversationsInActiveAPIRevision > 0 
                                || Model.ReviewContent.ActiveConversationsInSampleRevisions > 0)
                                && Model.ReviewContent.PreferredApprovers.Contains(User.GetGitHubLogin())
                           && isActiveRevisionAhead)
                            {
                                <span class="small text-muted">Approves the current revision of the API</span>
                                <div class="d-grid gap-2">
                                    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#approveModel">
                                        Approve
                                    </button>
                                </div>
                            }
                            else
                            {
                                @if (Model.ReviewContent.PreferredApprovers.Contains(User.GetGitHubLogin())
                               && isActiveRevisionAhead)
                                {
                                    <span class="small text-muted">Approves the current revision of the API</span>
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-success">Approve</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-outline-secondary" disabled>Cannot Approve</button>
                                    </div>
                                }
                            }
                        }
                    }
                    else
                    {
                        @if (Model.ReviewContent.ActiveAPIRevision.Approvers.Contains(User.GetGitHubLogin()))
                        {
                            <div class="d-grid gap-2" data-bs-placement="bottom" data-bs-toggle="tooltip" title="API review cannot be approved when comparing against unapproved revision.">
                                <button type="submit" class="btn btn-outline-secondary" disabled >
                                    Revert API Approval
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="d-grid gap-2" data-bs-placement="bottom" data-bs-toggle="tooltip" title="API review cannot be approved when comparing against unapproved revision.">
                                <button type="submit" class="btn btn-outline-secondary" disabled>
                                    Approve API
                                </button>
                            </div>
                        }
                    }
                </form>
                @{
                    var approvers = Model.ReviewContent.ActiveAPIRevision.Approvers;
                    @if (approvers.Count() > 0)
                    {
                        <span class="small text-muted">
                            Approved by:
                            @{
                                int i = 0;
                            }
                            @foreach (var approver in approvers)
                            {
                                <a username="@approver">@approver</a>
                                @if (i < (approvers.Count() - 1))
                                {
                                    @Html.Raw(",&nbsp;")
                                    ;
                                }
                                i++;
                            }
                        </span>
                    }
                    else
                    {
                        <span class="small text-muted">Current Revision Approval Pending</span>
                    }
                }
            </li>
            @if (Model.ReviewContent.ActiveAPIRevision.PackageName  != null &&
            !(LanguageServiceHelpers.MapLanguageAliases(new List<string> { "Swagger", "TypeSpec" })).Contains(Model.ReviewContent.Review.Language))
            {
                var reviewIsApproved = Model.ReviewContent.Review.IsApproved;
                string approver = null;
                if (reviewIsApproved)
                {
                    var changeAction = Model.ReviewContent.Review.ChangeHistory.FirstOrDefault(_ => _.ChangeAction == ReviewChangeAction.Approved);
                    if (changeAction != null)
                    {
                        approver = changeAction.ChangedBy;
                    }
                    else
                    {
                        approver = "azure-sdk";
                    }
                }

                @if (!reviewIsApproved)
                {
                    <li class="list-group-item text-center">
                        <form asp-resource="@Model.ReviewContent.Review" class="form-inline" asp-page-handler="ToggleReviewApproval" method="post" asp-requirement="@ApproverRequirement.Instance">
                            <input type="hidden" name="revisionId" value="@Model.ReviewContent.ActiveAPIRevision.Id" />
                            <span class="small mb-2 text-muted">Approves First Release of the package</span>
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-success" title="Package name must be approved before first preview release of a new package.">
                                    Approve First Release
                                </button>
                            </div>
                        </form>
                        <span class="small mt-2 text-muted">First Revision Approval Pending</span>
                    </li>
                }
                else
                {
                    <li class="list-group-item text-center">
                        @if (approver != null)
                        {
                            <span class="small my-1 text-muted">Package has been approved for first release by <a username="@approver">@approver</a></span>
                        }
                        else
                        {
                            <span class="small my-1 text-muted">Package has been approved for first release</span>
                        }
                    </li>
                }
            }
        </ul>
        @* Enables Button for generating AI Review
        
            <p class="h6">
                <a data-bs-toggle="collapse" href="#generateAIReviewCollapse" aria-expanded="true" aria-controls="generateAIReviewCollapse">Generate AI Review&nbsp;&nbsp;<i class="fa-solid fa-ellipsis"></i></a>
            </p>
            var generateAIReviewCollapseState = String.Empty;
            if (Request.Cookies.ContainsKey("generateAIReviewCollapse"))
            {
                if (Request.Cookies["generateAIReviewCollapse"].Equals("shown"))
                    generateAIReviewCollapseState = " show";
            }
            <ul class="list-group collapse mb-3@(generateAIReviewCollapseState)" id="generateAIReviewCollapse">
                <div class="d-grid">
                    <button class="btn btn-outline-primary" asp-page-handler="GenerateAIReview" id="generateAIReviewButton">Generate Review</button>
                </div>  
            </ul>
        *@
        <p class="h6">
            <a data-bs-toggle="collapse" href="#requestReviewersCollapse" aria-expanded="true" aria-controls="requestReviewersCollapse">Request Reviewers&nbsp;&nbsp;<i class="fa-solid fa-ellipsis"></i></a>
        </p>
        @{
            var requestReviewersCollapseState = String.Empty;
            if (Request.Cookies.ContainsKey("requestReviewersCollapse"))
            {
                if (Request.Cookies["requestReviewersCollapse"].Equals("shown"))
                    requestReviewersCollapseState = " show";
            }
        }
        <ul class="list-group collapse mb-3@(requestReviewersCollapseState)" id="requestReviewersCollapse">
            @{
                var anyChecked = false;
            }
            <form asp-resource="@Model.ReviewContent.ActiveAPIRevision" asp-page-handler="RequestReviewers" method="post">
                <input type="hidden" name="apiRevisionId" value="@Model.ReviewContent.ActiveAPIRevision.Id" />
                <li class="list-group-item">
                        <ul class="list-group list-group-flush">
                            @foreach (var approver in Model.ReviewContent.PreferredApprovers)
                            {
                                <li class="list-group-item">
                                    <div class="form-check">
                                    @if (Model.ReviewContent.ActiveAPIRevision.AssignedReviewers != null && Model.ReviewContent.ActiveAPIRevision.AssignedReviewers.Where(a => a.AssingedTo == approver).Any())
                                        {
                                            <input class="form-check-input selectReviewerForRequest" type="checkbox" name="reviewers" value="@approver" id="@(approver)CheckBox" checked>
                                            <label class="form-check-label" for="@(approver)CheckBox">
                                                <img username="@approver" size="28" width="28" class="comment-icon align-self-start mr-2" />
                                                @approver
                                            </label>
                                            anyChecked = true;
                                        }
                                        else
                                        {
                                            <input class="form-check-input selectReviewerForRequest" type="checkbox" name="reviewers" value="@approver" id="@(approver)CheckBox">
                                            <label class="form-check-label" for="@(approver)CheckBox">
                                                <img username="@approver" size="28" width="28" class="comment-icon align-self-start mr-2" />
                                                @approver
                                            </label>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                <li class="list-group-item">
                    <span>
                        @if (anyChecked)
                        {
                            <button class="btn btn-sm btn-outline-primary" id="submitReviewRequest" onclick="document.getElementById('submitRequestForReview').click()" disabled>Request Selected</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-outline-primary" id="submitReviewRequest" onclick="var r = document.getElementsByName('reviewers'); r.forEach((e) => e.checked = true); document.getElementById('submitRequestForReview').click();">Request All</button>
                        }
                        <button type="submit" id="submitRequestForReview" hidden></button>
                    </span>
                </li>
            </form>
        </ul>
        @if (Model.ReviewContent.ActiveAPIRevision.APIRevisionType == APIRevisionType.PullRequest)
        {
            var associatedPRs = await Model.GetAssociatedPullRequest();
            @if (associatedPRs != null && associatedPRs.Count() > 0)
            {
                var associatedPRState = String.Empty;
                if (Request.Cookies.ContainsKey("associatedPRCollapse"))
                {
                    if (Request.Cookies["associatedPRCollapse"].Equals("shown"))
                        associatedPRState = " show";
                }
                <p class="h6">
                    <a data-bs-toggle="collapse" href="#associatedPRCollapse" aria-expanded="true" aria-controls="associatedPRCollapse">Associated Pull Requests&nbsp;&nbsp;<i class="fa-solid fa-ellipsis"></i></a>
                </p>
                <ul class="list-group collapse mb-3@(associatedPRState)" id="associatedPRCollapse">
                    @foreach (var prModel in associatedPRs)
                    {
                        var url = $"https://github.com/{prModel.RepoName}/pull/{prModel.PullRequestNumber}";
                        var txt = $"{prModel.RepoName}/{prModel.PullRequestNumber}";
                        <li class="list-group-item">
                            <a href="@url" target="_blank">@txt</a>
                        </li>
                    }
                </ul>
            } 
        }
        @if (Model.ReviewContent.ActiveAPIRevision.APIRevisionType == APIRevisionType.PullRequest)
        {
            var prsOfAssociatedAPIRevisions = await Model.GetPRsOfAssoicatedReviews();
            @if (prsOfAssociatedAPIRevisions != null && prsOfAssociatedAPIRevisions.Count() > 1)
            {
                var associatedReviewsState = String.Empty;
                if (Request.Cookies.ContainsKey("associatedReviewsCollapse"))
                {
                    if (Request.Cookies["associatedReviewsCollapse"].Equals("shown"))
                        associatedReviewsState = " show";
                }
                <p class="h6">
                    <a data-bs-toggle="collapse" href="#associatedReviewsCollapse" aria-expanded="true" aria-controls="associatedReviewsCollapse">Associated APIRevisions&nbsp;&nbsp;<i class="fa-solid fa-ellipsis"></i></a>
                </p>
                <ul class="list-group collapse mb-3@(associatedReviewsState)" id="associatedReviewsCollapse">
                    @foreach (var pr in prsOfAssociatedAPIRevisions)
                    {
                        if (pr.ReviewId != Model.ReviewContent.Review.Id)
                        {
                            var url = @Url.ActionLink("Review", "Assemblies", new
                            {
                                id = pr.ReviewId,
                                revisionId = pr.APIRevisionId
                            });
                            <li class="list-group-item">
                                <a href="@url" target="_blank">@pr.Language/@pr.PackageName</a>
                            </li>
                        }
                    }
                </ul>
            }
        }
        <p class="h6">
            <a data-bs-toggle="collapse" href="#reviewOptionsCollapse" aria-expanded="true" aria-controls="reviewOptionsCollapse">Review Options&nbsp;&nbsp;<i class="fa-solid fa-ellipsis"></i></a>
        </p>
        @{
            var reviewOptionsCollapseState = " show";
            if (Request.Cookies.ContainsKey("reviewOptionsCollapse"))
            {
                if (!Request.Cookies["reviewOptionsCollapse"].Equals("shown"))
                    reviewOptionsCollapseState = String.Empty;
            }
        }
        <ul class="list-group collapse mb-3@(reviewOptionsCollapseState)" id="reviewOptionsCollapse">
            <li class="list-group-item">
                <div class="form-check form-switch">
                    <form asp-resource="@Model.ReviewContent.Review" class="form-inline" id="reviewSubscribeForm" method="post" asp-page-handler="ToggleSubscribed">
                        @if (PageModelHelpers.GetUserEmail(User) != null)
                        {
                            if (PageModelHelpers.IsUserSubscribed(User, Model.ReviewContent.Review.Subscribers))
                            {
                                <input class="form-check-input" checked type="checkbox" role="switch" id="reviewSubscribeSwitch">
                            }
                            else
                            {
                                <input class="form-check-input" type="checkbox" role="switch" id="reviewSubscribeSwitch">
                            }
                        }
                        else
                        {
                            <input class="form-check-input" type="checkbox" role="switch" disabled id="reviewSubscribeSwitch" data-bs-placement="bottom" data-bs-toggle="tooltip" title="Link a microsoft.com email to your Github account to subscribe">
                        }
                        <label class="form-check-label" for="reviewSubscribeSwitch">Subscribe</label>
                    </form>
                </div>
            </li>
        </ul>
        <p class="h6">
            <a data-bs-toggle="collapse" href="#pageSettingsCollapse" aria-expanded="true" aria-controls="pageSettingsCollapse">Page Settings&nbsp;&nbsp;<i class="fa-solid fa-ellipsis"></i></a>
        </p>
        @{
            var pageSettingsCollapseState = String.Empty;
            if (Request.Cookies.ContainsKey("pageSettingsCollapse"))
            {
                if (Request.Cookies["pageSettingsCollapse"].Equals("shown"))
                    pageSettingsCollapseState = " show";
            }
        }
        <ul class="list-group collapse mb-3@(pageSettingsCollapseState)" id="pageSettingsCollapse">
            <li class="list-group-item">
                <div class="form-check form-switch">
                    @if (Model.UserPreference.ShowComments == true)
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="show-comments-checkbox" checked>
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="show-comments-checkbox">
                    }
                    <label class="form-check-label" for="show-comments-checkbox">Show Comments</label>
                </div>
            </li>
            <li class="list-group-item">
                <div class="form-check form-switch">
                    @if (Model.UserPreference.ShowSystemComments == true)
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="show-system-comments-checkbox" checked>
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="show-system-comments-checkbox">
                    }
                    <label class="form-check-label" for="show-system-comments-checkbox">Show System Comments</label>
                </div>
            </li>
            <li class="list-group-item" id="show-documentation-component">
                <div class="form-check form-switch">
                    @if (Model.ShowDocumentation ?? false)
                    {
                        <input class="form-check-input show-documentation-checkbox" checked type="checkbox" role="switch" id="showDocumentationSwitch">
                    }
                    else
                    {
                        <input class="form-check-input show-documentation-checkbox" type="checkbox" role="switch" id="showDocumentationSwitch">                  
                    }
                    <a class="show-documentation-switch" asp-all-route-data=@Model.GetRoutingData(diffRevisionId: Model.DiffRevisionId, showDocumentation: !(Model.ShowDocumentation ?? false), showDiffOnly: Model.ShowDiffOnly, revisionId: Model.ReviewContent.ActiveAPIRevision.Id)>
                        <label class="form-check-label" for="showDocumentationSwitch">Show Documentation</label>
                    </a>
                </div>
            </li>
            <li class="list-group-item" id="show-hidden-api-component">
                <div class="form-check form-switch">
                    @if (Model.UserPreference.ShowHiddenApis == true)
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="show-hidden-api-checkbox" checked>
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="show-hidden-api-checkbox">
                    }
                    <label class="form-check-label" for="show-hidden-api-checkbok">Show Hidden APIs</label>
                </div>
            </li>
            <li class="list-group-item">
                <div class="form-check form-switch">
                    @if (Model.UserPreference.HideLineNumbers == true)
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="hide-line-numbers">
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="hide-line-numbers" checked>
                    }
                    <label class="form-check-label" for="hide-line-numbers">Show Line Number</label>
                </div>
            </li>
            <li class="list-group-item">
                <div class="form-check form-switch">
                    @if (Model.UserPreference.HideLeftNavigation == true)
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="hide-left-navigation">
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" role="switch" id="hide-left-navigation" checked>
                    }
                    <label class="form-check-label" for="hide-left-navigation">Show Left Navigation</label>
                </div>
            </li>
            @if (!String.IsNullOrEmpty(Model.DiffRevisionId) && Model.ReviewContent.Review.Language != "Swagger")
            {
                <li class="list-group-item">
                    <div class="form-check form-switch">
                        @if (Model.ShowDiffOnly)
                        {
                            <input class="form-check-input show-diffonly-checkbox" checked type="checkbox" role="switch" asp-for="@Model.ShowDiffOnly" id="showDiffOnlySwitch">
                        }
                        else
                        {
                            <input class="form-check-input show-diffonly-checkbox" type="checkbox" role="switch" asp-for="@Model.ShowDiffOnly" id="showDiffOnlySwitch">
                        }
                        <a class="show-diffonly-switch" asp-all-route-data=@Model.GetRoutingData(diffRevisionId: Model.DiffRevisionId, showDiffOnly: !Model.ShowDiffOnly, revisionId: Model.ReviewContent.ActiveAPIRevision.Id)>
                            <label class="form-check-label" for="showDiffOnlySwitch">Show Only Diff</label>
                        </a>
                    </div>
                </li>
            }
        </ul>
        <p class="h6">
            <a data-bs-toggle="collapse" href="#apiRevisionOptionsCollapse" aria-expanded="true" aria-controls="apiRevisionOptionsCollapse">API Revision Options&nbsp;&nbsp;<i class="fa-solid fa-ellipsis"></i></a>
        </p>
        @{
            var apiRevisionOptionsCollapseState = " show";
            if (Request.Cookies.ContainsKey("apiRevisionOptionsCollapse"))
            {
                if (!Request.Cookies["apiRevisionOptionsCollapse"].Equals("shown"))
                    apiRevisionOptionsCollapseState = String.Empty;
            }
        }
        <ul class="list-group collapse mb-3@(apiRevisionOptionsCollapseState)" id="apiRevisionOptionsCollapse">
            <li class="list-group-item">
                <div class="form-check form-switch">
                    <form asp-resource="@Model.ReviewContent.ActiveAPIRevision" class="form-inline" id="reviewViewedForm" method="post" asp-page-handler="ToggleViewed">
                        <input type="hidden" name="revisionId" value="@Model.ReviewContent.ActiveAPIRevision.Id" />
                        @if (Model.ReviewContent.ActiveAPIRevision.ViewedBy.Contains(User.GetGitHubLogin()))
                        {
                            <input class="form-check-input" checked type="checkbox" role="switch" id="reviewViewedSwitch">
                        }
                        else
                        {
                            <input class="form-check-input" type="checkbox" role="switch" id="reviewViewedSwitch">
                        }

                        <label class="form-check-label" for="reviewViewedSwitch">Mark as Viewed</label>
                    </form>
                </div>
            </li>
            <li class="list-group-item">
                <div class="approval-list-group" id="approval-list-group"
                    <h6>Revision History</h6><br />
                        @if (Model.ReviewContent.ActiveAPIRevision.ChangeHistory.Any())
                        {
                            <ul class="approval-list-group" id="approval-list-group">
                            @foreach (var change in Model.ReviewContent.ActiveAPIRevision.ChangeHistory)
                            {
                                <li class="approval-list-group-item">
                                    <div class="d-flex align-items-start">
                                        <div class="me-2">
                                            @if (change.ChangeAction.ToString() == "Created")
                                            {
                                                <i class="bi bi-plus-circle-fill created"></i>
                                            }
                                            else if (change.ChangeAction.ToString() == "Approved")
                                            {
                                                <i class="bi bi-check-circle-fill approved"></i>
                                            }
                                            else if (change.ChangeAction.ToString() == "ApprovalReverted")
                                            {
                                                <i class="bi bi-arrow-left-circle-fill approvalreverted"></i>
                                            }
                                            else if (change.ChangeAction.ToString() == "Deleted")
                                            {
                                                <i class="bi bi-backspace-fill deleted"></i>
                                            }
                                            else if (change.ChangeAction.ToString() == "UnDeleted")
                                            {
                                                <i class="bi bi-plus-circle-fill undeleted"></i>
                                            }
                                        </div>
                                        <div>
                                            @if (change.ChangeAction.ToString() == "Created")
                                            {
                                                <span>Revision Created</span><br />                                           
                                                <span>@change.ChangedOn</span>
                                            }
                                            else if (change.ChangeAction.ToString() == "Approved")
                                            {
                                                <span>Approved</span><br />                                                
                                                <span>@change.ChangedOn</span><br />
                                                <span>@change.ChangedBy</span>
                                            }
                                            else if (change.ChangeAction.ToString() == "ApprovalReverted")
                                            {
                                                <span>Reverted by: @change.ChangedBy</span><br />
                                                <span>On: @change.ChangedOn</span>
                                            }
                                            else if (change.ChangeAction.ToString() == "Deleted")
                                            {
                                                <span>Deleted by: @change.ChangedBy</span><br />
                                                <span>On: @change.ChangedOn</span>
                                            }
                                            else if (change.ChangeAction.ToString() == "UnDeleted")
                                            {
                                                <span>UnDeleted by: @change.ChangedBy</span><br />
                                                <span>On: @change.ChangedOn</span>
                                            }
                                        </div>
                                    </div>
                                </li>
                            }    
                            </ul>
                        } 
                </div>
            </li>
        </ul>
    </div>
</div>







<div class="container-fluid mx-0 px-0 sub-header-content">
    <div class="row px-3 py-2 border-bottom" id="review-info-bar">
        <partial name="Shared/_ReviewBadge" model="(Model.ReviewContent.Review, Model.ReviewContent.ActiveAPIRevision, Model.ReviewContent.DiffAPIRevision, Model.UserPreference)" />
    </div>
</div>

<div class="container-fluid pt-2@(mainContainerClass)" id="review-main-container">
    <div class="row g-2" data-review-id="@Model.ReviewContent.Review.Id" data-revision-id="@Model.ReviewContent.ActiveAPIRevision.Id" data-language="@Model.ReviewContent.Review.Language">
        @{
            var reviewLeftDisplay = String.Empty;
            var reviewRightSize = "10";
            if (Model.UserPreference.HideLeftNavigation == true)
            {
                reviewLeftDisplay = "d-none";
                reviewRightSize = "12";
            }

            var reviewApprovedClass = (Model.ReviewContent.ActiveAPIRevision.Approvers.Count() > 0) ? "review-approved" : "border rounded-1";
        }
        <div id="review-left" class="col-2 @reviewApprovedClass @reviewLeftDisplay">
            <div>
                <div class="namespace-view">
                    @if (Model.ReviewContent.Navigation != null)
                    {
                        <partial name="Shared/Navigation" model="Model.ReviewContent.Navigation" />
                    }
                </div>
            </div>
        </div>

        <div id="review-right" class="col-@reviewRightSize @reviewApprovedClass">
            @if (!string.IsNullOrEmpty(Model.NotificationMessage))
            {
                <div class="alert alert-warning alert-dismissible fade show m-1" role="alert">
                    @Model.NotificationMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            <table class="code-window">
                <tbody>
                    @foreach (var line in Model.ReviewContent.codeLines)
                    {
                        <partial name="_CodeLine" model="@line" />
                    }
                </tbody>
            </table>
            <partial name="_CrossLanguageViewPartial" model="@Model.ReviewContent.CrossLanguageViewContent" />
        </div>
    </div>
    @if (Model.ReviewContent.CrossLanguageViewContent.Any())
    {
        <div class="row d-none" id="cross-language-code-lines">
            @foreach (var language in Model.ReviewContent.CrossLanguageViewContent.Keys)
            {
                var reviewcontent = Model.ReviewContent.CrossLanguageViewContent[language];
                var langId = PageModelHelpers.GetLanguageCssSafeName(language);
                <table data-language="@langId" data-review-id="@reviewcontent.Review.Id" data-revision-id="@reviewcontent.ActiveAPIRevision.Id">
                    <tbody>
                        @foreach (var line in reviewcontent.codeLines)
                        {
                            <partial name="_CodeLine" model="@line" />
                        }
                    </tbody>
                </table>
            }
        </div>
    }

    <form asp-resource="@Model.ReviewContent.ActiveAPIRevision" class="form-inline" asp-page-handler="ToggleAPIRevisionApproval" method="post" asp-requirement="@ApproverRequirement.Instance">
        <input type="hidden" name="revisionId" value="@Model.ReviewContent.ActiveAPIRevision.Id" />
        <div class="modal fade" id="approveModel" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Approve Review</h5>
                    </div>
                    <div class="modal-body">
                        <p> There are still active conversations. <br /> Would you like to review these first? </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <a asp-page="Conversation" asp-route-id="@Model.ReviewContent.Review.Id">
                            <div class="btn btn-outline-secondary">Check Conversations</div>
                        </a>
                        <button type="submit" class="btn btn-success">
                            Approve API Anyway
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </form>
    <partial name="_CommentFormPartial" model="@Model.ReviewContent.TaggableUsers" /> 
</div>

<partial name="Shared/_AddAPIRevisionsPartial" model="Model.ReviewContent.Review" />

<div class="offcanvas offcanvas-end border-start" tabindex="-1" id="apiRevisions-context" aria-labelledby="apiRevisions-context-label">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="apiRevisions-context-label"><a asp-page="Revisions" asp-route-id="@Model.ReviewContent.Review.Id">Revisions</a></h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <partial name="Shared/_APIRevisionsPartial" model="(Model.ReviewContent.Review, Model.ReviewContent.APIRevisions, Model.ReviewContent.ActiveAPIRevision, Model.ReviewContent.DiffAPIRevision)" />
    </div>
</div>