//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package test_test

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServices_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Get"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.ServiceResource{
		Name:     to.Ptr("myservice"),
		Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &test.ClusterResourceProperties{
			NetworkProfile: &test.NetworkProfile{
				OutboundIPs: &test.NetworkProfileOutboundIPs{
					PublicIPs: []*string{
						to.Ptr("20.39.3.173"),
						to.Ptr("40.64.67.13")},
				},
				RequiredTraffics: []*test.RequiredTraffic{
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](1194),
						Protocol: to.Ptr("UDP"),
					},
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](9000),
						Protocol: to.Ptr("TCP"),
					}},
			},
			ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
			ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
		},
		SKU: &test.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ServiceResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		test.ServiceResource{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &test.ClusterResourceProperties{},
			SKU: &test.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&test.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json: %v", err)
	}
	// Response check
	exampleRes := test.ServiceResource{
		Name:     to.Ptr("myservice"),
		Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &test.ClusterResourceProperties{
			NetworkProfile: &test.NetworkProfile{
				OutboundIPs: &test.NetworkProfileOutboundIPs{
					PublicIPs: []*string{
						to.Ptr("20.39.3.173"),
						to.Ptr("40.64.67.13")},
				},
				RequiredTraffics: []*test.RequiredTraffic{
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](1194),
						Protocol: to.Ptr("UDP"),
					},
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](9000),
						Protocol: to.Ptr("TCP"),
					}},
			},
			ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
			ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
		},
		SKU: &test.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ServiceResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CreateOrUpdate_VNetInjection"},
	})
	client, err = test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		test.ServiceResource{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &test.ClusterResourceProperties{
				NetworkProfile: &test.NetworkProfile{
					AppNetworkResourceGroup:            to.Ptr("my-app-network-rg"),
					AppSubnetID:                        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
					ServiceCidr:                        to.Ptr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
					ServiceRuntimeNetworkResourceGroup: to.Ptr("my-service-runtime-network-rg"),
					ServiceRuntimeSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
				},
			},
			SKU: &test.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&test.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json: %v", err)
	}
	// Response check
	exampleRes = test.ServiceResource{
		Name:     to.Ptr("myservice"),
		Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &test.ClusterResourceProperties{
			NetworkProfile: &test.NetworkProfile{
				AppNetworkResourceGroup: to.Ptr("my-app-network-rg"),
				AppSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps"),
				OutboundIPs: &test.NetworkProfileOutboundIPs{
					PublicIPs: []*string{
						to.Ptr("40.64.67.13")},
				},
				RequiredTraffics: []*test.RequiredTraffic{
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](1194),
						Protocol: to.Ptr("UDP"),
					},
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](9000),
						Protocol: to.Ptr("TCP"),
					}},
				ServiceCidr:                        to.Ptr("10.8.0.0/16,10.244.0.0/16,10.245.0.1/16"),
				ServiceRuntimeNetworkResourceGroup: to.Ptr("my-service-runtime-network-rg"),
				ServiceRuntimeSubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"),
			},
			ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
			ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
		},
		SKU: &test.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ServiceResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Delete"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		&test.ServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Delete.json: %v", err)
	}
}

func TestServices_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_Update"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		test.ServiceResource{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &test.ClusterResourceProperties{},
			SKU: &test.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&test.ServicesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json: %v", err)
	}
	// Response check
	exampleRes := test.ServiceResource{
		Name:     to.Ptr("myservice"),
		Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Properties: &test.ClusterResourceProperties{
			NetworkProfile: &test.NetworkProfile{
				OutboundIPs: &test.NetworkProfileOutboundIPs{
					PublicIPs: []*string{
						to.Ptr("20.39.3.173"),
						to.Ptr("40.64.67.13")},
				},
				RequiredTraffics: []*test.RequiredTraffic{
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](443),
						Protocol: to.Ptr("TCP"),
					},
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](1194),
						Protocol: to.Ptr("UDP"),
					},
					{
						Direction: to.Ptr(test.TrafficDirectionOutbound),
						IPs: []*string{
							to.Ptr("20.62.211.25"),
							to.Ptr("52.188.47.226")},
						Port:     to.Ptr[int32](9000),
						Protocol: to.Ptr("TCP"),
					}},
			},
			ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
			ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
		},
		SKU: &test.SKU{
			Name: to.Ptr("S0"),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ServiceResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_ListTestKeys(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListTestKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_ListTestKeys"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.ListTestKeys(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListTestKeys.json: %v", err)
	}
	// Response check
	exampleRes := test.Keys{
		Enabled:               to.Ptr(true),
		PrimaryKey:            to.Ptr("<primaryKey>"),
		PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
		SecondaryKey:          to.Ptr("<secondaryKey>"),
		SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
	}
	if !reflect.DeepEqual(exampleRes, res.Keys) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Keys)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListTestKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_RegenerateTestKey(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_RegenerateTestKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_RegenerateTestKey"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.RegenerateTestKey(ctx,
		"myResourceGroup",
		"myservice",
		test.RegenerateTestKeyRequestPayload{
			KeyType: to.Ptr(test.TestKeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_RegenerateTestKey.json: %v", err)
	}
	// Response check
	exampleRes := test.Keys{
		Enabled:               to.Ptr(true),
		PrimaryKey:            to.Ptr("<primaryKey>"),
		PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
		SecondaryKey:          to.Ptr("<secondaryKey>"),
		SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
	}
	if !reflect.DeepEqual(exampleRes, res.Keys) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Keys)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_RegenerateTestKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_DisableTestEndpoint(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_DisableTestEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_DisableTestEndpoint"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	_, err = client.DisableTestEndpoint(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_DisableTestEndpoint.json: %v", err)
	}
}

func TestServices_EnableTestEndpoint(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_EnableTestEndpoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_EnableTestEndpoint"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.EnableTestEndpoint(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_EnableTestEndpoint.json: %v", err)
	}
	// Response check
	exampleRes := test.Keys{
		Enabled:               to.Ptr(true),
		PrimaryKey:            to.Ptr("<primaryKey>"),
		PrimaryTestEndpoint:   to.Ptr("<primaryTestEndpoint>"),
		SecondaryKey:          to.Ptr("<secondaryKey>"),
		SecondaryTestEndpoint: to.Ptr("<secondaryTestEndpoint>"),
	}
	if !reflect.DeepEqual(exampleRes, res.Keys) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Keys)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_EnableTestEndpoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_CheckNameAvailability"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		test.NameAvailabilityParameters{
			Name: to.Ptr("myservice"),
			Type: to.Ptr("Microsoft.AppPlatform/Spring"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CheckNameAvailability.json: %v", err)
	}
	// Response check
	exampleRes := test.NameAvailability{
		Message:       to.Ptr("The name is already used."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr("AlreadyExists"),
	}
	if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NameAvailability)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_ListBySubscription(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_ListBySubscription"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.ServiceResourceList{
			Value: []*test.ServiceResource{
				{
					Name:     to.Ptr("myservice"),
					Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Properties: &test.ClusterResourceProperties{
						NetworkProfile: &test.NetworkProfile{
							OutboundIPs: &test.NetworkProfileOutboundIPs{
								PublicIPs: []*string{
									to.Ptr("20.39.3.173"),
									to.Ptr("40.64.67.13")},
							},
							RequiredTraffics: []*test.RequiredTraffic{
								{
									Direction: to.Ptr(test.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("TCP"),
								},
								{
									Direction: to.Ptr(test.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](1194),
									Protocol: to.Ptr("UDP"),
								},
								{
									Direction: to.Ptr(test.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](9000),
									Protocol: to.Ptr("TCP"),
								}},
						},
						ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
						ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
					},
					SKU: &test.SKU{
						Name: to.Ptr("S0"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Services_List"},
	})
	client, err := test.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.List("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.ServiceResourceList{
			Value: []*test.ServiceResource{
				{
					Name:     to.Ptr("myservice"),
					Type:     to.Ptr("Microsoft.AppPlatform/Spring"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Properties: &test.ClusterResourceProperties{
						NetworkProfile: &test.NetworkProfile{
							OutboundIPs: &test.NetworkProfileOutboundIPs{
								PublicIPs: []*string{
									to.Ptr("20.39.3.173"),
									to.Ptr("40.64.67.13")},
							},
							RequiredTraffics: []*test.RequiredTraffic{
								{
									Direction: to.Ptr(test.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](443),
									Protocol: to.Ptr("TCP"),
								},
								{
									Direction: to.Ptr(test.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](1194),
									Protocol: to.Ptr("UDP"),
								},
								{
									Direction: to.Ptr(test.TrafficDirectionOutbound),
									IPs: []*string{
										to.Ptr("20.62.211.25"),
										to.Ptr("52.188.47.226")},
									Port:     to.Ptr[int32](9000),
									Protocol: to.Ptr("TCP"),
								}},
						},
						ProvisioningState: to.Ptr(test.ProvisioningStateSucceeded),
						ServiceID:         to.Ptr("12345678abcd1234abcd12345678abcd"),
					},
					SKU: &test.SKU{
						Name: to.Ptr("S0"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Services_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigServers_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_Get"},
	})
	client, err := test.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.ConfigServerResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
		Properties: &test.ConfigServerProperties{
			ConfigServer: &test.ConfigServerSettings{
				GitProperty: &test.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
			ProvisioningState: to.Ptr(test.ConfigServerStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigServerResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestConfigServers_UpdatePut(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_UpdatePut"},
	})
	client, err := test.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		test.ConfigServerResource{
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						Label: to.Ptr("master"),
						SearchPaths: []*string{
							to.Ptr("/")},
						URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
					},
				},
			},
		},
		&test.ConfigServersClientBeginUpdatePutOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json: %v", err)
	}
	// Response check
	exampleRes := test.ConfigServerResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
		Properties: &test.ConfigServerProperties{
			ConfigServer: &test.ConfigServerSettings{
				GitProperty: &test.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
			ProvisioningState: to.Ptr(test.ConfigServerStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigServerResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestConfigServers_UpdatePatch(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_UpdatePatch"},
	})
	client, err := test.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdatePatch(ctx,
		"myResourceGroup",
		"myservice",
		test.ConfigServerResource{
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						Label: to.Ptr("master"),
						SearchPaths: []*string{
							to.Ptr("/")},
						URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
					},
				},
			},
		},
		&test.ConfigServersClientBeginUpdatePatchOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json: %v", err)
	}
	// Response check
	exampleRes := test.ConfigServerResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/configServers"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/configServers/default"),
		Properties: &test.ConfigServerProperties{
			ConfigServer: &test.ConfigServerSettings{
				GitProperty: &test.ConfigServerGitProperty{
					Label: to.Ptr("master"),
					SearchPaths: []*string{
						to.Ptr("/")},
					URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
				},
			},
			ProvisioningState: to.Ptr(test.ConfigServerStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigServerResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigServerResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_UpdatePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestConfigServers_Validate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigServers_Validate"},
	})
	client, err := test.NewConfigServersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginValidate(ctx,
		"myResourceGroup",
		"myservice",
		test.ConfigServerSettings{
			GitProperty: &test.ConfigServerGitProperty{
				Label: to.Ptr("master"),
				SearchPaths: []*string{
					to.Ptr("/")},
				URI: to.Ptr("https://github.com/fake-user/fake-repository.git"),
			},
		},
		&test.ConfigServersClientBeginValidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json: %v", err)
	}
	// Response check
	exampleRes := test.ConfigServerSettingsValidateResult{
		IsValid: to.Ptr(true),
	}
	if !reflect.DeepEqual(exampleRes, res.ConfigServerSettingsValidateResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ConfigServerSettingsValidateResult)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/ConfigServers_Validate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestMonitoringSettings_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_Get"},
	})
	client, err := test.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.MonitoringSettingResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
		Properties: &test.MonitoringSettingProperties{
			AppInsightsAgentVersions: &test.ApplicationInsightsAgentVersions{
				Java: to.Ptr("3.0.0"),
			},
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			ProvisioningState:             to.Ptr(test.MonitoringSettingStateSucceeded),
			TraceEnabled:                  to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestMonitoringSettings_UpdatePut(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_UpdatePut"},
	})
	client, err := test.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdatePut(ctx,
		"myResourceGroup",
		"myservice",
		test.MonitoringSettingResource{
			Properties: &test.MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Ptr[float64](10),
				TraceEnabled:                  to.Ptr(true),
			},
		},
		&test.MonitoringSettingsClientBeginUpdatePutOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json: %v", err)
	}
	// Response check
	exampleRes := test.MonitoringSettingResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
		Properties: &test.MonitoringSettingProperties{
			AppInsightsAgentVersions: &test.ApplicationInsightsAgentVersions{
				Java: to.Ptr("3.0.0"),
			},
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			ProvisioningState:             to.Ptr(test.MonitoringSettingStateSucceeded),
			TraceEnabled:                  to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestMonitoringSettings_UpdatePatch(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoringSettings_UpdatePatch"},
	})
	client, err := test.NewMonitoringSettingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdatePatch(ctx,
		"myResourceGroup",
		"myservice",
		test.MonitoringSettingResource{
			Properties: &test.MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
				AppInsightsSamplingRate:       to.Ptr[float64](10),
				TraceEnabled:                  to.Ptr(true),
			},
		},
		&test.MonitoringSettingsClientBeginUpdatePatchOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json: %v", err)
	}
	// Response check
	exampleRes := test.MonitoringSettingResource{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/monitoringSettings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/monitoringSettings/default"),
		Properties: &test.MonitoringSettingProperties{
			AppInsightsAgentVersions: &test.ApplicationInsightsAgentVersions{
				Java: to.Ptr("3.0.0"),
			},
			AppInsightsInstrumentationKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			AppInsightsSamplingRate:       to.Ptr[float64](10),
			ProvisioningState:             to.Ptr(test.MonitoringSettingStateSucceeded),
			TraceEnabled:                  to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.MonitoringSettingResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.MonitoringSettingResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/MonitoringSettings_UpdatePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApps_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Get"},
	})
	client, err := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		&test.AppsClientGetOptions{SyncStatus: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.AppResource{
		Name: to.Ptr("myapp"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
		Identity: &test.ManagedIdentityProperties{
			Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("principalid"),
			TenantID:    to.Ptr("tenantid"),
		},
		Location: to.Ptr("eastus"),
		Properties: &test.AppResourceProperties{
			ActiveDeploymentName: to.Ptr("mydeployment1"),
			EnableEndToEndTLS:    to.Ptr(false),
			Fqdn:                 to.Ptr("myapp.mydomain.com"),
			HTTPSOnly:            to.Ptr(false),
			PersistentDisk: &test.PersistentDisk{
				MountPath: to.Ptr("/mypersistentdisk"),
				SizeInGB:  to.Ptr[int32](2),
				UsedInGB:  to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(test.AppResourceProvisioningStateSucceeded),
			Public:            to.Ptr(true),
			TemporaryDisk: &test.TemporaryDisk{
				MountPath: to.Ptr("/mytemporarydisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
			URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.AppResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AppResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApps_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_CreateOrUpdate"},
	})
	client, err := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		test.AppResource{
			Location: to.Ptr("eastus"),
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.Ptr("mydeployment1"),
				EnableEndToEndTLS:    to.Ptr(false),
				Fqdn:                 to.Ptr("myapp.mydomain.com"),
				HTTPSOnly:            to.Ptr(false),
				PersistentDisk: &test.PersistentDisk{
					MountPath: to.Ptr("/mypersistentdisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
				Public: to.Ptr(true),
				TemporaryDisk: &test.TemporaryDisk{
					MountPath: to.Ptr("/mytemporarydisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
			},
		},
		&test.AppsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json: %v", err)
	}
	// Response check
	exampleRes := test.AppResource{
		Name: to.Ptr("myapp"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
		Identity: &test.ManagedIdentityProperties{
			Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("principalid"),
			TenantID:    to.Ptr("tenantid"),
		},
		Location: to.Ptr("eastus"),
		Properties: &test.AppResourceProperties{
			ActiveDeploymentName: to.Ptr("mydeployment1"),
			EnableEndToEndTLS:    to.Ptr(false),
			Fqdn:                 to.Ptr("myapp.mydomain.com"),
			HTTPSOnly:            to.Ptr(false),
			PersistentDisk: &test.PersistentDisk{
				MountPath: to.Ptr("/mypersistentdisk"),
				SizeInGB:  to.Ptr[int32](2),
				UsedInGB:  to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(test.AppResourceProvisioningStateSucceeded),
			Public:            to.Ptr(true),
			TemporaryDisk: &test.TemporaryDisk{
				MountPath: to.Ptr("/mytemporarydisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
			URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.AppResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AppResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApps_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Delete"},
	})
	client, err := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		&test.AppsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Delete.json: %v", err)
	}
}

func TestApps_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Update"},
	})
	client, err := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		test.AppResource{
			Identity: &test.ManagedIdentityProperties{
				Type: to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			},
			Location: to.Ptr("eastus"),
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.Ptr("mydeployment1"),
				EnableEndToEndTLS:    to.Ptr(false),
				Fqdn:                 to.Ptr("myapp.mydomain.com"),
				HTTPSOnly:            to.Ptr(false),
				PersistentDisk: &test.PersistentDisk{
					MountPath: to.Ptr("/mypersistentdisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
				Public: to.Ptr(true),
				TemporaryDisk: &test.TemporaryDisk{
					MountPath: to.Ptr("/mytemporarydisk"),
					SizeInGB:  to.Ptr[int32](2),
				},
			},
		},
		&test.AppsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json: %v", err)
	}
	// Response check
	exampleRes := test.AppResource{
		Name: to.Ptr("myapp"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
		Identity: &test.ManagedIdentityProperties{
			Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("principalid"),
			TenantID:    to.Ptr("tenantid"),
		},
		Location: to.Ptr("eastus"),
		Properties: &test.AppResourceProperties{
			ActiveDeploymentName: to.Ptr("mydeployment1"),
			EnableEndToEndTLS:    to.Ptr(false),
			Fqdn:                 to.Ptr("myapp.mydomain.com"),
			HTTPSOnly:            to.Ptr(false),
			PersistentDisk: &test.PersistentDisk{
				MountPath: to.Ptr("/mypersistentdisk"),
				SizeInGB:  to.Ptr[int32](2),
				UsedInGB:  to.Ptr[int32](1),
			},
			ProvisioningState: to.Ptr(test.AppResourceProvisioningStateSucceeded),
			Public:            to.Ptr(true),
			TemporaryDisk: &test.TemporaryDisk{
				MountPath: to.Ptr("/mytemporarydisk"),
				SizeInGB:  to.Ptr[int32](2),
			},
			URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.AppResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AppResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApps_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_List"},
	})
	client, err := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.List("myResourceGroup",
		"myservice",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.AppResourceCollection{
			Value: []*test.AppResource{
				{
					Name: to.Ptr("myapp"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp"),
					Identity: &test.ManagedIdentityProperties{
						Type:        to.Ptr(test.ManagedIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("principalid"),
						TenantID:    to.Ptr("tenantid"),
					},
					Location: to.Ptr("eastus"),
					Properties: &test.AppResourceProperties{
						ActiveDeploymentName: to.Ptr("mydeployment1"),
						EnableEndToEndTLS:    to.Ptr(false),
						Fqdn:                 to.Ptr("myapp.mydomain.com"),
						HTTPSOnly:            to.Ptr(false),
						PersistentDisk: &test.PersistentDisk{
							MountPath: to.Ptr("/mypersistentdisk"),
							SizeInGB:  to.Ptr[int32](2),
							UsedInGB:  to.Ptr[int32](1),
						},
						ProvisioningState: to.Ptr(test.AppResourceProvisioningStateSucceeded),
						Public:            to.Ptr(true),
						TemporaryDisk: &test.TemporaryDisk{
							MountPath: to.Ptr("/mytemporarydisk"),
							SizeInGB:  to.Ptr[int32](2),
						},
						URL: to.Ptr("myapp.myservice.azuremicroservices.io"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_ValidateDomain(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_ValidateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_ValidateDomain"},
	})
	client, err := test.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.ValidateDomain(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		test.CustomDomainValidatePayload{
			Name: to.Ptr("mydomain.io"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_ValidateDomain.json: %v", err)
	}
	// Response check
	exampleRes := test.CustomDomainValidateResult{
		IsValid: to.Ptr(false),
		Message: to.Ptr("Certificate is invalid, please check if it is a self signed cert or if it contains a suitable dns name"),
	}
	if !reflect.DeepEqual(exampleRes, res.CustomDomainValidateResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CustomDomainValidateResult)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Apps_ValidateDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestBindings_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Get"},
	})
	client, err := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.BindingResource{
		Name: to.Ptr("mybinding"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
		Properties: &test.BindingResourceProperties{
			BindingParameters: map[string]interface{}{
				"apiType":      "SQL",
				"databaseName": "db1",
			},
			CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
			ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			ResourceName:        to.Ptr("my-cosmosdb-1"),
			ResourceType:        to.Ptr("Microsoft.DocumentDB"),
			UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BindingResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BindingResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestBindings_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_CreateOrUpdate"},
	})
	client, err := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		test.BindingResource{
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				Key:        to.Ptr("xxxx"),
				ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			},
		},
		&test.BindingsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json: %v", err)
	}
	// Response check
	exampleRes := test.BindingResource{
		Name: to.Ptr("mybinding"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
		Properties: &test.BindingResourceProperties{
			BindingParameters: map[string]interface{}{
				"apiType":      "SQL",
				"databaseName": "db1",
			},
			CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
			ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			ResourceName:        to.Ptr("my-cosmosdb-1"),
			ResourceType:        to.Ptr("Microsoft.DocumentDB"),
			UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BindingResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BindingResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestBindings_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Delete"},
	})
	client, err := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		&test.BindingsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Delete.json: %v", err)
	}
}

func TestBindings_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_Update"},
	})
	client, err := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mybinding",
		test.BindingResource{
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"apiType":      "SQL",
					"databaseName": "db1",
				},
				Key: to.Ptr("xxxx"),
			},
		},
		&test.BindingsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json: %v", err)
	}
	// Response check
	exampleRes := test.BindingResource{
		Name: to.Ptr("mybinding"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
		Properties: &test.BindingResourceProperties{
			BindingParameters: map[string]interface{}{
				"apiType":      "SQL",
				"databaseName": "db1",
			},
			CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
			GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
			ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			ResourceName:        to.Ptr("my-cosmosdb-1"),
			ResourceType:        to.Ptr("Microsoft.DocumentDB"),
			UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.BindingResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.BindingResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestBindings_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Bindings_List"},
	})
	client, err := test.NewBindingsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.BindingResourceCollection{
			Value: []*test.BindingResource{
				{
					Name: to.Ptr("mybinding"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/bindings"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/bindings/mybinding"),
					Properties: &test.BindingResourceProperties{
						BindingParameters: map[string]interface{}{
							"apiType":      "SQL",
							"databaseName": "db1",
						},
						CreatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
						GeneratedProperties: to.Ptr("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=1****6"),
						ResourceID:          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
						ResourceName:        to.Ptr("my-cosmosdb-1"),
						ResourceType:        to.Ptr("Microsoft.DocumentDB"),
						UpdatedAt:           to.Ptr("2019-01-01T12:34:56.000Z"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BindingResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BindingResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Bindings_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Get"},
	})
	client, err := test.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.CertificateResource{
		Name: to.Ptr("mycertificate"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
		Properties: &test.CertificateProperties{
			ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
			CertVersion:  to.Ptr("08a219d06d874795a96db47e06fbb01e"),
			DNSNames: []*string{
				to.Ptr("mydomain.com"),
				to.Ptr("mydomain.net"),
				to.Ptr("mydomain.io")},
			ExpirationDate:   to.Ptr("2019-02-21T07:40:42Z"),
			IssuedDate:       to.Ptr("2019-02-20T07:40:42Z"),
			Issuer:           to.Ptr("mydomain.com"),
			KeyVaultCertName: to.Ptr("mycert"),
			SubjectName:      to.Ptr("mysubjectname"),
			Thumbprint:       to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CertificateResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CertificateResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCertificates_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_CreateOrUpdate"},
	})
	client, err := test.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		test.CertificateResource{
			Properties: &test.CertificateProperties{
				CertVersion:      to.Ptr("08a219d06d874795a96db47e06fbb01e"),
				KeyVaultCertName: to.Ptr("mycert"),
				VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
			},
		},
		&test.CertificatesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json: %v", err)
	}
	// Response check
	exampleRes := test.CertificateResource{
		Name: to.Ptr("mycertificate"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
		Properties: &test.CertificateProperties{
			ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
			CertVersion:  to.Ptr("08a219d06d874795a96db47e06fbb01e"),
			DNSNames: []*string{
				to.Ptr("mydomain.com"),
				to.Ptr("mydomain.net"),
				to.Ptr("mydomain.io")},
			ExpirationDate:   to.Ptr("2019-02-21T07:40:42Z"),
			IssuedDate:       to.Ptr("2019-02-20T07:40:42Z"),
			Issuer:           to.Ptr("mydomain.com"),
			KeyVaultCertName: to.Ptr("mycert"),
			SubjectName:      to.Ptr("mysubjectname"),
			Thumbprint:       to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CertificateResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CertificateResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCertificates_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Delete"},
	})
	client, err := test.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"mycertificate",
		&test.CertificatesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_Delete.json: %v", err)
	}
}

func TestCertificates_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_List"},
	})
	client, err := test.NewCertificatesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.List("myResourceGroup",
		"myService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.CertificateResourceCollection{
			Value: []*test.CertificateResource{
				{
					Name: to.Ptr("mycertificate"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/certificates"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycertificate"),
					Properties: &test.CertificateProperties{
						ActivateDate: to.Ptr("2019-02-22T07:40:42Z"),
						CertVersion:  to.Ptr("08a219d06d874795a96db47e06fbb01e"),
						DNSNames: []*string{
							to.Ptr("mydomain.com"),
							to.Ptr("mydomain.net"),
							to.Ptr("mydomain.io")},
						ExpirationDate:   to.Ptr("2019-02-21T07:40:42Z"),
						IssuedDate:       to.Ptr("2019-02-20T07:40:42Z"),
						Issuer:           to.Ptr("mydomain.com"),
						KeyVaultCertName: to.Ptr("mycert"),
						SubjectName:      to.Ptr("mysubjectname"),
						Thumbprint:       to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
						VaultURI:         to.Ptr("https://myvault.vault.azure.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CertificateResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CertificateResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Certificates_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomDomains_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Get"},
	})
	client, err := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.CustomDomainResource{
		Name: to.Ptr("mydomain.com"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
		Properties: &test.CustomDomainProperties{
			AppName:    to.Ptr("myapp"),
			CertName:   to.Ptr("mycert"),
			Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CustomDomainResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCustomDomains_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_CreateOrUpdate"},
	})
	client, err := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		test.CustomDomainResource{
			Properties: &test.CustomDomainProperties{
				CertName:   to.Ptr("mycert"),
				Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		},
		&test.CustomDomainsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json: %v", err)
	}
	// Response check
	exampleRes := test.CustomDomainResource{
		Name: to.Ptr("mydomain.com"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
		Properties: &test.CustomDomainProperties{
			AppName:    to.Ptr("myapp"),
			CertName:   to.Ptr("mycert"),
			Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CustomDomainResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCustomDomains_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Delete"},
	})
	client, err := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		&test.CustomDomainsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Delete.json: %v", err)
	}
}

func TestCustomDomains_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_Update"},
	})
	client, err := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydomain.com",
		test.CustomDomainResource{
			Properties: &test.CustomDomainProperties{
				CertName:   to.Ptr("mycert"),
				Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
			},
		},
		&test.CustomDomainsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json: %v", err)
	}
	// Response check
	exampleRes := test.CustomDomainResource{
		Name: to.Ptr("mydomain.com"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
		Properties: &test.CustomDomainProperties{
			AppName:    to.Ptr("myapp"),
			CertName:   to.Ptr("mycert"),
			Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CustomDomainResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CustomDomainResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCustomDomains_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomDomains_List"},
	})
	client, err := test.NewCustomDomainsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.CustomDomainResourceCollection{
			Value: []*test.CustomDomainResource{
				{
					Name: to.Ptr("mydomain.com"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/domains"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/domains/mydomain.com"),
					Properties: &test.CustomDomainProperties{
						AppName:    to.Ptr("myapp"),
						CertName:   to.Ptr("mycert"),
						Thumbprint: to.Ptr("934367bf1c97033f877db0f15cb1b586957d3133"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomDomainResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomDomainResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/CustomDomains_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Get(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Get"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Get.json: %v", err)
	}
	// Response check
	exampleRes := test.DeploymentResource{
		Name: to.Ptr("mydeployment"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
		Properties: &test.DeploymentResourceProperties{
			Active:  to.Ptr(false),
			AppName: to.Ptr("myapp"),
			DeploymentSettings: &test.DeploymentSettings{
				CPU: to.Ptr[int32](1),
				EnvironmentVariables: map[string]*string{
					"env": to.Ptr("test"),
				},
				JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
				MemoryInGB:     to.Ptr[int32](3),
				RuntimeVersion: to.Ptr(test.RuntimeVersionJava8),
			},
			Instances: []*test.DeploymentInstance{
				{
					Name:            to.Ptr("instance1"),
					DiscoveryStatus: to.Ptr("pending"),
					StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
					Status:          to.Ptr("Running"),
				}},
			ProvisioningState: to.Ptr(test.DeploymentResourceProvisioningStateSucceeded),
			Source: &test.UserSourceInfo{
				Type:             to.Ptr(test.UserSourceTypeSource),
				ArtifactSelector: to.Ptr("sub-module-1"),
				RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
				Version:          to.Ptr("1.0"),
			},
			Status: to.Ptr(test.DeploymentResourceStatusRunning),
		},
		SKU: &test.SKU{
			Name:     to.Ptr("S0"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DeploymentResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDeployments_CreateOrUpdate(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_CreateOrUpdate"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		test.DeploymentResource{
			Properties: &test.DeploymentResourceProperties{
				DeploymentSettings: &test.DeploymentSettings{
					CPU: to.Ptr[int32](1),
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Ptr[int32](3),
					RuntimeVersion: to.Ptr(test.RuntimeVersionJava8),
				},
				Source: &test.UserSourceInfo{
					Type:             to.Ptr(test.UserSourceTypeSource),
					ArtifactSelector: to.Ptr("sub-module-1"),
					RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.Ptr("1.0"),
				},
			},
		},
		&test.DeploymentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json: %v", err)
	}
	// Response check
	exampleRes := test.DeploymentResource{
		Name: to.Ptr("mydeployment"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
		Properties: &test.DeploymentResourceProperties{
			Active:  to.Ptr(false),
			AppName: to.Ptr("myapp"),
			DeploymentSettings: &test.DeploymentSettings{
				CPU: to.Ptr[int32](1),
				EnvironmentVariables: map[string]*string{
					"env": to.Ptr("test"),
				},
				JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
				MemoryInGB:     to.Ptr[int32](3),
				RuntimeVersion: to.Ptr(test.RuntimeVersionJava8),
			},
			Instances: []*test.DeploymentInstance{
				{
					Name:            to.Ptr("instance1"),
					DiscoveryStatus: to.Ptr("pending"),
					StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
					Status:          to.Ptr("Running"),
				}},
			ProvisioningState: to.Ptr(test.DeploymentResourceProvisioningStateSucceeded),
			Source: &test.UserSourceInfo{
				Type:             to.Ptr(test.UserSourceTypeSource),
				ArtifactSelector: to.Ptr("sub-module-1"),
				RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
				Version:          to.Ptr("1.0"),
			},
			Status: to.Ptr(test.DeploymentResourceStatusRunning),
		},
		SKU: &test.SKU{
			Name:     to.Ptr("S0"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DeploymentResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDeployments_Delete(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Delete"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&test.DeploymentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Delete.json: %v", err)
	}
}

func TestDeployments_Update(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Update"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		test.DeploymentResource{
			Properties: &test.DeploymentResourceProperties{
				Source: &test.UserSourceInfo{
					Type:             to.Ptr(test.UserSourceTypeSource),
					ArtifactSelector: to.Ptr("sub-module-1"),
					RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
					Version:          to.Ptr("1.0"),
				},
			},
		},
		&test.DeploymentsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json: %v", err)
	}
	// Response check
	exampleRes := test.DeploymentResource{
		Name: to.Ptr("mydeployment"),
		Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
		Properties: &test.DeploymentResourceProperties{
			Active:  to.Ptr(false),
			AppName: to.Ptr("myapp"),
			DeploymentSettings: &test.DeploymentSettings{
				CPU: to.Ptr[int32](1),
				EnvironmentVariables: map[string]*string{
					"env": to.Ptr("test"),
				},
				JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
				MemoryInGB:     to.Ptr[int32](3),
				RuntimeVersion: to.Ptr(test.RuntimeVersionJava8),
			},
			Instances: []*test.DeploymentInstance{
				{
					Name:            to.Ptr("instance1"),
					DiscoveryStatus: to.Ptr("pending"),
					StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
					Status:          to.Ptr("Running"),
				}},
			ProvisioningState: to.Ptr(test.DeploymentResourceProvisioningStateSucceeded),
			Source: &test.UserSourceInfo{
				Type:             to.Ptr(test.UserSourceTypeSource),
				ArtifactSelector: to.Ptr("sub-module-1"),
				RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
				Version:          to.Ptr("1.0"),
			},
			Status: to.Ptr(test.DeploymentResourceStatusRunning),
		},
		SKU: &test.SKU{
			Name:     to.Ptr("S0"),
			Capacity: to.Ptr[int32](1),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DeploymentResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DeploymentResource)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDeployments_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_List"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.List("myResourceGroup",
		"myservice",
		"myapp",
		&test.DeploymentsClientListOptions{Version: []string{}})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.DeploymentResourceCollection{
			Value: []*test.DeploymentResource{
				{
					Name: to.Ptr("mydeployment"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
					Properties: &test.DeploymentResourceProperties{
						Active:  to.Ptr(false),
						AppName: to.Ptr("myapp"),
						DeploymentSettings: &test.DeploymentSettings{
							CPU: to.Ptr[int32](1),
							EnvironmentVariables: map[string]*string{
								"env": to.Ptr("test"),
							},
							JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
							MemoryInGB:     to.Ptr[int32](3),
							RuntimeVersion: to.Ptr(test.RuntimeVersionJava8),
						},
						Instances: []*test.DeploymentInstance{
							{
								Name:            to.Ptr("instance1"),
								DiscoveryStatus: to.Ptr("pending"),
								StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
								Status:          to.Ptr("Running"),
							}},
						ProvisioningState: to.Ptr(test.DeploymentResourceProvisioningStateSucceeded),
						Source: &test.UserSourceInfo{
							Type:             to.Ptr(test.UserSourceTypeSource),
							ArtifactSelector: to.Ptr("sub-module-1"),
							RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
							Version:          to.Ptr("1.0"),
						},
						Status: to.Ptr(test.DeploymentResourceStatusRunning),
					},
					SKU: &test.SKU{
						Name:     to.Ptr("S0"),
						Capacity: to.Ptr[int32](1),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeploymentResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeploymentResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_ListForCluster(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_ListForCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_ListForCluster"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.ListForCluster("myResourceGroup",
		"myservice",
		&test.DeploymentsClientListForClusterOptions{Version: []string{}})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_ListForCluster.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.DeploymentResourceCollection{
			Value: []*test.DeploymentResource{
				{
					Name: to.Ptr("mydeployment"),
					Type: to.Ptr("Microsoft.AppPlatform/Spring/apps/deployments"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp/deployments/mydeployment"),
					Properties: &test.DeploymentResourceProperties{
						Active:  to.Ptr(false),
						AppName: to.Ptr("myapp"),
						DeploymentSettings: &test.DeploymentSettings{
							CPU: to.Ptr[int32](1),
							EnvironmentVariables: map[string]*string{
								"env": to.Ptr("test"),
							},
							JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
							MemoryInGB:     to.Ptr[int32](3),
							RuntimeVersion: to.Ptr(test.RuntimeVersionJava8),
						},
						Instances: []*test.DeploymentInstance{
							{
								Name:            to.Ptr("instance1"),
								DiscoveryStatus: to.Ptr("pending"),
								StartTime:       to.Ptr("2020-08-26T01:55:02Z"),
								Status:          to.Ptr("Running"),
							}},
						ProvisioningState: to.Ptr(test.DeploymentResourceProvisioningStateSucceeded),
						Source: &test.UserSourceInfo{
							Type:             to.Ptr(test.UserSourceTypeSource),
							ArtifactSelector: to.Ptr("sub-module-1"),
							RelativePath:     to.Ptr("resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc"),
							Version:          to.Ptr("1.0"),
						},
						Status: to.Ptr(test.DeploymentResourceStatusRunning),
					},
					SKU: &test.SKU{
						Name:     to.Ptr("S0"),
						Capacity: to.Ptr[int32](1),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeploymentResourceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeploymentResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_ListForCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Start(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Start"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginStart(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&test.DeploymentsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Start.json: %v", err)
	}
}

func TestDeployments_Stop(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Stop"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginStop(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&test.DeploymentsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Stop.json: %v", err)
	}
}

func TestDeployments_Restart(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deployments_Restart"},
	})
	client, err := test.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"myservice",
		"myapp",
		"mydeployment",
		&test.DeploymentsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Deployments_Restart.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	client, err := test.NewOperationsClient(cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.AvailableOperations{
			Value: []*test.OperationDetail{
				{
					Name: to.Ptr("Microsoft.AppPlatform/Spring/read"),
					Display: &test.OperationDisplay{
						Description: to.Ptr("Create or Update Managed Applications"),
						Operation:   to.Ptr("Create or Update Managed Applications"),
						Provider:    to.Ptr("Microsoft Azure Distributed Managed Service for Spring"),
						Resource:    to.Ptr("Managed Applications"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
					Properties:   &test.OperationProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableOperations) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableOperations)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuntimeVersions_ListRuntimeVersions(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RuntimeVersions_ListRuntimeVersions"},
	})
	client, err := test.NewRuntimeVersionsClient(cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.ListRuntimeVersions(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json: %v", err)
	}
	// Response check
	exampleRes := test.AvailableRuntimeVersions{
		Value: []*test.SupportedRuntimeVersion{
			{
				Platform: to.Ptr(test.SupportedRuntimePlatformJava),
				Value:    to.Ptr(test.SupportedRuntimeValueJava8),
				Version:  to.Ptr("8"),
			},
			{
				Platform: to.Ptr(test.SupportedRuntimePlatformJava),
				Value:    to.Ptr(test.SupportedRuntimeValueJava11),
				Version:  to.Ptr("11"),
			},
			{
				Platform: to.Ptr(test.SupportedRuntimePlatformNETCore),
				Value:    to.Ptr(test.SupportedRuntimeValueNetCore31),
				Version:  to.Ptr("3.1"),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.AvailableRuntimeVersions) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AvailableRuntimeVersions)
		t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/RuntimeVersions_ListRuntimeVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSKUs_List(t *testing.T) {
	// From example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Skus_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Skus_List"},
	})
	client, err := test.NewSKUsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Skus_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := test.ResourceSKUCollection{
			Value: []*test.ResourceSKU{
				{
					Name: to.Ptr("B0"),
					Capacity: &test.SKUCapacity{
						Default:   to.Ptr[int32](1),
						Maximum:   to.Ptr[int32](20),
						Minimum:   to.Ptr[int32](1),
						ScaleType: to.Ptr(test.SKUScaleTypeAutomatic),
					},
					LocationInfo: []*test.ResourceSKULocationInfo{
						{
							Location:    to.Ptr("eastus"),
							ZoneDetails: []*test.ResourceSKUZoneDetails{},
							Zones:       []*string{},
						}},
					Locations: []*string{
						to.Ptr("eastus")},
					ResourceType: to.Ptr("Spring"),
					Restrictions: []*test.ResourceSKURestrictions{},
					Tier:         to.Ptr("Basic"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2020-11-01-preview/examples/Skus_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
