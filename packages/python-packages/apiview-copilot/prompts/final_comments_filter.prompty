---
name: Filter APIView Review Comments
description: A filter prompt that filters out API review comments based on known exceptions to ensure consistency.
authors:
  - kristapratico
  - tjprescott
version: 1.0.0
model:
  api: chat
  configuration:
    type: azure_openai
    azure_endpoint: ${env:AZURE_OPENAI_ENDPOINT}
    azure_deployment: o3-mini
    api_version: 2025-03-01-preview
  parameters:
    stop: []
    frequency_penalty: 0
    presence_penalty: 0
    max_completion_tokens: 80000
    reasoning_effort: "high"
    response_format: ${file:filtered_result_schema.json}
sample:
  language: python
  exceptions: |
    1. Comment on the `send_request` method
    2. Suggest changes to class inheritance patterns
    3. Comment on `implements ContextManager` pseudocode
    4. Comment on ellipsis (...) usage in optional parameters
    5. Comment on __init__ overloads in model classes or MutableMapping inheritance
    6. Suggest adding docstrings
    7. Suggest using pydantic or dataclasses for models
    8. Comment on async list method naming
    9. Comment on indentation
    10. Suggest consolidating multiple overloads
    11. Suggest providing convenience methods directly on the client
    12. Comment on non-standard use of TypedDict syntax
    13. Comment about ivar being non-standard in docstrings
    14. Comment about use of distributed_trace/async decorators
    15. Comment about methods ending with :
    16. Comments about not using the non-standard namespace declaration
    17. Comment on the overuse of **kwargs
    18. Comment on class names being prefixed by the full module name
  comments: |
    {
      "comments": [
        {
          "line_no": 2,
          "bad_code": "def method1(self, arg1: str) -> None",
          "suggestion": "",
          "comment": "Methods should have descriptive docstrings",
          "source": "generic"
        },
        {
          "line_no": 2,
          "bad_code": "def method1(self, arg1: str) -> None",
          "suggestion": "`def method1(self, arg1: str) -> None:`",
          "comment": "Methods should end with a colon",
          "source": "generic"
        },
        {
          "line_no": 2,
          "bad_code": "def method1(self, arg1: str) -> None",
          "suggestion": "def get_something(self, name: str) -> None",
          "comment": "Method name should be more descriptive"
          "source": "generic"
        }
      ]
    }
  sample: ""
---
system:
  You are a helpful AI that reviews {{language}} API design comments from another AI. Your role is to filter out any comments that violate a set of known exceptions. You will receive:
  1. The proposed comments to review
  2. The exceptions that must be followed

  # EXCEPTIONS
  
  You MUST remove any comments that:
  {{exceptions}}

  # OUTPUT REQUIREMENTS
  
  - Review each proposed comment
  - Flag any comments' `status` field as "REMOVE" that violate the exceptions
  - Flag any comments' `status` field as "KEEP" that enhance API design
  - All comments MUST be flagged with a `status` field, and a `status_reason`.
  - For properties that are in the input schema AND the output schema, the value in the output must be the same as the input.

user:
  Please validate the following review against the exceptions:

  # PROPOSED COMMENTS
  ```json
  {{comments}}
  ```
