{
    "comments": [
        {
            "rule_ids": [
                "python_design.html#python-client-connection-string"
            ],
            "line_no": 10,
            "bad_code": "connection_string: Optional[str] = None,",
            "suggestion": null,
            "comment": "The constructor should not accept a connection_string parameter; use a separate factory method (from_connection_string) instead.",
            "source": "guideline"
        },
        {
            "rule_ids": [],
            "line_no": 168,
            "bad_code": "ivar list: List[DenseCaption]",
            "suggestion": "ivar captions: List[DenseCaption]",
            "comment": "Avoid using 'list' as an attribute name since it shadows the built-in; use a more descriptive name.",
            "source": "generic"
        },
        {
            "rule_ids": [
                "python_implementation.html#python-codestyle-type-naming"
            ],
            "line_no": 209,
            "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
            "suggestion": "class azure.ai.vision.imageanalysis.models.DetectedPerson(MutableMapping[str, Any]):",
            "comment": "Class names should use PascalCase according to naming conventions.",
            "source": "merged"
        },
        {
            "rule_ids": [],
            "line_no": 409,
            "bad_code": "ivar list: List[DetectedObject]",
            "suggestion": "ivar objects: List[DetectedObject]",
            "comment": "Rename the 'list' attribute to avoid shadowing the built-in type and to better reflect its contents.",
            "source": "generic"
        },
        {
            "rule_ids": [
                "python_implementation.html#python-codestyle-properties"
            ],
            "line_no": 411,
            "bad_code": "def get_result(self) -> ObjectsResult",
            "suggestion": null,
            "comment": "Replace simple getter methods with properties to adhere to Python's codestyle guidelines. Additionally, since accessor methods like get_result may be redundant with existing interfaces such as MutableMapping, consider removing them to streamline the API.",
            "source": "merged"
        },
        {
            "rule_ids": [
                "python_implementation.html#python-codestyle-properties"
            ],
            "line_no": 413,
            "bad_code": "def set_result(self, obj) -> None",
            "suggestion": null,
            "comment": "Avoid simple setter methods; use a property with a setter instead.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_design.html#python-models-async"
            ],
            "line_no": 432,
            "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
            "suggestion": null,
            "comment": "Models should not be duplicated in the aio namespace; reuse the model from the root namespace.",
            "source": "guideline"
        },
        {
            "rule_ids": [],
            "line_no": 433,
            "bad_code": "ivar list: List[detectedPerson]",
            "suggestion": "ivar people: List[DetectedPerson]",
            "comment": "Avoid using 'list' as an attribute name and ensure that type names follow CamelCase.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 492,
            "bad_code": "ivar list: List[DetectedTag]",
            "suggestion": "ivar tags: List[DetectedTag]",
            "comment": "Avoid using the built-in name 'list' for an instance variable; renaming it to 'tags' clarifies intent and prevents shadowing.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 498,
            "bad_code": "list: List[DetectedTag]",
            "suggestion": "tags: List[DetectedTag]",
            "comment": "Rename the parameter 'list' to 'tags' to avoid conflict with Python's built-in and to clearly convey its purpose.",
            "source": "generic"
        },
        {
            "rule_ids": [
                "python_design.html#python-models-enum-name-uppercase"
            ],
            "line_no": 517,
            "bad_code": "tags = 'tags'",
            "suggestion": "TAGS = 'tags'",
            "comment": "Enum member names should be uppercase for consistency. Rename 'tags' to 'TAGS'.",
            "source": "merged"
        }
    ]
}