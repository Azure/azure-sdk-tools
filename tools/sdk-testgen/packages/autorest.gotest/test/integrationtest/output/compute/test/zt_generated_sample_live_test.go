//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package test_test

import (
	"context"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	"github.com/stretchr/testify/suite"
)

type SampleTestSuite struct {
	suite.Suite

	ctx               context.Context
	cred              azcore.TokenCredential
	options           *arm.ClientOptions
	fakeStepVar       string
	resourceName      string
	location          string
	resourceGroupName string
	subscriptionId    string
}

func (testsuite *SampleTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred, testsuite.options = testutil.GetCredAndClientOptions(testsuite.T())
	testsuite.fakeStepVar = "signalrswaggertest4"
	testsuite.resourceName = "signalrswaggertest4"
	testsuite.location = testutil.GetEnv("LOCATION", "eastus")
	testsuite.resourceGroupName = testutil.GetEnv("RESOURCE_GROUP_NAME", "")
	testsuite.subscriptionId = testutil.GetEnv("AZURE_SUBSCRIPTION_ID", "")

	testutil.StartRecording(testsuite.T(), "sdk/resourcemanager//test/testdata")
	resourceGroup, _, err := testutil.CreateResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.location)
	testsuite.Require().NoError(err)
	testsuite.resourceGroupName = *resourceGroup.Name
	testsuite.Prepare()
}

func (testsuite *SampleTestSuite) TearDownSuite() {
	_, err := testutil.DeleteResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName)
	testsuite.Require().NoError(err)
	testutil.StopRecording(testsuite.T())
}

func TestSampleTestSuite(t *testing.T) {
	suite.Run(t, new(SampleTestSuite))
}

func (testsuite *SampleTestSuite) Prepare() {
	var err error
	// From step Delete-proximity-placement-group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	_, err = proximityPlacementGroupsClient.Delete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.resourceName,
		nil)
	testsuite.Require().NoError(err)
}

func (testsuite *SampleTestSuite) TestMicrosoftSignalrserviceBasicCrud() {
	fakeScenarioVar := "signalrswaggertest5"
	resourceName := testsuite.resourceName
	var err error
	// From step Generate_Unique_Name
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"outputs": map[string]interface{}{
			"name": map[string]interface{}{
				"type":  "string",
				"value": "[variables('name').value]",
			},
			"resourceName": map[string]interface{}{
				"type":  "string",
				"value": "[variables('name').value]",
			},
		},
		"resources": []interface{}{},
		"variables": map[string]interface{}{
			"name": map[string]interface{}{
				"type": "string",
				"metadata": map[string]interface{}{
					"description": "Name of the SignalR service.",
				},
				"value": "[concat('sw',uniqueString(resourceGroup().id))]",
			},
		},
	}
	params := map[string]interface{}{}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       armresources.DeploymentModeIncremental.ToPtr(),
		},
	}
	deploymentExtend, err := testutil.CreateDeployment(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName, "Generate_Unique_Name", &deployment)
	testsuite.Require().NoError(err)
	name = deploymentExtend.Properties.Outputs["name"].(map[string]interface{})["value"].(string)
	testsuite.resourceName = deploymentExtend.Properties.Outputs["resourceName"].(map[string]interface{})["value"].(string)

	// From step Create-or-Update-a-proximity-placement-group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	proximityPlacementGroupsClientCreateOrUpdateResponse, err := proximityPlacementGroupsClient.CreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.resourceName,
		test.ProximityPlacementGroup{
			Location: to.StringPtr(testsuite.location),
			Properties: &test.ProximityPlacementGroupProperties{
				ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	fakeScenarioVar = *proximityPlacementGroupsClientCreateOrUpdateResponse.ID

	// From step Delete-proximity_placement_group
	_, err = proximityPlacementGroupsClient.Delete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.resourceName,
		nil)
	testsuite.Require().NoError(err)

	// From step Create_a_vm_with_Host_Encryption_using_encryptionAtHost_property
	virtualMachinesClient := test.NewVirtualMachinesClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.fakeStepVar = "signalrswaggertest6"
	virtualMachinesClientCreateOrUpdatePollerResponse, err := virtualMachinesClient.BeginCreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr(testsuite.location),
			Plan: &test.Plan{
				Name:      to.StringPtr(testsuite.fakeStepVar),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/" + testsuite.subscriptionId + "/resourceGroups/" + testsuite.resourceGroupName + "/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				SecurityProfile: &test.SecurityProfile{
					EncryptionAtHost: to.BoolPtr(true),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windows-data-science-vm"),
						Publisher: to.StringPtr(fakeScenarioVar),
						SKU:       to.StringPtr("windows2016"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err)
	if recording.GetRecordMode() == recording.PlaybackMode {
		for {
			_, err = virtualMachinesClientCreateOrUpdatePollerResponse.Poller.Poll(testsuite.ctx)
			testsuite.Require().NoError(err)
			if virtualMachinesClientCreateOrUpdatePollerResponse.Poller.Done() {
				_, err = virtualMachinesClientCreateOrUpdatePollerResponse.Poller.FinalResponse(testsuite.ctx)
				testsuite.Require().NoError(err)
				break
			}
		}
	} else {
		_, err = virtualMachinesClientCreateOrUpdatePollerResponse.PollUntilDone(testsuite.ctx, 10*time.Second)
		testsuite.Require().NoError(err)
	}
}
func (testsuite *SampleTestSuite) TestMicrosoftSignalrserviceDeleteonly() {
	var err error
	// From step Delete_proximity_placement_group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	_, err = proximityPlacementGroupsClient.Delete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.resourceName,
		nil)
	testsuite.Require().NoError(err)
}
