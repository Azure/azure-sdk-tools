# Package is parsed using apiview-stub-generator(version:0.3.14), Python version: 3.12.9

namespace azure.ai.vision.imageanalysis

class azure.ai.vision.imageanalysis.ImageAnalysisClient(ImageAnalysisClient): implements ContextManager 
    def __init__(
        self, 
        endpoint: str, 
        credential: Union[AzureKeyCredential, TokenCredential], 
        *, 
        api_version: str = ..., 
        **kwargs: Any
    ) -> None

    @distributed_trace
    def analyze(
        self, 
        image_data: bytes, 
        visual_features: List[VisualFeatures], 
        gender_neutral_caption: Optional[bool] = ..., 
        language: Optional[str] = ..., 
        model_version: Optional[str] = ..., 
        smart_crops_aspect_ratios: Optional[List[float]] = ..., 
        **kwargs: Any
    ) -> ImageAnalysisResult

    @distributed_trace
    def analyze_from_url(
        self, 
        image_url: str, 
        visual_features: List[VisualFeatures], 
        gender_neutral_caption: Optional[bool] = ..., 
        language: Optional[str] = ..., 
        model_version: Optional[str] = ..., 
        smart_crops_aspect_ratios: Optional[List[float]] = ..., 
        **kwargs: Any
    ) -> ImageAnalysisResult

    def close(self) -> None

    def send_request(
        self, 
        request: HttpRequest, 
        *, 
        stream: bool = False, 
        **kwargs: Any
    ) -> HttpResponse

namespace azure.ai.vision.imageanalysis.aio

class azure.ai.vision.imageanalysis.aio.ImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager 
    def __init__(
        self, 
        endpoint: str, 
        credential: Union[AzureKeyCredential, AsyncTokenCredential], 
        *, 
        api_version: str = ..., 
        **kwargs: Any
    ) -> None

    @distributed_trace_async
    async def analyze(
        self, 
        image_data: bytes, 
        visual_features: List[VisualFeatures], 
        gender_neutral_caption: Optional[bool] = ..., 
        language: Optional[str] = ..., 
        model_version: Optional[str] = ..., 
        smart_crops_aspect_ratios: Optional[List[float]] = ..., 
        **kwargs: Any
    ) -> ImageAnalysisResult

    @distributed_trace_async
    async def analyze_from_url(
        self, 
        image_url: str, 
        visual_features: List[VisualFeatures], 
        gender_neutral_caption: Optional[bool] = ..., 
        language: Optional[str] = ..., 
        model_version: Optional[str] = ..., 
        smart_crops_aspect_ratios: Optional[List[float]] = ..., 
        **kwargs: Any
    ) -> ImageAnalysisResult

    async def close(self) -> None

    def send_request(
        self, 
        request: HttpRequest, 
        *, 
        stream: bool = False, 
        **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]

namespace azure.ai.vision.imageanalysis.models

class azure.ai.vision.imageanalysis.models.CaptionResult(MutableMapping[str, Any]):
    ivar confidence: float
    ivar text: str

    @overload
    def __init__(
        self, 
        *, 
        confidence: float, 
        text: str
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None

class azure.ai.vision.imageanalysis.models.CropRegion(MutableMapping[str, Any]):
    ivar aspect_ratio: float
    ivar bounding_box: ImageBoundingBox

    @overload
    def __init__(
        self, 
        *, 
        aspect_ratio: float, 
        bounding_box: ImageBoundingBox
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None

namespace azure.ai.vision.imageanalysis.models

class azure.ai.vision.imageanalysis.models.DenseCaption(MutableMapping[str, Any]):
    ivar bounding_box: ImageBoundingBox
    ivar confidence: float
    ivar text: str

    @overload
    def __init__(
        self, 
        *, 
        bounding_box: ImageBoundingBox, 
        confidence: float, 
        text: str
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.DenseCaptionsResult(MutableMapping[str, Any]):
    ivar list: List[DenseCaption]

    @overload
    def __init__(
        self, 
        *, 
        list: List[DenseCaption]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.DetectedTextBlock(MutableMapping[str, Any]):
    ivar lines: List[DetectedTextLine]

    @overload
    def __init__(
        self, 
        *, 
        lines: List[DetectedTextLine]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None

class azure.ai.vision.imageanalysis.models.DetectedTextLine(MutableMapping[str, Any]):
    ivar bounding_polygon: List[ImagePoint]
    ivar text: str
    ivar words: List[DetectedTextWord]

    @overload
    def __init__(
        self, 
        *, 
        bounding_polygon: List[ImagePoint], 
        text: str, 
        words: List[DetectedTextWord]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.DetectedTextWord(MutableMapping[str, Any]):
    ivar bounding_polygon: List[ImagePoint]
    ivar confidence: float
    ivar text: str

    @overload
    def __init__(
        self, 
        *, 
        bounding_polygon: List[ImagePoint], 
        confidence: float, 
        text: str
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.ImageAnalysisResult(MutableMapping[str, Any]):
    ivar caption: Optional[CaptionResult]
    ivar dense_captions: Optional[DenseCaptionsResult]
    ivar metadata: ImageMetadata
    ivar model_version: str
    ivar objects: Optional[ObjectsResult]
    ivar people: Optional[PeopleResult]
    ivar read: Optional[ReadResult]
    ivar smart_crops: Optional[SmartCropsResult]
    ivar tags: Optional[TagsResult]

    @overload
    def __init__(
        self, 
        *, 
        caption: Optional[CaptionResult] = ..., 
        dense_captions: Optional[DenseCaptionsResult] = ..., 
        metadata: ImageMetadata, 
        model_version: str, 
        objects: Optional[ObjectsResult] = ..., 
        people: Optional[PeopleResult] = ..., 
        read: Optional[ReadResult] = ..., 
        smart_crops: Optional[SmartCropsResult] = ..., 
        tags: Optional[TagsResult] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.ImageBoundingBox(MutableMapping[str, Any]):
    ivar height: int
    ivar width: int
    ivar x: int
    ivar y: int

    @overload
    def __init__(
        self, 
        *, 
        height: int, 
        width: int, 
        x: int, 
        y: int
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None

class azure.ai.vision.imageanalysis.models.ImageMetadata(MutableMapping[str, Any]):
    ivar height: int
    ivar width: int

    @overload
    def __init__(
        self, 
        *, 
        height: int, 
        width: int
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.ImagePoint(MutableMapping[str, Any]):
    ivar x: int
    ivar y: int

    @overload
    def __init__(
        self, 
        *, 
        x: int, 
        y: int
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.ObjectsResult(MutableMapping[str, Any]):
    ivar list: List[DetectedObject]

    @overload
    def __init__(
        self, 
        *, 
        list: List[DetectedObject]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.PeopleResult(MutableMapping[str, Any]):
    ivar list: List[DetectedPerson]

    @overload
    def __init__(
        self, 
        *, 
        list: List[DetectedPerson]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.ReadResult(MutableMapping[str, Any]):
    ivar blocks: List[DetectedTextBlock]

    @overload
    def __init__(
        self, 
        *, 
        blocks: List[DetectedTextBlock]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.ai.vision.imageanalysis.models.SmartCropsResult(MutableMapping[str, Any]):
    ivar list: List[CropRegion]

    @overload
    def __init__(
        self, 
        *, 
        list: List[CropRegion]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None

class azure.ai.vision.imageanalysis.models.TagsResult(MutableMapping[str, Any]):
    ivar list: List[DetectedTag]

    @overload
    def __init__(
        self, 
        *, 
        list: List[DetectedTag]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None

class azure.ai.vision.imageanalysis.models.VisualFeatures(str, Enum):
    CAPTION = "caption"
    DENSE_CAPTIONS = "denseCaptions"
    OBJECTS = "objects"
    PEOPLE = "people"
    READ = "read"
    SMART_CROPS = "smartCrops"
    TAGS = "tags"