//go:build go1.16
// +build go1.16

{{copyright}}

package {{packageName}}_test

import (
	"context"
	"log"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)
{{imports}}

var (
	ctx            context.Context
	cred           azcore.TokenCredential
{% if scope.toLowerCase() == 'resourcegroup'%}	resourceGroup	*armresources.ResourceGroup{% endif %}
{% for name, value in variables %}
{% if value === "<newDefinedVariable>" %}    {{name}} string{% else %}    {{name}} = {{value}}{% endif %}
{% endfor %}
{% for variable, _ in requiredVariablesDefault %}
{% if not variables.hasOwnProperty(variable) %}    {{variable}} = getEnv("{{jsFunc.toSnakeCase(variable).toUpperCase()}}", "{{requiredVariablesDefault['variable']}}"){% endif %}
{% endfor %}
)

func Test{{testCaseName}}(t *testing.T) {
	setUp(t)
{% for testScenario in scenarios %}	scenario{{jsFunc.capitalize(jsFunc.toCamelCase(testScenario.scenario))}}(t)	{% endfor %}
	tearDown(t)
}

func setUp(t *testing.T) {
    var err error
	ctx = context.Background()

    {% if scope.toLowerCase() == 'resourcegroup'%}
	cred, err = azidentity.NewEnvironmentCredential(nil)
	if err != nil {
		t.Fatalf("Failed to create credential: %v", err)
	}

	resourceGroup, err = createResourceGroup(ctx, cred)
	if err != nil {
		t.Fatalf("Failed to create resource group: %v", err)
	}
	t.Logf("Resource group created: id - %s name - %s", *resourceGroup.ID, *resourceGroup.Name)
    {% endif %}

    prepare(t)
}

{% if scope.toLowerCase() == 'resourcegroup'%}
func createResourceGroup(ctx context.Context, cred azcore.TokenCredential) (*armresources.ResourceGroup, error) {
	rgClient := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)

	param := armresources.ResourceGroup {
		Location: to.StringPtr(location),
	}

	resp, err := rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)
	if err != nil {
		return nil, err
	}

	return &resp.ResourceGroup, nil
}

func deleteResourceGroup(ctx context.Context, cred azcore.TokenCredential) error {
	rgClient := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)

	poller, err := rgClient.BeginDelete(ctx, resourceGroupName, nil)
	if err != nil {
		return err
	}
	if _, err := poller.PollUntilDone(ctx, 10*time.Second); err != nil {
		return err
	}

	return nil
}
{% endif %}

func tearDown(t *testing.T) {
    cleanup(t)
{% if scope.toLowerCase() == 'resourcegroup'%}
	err := deleteResourceGroup(ctx, cred)
	if err != nil {
		t.Fatalf("Failed to delete resource group: %v", err)
	}
	t.Logf("Resource group deleted")
{% endif %}
}

func getEnv(key, fallback string) string {
    if value, ok := os.LookupEnv(key); ok {
        return value
    }
    return fallback
}

{% if useArmTemplate %}
func createDeployment(deploymentName string, template, params map[string]interface{}) (de *armresources.DeploymentExtended, err error) {
	deployClient := armresources.NewDeploymentsClient(subscriptionId, cred, nil)
	poller, err := deployClient.BeginCreateOrUpdate(
		ctx,
		resourceGroupName,
		deploymentName,
		armresources.Deployment{
			Properties: &armresources.DeploymentProperties{
				Template:   template,
				Parameters: params,
				Mode:       armresources.DeploymentModeIncremental.ToPtr(),
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{},
	)
	if err != nil {
		return nil, err
	}

	res, err := poller.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		return nil, err
	}

	return &res.DeploymentExtended, nil
}
{% endif %}

func prepare(t *testing.T) {
	{% set steps = prepareSteps %}
	{% include "./scenarioContent.go.njk" %}
}

{% for testScenario in scenarios %}
func scenario{{jsFunc.capitalize(jsFunc.toCamelCase(testScenario.scenario))}}(t *testing.T) {
	{% for variable, value in testScenario.requiredVariablesDefault %}
	{% if not requiredVariablesDefault.hasOwnProperty(variable) %}
    {{variable}} := getEnv("{{jsFunc.toSnakeCase(variable).toUpperCase()}}, "{{value}}")
	{% endif %}
	{% endfor %}
	{% for name, value in testScenario.variables %}
    {% if value === "<newDefinedVariable>" %}
    var {{name}} string
    {% else %}
    {{name}} := {{value}}
    {% endif %}
	{% endfor %}
	
	{% set steps = testScenario.steps %}
	{% include "./scenarioContent.go.njk" %}
}
{% endfor %}

func cleanup(t *testing.T) {
	{% set steps = cleanUpSteps %}
	{% include "./scenarioContent.go.njk" %}
}