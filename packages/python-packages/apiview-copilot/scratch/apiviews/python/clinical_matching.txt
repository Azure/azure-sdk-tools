# Package is parsed using apiview-stub-generator(version:0.3.16), Python version: 3.10.16


namespace azure.healthinsights.clinicalmatching

class azure.healthinsights.clinicalmatching.ClinicalMatching(ClinicalMatchingClientOperationsMixin): implements ContextManager 

    def __init__(
        self, 
        endpoint: str, 
        api_key: str, 
        *, 
        api_version: str = ..., 
        polling_interval: Optional[int] = ..., 
        **kwargs: Any
    ) -> None

    @overload
    def begin_match_trials(
        self, 
        body: TrialMatcherData, 
        *, 
        content_type: str = "application/json", 
        repeatability_first_sent: Optional[datetime] = ..., 
        repeatability_request_id: Optional[str] = ..., 
        **kwargs: Any
    ) -> LROPoller[TrialMatcherResult]

    @overload
    def begin_match_trials(
        self, 
        body: JSON, 
        *, 
        content_type: str = "application/json", 
        repeatability_first_sent: Optional[datetime] = ..., 
        repeatability_request_id: Optional[str] = ..., 
        **kwargs: Any
    ) -> LROPoller[TrialMatcherResult]

    @overload
    def begin_match_trials(
        self, 
        body: IO, 
        *, 
        content_type: str = "application/json", 
        repeatability_first_sent: Optional[datetime] = ..., 
        repeatability_request_id: Optional[str] = ..., 
        **kwargs: Any
    ) -> LROPoller[TrialMatcherResult]

    @distributed_trace
    def begin_match_trials(
        self, 
        body: Union[TrialMatcherData, JSON, IO], 
        *, 
        content_type: str = ..., 
        continuation_token: Optional[str] = ..., 
        polling: Union[bool, PollingMethod] = ..., 
        polling_interval: Optional[int] = ..., 
        repeatability_first_sent: Optional[datetime] = ..., 
        repeatability_request_id: Optional[str] = ..., 
        **kwargs: Any
    ) -> LROPoller[TrialMatcherResult]

    @overload
    def create_trials(
        self, 
        body: TrialMatcherData, 
        *, 
        options: Optional[CreateTrialsOptions] = None,
        **kwargs: Any
    ) -> LROPoller[TrialMatcherResult]

    @overload
    def create_trials(
        self, 
        body: JSON, 
        *, 
        options: Optional[CreateTrialsOptions] = None,
        **kwargs: Any
    ) -> LROPoller[TrialMatcherResult]

    @overload
    def create_trials(
        self, 
        body: IO, 
        *, 
        options: Optional[CreateTrialsOptions] = None,
        **kwargs: Any
    ) -> LROPoller[TrialMatcherResult]

    @distributed_trace
    def create_trials(
        self, 
        body: Union[TrialMatcherData, JSON, IO], 
        *, 
        options: Optional[CreateTrialsOptions] = None,
        **kwargs: Any
    ) -> LROPoller[TrialMatcherResult]

    @distributed_trace
    def trials(
        self, 
        **kwargs: Any
    ) -> List[TrialMatcherResult]

    @distributed_trace
    def erase_trials(
        self, 
                    trial: str,
        **kwargs: Any
    ) -> None

    def close(self) -> None

    def send_request(
        self, 
        request: HttpRequest, 
        *, 
        stream: Optional[bool] = ..., 
        **kwargs: Any
    ) -> HttpResponse


namespace azure.healthinsights.clinicalmatching.aio

class azure.healthinsights.clinicalmatching.aio.ClinicalMatchingClient(ClinicalMatchingClientOperationsMixin): implements AsyncContextManager 

    def __init__(
        self, 
        endpoint: str, 
        api_key: str, 
        *, 
        api_version: str = ..., 
        polling_interval: Optional[int] = ..., 
        **kwargs: Any
    ) -> None

    @overload
    async def begin_match_trials(
        self, 
        body: TrialMatcherData, 
        *, 
        content_type: str = "application/json", 
        repeatability_first_sent: Optional[datetime] = ..., 
        repeatability_request_id: Optional[str] = ..., 
        **kwargs: Any
    ) -> AsyncLROPoller[TrialMatcherResult]

    @overload
    async def begin_match_trials(
        self, 
        body: JSON, 
        *, 
        content_type: str = "application/json", 
        repeatability_first_sent: Optional[datetime] = ..., 
        repeatability_request_id: Optional[str] = ..., 
        **kwargs: Any
    ) -> AsyncLROPoller[TrialMatcherResult]

    @overload
    async def begin_match_trials(
        self, 
        body: IO, 
        *, 
        content_type: str = "application/json", 
        repeatability_first_sent: Optional[datetime] = ..., 
        repeatability_request_id: Optional[str] = ..., 
        **kwargs: Any
    ) -> AsyncLROPoller[TrialMatcherResult]

    @distributed_trace_async
    async def begin_match_trials(
        self, 
        body: Union[TrialMatcherData, JSON, IO], 
        *, 
        content_type: str = ..., 
        continuation_token: Optional[str] = ..., 
        polling: Union[bool, AsyncPollingMethod] = ..., 
        polling_interval: Optional[int] = ..., 
        repeatability_first_sent: Optional[datetime] = ..., 
        repeatability_request_id: Optional[str] = ..., 
        **kwargs: Any
    ) -> AsyncLROPoller[TrialMatcherResult]

    @overload
    async def create_trials(
        self, 
        body: TrialMatcherData, 
        *, 
        options: Optional[CreateTrialsOptions] = None,
        **kwargs: Any
    ) -> AsyncLROPoller[TrialMatcherResult]

    @overload
    async def create_trials(
        self, 
        body: JSON, 
        *, 
        options: Optional[CreateTrialsOptions] = None,
        **kwargs: Any
    ) -> AsyncLROPoller[TrialMatcherResult]

    @overload
    async def create_trials(
        self, 
        body: IO, 
        *, 
        options: Optional[CreateTrialsOptions] = None,
        **kwargs: Any
    ) -> AsyncLROPoller[TrialMatcherResult]

    @distributed_trace_async
    async def create_trials(
        self, 
        body: Union[TrialMatcherData, JSON, IO], 
        *, 
        options: Optional[CreateTrialsOptions] = None,
        **kwargs: Any
    ) -> AsyncLROPoller[TrialMatcherResult]

    @distributed_trace
    def trials(
        self, 
        **kwargs: Any
    ) -> List[TrialMatcherResult]

    @distributed_trace_async
    async def erase_trials(
        self, 
                    trial: str,
        **kwargs: Any
    ) -> None

    async def close(self) -> None

    def send_request(
        self, 
        request: HttpRequest, 
        *, 
        stream: Optional[bool] = ..., 
        **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]


namespace azure.healthinsights.clinicalmatching.models

class azure.healthinsights.clinicalmatching.models.CreateTrialsOptions(MutableMapping[str, Any]):
    ivar unit: Optional[Union[str, AgeUnit]]
    ivar value: Optional[float]
            ivar language: Optional[str]
            ivar date: Optional[datetime.datetime]

    @overload
    def __init__(
        self, 
        *, 
        unit: Optional[Union[str, AgeUnit]], 
        value: Optional[float],
                    language: Optional[str],
                    date: Optional[datetime.datetime]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.AcceptedAge(MutableMapping[str, Any]):
    ivar unit: Union[str, AgeUnit]
    ivar value: float

    @overload
    def __init__(
        self, 
        *, 
        unit: Union[str, AgeUnit], 
        value: float
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.AcceptedAgeRange(MutableMapping[str, Any]):
    ivar maximum_age: Optional[AcceptedAge]
    ivar minimum_age: Optional[AcceptedAge]

    @overload
    def __init__(
        self, 
        *, 
        maximum_age: Optional[AcceptedAge] = ..., 
        minimum_age: Optional[AcceptedAge] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.AgeUnit(str, Enum):
    DAYS = "days"
    MONTHS = "months"
    YEARS = "years"


class azure.healthinsights.clinicalmatching.models.AreaGeometry(MutableMapping[str, Any]):
    ivar coordinates: List[float]
    ivar type: Union[str, GeoJsonGeometryType]

    @overload
    def __init__(
        self, 
        *, 
        coordinates: List[float], 
        type: Union[str, GeoJsonGeometryType]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.AreaProperties(MutableMapping[str, Any]):
    ivar radius: float
    ivar sub_type: Union[str, GeoJsonPropertiesSubType]

    @overload
    def __init__(
        self, 
        *, 
        radius: float, 
        sub_type: Union[str, GeoJsonPropertiesSubType]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ClinicalCodedElement(MutableMapping[str, Any]):
    ivar code: str
    ivar name: Optional[str]
    ivar system: str
    ivar value: Optional[str]

    @overload
    def __init__(
        self, 
        *, 
        code: str, 
        name: Optional[str] = ..., 
        system: str, 
        value: Optional[str] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(str, Enum):
    CONSULTATION = "consultation"
    DISCHARGE_SUMMARY = "dischargeSummary"
    HISTORY_AND_PHYSICAL = "historyAndPhysical"
    IMAGING = "imaging"
    LABORATORY = "laboratory"
    PATHOLOGY = "pathology"
    PROCEDURE = "procedure"
    PROGRESS = "progress"


class azure.healthinsights.clinicalmatching.models.ClinicalNoteEvidence(MutableMapping[str, Any]):
    ivar id: str
    ivar length: int
    ivar offset: int
    ivar text: Optional[str]

    @overload
    def __init__(
        self, 
        *, 
        id: str, 
        length: int, 
        offset: int, 
        text: Optional[str] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(str, Enum):
    ALL = "all"
    FEMALE = "female"
    MALE = "male"


class azure.healthinsights.clinicalmatching.models.ClinicalTrialDemographics(MutableMapping[str, Any]):
    ivar accepted_age_range: Optional[AcceptedAgeRange]
    ivar accepted_sex: Optional[Union[str, ClinicalTrialAcceptedSex]]

    @overload
    def __init__(
        self, 
        *, 
        accepted_age_range: Optional[AcceptedAgeRange] = ..., 
        accepted_sex: Optional[Union[str, ClinicalTrialAcceptedSex]] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ClinicalTrialDetails(MutableMapping[str, Any]):
    ivar demographics: Optional[ClinicalTrialDemographics]
    ivar eligibility_criteria_text: Optional[str]
    ivar id: str
    ivar metadata: ClinicalTrialMetadata

    @overload
    def __init__(
        self, 
        *, 
        demographics: Optional[ClinicalTrialDemographics] = ..., 
        eligibility_criteria_text: Optional[str] = ..., 
        id: str, 
        metadata: ClinicalTrialMetadata
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ClinicalTrialMetadata(MutableMapping[str, Any]):
    ivar conditions: List[str]
    ivar contacts: Optional[List[ForwardRef('ContactDetails')]]
    ivar facilities: Optional[List[ForwardRef('ClinicalTrialResearchFacility')]]
    ivar phases: Optional[List[Union[str, ForwardRef('ClinicalTrialPhase')]]]
    ivar recruitment_status: Optional[Union[str, ClinicalTrialRecruitmentStatus]]
    ivar sponsors: Optional[List[str]]
    ivar study_type: Optional[Union[str, ClinicalTrialStudyType]]

    @overload
    def __init__(
        self, 
        *, 
        conditions: List[str], 
        contacts: Optional[List[ContactDetails]] = ..., 
        facilities: Optional[List[ClinicalTrialResearchFacility]] = ..., 
        phases: Optional[List[Union[str, ClinicalTrialPhase]]] = ..., 
        recruitment_status: Optional[Union[str, ClinicalTrialRecruitmentStatus]] = ..., 
        sponsors: Optional[List[str]] = ..., 
        study_type: Optional[Union[str, ClinicalTrialStudyType]] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(str, Enum):
    EARLY_PHASE1 = "earlyPhase1"
    NOT_APPLICABLE = "notApplicable"
    PHASE1 = "phase1"
    PHASE2 = "phase2"
    PHASE3 = "phase3"
    PHASE4 = "phase4"


class azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(str, Enum):
    BASIC_SCIENCE = "basicScience"
    DEVICE_FEASIBILITY = "deviceFeasibility"
    DIAGNOSTIC = "diagnostic"
    HEALTH_SERVICES_RESEARCH = "healthServicesResearch"
    NOT_APPLICABLE = "notApplicable"
    OTHER = "other"
    PREVENTION = "prevention"
    SCREENING = "screening"
    SUPPORTIVE_CARE = "supportiveCare"
    TREATMENT = "treatment"


class azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(str, Enum):
    ENROLLING_BY_INVITATION = "enrollingByInvitation"
    NOT_YET_RECRUITING = "notYetRecruiting"
    RECRUITING = "recruiting"
    UNKNOWN_STATUS = "unknownStatus"


class azure.healthinsights.clinicalmatching.models.ClinicalTrialRegistryFilter(MutableMapping[str, Any]):
    ivar conditions: Optional[List[str]]
    ivar facility_areas: Optional[List[ForwardRef('GeographicArea')]]
    ivar facility_locations: Optional[List[ForwardRef('GeographicLocation')]]
    ivar facility_names: Optional[List[str]]
    ivar ids: Optional[List[str]]
    ivar phases: Optional[List[Union[str, ForwardRef('ClinicalTrialPhase')]]]
    ivar purposes: Optional[List[Union[str, ForwardRef('ClinicalTrialPurpose')]]]
    ivar recruitment_statuses: Optional[List[Union[str, ForwardRef('ClinicalTrialRecruitmentStatus')]]]
    ivar sources: Optional[List[Union[str, ForwardRef('ClinicalTrialSource')]]]
    ivar sponsors: Optional[List[str]]
    ivar study_types: Optional[List[Union[str, ForwardRef('ClinicalTrialStudyType')]]]

    @overload
    def __init__(
        self, 
        *, 
        conditions: Optional[List[str]] = ..., 
        facility_areas: Optional[List[GeographicArea]] = ..., 
        facility_locations: Optional[List[GeographicLocation]] = ..., 
        facility_names: Optional[List[str]] = ..., 
        ids: Optional[List[str]] = ..., 
        phases: Optional[List[Union[str, ClinicalTrialPhase]]] = ..., 
        purposes: Optional[List[Union[str, ClinicalTrialPurpose]]] = ..., 
        recruitment_statuses: Optional[List[Union[str, ClinicalTrialRecruitmentStatus]]] = ..., 
        sources: Optional[List[Union[str, ClinicalTrialSource]]] = ..., 
        sponsors: Optional[List[str]] = ..., 
        study_types: Optional[List[Union[str, ClinicalTrialStudyType]]] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ClinicalTrialResearchFacility(MutableMapping[str, Any]):
    ivar city: Optional[str]
    ivar country_or_region: str
    ivar name: str
    ivar state: Optional[str]

    @overload
    def __init__(
        self, 
        *, 
        city: Optional[str] = ..., 
        country_or_region: str, 
        name: str, 
        state: Optional[str] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ClinicalTrialSource(str, Enum):
    CLINICALTRIALS_GOV = "clinicaltrials.gov"
    CUSTOM = "custom"


class azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(str, Enum):
    EXPANDED_ACCESS = "expandedAccess"
    INTERVENTIONAL = "interventional"
    OBSERVATIONAL = "observational"
    PATIENT_REGISTRIES = "patientRegistries"


class azure.healthinsights.clinicalmatching.models.ClinicalTrials(MutableMapping[str, Any]):
    ivar custom_trials: Optional[List[ForwardRef('ClinicalTrialDetails')]]
    ivar registry_filters: Optional[List[ForwardRef('ClinicalTrialRegistryFilter')]]

    @overload
    def __init__(
        self, 
        *, 
        custom_trials: Optional[List[ClinicalTrialDetails]] = ..., 
        registry_filters: Optional[List[ClinicalTrialRegistryFilter]] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ContactDetails(MutableMapping[str, Any]):
    ivar email: Optional[str]
    ivar name: Optional[str]
    ivar phone: Optional[str]

    @overload
    def __init__(
        self, 
        *, 
        email: Optional[str] = ..., 
        name: Optional[str] = ..., 
        phone: Optional[str] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.DocumentContent(MutableMapping[str, Any]):
    ivar source_type: Union[str, DocumentContentSourceType]
    ivar value: str

    @overload
    def __init__(
        self, 
        *, 
        source_type: Union[str, DocumentContentSourceType], 
        value: str
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(str, Enum):
    INLINE = "inline"
    REFERENCE = "reference"


class azure.healthinsights.clinicalmatching.models.DocumentType(str, Enum):
    DICOM = "dicom"
    FHIR_BUNDLE = "fhirBundle"
    GENOMIC_SEQUENCING = "genomicSequencing"
    NOTE = "note"


class azure.healthinsights.clinicalmatching.models.Error(MutableMapping[str, Any]):
    ivar code: str
    ivar details: List[Error]
    ivar innererror: Optional[InnerError]
    ivar message: str
    ivar target: Optional[str]

    @overload
    def __init__(
        self, 
        *, 
        code: str, 
        details: List[Error], 
        innererror: Optional[InnerError] = ..., 
        message: str, 
        target: Optional[str] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.ExtendedClinicalCodedElement(MutableMapping[str, Any]):
    ivar category: Optional[str]
    ivar code: str
    ivar name: Optional[str]
    ivar semantic_type: Optional[str]
    ivar system: str
    ivar value: Optional[str]

    @overload
    def __init__(
        self, 
        *, 
        category: Optional[str] = ..., 
        code: str, 
        name: Optional[str] = ..., 
        semantic_type: Optional[str] = ..., 
        system: str, 
        value: Optional[str] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.GeoJsonGeometryType(str, Enum):
    POINT = "Point"


class azure.healthinsights.clinicalmatching.models.GeoJsonPropertiesSubType(str, Enum):
    CIRCLE = "Circle"


class azure.healthinsights.clinicalmatching.models.GeoJsonType(str, Enum):
    FEATURE = "Feature"


class azure.healthinsights.clinicalmatching.models.GeographicArea(MutableMapping[str, Any]):
    ivar geometry: AreaGeometry
    ivar properties: AreaProperties
    ivar type: Union[str, GeoJsonType]

    @overload
    def __init__(
        self, 
        *, 
        geometry: AreaGeometry, 
        properties: AreaProperties, 
        type: Union[str, GeoJsonType]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.GeographicLocation(MutableMapping[str, Any]):
    ivar city: Optional[str]
    ivar country_or_region: str
    ivar state: Optional[str]

    @overload
    def __init__(
        self, 
        *, 
        city: Optional[str] = ..., 
        country_or_region: str, 
        state: Optional[str] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.InnerError(MutableMapping[str, Any]):
    ivar code: str
    ivar innerrror: Optional[InnerError]

    @overload
    def __init__(
        self, 
        *, 
        code: str, 
        innererror: Optional[InnerError] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.JobStatus(str, Enum):
    FAILED = "failed"
    NOT_STARTED = "notStarted"
    PARTIALLY_COMPLETED = "partiallyCompleted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"


class azure.healthinsights.clinicalmatching.models.PatientDocument(MutableMapping[str, Any]):
    ivar clinical_type: Optional[Union[str, ClinicalDocumentType]]
    ivar content: DocumentContent
    ivar created_date_time: Optional[datetime]
    ivar id: str
    ivar language: Optional[str]
    ivar type: Union[str, DocumentType]

    @overload
    def __init__(
        self, 
        *, 
        clinical_type: Optional[Union[str, ClinicalDocumentType]] = ..., 
        content: DocumentContent, 
        created_date_time: Optional[datetime] = ..., 
        id: str, 
        language: Optional[str] = ..., 
        type: Union[str, DocumentType]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.PatientInfo(MutableMapping[str, Any]):
    ivar birth_date: Optional[date]
    ivar clinical_info: Optional[List[ForwardRef('ClinicalCodedElement')]]
    ivar sex: Optional[Union[str, PatientInfoSex]]

    @overload
    def __init__(
        self, 
        *, 
        birth_date: Optional[date] = ..., 
        clinical_info: Optional[List[ClinicalCodedElement]] = ..., 
        sex: Optional[Union[str, PatientInfoSex]] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.PatientInfoSex(str, Enum):
    FEMALE = "female"
    MALE = "male"
    UNSPECIFIED = "unspecified"


class azure.healthinsights.clinicalmatching.models.PatientRecord(MutableMapping[str, Any]):
    ivar data: Optional[List[ForwardRef('PatientDocument')]]
    ivar id: str
    ivar info: Optional[PatientInfo]

    @overload
    def __init__(
        self, 
        *, 
        data: Optional[List[PatientDocument]] = ..., 
        id: str, 
        info: Optional[PatientInfo] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.RepeatabilityResultType(str, Enum):
    ACCEPTED = "accepted"
    REJECTED = "rejected"


class azure.healthinsights.clinicalmatching.models.TrialMatcherData(MutableMapping[str, Any]):
    ivar configuration: Optional[TrialMatcherModelConfiguration]
    ivar patients: List[PatientRecord]

    @overload
    def __init__(
        self, 
        *, 
        configuration: Optional[TrialMatcherModelConfiguration] = ..., 
        patients: List[PatientRecord]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.TrialMatcherInference(MutableMapping[str, Any]):
    ivar confidence_score: Optional[float]
    ivar description: Optional[str]
    ivar evidence: Optional[List[ForwardRef('TrialMatcherInferenceEvidence')]]
    ivar id: Optional[str]
    ivar metadata: Optional[ClinicalTrialMetadata]
    ivar source: Optional[Union[str, ClinicalTrialSource]]
    ivar type: Union[str, TrialMatcherInferenceType]
    ivar value: str

    @overload
    def __init__(
        self, 
        *, 
        confidence_score: Optional[float] = ..., 
        description: Optional[str] = ..., 
        evidence: Optional[List[TrialMatcherInferenceEvidence]] = ..., 
        id: Optional[str] = ..., 
        metadata: Optional[ClinicalTrialMetadata] = ..., 
        source: Optional[Union[str, ClinicalTrialSource]] = ..., 
        type: Union[str, TrialMatcherInferenceType], 
        value: str
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceEvidence(MutableMapping[str, Any]):
    ivar eligibilityCriteriaEvidence: Optional[str]
    ivar importance: Optional[float]
    ivar patientDataEvidence: Optional[ClinicalNoteEvidence]
    ivar patientInfoEvidence: Optional[ClinicalCodedElement]

    @overload
    def __init__(
        self, 
        *, 
        eligibility_criteria_evidence: Optional[str] = ..., 
        importance: Optional[float] = ..., 
        patient_data_evidence: Optional[ClinicalNoteEvidence] = ..., 
        patient_info_evidence: Optional[ClinicalCodedElement] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(str, Enum):
    TRIAL_ELIGIBILITY = "trialEligibility"


class azure.healthinsights.clinicalmatching.models.TrialMatcherModelConfiguration(MutableMapping[str, Any]):
    ivar clinical_trials: ClinicalTrials
    ivar include_evidence: bool
    ivar verbose: bool

    @overload
    def __init__(
        self, 
        *, 
        clinical_trials: ClinicalTrials, 
        include_evidence: bool = True, 
        verbose: bool = False
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.TrialMatcherPatientResult(MutableMapping[str, Any]):
    ivar id: str
    ivar inferences: List[TrialMatcherInference]
    ivar needed_clinical_info: Optional[List[ForwardRef('ExtendedClinicalCodedElement')]]

    @overload
    def __init__(
        self, 
        *, 
        id: str, 
        inferences: List[TrialMatcherInference], 
        needed_clinical_info: Optional[List[ExtendedClinicalCodedElement]] = ...
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None


class azure.healthinsights.clinicalmatching.models.TrialMatcherResult(MutableMapping[str, Any]):
    ivar created_date_time: datetime
    ivar errors: Optional[List[ForwardRef('Error')]]
    ivar expiration_date_time: datetime
    ivar job_id: str
    ivar last_update_date_time: datetime
    ivar results: Optional[TrialMatcherResults]
    ivar status: Union[str, JobStatus]


class azure.healthinsights.clinicalmatching.models.TrialMatcherResults(MutableMapping[str, Any]):
    ivar knowledge_graph_last_update_date: Optional[date]
    ivar model_version: str
    ivar patients: List[TrialMatcherPatientResult]

    @overload
    def __init__(
        self, 
        *, 
        knowledge_graph_last_update_date: Optional[date] = ..., 
        model_version: str, 
        patients: List[TrialMatcherPatientResult]
    )

    @overload
    def __init__(self, mapping: Mapping[str, Any])

    def __init__(
        self, 
        *args: Any, 
        **kwargs: Any
    ) -> None
