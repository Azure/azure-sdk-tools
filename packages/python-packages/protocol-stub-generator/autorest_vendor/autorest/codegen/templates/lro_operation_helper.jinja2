{% import 'operation_tools.jinja2' as op_tools %}
{% import 'keywords.jinja2' as keywords with context %}
{% macro lro_operation() %}
polling = kwargs.pop('polling', True)  # type: Union[bool, {{ keywords.async_class }}PollingMethod]
cls = kwargs.pop('cls', None)  {{ operation_serializer.cls_type_annotation(operation) }}
lro_delay = kwargs.pop(
    'polling_interval',
    self._config.polling_interval
)
cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
if cont_token is None:
    raw_result = {{ keywords.await }}self.{{ operation.initial_operation.name }}(
        {% for parameter in operation.parameters.method %}
        {{ parameter.serialized_name }}={{ parameter.serialized_name }},
        {% endfor %}
        cls=lambda x,y,z: x,
        **kwargs
    )

kwargs.pop('error_map', None)
{% endmacro %}

    {% macro lro_operation_return() %}
    {% import 'keywords.jinja2' as keywords with context %}
    {% set request_builder = operation.request_builder %}
    {% set path_format_arguments = "" %}
    {% set lro_options = (", lro_options={'final-state-via': '"+ operation.lro_options['final-state-via'] + "'}") if operation.lro_options else "" %}
    {% if operation.parameters.path %}
    {% set path_format_arguments = ", path_format_arguments=path_format_arguments" %}
    {% if operation.parameters.path|selectattr("constant") %}
        {% for constant_parameter in operation.parameters.path|selectattr("constant") %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.constant_declaration }}
        {% endfor %}
    {% endif %}
    {{ op_tools.path_format_arguments(operation.parameters.path)|indent }}

    {% endif %}
    if polling is True: polling_method = {{ operation.get_default_polling_method(async_mode, code_model.options["azure_arm"]) }}(lro_delay{{ lro_options }}{{ path_format_arguments }},  **kwargs)
    elif polling is False: polling_method = {{ operation.get_default_no_polling_method(async_mode) }}()
    else: polling_method = polling
    if cont_token:
        return {{ operation.get_poller(async_mode) }}.from_continuation_token(
            polling_method=polling_method,
            continuation_token=cont_token,
            client=self._client,
            deserialization_callback=get_long_running_output
        )
    else:
        return {{ operation.get_poller(async_mode) }}(self._client, raw_result, get_long_running_output, polling_method)
{{ operation.python_name }}.metadata = {'url': '{{ request_builder.url }}'}  # type: ignore
{%- endmacro -%}
