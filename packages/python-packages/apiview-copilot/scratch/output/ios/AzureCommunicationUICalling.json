{
  "comments": [
    {
      "rule_ids": [],
      "line_no": 4,
      "bad_code": "package AzureCommunicationUICalling { ... (large API with many functionalities)",
      "suggestion": "Consider modularizing the API into more focused components or protocols where appropriate.",
      "comment": "While comprehensive, the API surface is quite extensive. Dividing it into smaller, well-defined parts can make it easier for both novice and experienced developers to learn and use the API effectively."
    },
    {
      "rule_ids": ["ios_design.html#ios-service-client-name"],
      "line_no": 12,
      "bad_code": "public class CallCompositeObjectThingyUICompositeThingamajig {",
      "suggestion": "Rename the service client so its name ends with 'Client', for example: 'public class CallCompositeClient { ... }'.",
      "comment": "Service client types MUST be named with the Client suffix per the Azure SDK guidelines. The current name is overly verbose and non‐idiomatic."
    },
    {
      "rule_ids": [],
      "line_no": 16,
      "bad_code": "public var onPictureInPictureChanged: ((_isPictureInPicture: Bool) -> Void)?",
      "suggestion": "public var onPictureInPictureChanged: ((Bool) -> Void)?",
      "comment": "Using an underscored parameter label within the closure is non-idiomatic. Simply declaring the closure with a Bool parameter is clearer; documentation can describe its meaning if needed."
    },
    {
      "rule_ids": [],
      "line_no": 29,
      "bad_code": "public init(withOptions: CallCompositeOptions? = nil)",
      "suggestion": "public init(options: CallCompositeOptions? = nil)",
      "comment": "Avoid using the 'with' prefix in parameter names. Simply using 'options' reads more naturally in Swift and aligns with common iOS API design practices."
    },
    {
      "rule_ids": [],
      "line_no": 30,
      "bad_code": "public init(credential: CommunicationTokenCredential, withOptions: CallCompositeOptions? = nil)",
      "suggestion": "public init(credential: CommunicationTokenCredential, options: CallCompositeOptions? = nil)",
      "comment": "For consistency and clarity, remove the 'with' prefix from the parameter label. This change makes the initializer’s signature more idiomatic to Swift."
    },
    {
      "rule_ids": [],
      "line_no": 32,
      "bad_code": "public func handlePushNotification(pushNotification: PushNotification, completionHandler: ((Result<Void, Error>) -> Void)? = nil)",
      "suggestion": "public func handlePushNotification(_ pushNotification: PushNotification, completionHandler: ((Result<Void, Error>) -> Void)? = nil)",
      "comment": "Consider omitting the external parameter name for the primary argument. Using an underscore improves readability per Swift's API design guidelines."
    },
    {
      "rule_ids": [],
      "line_no": 34,
      "bad_code": "public func registerPushNotifications(deviceRegistrationToken: Data, completionHandler: ((Result<Void, Error>) -> Void)? = nil)",
      "suggestion": "public func registerPushNotifications(withDeviceToken deviceToken: Data, completionHandler: ((Result<Void, Error>) -> Void)? = nil)",
      "comment": "Renaming 'deviceRegistrationToken' to 'deviceToken' makes the parameter more concise while conveying the same meaning, aligning with iOS conventions."
    },
    {
      "rule_ids": [],
      "line_no": 48,
      "bad_code": "public func set(remoteParticipantViewData: ParticipantViewData, for: CommunicationIdentifier, completionHandler: ((Result<Void, SetParticipantViewDataError>) -> Void)? = nil)",
      "suggestion": "public func setRemoteParticipantViewData(_ viewData: ParticipantViewData, for participant: CommunicationIdentifier, completionHandler: ((Result<Void, SetParticipantViewDataError>) -> Void)? = nil)",
      "comment": "Clarify the method name and the parameter label to improve readability. Explicitly naming the parameter (e.g. 'for participant') aligns better with Swift’s emphasis on clarity."
    },
    {
      "rule_ids": ["ios_design.html#ios-language-swift-idiomatic"],
      "line_no": 49,
      "bad_code": "public var isHidden: Bool { get set (isHidden)}",
      "suggestion": "Use standard Swift property declaration syntax, for example: 'public var isHidden: Bool { get set }'.",
      "comment": "The property declaration for 'isHidden' does not use conventional Swift syntax and appears unidiomatic. Clarifying the accessor syntax will improve readability and adherence to Swift style guidelines."
    },
    {
      "rule_ids": ["ios_design.html#ios-service-client-name"],
      "line_no": 52,
      "bad_code": "extension CallComposite {",
      "suggestion": "Ensure consistency with the service client’s name. For example, if the client is renamed to 'CallCompositeClient', update the extension to 'extension CallCompositeClient { ... }'.",
      "comment": "There is an inconsistency between the client class name and its extension. The extension refers to 'CallComposite', which does not match the actual client type. Consistent naming improves discoverability and clarity."
    },
    {
      "rule_ids": [],
      "line_no": 91,
      "bad_code": "public struct CallCompositeOptions { ... } (init with many parameters including deprecated callScreenOptions & setupScreenOptions)",
      "suggestion": "Consider refactoring this initializer by splitting configuration into smaller, cohesive structures or adopting a builder pattern.",
      "comment": "The options initializer carries many parameters, which can overwhelm developers. Breaking the configuration into focused sub-objects improves usability and discoverability, aligning with Swift’s simplicity."
    }
  ]
}
