parameters:
  # JackTn/TestRepo-One:
  #   Branch: "main"
  #   Path: "/specification/common-types/"
  #   TargetRepos:
  #     JackTn/TestRepo-Two:
  #       Branch: "main"
  #       Path: "/specification/common-types/"
  #     JackTn/TestRepo-Three:
  #       Branch: "main"
  #       Path: "/specification/common-types/"
  - name: Repos
    type: object
  # Github PAT
  - name: GH_TOKEN
    type: string

steps:
  - pwsh: |
      Install-Module -Name PowerShellForGitHub -Force
    displayName: Install PowerShellForGitHub

  - ${{ each repo in parameters.Repos }}:
      - pwsh: |
          Set-PsDebug -Trace 1
          $SourceRepo = '${{ repo.key }}'
          $SourceFolder = $SourceRepo -split "/" -join "-"
          $SourceBranch = '${{ repo.value.Branch }}'
          if (-not (Test-Path ${{ repo.key }})) {
            New-Item -Path $SourceFolder -ItemType Directory -Force
            Set-Location $SourceFolder
            git init
            git remote add Source "https://${{ parameters.GH_TOKEN }}@github.com/${SourceRepo}.git"
          } else {
            Set-Location $SourceFolder
          }

          # Check the default branch
          if (!$SourceBranch) {
            $defaultBranch = (git remote show Source | Out-String) -replace "(?ms).*HEAD branch: (\w+).*", '$1'
            Write-Host "No source branch. Fetch default branch $defaultBranch."
            $SourceBranch = $defaultBranch
          }

          git fetch --no-tags Source $SourceBranch
          if ($LASTEXITCODE -ne 0) {
            Write-Host "#`#vso[task.logissue type=error]Failed to fetch ${SourceRepo}:${SourceBranch}"
            exit 1
          }

          git checkout -B source_branch "refs/remotes/Source/${SourceBranch}"

          Set-PsDebug -Off

        displayName: ${{ repo.key }} - Clone ${{ repo.value.Branch }}
        continueOnError: true

      - ${{ each target in repo.value.TargetRepos }}:
          - pwsh: |
              Set-PsDebug -Trace 1
              $UserName = "azure-sdk"
              $UserEmail = "azuresdk@microsoft.com"

              $home_dir = $pwd

              $SourceRepo = '${{ repo.key }}'
              $SourceFolder = $SourceRepo -split "/" -join "-"
              $SourceSyncFilePath = '${{repo.value.Path}}'
              $SourceBranch = '${{ repo.value.Branch }}'

              $TargetRepo = '${{ target.key }}'
              $TargetFolder = $TargetRepo -split "/" -join "-"
              $TargetSyncFilePath = '${{target.value.Path}}'
              $TargetBranch = '${{ target.value.Branch }}'

              $pullRequestBranch = "Sync-from-$SourceFolder"
              $pullRequestTitle = "[AutoSync] Sync $($TargetSyncFilePath) folder from $($SourceRepo) repo"
              $pullRequestBody = "Sync $($TargetSyncFilePath) folder from [$SourceRepo](https://github.com/$SourceRepo/tree/$SourceBranch$SourceSyncFilePath)"

              Function FailOnError([string]$ErrorMessage, $CleanUpScripts = 0) {
                if ($LASTEXITCODE -ne 0) {
                  Write-Host "#`#vso[task.logissue type=error]$ErrorMessage"
                  if ($CleanUpScripts -ne 0) { Invoke-Command $CleanUpScripts }
                  exit 1
                }
              }

              if (-not (Test-Path $TargetFolder)) {
                New-Item -Path $TargetFolder -ItemType Directory -Force
                Set-Location $TargetFolder
                git init
                git remote add Target "https://${{parameters.GH_TOKEN}}@github.com/${TargetRepo}.git"
              } else {
                Set-Location $TargetFolder
              }

              git config --global user.email "$UserEmail"
              git config --global user.name "$UserName"

              if (!$TargetBranch) {
                $defaultBranch = (git remote show Target | Out-String) -replace "(?ms).*HEAD branch: (\w+).*", '$1'
                Write-Host "No target branch. Fetch default branch $defaultBranch."
                $TargetBranch = $defaultBranch
              }

              git fetch --all
              FailOnError "Failed to fetch DefaultBranch ${defaultBranch}."

              $isExistBranch = $(git branch --list --remotes "Target/$pullRequestBranch")
              if ($isExistBranch) {
                git checkout -b $pullRequestBranch "Target/$pullRequestBranch"
              }
              else {
                git checkout -b $pullRequestBranch "Target/$TargetBranch"
              }

              if (git diff "refs/remotes/Target/$($TargetBranch)") {
                git -c user.name=$UserName -c user.email=$UserEmail merge --strategy-option=theirs "Target/$TargetBranch"
                FailOnError "Failed to merge for ${TargetRepo}:${TargetBranch}"
              }

              git push Target "${pullRequestBranch}:refs/heads/${pullRequestBranch}"
              FailOnError "Failed to push to ${pullRequestBranch}:${pullRequestBranch}"

              $FromPath = Join-Path $home_dir "$SourceFolder" "$SourceSyncFilePath"
              $ToPath = Join-Path $home_dir "$TargetFolder" "$TargetSyncFilePath"

              if (test-path $ToPath) {
                Remove-Item "$ToPath" -Force -Recurse
              }

              Copy-Item -Path "$FromPath" -Destination "$ToPath" -Recurse -Force

              $untrackkedFiles = git ls-files -o 
              if ($untrackkedFiles) {
                git add .
                git commit -m "Sync files from $SourceRepo/$SourceBranch"
                git push Target $($pullRequestBranch)
                FailOnError "Failed to push to $($TargetRepo):$($pullRequestBranch)"
              } else {
                $diffResult = git diff "refs/remotes/Target/$($TargetBranch)"
                if ($diffResult) {
                  git add .
                  git commit -m "Sync files from $SourceRepo/$SourceBranch"
                  git push Target $($pullRequestBranch)
                  FailOnError "Failed to push to $($TargetRepo):$($pullRequestBranch)"
                }
              }

              $OwnerName = ($TargetRepo -split '/')[0] 
              $pullRequests = Get-GitHubPullRequest `
                -AccessToken ${{ parameters.GH_TOKEN }} `
                -Uri "https://github.com/$($TargetRepo)" `
                -State Open `
                -Head "$($OwnerName):$($pullRequestBranch)" `
                -Base $($TargetBranch)
              FailOnError "Get $($TargetRepo) pull request: $_"

              if ($pullRequests.Count -ne 0) { 
                echo "PR has been created at https://github.com/$($TargetRepo)/pull/$($pullRequests.number)"
              } else {
                $newPullRequest = New-GitHubPullRequest `
                  -AccessToken ${{ parameters.GH_TOKEN }} `
                  -Uri "https://github.com/$($TargetRepo)" `
                  -Head "$($OwnerName):$($pullRequestBranch)" `
                  -Base $($TargetBranch) `
                  -Title $($pullRequestTitle) `
                  -Body $($pullRequestBody) `
                  -MaintainerCanModify
                FailOnError "create $($pullRequestBranch) pull request: $_"

                echo "PR has been created at https://github.com/$($TargetRepo)/pull/$($newPullRequest.number)"
              }

              Set-PsDebug -Off

            displayName: Sync ${{ target.value.Path }} files from ${{ repo.key }} to ${{ target.key }}
            continueOnError: true
