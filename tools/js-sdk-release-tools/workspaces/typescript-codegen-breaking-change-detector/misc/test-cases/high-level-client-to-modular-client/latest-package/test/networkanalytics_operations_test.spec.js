"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.testPollingOptions = void 0;
const test_recorder_1 = require("@azure-tools/test-recorder");
const test_credential_1 = require("@azure-tools/test-credential");
const chai_1 = require("chai");
const microsoftNetworkAnalytics_1 = require("../src/microsoftNetworkAnalytics");
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
exports.testPollingOptions = {
    updateIntervalInMs: (0, test_recorder_1.isPlaybackMode)() ? 0 : undefined,
};
describe("NetworkAnalytics test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let resourcename;
    beforeEach(async function () {
        recorder = new test_recorder_1.Recorder(this.currentTest);
        await recorder.start(recorderOptions);
        subscriptionId = test_recorder_1.env.SUBSCRIPTION_ID || '';
        // This is an example of how the environment variables are used
        const credential = (0, test_credential_1.createTestCredential)();
        client = new microsoftNetworkAnalytics_1.MicrosoftNetworkAnalytics(credential, subscriptionId, recorder.configureClientOptions({}));
        location = "eastus2euap";
        resourceGroup = "myjstest";
        resourcename = "resourcetest";
    });
    afterEach(async function () {
        await recorder.stop();
    });
    it("operation list test", async function () {
        const resArray = new Array();
        for await (let item of client.operations.list()) {
            resArray.push(item);
        }
        chai_1.assert.notEqual(resArray.length, 0);
    });
    it.skip("dataProducts create test", async function () {
        const res = await client.dataProducts.beginCreateAndWait(resourceGroup, resourcename, {
            location,
            properties: {
                majorVersion: "1",
                product: "MCC",
                publisher: "Microsoft"
            }
        }, exports.testPollingOptions);
        chai_1.assert.equal(res.name, resourcename);
    }).timeout(14400000);
    it("dataProducts get test", async function () {
        const res = await client.dataProducts.get(resourceGroup, resourcename);
        chai_1.assert.equal(res.name, resourcename);
    });
    it("dataProducts list test", async function () {
        const resArray = new Array();
        for await (let item of client.dataProducts.listByResourceGroup(resourceGroup)) {
            resArray.push(item);
        }
        chai_1.assert.equal(resArray.length, 1);
    });
    it("dataProducts delete test", async function () {
        const resArray = new Array();
        const res = await client.dataProducts.beginDeleteAndWait(resourceGroup, resourcename, exports.testPollingOptions);
        for await (let item of client.dataProducts.listByResourceGroup(resourceGroup)) {
            resArray.push(item);
        }
        chai_1.assert.equal(resArray.length, 0);
    });
});
//# sourceMappingURL=networkanalytics_operations_test.spec.js.map