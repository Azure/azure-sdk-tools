//go:build go1.18
// +build go1.18

{{copyright}}

package {{packageName}}_test

import (
	"context"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
    "github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
    "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
    "github.com/stretchr/testify/suite"
)
{{imports}}

type {{testCaseName}}TestSuite struct {
	suite.Suite

	ctx     context.Context
	cred    azcore.TokenCredential
	options *arm.ClientOptions

	{%- for name, value in variablesOutput %}
    {{name}} string
    {%- endfor %}
    {%- for variable, _ in requiredVariablesDefault %}
    {{variable}} string
    {%- endfor %}
}

func (testsuite *{{testCaseName}}TestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred, testsuite.options = testutil.GetCredAndClientOptions(testsuite.T())

    {%- for name, value in variablesOutput %}
    {%- if value !== "<newDefinedVariable>" and value !== "testsuite." + name %}
        testsuite.{{name}} = {{value}}
    {%- endif %}
    {%- endfor %}
    {%- for variable, _ in requiredVariablesDefault %}
    {%- if not variables.hasOwnProperty(variable) %}
        {%- if variable === "subscriptionId" %}
        testsuite.subscriptionId = testutil.GetEnv("AZURE_SUBSCRIPTION_ID", "")
        {%- else %}
        testsuite.{{variable}} = testutil.GetEnv("{{jsFunc.toSnakeCase(variable).toUpperCase()}}", "{{requiredVariablesDefault[variable]}}")
        {%- endif %}
    {%- endif %}
    {%- endfor %}

    testutil.StartRecording(testsuite.T(), "sdk/resourcemanager/{{rpName}}/{{packageName}}/testdata")
	
    {%- if scope.toLowerCase() == 'resourcegroup'%}
    resourceGroup, _, err := testutil.CreateResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.location)
	testsuite.Require().NoError(err)
	testsuite.resourceGroupName = *resourceGroup.Name
    {%- endif %}
    {%- if prepareSteps.length > 0 %}
	testsuite.Prepare()
    {%- endif %}
}

func (testsuite *{{testCaseName}}TestSuite) TearDownSuite() {
    {%- if cleanUpSteps.length > 0 %}
	testsuite.Cleanup()
    {%- endif %}
    {%- if scope.toLowerCase() == 'resourcegroup'%}
	_, err := testutil.DeleteResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName)
	testsuite.Require().NoError(err)
    {%- endif %}
	testutil.StopRecording(testsuite.T())
}

func Test{{testCaseName}}TestSuite(t *testing.T) {
	suite.Run(t, new({{testCaseName}}TestSuite))
}
{%- if prepareSteps.length > 0 %}

func (testsuite *{{testCaseName}}TestSuite) Prepare() {
	{%- set steps = prepareSteps %}
	{%- include "./scenarioContent.go.njk" %}
}
{%- endif %}

{% for testScenario in scenarios %}
func (testsuite *{{testCaseName}}TestSuite) Test{{jsFunc.capitalize(jsFunc.toCamelCase(testScenario.scenario))}}() {
	{%- for variable, value in testScenario.requiredVariablesDefault %}
	{%- if not requiredVariablesDefault.hasOwnProperty(variable) %}
    {{variable}} := testutil.GetEnv("{{jsFunc.toSnakeCase(variable).toUpperCase()}}", "{{value}}")
	{%- endif %}
	{%- endfor %}
	{%- for name, value in testScenario.variablesOutput %}
    {%- if value === "<newDefinedVariable>" %}
    var {{name}} string
    {%- else %}
    {{name}} := {{value}}
    {%- endif %}
	{%- endfor %}
	
	{%- set steps = testScenario.steps %}
	{%- include "./scenarioContent.go.njk" %}
}
{%- endfor %}
{%- if cleanUpSteps.length > 0 %}

func (testsuite *{{testCaseName}}TestSuite) Cleanup() {
	{%- set steps = cleanUpSteps %}
	{%- include "./scenarioContent.go.njk" %}
}
{%- endif %}