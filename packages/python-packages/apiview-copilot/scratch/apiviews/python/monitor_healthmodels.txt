# Package is parsed using apiview-stub-generator(version:0.3.18), Python version: 3.13.5


namespace azure.monitor.healthmodels
	
	class azure.monitor.healthmodels.HealthModelsClient: implements ContextManager 
		ivar entities: EntitiesOperations
		ivar evidences: EvidencesOperations
		ivar relationships: RelationshipsOperations
		ivar signals: SignalsOperations
		
		def __init__(
			    self, 
			    endpoint: str, 
			    credential: TokenCredential, 
			    *, 
			    api_version: str = ..., 
			    **kwargs: Any
			) -> None
		
		def close(self) -> None
		
		def send_request(
			    self, 
			    request: HttpRequest, 
			    *, 
			    stream: bool = False, 
			    **kwargs: Any
			) -> HttpResponse
		
		
namespace azure.monitor.healthmodels.aio
	
	class azure.monitor.healthmodels.aio.HealthModelsClient: implements AsyncContextManager 
		ivar entities: EntitiesOperations
		ivar evidences: EvidencesOperations
		ivar relationships: RelationshipsOperations
		ivar signals: SignalsOperations
		
		def __init__(
			    self, 
			    endpoint: str, 
			    credential: AsyncTokenCredential, 
			    *, 
			    api_version: str = ..., 
			    **kwargs: Any
			) -> None
		
		async def close(self) -> None
		
		def send_request(
			    self, 
			    request: HttpRequest, 
			    *, 
			    stream: bool = False, 
			    **kwargs: Any
			) -> Awaitable[AsyncHttpResponse]
		
		
namespace azure.monitor.healthmodels.aio.operations
	
	class azure.monitor.healthmodels.aio.operations.EntitiesOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@distributed_trace_async
		async def get(
			    self, 
			    entity_name: str, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> Entity
		
		@distributed_trace
		def list(
			    self, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> AsyncItemPaged[Entity]
		
		
	class azure.monitor.healthmodels.aio.operations.EvidencesOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@distributed_trace_async
		async def get(
			    self, 
			    entity_name: str, 
			    signal_name: str, 
			    evidence_name: str, 
			    *, 
			    end_time: Optional[datetime] = ..., 
			    start_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> Evidence
		
		@distributed_trace
		def list(
			    self, 
			    entity_name: str, 
			    signal_name: str, 
			    *, 
			    end_time: Optional[datetime] = ..., 
			    start_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> AsyncItemPaged[Evidence]
		
		
	class azure.monitor.healthmodels.aio.operations.RelationshipsOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@distributed_trace_async
		async def get(
			    self, 
			    relationship_name: str, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> Relationship
		
		@distributed_trace
		def list(
			    self, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> AsyncItemPaged[Relationship]
		
		
	class azure.monitor.healthmodels.aio.operations.SignalsOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@distributed_trace_async
		async def get(
			    self, 
			    entity_name: str, 
			    signal_name: str, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> Signal
		
		@distributed_trace
		def list(
			    self, 
			    entity_name: str, 
			    **kwargs: Any
			) -> AsyncItemPaged[Signal]
		
		
namespace azure.monitor.healthmodels.models
	
	class azure.monitor.healthmodels.models.Entity(MutableMapping[str, Any]): implements Collection , Mapping 
		ivar created_at: datetime
		ivar deleted_at: Optional[datetime]
		ivar display_name: Optional[str]
		ivar impact: Optional[Union[str, PropagationImpactType]]
		ivar kind: str
		ivar last_transitioned_at: Optional[datetime]
		ivar location_id: Optional[str]
		ivar name: str
		ivar state: Union[str, HealthStatus]
		ivar tags: Optional[Dict[str, str]]
		
		def __delitem__(self, key: str) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    created_at: datetime, 
			    deleted_at: Optional[datetime] = ..., 
			    display_name: Optional[str] = ..., 
			    impact: Optional[Union[str, PropagationImpactType]] = ..., 
			    kind: str, 
			    last_transitioned_at: Optional[datetime] = ..., 
			    location_id: Optional[str] = ..., 
			    name: str, 
			    state: Union[str, HealthStatus], 
			    tags: Optional[Dict[str, str]] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		def __init_subclass__(cls, discriminator: Optional[str] = None) -> None
		
		def __new__(
			    cls, 
			    *args: Any, 
			    **kwargs: Any
			) -> Self
		
		def __repr__(self) -> str
		
		def __setitem__(
			    self, 
			    key: str, 
			    value: Any
			) -> None
		
		def as_dict(
			    self, 
			    *, 
			    exclude_readonly: bool = False
			) -> Dict[str, Any]
		
		def clear(self) -> None
		
		def copy(self) -> Model
		
		def pop(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def popitem(self) -> Tuple[str, Any]
		
		def setdefault(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def update(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.monitor.healthmodels.models.ErrorDetails(MutableMapping[str, Any]): implements Collection , Mapping 
		ivar code: str
		ivar data: Optional[Dict[str, str]]
		ivar message: Optional[str]
		
		def __delitem__(self, key: str) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    code: str, 
			    data: Optional[Dict[str, str]] = ..., 
			    message: Optional[str] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		def __init_subclass__(cls, discriminator: Optional[str] = None) -> None
		
		def __new__(
			    cls, 
			    *args: Any, 
			    **kwargs: Any
			) -> Self
		
		def __repr__(self) -> str
		
		def __setitem__(
			    self, 
			    key: str, 
			    value: Any
			) -> None
		
		def as_dict(
			    self, 
			    *, 
			    exclude_readonly: bool = False
			) -> Dict[str, Any]
		
		def clear(self) -> None
		
		def copy(self) -> Model
		
		def pop(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def popitem(self) -> Tuple[str, Any]
		
		def setdefault(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def update(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.monitor.healthmodels.models.Evidence(MutableMapping[str, Any]): implements Collection , Mapping 
		ivar evidence_name: str
		ivar time_series: Optional[List[ForwardRef('EvidenceDataPoint')]]
		
		def __delitem__(self, key: str) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    evidence_name: str, 
			    time_series: Optional[List[EvidenceDataPoint]] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		def __init_subclass__(cls, discriminator: Optional[str] = None) -> None
		
		def __new__(
			    cls, 
			    *args: Any, 
			    **kwargs: Any
			) -> Self
		
		def __repr__(self) -> str
		
		def __setitem__(
			    self, 
			    key: str, 
			    value: Any
			) -> None
		
		def as_dict(
			    self, 
			    *, 
			    exclude_readonly: bool = False
			) -> Dict[str, Any]
		
		def clear(self) -> None
		
		def copy(self) -> Model
		
		def pop(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def popitem(self) -> Tuple[str, Any]
		
		def setdefault(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def update(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.monitor.healthmodels.models.EvidenceComparisonOperator(str, Enum):
		EQUAL = "Equal"
		GREATER_THAN = "GreaterThan"
		GREATER_THAN_OR_EQUAL = "GreaterThanOrEqual"
		LESS_THAN = "LessThan"
		LESS_THAN_OR_EQUAL = "LessThanOrEqual"
		
		
	class azure.monitor.healthmodels.models.EvidenceData(MutableMapping[str, Any]): implements Collection , Mapping 
		ivar name: str
		ivar thresholds: Optional[List[ForwardRef('EvidenceThreshold')]]
		ivar value: float
		
		def __delitem__(self, key: str) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    name: str, 
			    thresholds: Optional[List[EvidenceThreshold]] = ..., 
			    value: float
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		def __init_subclass__(cls, discriminator: Optional[str] = None) -> None
		
		def __new__(
			    cls, 
			    *args: Any, 
			    **kwargs: Any
			) -> Self
		
		def __repr__(self) -> str
		
		def __setitem__(
			    self, 
			    key: str, 
			    value: Any
			) -> None
		
		def as_dict(
			    self, 
			    *, 
			    exclude_readonly: bool = False
			) -> Dict[str, Any]
		
		def clear(self) -> None
		
		def copy(self) -> Model
		
		def pop(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def popitem(self) -> Tuple[str, Any]
		
		def setdefault(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def update(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.monitor.healthmodels.models.EvidenceDataPoint(MutableMapping[str, Any]): implements Collection , Mapping 
		ivar evidence: Optional[List[ForwardRef('EvidenceData')]]
		ivar occurred_at: datetime
		
		def __delitem__(self, key: str) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    evidence: Optional[List[EvidenceData]] = ..., 
			    occurred_at: datetime
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		def __init_subclass__(cls, discriminator: Optional[str] = None) -> None
		
		def __new__(
			    cls, 
			    *args: Any, 
			    **kwargs: Any
			) -> Self
		
		def __repr__(self) -> str
		
		def __setitem__(
			    self, 
			    key: str, 
			    value: Any
			) -> None
		
		def as_dict(
			    self, 
			    *, 
			    exclude_readonly: bool = False
			) -> Dict[str, Any]
		
		def clear(self) -> None
		
		def copy(self) -> Model
		
		def pop(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def popitem(self) -> Tuple[str, Any]
		
		def setdefault(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def update(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.monitor.healthmodels.models.EvidenceThreshold(MutableMapping[str, Any]): implements Collection , Mapping 
		ivar comparison_operator: Union[str, EvidenceComparisonOperator]
		ivar name: str
		ivar value: float
		
		def __delitem__(self, key: str) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    comparison_operator: Union[str, EvidenceComparisonOperator], 
			    name: str, 
			    value: float
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		def __init_subclass__(cls, discriminator: Optional[str] = None) -> None
		
		def __new__(
			    cls, 
			    *args: Any, 
			    **kwargs: Any
			) -> Self
		
		def __repr__(self) -> str
		
		def __setitem__(
			    self, 
			    key: str, 
			    value: Any
			) -> None
		
		def as_dict(
			    self, 
			    *, 
			    exclude_readonly: bool = False
			) -> Dict[str, Any]
		
		def clear(self) -> None
		
		def copy(self) -> Model
		
		def pop(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def popitem(self) -> Tuple[str, Any]
		
		def setdefault(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def update(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.monitor.healthmodels.models.HealthStatus(str, Enum):
		DEGRADED = "Degraded"
		DELETED = "Deleted"
		ERROR = "Error"
		HEALTHY = "Healthy"
		UNKNOWN = "Unknown"
		
		
	class azure.monitor.healthmodels.models.PropagationImpactType(str, Enum):
		LIMITED = "Limited"
		STANDARD = "Standard"
		SUPPRESSED = "Suppressed"
		
		
	class azure.monitor.healthmodels.models.Relationship(MutableMapping[str, Any]): implements Collection , Mapping 
		ivar created_at: datetime
		ivar deleted_at: Optional[datetime]
		ivar display_name: Optional[str]
		ivar from_entity: str
		ivar kind: Union[str, RelationshipKind]
		ivar name: str
		ivar to_entity: str
		
		def __delitem__(self, key: str) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    created_at: datetime, 
			    deleted_at: Optional[datetime] = ..., 
			    display_name: Optional[str] = ..., 
			    from_entity: str, 
			    kind: Union[str, RelationshipKind], 
			    name: str, 
			    to_entity: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		def __init_subclass__(cls, discriminator: Optional[str] = None) -> None
		
		def __new__(
			    cls, 
			    *args: Any, 
			    **kwargs: Any
			) -> Self
		
		def __repr__(self) -> str
		
		def __setitem__(
			    self, 
			    key: str, 
			    value: Any
			) -> None
		
		def as_dict(
			    self, 
			    *, 
			    exclude_readonly: bool = False
			) -> Dict[str, Any]
		
		def clear(self) -> None
		
		def copy(self) -> Model
		
		def pop(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def popitem(self) -> Tuple[str, Any]
		
		def setdefault(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def update(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.monitor.healthmodels.models.RelationshipKind(str, Enum):
		CHILD = "Child"
		
		
	class azure.monitor.healthmodels.models.Signal(MutableMapping[str, Any]): implements Collection , Mapping 
		ivar created_at: datetime
		ivar deleted_at: Optional[datetime]
		ivar last_transitioned_at: Optional[datetime]
		ivar name: str
		ivar state: Union[str, HealthStatus]
		
		def __delitem__(self, key: str) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    created_at: datetime, 
			    deleted_at: Optional[datetime] = ..., 
			    last_transitioned_at: Optional[datetime] = ..., 
			    name: str, 
			    state: Union[str, HealthStatus]
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		def __init_subclass__(cls, discriminator: Optional[str] = None) -> None
		
		def __new__(
			    cls, 
			    *args: Any, 
			    **kwargs: Any
			) -> Self
		
		def __repr__(self) -> str
		
		def __setitem__(
			    self, 
			    key: str, 
			    value: Any
			) -> None
		
		def as_dict(
			    self, 
			    *, 
			    exclude_readonly: bool = False
			) -> Dict[str, Any]
		
		def clear(self) -> None
		
		def copy(self) -> Model
		
		def pop(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def popitem(self) -> Tuple[str, Any]
		
		def setdefault(
			    self, 
			    key: str, 
			    default: Any = _UNSET
			) -> Any
		
		def update(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
namespace azure.monitor.healthmodels.operations
	
	class azure.monitor.healthmodels.operations.EntitiesOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@distributed_trace
		def get(
			    self, 
			    entity_name: str, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> Entity
		
		@distributed_trace
		def list(
			    self, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> ItemPaged[Entity]
		
		
	class azure.monitor.healthmodels.operations.EvidencesOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@distributed_trace
		def get(
			    self, 
			    entity_name: str, 
			    signal_name: str, 
			    evidence_name: str, 
			    *, 
			    end_time: Optional[datetime] = ..., 
			    start_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> Evidence
		
		@distributed_trace
		def list(
			    self, 
			    entity_name: str, 
			    signal_name: str, 
			    *, 
			    end_time: Optional[datetime] = ..., 
			    start_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> ItemPaged[Evidence]
		
		
	class azure.monitor.healthmodels.operations.RelationshipsOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@distributed_trace
		def get(
			    self, 
			    relationship_name: str, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> Relationship
		
		@distributed_trace
		def list(
			    self, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> ItemPaged[Relationship]
		
		
	class azure.monitor.healthmodels.operations.SignalsOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@distributed_trace
		def get(
			    self, 
			    entity_name: str, 
			    signal_name: str, 
			    *, 
			    at_time: Optional[datetime] = ..., 
			    **kwargs: Any
			) -> Signal
		
		@distributed_trace
		def list(
			    self, 
			    entity_name: str, 
			    **kwargs: Any
			) -> ItemPaged[Signal]
		
		