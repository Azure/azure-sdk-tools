parameters:
  - name: sdk
    type: string

  - name: service
    type: string

  - name: serviceType
    type: string

  - name: trigger
    type: string

  - name: sdkGenerationName
    type: string
steps:
  - bash: |
      echo "will parse task result"
      LOG_Dir="/tmp/output/"
      for TASK_NAME in "init" "generateAndBuild" "mockTest"
      do
        if [ ${TASK_NAME} = "mockTest" ]; then
          TASK_OUTPUT_PATH="/tmp/output/mockTestOutput.json"
        fi

        generateResult \
          --buildId=$(Build.BuildId) \
          --taskName=${TASK_NAME} \
          --logfile="/tmp/output/${TASK_NAME}-task.log" \
          --resultOutputPath="/tmp/output/${TASK_NAME}-task-result.json" \
          --dockerResultFile="/tmp/output/taskResults.json" \
          --taskOutputPath="${TASK_OUTPUT_PATH}"
        retVal=$?
        if [ $retVal -ne 0 ]; then
            #TODO: when all language support mock test, set pipelineResult for parse task result
            echo "wait all language support mock test"
            #echo "##vso[task.setvariable variable=pipelineResult;]failed"
        fi
      done
    displayName: Parse task result
    condition: or(contains(variables['pipelineResult'], 'success'), contains(variables['pipelineResult'], 'failed'))

  - bash: |
      prepareArtifactFiles \
        --artifactDir="$(System.ArtifactsDirectory)" \
        --generateAndBuildOutputFile="/tmp/output/generateAndBuildOutputJson.json" \
        --language="${{ parameters.sdk }}"
      retVal=$?
      if [ $retVal -ne 0 ]; then
          echo "##vso[task.setvariable variable=pipelineResult;]failed"
          exit 1
      fi
      cp /tmp/output/docker.log $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-full.log
      cp /tmp/output/init-task.log $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-init.log
      cp /tmp/output/init-task-result.json $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-init-result.json
      cp /tmp/output/generateAndBuild-task.log $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-generateAndBuild.log
      cp /tmp/output/generateAndBuild-task-result.json $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-generateAndBuild-result.json
      cp /tmp/output/mockTest-task.log $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-mockTest.log | echo "wait all language support mock test"
      cp /tmp/output/mockTest-task-result.json $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-mockTest-result.json | echo "wait all language support mock test"
    displayName: Prepare artifact
    workingDirectory: $(SDK_REPO)
    condition: contains(variables['pipelineResult'], 'success')

  - task: PublishPipelineArtifact@1
    displayName: Publish SDK Generation pipeline artifact
    inputs:
      targetPath: $(System.ArtifactsDirectory)/
      artifactName: sdk-generation
    condition: contains(variables['pipelineResult'], 'success')

  - bash: |
      publishResult \
        --storageType=eventhub \
        --pipelineStatus=completed \
        --buildId="$(Build.BuildId)" \
        --trigger='${{ parameters.trigger }}' \
        --logPath=$(Build.BuildId)/logs \
        --resultsPath='["/tmp/output/init-task-result.json",
          "/tmp/output/generateAndBuild-task-result.json",
          "/tmp/output/mockTest-task-result.json"]'
      retVal=$?
      if [ $retVal -ne 0 ]; then
          echo "##vso[task.setvariable variable=pipelineResult;]failed"
          exit 1
      fi
    displayName: Publish status
    env:
      EVENTHUB_SAS_URL: $(EVENTHUB_SAS_URL)
    condition: always()

  - bash: |
      echo "will create PR"
      git config --global user.email "no-reply@azure-sdk.com"
      git config --global user.name "$(REPO_OWNER)"

      packages=`cat /tmp/output/generateAndBuildOutputJson.json | jq -c '.packages | .[]'`
      for package in ${packages}
      do
        packageName=`echo ${package} | jq -r '.packageName'`
        paths=`echo ${package} | jq -r '.path |.[]'`
        for path in ${paths}
        do
            git add ${path}
        done
        git commit -m '[auto]create by sdk generation'
        if [ "${{ parameters.serviceType }}" = "resource-manager" ];then
          branchName=sdkGen/${{ parameters.sdkGenerationName }}/arm-${{ parameters.service }}-${packageName}
        else
          branchName=sdkGen/${{ parameters.sdkGenerationName }}/dpg-${{ parameters.service }}-${packageName}
        fi
        git checkout -b ${branchName}
        pushSdkRepoUrl=$(echo $(sdkRepoUrl) | sed "s#https://#https://$(REPO_OWNER):$(REPO_OWNER_ACCESSKEY)@#")
        pushSdkRepoUrl=$(echo ${pushSdkRepoUrl} | sed "s#Azure#$(REPO_OWNER)#")
        git push ${pushSdkRepoUrl}
        sdkRepoPullsApi=$(echo $(sdkRepoUrl) | sed "s#https://#https://api.#")
        sdkRepoPullsApi=$(echo ${sdkRepoPullsApi} | sed "s#Azure#repos/$(REPO_OWNER)#")
        sdkRepoPullsApi=$(echo ${sdkRepoPullsApi} | sed "s#.git\$#/pulls#")
        curl \
          -u "$(REPO_OWNER)":"$(REPO_OWNER_ACCESSKEY)" \
          -H "Accept: application/vnd.github.v3+json" \
          -X POST \
          -d '{"title":"[AutoPR-${{ parameters.service }}]autogenerated","body":"","base":"main", "head":"'$(REPO_OWNER)':'${branchName}'"}' \
          ${sdkRepoPullsApi}

        git reset HEAD~
      done
    workingDirectory: $(SDK_REPO)
    displayName: Submit Pull Request
    condition: contains(variables['pipelineResult'], 'success')