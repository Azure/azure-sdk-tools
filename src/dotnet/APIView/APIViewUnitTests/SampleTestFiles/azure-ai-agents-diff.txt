


    namespace azure.ai.agents

  - class azure.ai.agents.AgentsClient(ClientMixinABC[PipelineClient, AgentsClientConfiguration]): implements ContextManager 
  + class azure.ai.agents.AgentsClient(ClientMixinABC[PipelineClient[HttpRequest, HttpResponse], AgentsClientConfiguration]): implements ContextManager 
    + ivar files: FilesOperations
    + ivar messages: MessagesOperations
    + ivar run_steps: RunStepsOperations
    + ivar runs: RunsOperations
    + ivar threads: ThreadsOperations
    + ivar vector_store_file_batches: VectorStoreFileBatchesOperations
    + ivar vector_store_files: VectorStoreFilesOperations
    + ivar vector_stores: VectorStoresOperations

      def __init__(
            self, 
            endpoint: str, 
            credential: TokenCredential, 
      +     *, 
      +     api_version: str = ..., 
            **kwargs: Any
        ) -> None

      def close(self) -> None

      @overload
      def create_agent(
            self, 
            *, 
            content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: str, 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      def create_agent(
            self, 
      +     body: JSON, 
            *, 
            content_type: str = "application/json", 
      -     description: Optional[str] = ..., 
      -     instructions: Optional[str] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: str, 
      -     name: Optional[str] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     toolset: Optional[ToolSet] = ..., 
      -     top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      def create_agent(
            self, 
      -     body: JSON, 
      +     body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

    - @overload
    - def create_agent(
      -     self, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - def create_agent(
      -     self, 
      -     *, 
      -     content_type: str = "application/json", 
      -     description: Optional[str] = ..., 
      -     instructions: Optional[str] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: str, 
      -     name: Optional[str] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_resources: Optional[ToolResources] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - def create_agent(
      -     self, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - def create_agent(
      -     self, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
      @distributed_trace
      def create_agent(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
      -     content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: str = _Unset, 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
      -     toolset: Optional[ToolSet] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

    - @distributed_trace
    - def create_thread_and_process_run(
      -     self, 
      -     *, 
      -     agent_id: str = _Unset, 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     polling_interval: int = 1, 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     thread: Optional[AgentThreadCreationOptions] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     toolset: Optional[ToolSet] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
      @overload
      def create_thread_and_run(
            self, 
            *, 
            agent_id: str, 
            content_type: str = "application/json", 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
      +     stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            thread: Optional[AgentThreadCreationOptions] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def create_thread_and_run(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def create_thread_and_run(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

    - @overload
    - def create_thread_and_run(
      -     self, 
      -     *, 
      -     agent_id: str, 
      -     content_type: str = "application/json", 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     stream_parameter: Optional[bool] = ..., 
      -     temperature: Optional[float] = ..., 
      -     thread: Optional[AgentThreadCreationOptions] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - def create_thread_and_run(
      -     self, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - def create_thread_and_run(
      -     self, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> ThreadRun
      @distributed_trace
      def create_thread_and_run(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            agent_id: str = _Unset, 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
      +     stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            thread: Optional[AgentThreadCreationOptions] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace
      def delete_agent(
            self, 
            agent_id: str, 
            **kwargs: Any
        ) -> AgentDeletionStatus

    - @distributed_trace
    - def enable_auto_function_calls(
      -     self, 
      -     tools: Union[Set[Callable[, Any]], FunctionTool, ToolSet], 
      -     max_retry: int = 10
      - ) -> None
      @distributed_trace
      def get_agent(
            self, 
            agent_id: str, 
            **kwargs: Any
        ) -> Agent

      @distributed_trace
      def list_agents(
            self, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> Iterable[Agent]

      def send_request(
            self, 
            request: HttpRequest, 
            *, 
            stream: bool = False, 
            **kwargs: Any
        ) -> HttpResponse

      @overload
      def update_agent(
            self, 
            agent_id: str, 
            *, 
            content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      def update_agent(
            self, 
            agent_id: str, 
      +     body: JSON, 
            *, 
            content_type: str = "application/json", 
      -     description: Optional[str] = ..., 
      -     instructions: Optional[str] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     name: Optional[str] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     toolset: Optional[ToolSet] = ..., 
      -     top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      def update_agent(
            self, 
            agent_id: str, 
      -     body: JSON, 
      +     body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

    - @overload
    - def update_agent(
      -     self, 
      -     agent_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - def update_agent(
      -     self, 
      -     agent_id: str, 
      -     *, 
      -     content_type: str = "application/json", 
      -     description: Optional[str] = ..., 
      -     instructions: Optional[str] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     name: Optional[str] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_resources: Optional[ToolResources] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - def update_agent(
      -     self, 
      -     agent_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - def update_agent(
      -     self, 
      -     agent_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
      @distributed_trace
      def update_agent(
            self, 
            agent_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
      -     content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
      -     toolset: Optional[ToolSet] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent


    namespace azure.ai.agents.aio

  - class azure.ai.agents.aio.AgentsClient(ClientMixinABC[AsyncPipelineClient, AgentsClientConfiguration]): implements AsyncContextManager 
  + class azure.ai.agents.aio.AgentsClient(ClientMixinABC[AsyncPipelineClient[HttpRequest, AsyncHttpResponse], AgentsClientConfiguration]): implements AsyncContextManager 
    + ivar files: FilesOperations
    + ivar messages: MessagesOperations
    + ivar run_steps: RunStepsOperations
    + ivar runs: RunsOperations
    + ivar threads: ThreadsOperations
    + ivar vector_store_file_batches: VectorStoreFileBatchesOperations
    + ivar vector_store_files: VectorStoreFilesOperations
    + ivar vector_stores: VectorStoresOperations

      def __init__(
            self, 
            endpoint: str, 
            credential: AsyncTokenCredential, 
      +     *, 
      +     api_version: str = ..., 
            **kwargs: Any
        ) -> None

      async def close(self) -> None

      @overload
      async def create_agent(
            self, 
            *, 
            content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: str, 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      async def create_agent(
            self, 
      +     body: JSON, 
            *, 
            content_type: str = "application/json", 
      -     description: Optional[str] = ..., 
      -     instructions: Optional[str] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: str, 
      -     name: Optional[str] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     toolset: Optional[AsyncToolSet] = ..., 
      -     top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      async def create_agent(
            self, 
      -     body: JSON, 
      +     body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

    - @overload
    - async def create_agent(
      -     self, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - async def create_agent(
      -     self, 
      -     *, 
      -     content_type: str = "application/json", 
      -     description: Optional[str] = ..., 
      -     instructions: Optional[str] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: str, 
      -     name: Optional[str] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_resources: Optional[ToolResources] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - async def create_agent(
      -     self, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - async def create_agent(
      -     self, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
      @distributed_trace_async
      async def create_agent(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
      -     content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: str = _Unset, 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
      -     toolset: Optional[AsyncToolSet] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

    - @distributed_trace_async
    - async def create_thread_and_process_run(
      -     self, 
      -     *, 
      -     agent_id: str = _Unset, 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     polling_interval: int = 1, 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     thread: Optional[AgentThreadCreationOptions] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     toolset: Optional[AsyncToolSet] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
      @overload
      async def create_thread_and_run(
            self, 
            *, 
            agent_id: str, 
            content_type: str = "application/json", 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
      +     stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            thread: Optional[AgentThreadCreationOptions] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def create_thread_and_run(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def create_thread_and_run(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

    - @overload
    - async def create_thread_and_run(
      -     self, 
      -     *, 
      -     agent_id: str, 
      -     content_type: str = "application/json", 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     stream_parameter: Optional[bool] = ..., 
      -     temperature: Optional[float] = ..., 
      -     thread: Optional[AgentThreadCreationOptions] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - async def create_thread_and_run(
      -     self, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - async def create_thread_and_run(
      -     self, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> ThreadRun
      @distributed_trace_async
      async def create_thread_and_run(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            agent_id: str = _Unset, 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
      +     stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            thread: Optional[AgentThreadCreationOptions] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace_async
      async def delete_agent(
            self, 
            agent_id: str, 
            **kwargs: Any
        ) -> AgentDeletionStatus

    - @distributed_trace
    - def enable_auto_function_calls(
      -     self, 
      -     tools: Union[Set[Callable[, Any]], AsyncFunctionTool, AsyncToolSet], 
      -     max_retry: int = 10
      - ) -> None
      @distributed_trace_async
      async def get_agent(
            self, 
            agent_id: str, 
            **kwargs: Any
        ) -> Agent

      @distributed_trace
      def list_agents(
            self, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[Agent]

      def send_request(
            self, 
            request: HttpRequest, 
            *, 
            stream: bool = False, 
            **kwargs: Any
        ) -> Awaitable[AsyncHttpResponse]

      @overload
      async def update_agent(
            self, 
            agent_id: str, 
            *, 
            content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      async def update_agent(
            self, 
            agent_id: str, 
      +     body: JSON, 
            *, 
            content_type: str = "application/json", 
      -     description: Optional[str] = ..., 
      -     instructions: Optional[str] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     name: Optional[str] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     toolset: Optional[AsyncToolSet] = ..., 
      -     top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      async def update_agent(
            self, 
            agent_id: str, 
      -     body: JSON, 
      +     body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

    - @overload
    - async def update_agent(
      -     self, 
      -     agent_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - async def update_agent(
      -     self, 
      -     agent_id: str, 
      -     *, 
      -     content_type: str = "application/json", 
      -     description: Optional[str] = ..., 
      -     instructions: Optional[str] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     name: Optional[str] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_resources: Optional[ToolResources] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - async def update_agent(
      -     self, 
      -     agent_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
    - @overload
    - async def update_agent(
      -     self, 
      -     agent_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> Agent
      @distributed_trace_async
      async def update_agent(
            self, 
            agent_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
      -     content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
      -     toolset: Optional[AsyncToolSet] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent


    namespace azure.ai.agents.aio.operations

  - class azure.ai.agents.aio.operations.AgentsClientOperationsMixin(ClientMixinABC[AsyncPipelineClient, AgentsClientConfiguration]):
  + class azure.ai.agents.aio.operations.AgentsClientOperationsMixin(ClientMixinABC[AsyncPipelineClient[HttpRequest, AsyncHttpResponse], AgentsClientConfiguration]):

      @overload
      async def create_agent(
            self, 
            *, 
            content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: str, 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      async def create_agent(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

      @overload
      async def create_agent(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

      @distributed_trace_async
      async def create_agent(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: str = _Unset, 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      async def create_thread_and_run(
            self, 
            *, 
            agent_id: str, 
            content_type: str = "application/json", 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            thread: Optional[AgentThreadCreationOptions] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def create_thread_and_run(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def create_thread_and_run(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace_async
      async def create_thread_and_run(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            agent_id: str = _Unset, 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            thread: Optional[AgentThreadCreationOptions] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace_async
      async def delete_agent(
            self, 
            agent_id: str, 
            **kwargs: Any
        ) -> AgentDeletionStatus

      @distributed_trace_async
      async def get_agent(
            self, 
            agent_id: str, 
            **kwargs: Any
        ) -> Agent

      @distributed_trace
      def list_agents(
            self, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[Agent]

      @overload
      async def update_agent(
            self, 
            agent_id: str, 
            *, 
            content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      async def update_agent(
            self, 
            agent_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

      @overload
      async def update_agent(
            self, 
            agent_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

      @distributed_trace_async
      async def update_agent(
            self, 
            agent_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent


  - class azure.ai.agents.aio.operations.FilesOperations(FilesOperations):
  + class azure.ai.agents.aio.operations.FilesOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @distributed_trace_async
      async def delete(
            self, 
            file_id: str, 
            **kwargs: Any
        ) -> FileDeletionStatus

      @distributed_trace_async
      async def get(
            self, 
            file_id: str, 
            **kwargs: Any
        ) -> FileInfo

    - @distributed_trace_async
    - async def get_content(
      -     self, 
      -     file_id: str, 
      -     **kwargs: Any
      - ) -> AsyncIterator[bytes]
      @distributed_trace_async
      async def list(
            self, 
            *, 
            purpose: Optional[Union[str, FilePurpose]] = ..., 
            **kwargs: Any
        ) -> FileListResponse

    - @distributed_trace_async
    - async def save(
      -     self, 
      -     file_id: str, 
      -     file_name: str, 
      -     target_dir: Optional[Union[str, Path]] = None
      - ) -> None
    - @overload
    - async def upload(
      -     self, 
      -     *, 
      -     file_path: str, 
      -     purpose: Union[str, FilePurpose], 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - async def upload(
      -     self, 
      -     *, 
      -     file: FileType, 
      -     filename: Optional[str] = ..., 
      -     purpose: Union[str, FilePurpose], 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - async def upload(
      -     self, 
      -     body: JSON, 
      -     **kwargs: Any
      - ) -> FileInfo
    - @distributed_trace_async
    - async def upload(
      -     self, 
      -     body: Optional[JSON] = None, 
      -     *, 
      -     file: Optional[FileType] = ..., 
      -     file_path: Optional[str] = ..., 
      -     filename: Optional[str] = ..., 
      -     purpose: Union[str, FilePurpose, None] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - async def upload_and_poll(
      -     self, 
      -     body: JSON, 
      -     *, 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - async def upload_and_poll(
      -     self, 
      -     *, 
      -     file: FileType, 
      -     filename: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     purpose: Union[str, FilePurpose], 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - async def upload_and_poll(
      -     self, 
      -     *, 
      -     file_path: str, 
      -     polling_interval: float = 1, 
      -     purpose: Union[str, FilePurpose], 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo
    - @distributed_trace_async
    - async def upload_and_poll(
      -     self, 
      -     body: Optional[JSON] = None, 
      -     *, 
      -     file: Optional[FileType] = ..., 
      -     file_path: Optional[str] = ..., 
      -     filename: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     purpose: Union[str, FilePurpose, None] = ..., 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo

  - class azure.ai.agents.aio.operations.MessagesOperations(MessagesOperations):
  + class azure.ai.agents.aio.operations.MessagesOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @overload
      async def create(
            self, 
            thread_id: str, 
            *, 
            attachments: Optional[List[MessageAttachment]] = ..., 
            content: MessageInputContent, 
            content_type: str = "application/json", 
            metadata: Optional[Dict[str, str]] = ..., 
            role: Union[str, MessageRole], 
            **kwargs: Any
        ) -> ThreadMessage

      @overload
      async def create(
            self, 
            thread_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadMessage

      @overload
      async def create(
            self, 
            thread_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadMessage

      @distributed_trace_async
      async def create(
            self, 
            thread_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            attachments: Optional[List[MessageAttachment]] = ..., 
            content: MessageInputContent = _Unset, 
            metadata: Optional[Dict[str, str]] = ..., 
            role: Union[str, MessageRole] = _Unset, 
            **kwargs: Any
        ) -> ThreadMessage

      @distributed_trace_async
      async def get(
            self, 
            thread_id: str, 
            message_id: str, 
            **kwargs: Any
        ) -> ThreadMessage

    - async def get_last_message_by_role(
      -     self, 
      -     thread_id: str, 
      -     role: MessageRole, 
      -     **kwargs
      - ) -> Optional[ThreadMessage]
    - async def get_last_text_message_by_role(
      -     self, 
      -     thread_id: str, 
      -     role: MessageRole, 
      -     **kwargs
      - ) -> Optional[MessageTextContent]
      @distributed_trace
      def list(
            self, 
            thread_id: str, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            run_id: Optional[str] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[ThreadMessage]

      @overload
      async def update(
            self, 
            thread_id: str, 
            message_id: str, 
            *, 
            content_type: str = "application/json", 
            metadata: Optional[Dict[str, str]] = ..., 
            **kwargs: Any
        ) -> ThreadMessage

      @overload
      async def update(
            self, 
            thread_id: str, 
            message_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadMessage

      @overload
      async def update(
            self, 
            thread_id: str, 
            message_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadMessage

      @distributed_trace_async
      async def update(
            self, 
            thread_id: str, 
            message_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            metadata: Optional[Dict[str, str]] = ..., 
            **kwargs: Any
        ) -> ThreadMessage


    class azure.ai.agents.aio.operations.RunStepsOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @distributed_trace_async
      async def get(
            self, 
            thread_id: str, 
            run_id: str, 
            step_id: str, 
            *, 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            **kwargs: Any
        ) -> RunStep

      @distributed_trace
      def list(
            self, 
            thread_id: str, 
            run_id: str, 
            *, 
            before: Optional[str] = ..., 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[RunStep]


  - class azure.ai.agents.aio.operations.RunsOperations(RunsOperations):
  + class azure.ai.agents.aio.operations.RunsOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @distributed_trace_async
      async def cancel(
            self, 
            thread_id: str, 
            run_id: str, 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def create(
            self, 
            thread_id: str, 
            *, 
            additional_instructions: Optional[str] = ..., 
            additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
            agent_id: str, 
            content_type: str = "application/json", 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
      +     stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def create(
            self, 
            thread_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def create(
            self, 
            thread_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            **kwargs: Any
        ) -> ThreadRun

    - @overload
    - async def create(
      -     self, 
      -     thread_id: str, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str, 
      -     content_type: str = "application/json", 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     stream_parameter: Optional[bool] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - async def create(
      -     self, 
      -     thread_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - async def create(
      -     self, 
      -     thread_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
      @distributed_trace_async
      async def create(
            self, 
            thread_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            additional_instructions: Optional[str] = ..., 
            additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
            agent_id: str = _Unset, 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
      +     stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

    - @distributed_trace_async
    - async def create_and_process(
      -     self, 
      -     thread_id: str, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str, 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     polling_interval: int = 1, 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     toolset: Optional[AsyncToolSet] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
      @distributed_trace_async
      async def get(
            self, 
            thread_id: str, 
            run_id: str, 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace
      def list(
            self, 
            thread_id: str, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[ThreadRun]

    - @overload
    - async def stream(
      -     self, 
      -     thread_id: str, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str, 
      -     content_type: str = "application/json", 
      -     event_handler: None = ..., 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> AsyncAgentRunStream[AsyncAgentEventHandler]
    - @overload
    - async def stream(
      -     self, 
      -     thread_id: str, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str, 
      -     content_type: str = "application/json", 
      -     event_handler: BaseAsyncAgentEventHandlerT, 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> AsyncAgentRunStream[BaseAsyncAgentEventHandlerT]
    - @overload
    - async def stream(
      -     self, 
      -     thread_id: str, 
      -     body: Union[JSON, IO[bytes]], 
      -     *, 
      -     content_type: str = "application/json", 
      -     event_handler: None = ..., 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     **kwargs: Any
      - ) -> AsyncAgentRunStream[AsyncAgentEventHandler]
    - @overload
    - async def stream(
      -     self, 
      -     thread_id: str, 
      -     body: Union[JSON, IO[bytes]], 
      -     *, 
      -     content_type: str = "application/json", 
      -     event_handler: BaseAsyncAgentEventHandlerT, 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     **kwargs: Any
      - ) -> AsyncAgentRunStream[BaseAsyncAgentEventHandlerT]
    - @distributed_trace_async
    - async def stream(
      -     self, 
      -     thread_id: str, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str = _Unset, 
      -     event_handler: Optional[BaseAsyncAgentEventHandlerT] = ..., 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> AsyncAgentRunStream[BaseAsyncAgentEventHandlerT]
      @overload
      async def submit_tool_outputs(
            self, 
            thread_id: str, 
            run_id: str, 
            *, 
            content_type: str = "application/json", 
      +     stream_parameter: Optional[bool] = ..., 
            tool_outputs: List[ToolOutput], 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def submit_tool_outputs(
            self, 
            thread_id: str, 
            run_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def submit_tool_outputs(
            self, 
            thread_id: str, 
            run_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

    - @overload
    - async def submit_tool_outputs(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     *, 
      -     content_type: str = "application/json", 
      -     stream_parameter: Optional[bool] = ..., 
      -     tool_outputs: List[ToolOutput], 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - async def submit_tool_outputs(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - async def submit_tool_outputs(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> ThreadRun
      @distributed_trace_async
      async def submit_tool_outputs(
            self, 
            thread_id: str, 
            run_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
      +     stream_parameter: Optional[bool] = ..., 
            tool_outputs: List[ToolOutput] = _Unset, 
            **kwargs: Any
        ) -> ThreadRun

    - @overload
    - async def submit_tool_outputs_stream(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     body: Union[JSON, IO[bytes]], 
      -     *, 
      -     content_type: str = "application/json", 
      -     event_handler: BaseAsyncAgentEventHandler, 
      -     **kwargs: Any
      - ) -> None
    - @overload
    - async def submit_tool_outputs_stream(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     *, 
      -     content_type: str = "application/json", 
      -     event_handler: BaseAsyncAgentEventHandler, 
      -     tool_outputs: List[ToolOutput], 
      -     **kwargs: Any
      - ) -> None
    - @distributed_trace_async
    - async def submit_tool_outputs_stream(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     event_handler: BaseAsyncAgentEventHandler, 
      -     tool_outputs: List[ToolOutput] = _Unset, 
      -     **kwargs: Any
      - ) -> None
      @overload
      async def update(
            self, 
            thread_id: str, 
            run_id: str, 
            *, 
            content_type: str = "application/json", 
            metadata: Optional[Dict[str, str]] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def update(
            self, 
            thread_id: str, 
            run_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      async def update(
            self, 
            thread_id: str, 
            run_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace_async
      async def update(
            self, 
            thread_id: str, 
            run_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            metadata: Optional[Dict[str, str]] = ..., 
            **kwargs: Any
        ) -> ThreadRun


    class azure.ai.agents.aio.operations.ThreadsOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @overload
      async def create(
            self, 
            *, 
            content_type: str = "application/json", 
            messages: Optional[List[ThreadMessageOptions]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            **kwargs: Any
        ) -> AgentThread

      @overload
      async def create(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> AgentThread

      @overload
      async def create(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> AgentThread

      @distributed_trace_async
      async def create(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            messages: Optional[List[ThreadMessageOptions]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            **kwargs: Any
        ) -> AgentThread

      @distributed_trace_async
      async def delete(
            self, 
            thread_id: str, 
            **kwargs: Any
        ) -> ThreadDeletionStatus

      @distributed_trace_async
      async def get(
            self, 
            thread_id: str, 
            **kwargs: Any
        ) -> AgentThread

      @distributed_trace
      def list(
            self, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[AgentThread]

      @overload
      async def update(
            self, 
            thread_id: str, 
            *, 
            content_type: str = "application/json", 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            **kwargs: Any
        ) -> AgentThread

      @overload
      async def update(
            self, 
            thread_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> AgentThread

      @overload
      async def update(
            self, 
            thread_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> AgentThread

      @distributed_trace_async
      async def update(
            self, 
            thread_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            **kwargs: Any
        ) -> AgentThread


  - class azure.ai.agents.aio.operations.VectorStoreFileBatchesOperations(VectorStoreFileBatchesOperations):
  + class azure.ai.agents.aio.operations.VectorStoreFileBatchesOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @distributed_trace_async
      async def cancel(
            self, 
            vector_store_id: str, 
            batch_id: str, 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @overload
      async def create(
            self, 
            vector_store_id: str, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            content_type: str = "application/json", 
            data_sources: Optional[List[VectorStoreDataSource]] = ..., 
            file_ids: Optional[List[str]] = ..., 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @overload
      async def create(
            self, 
            vector_store_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @overload
      async def create(
            self, 
            vector_store_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @distributed_trace_async
      async def create(
            self, 
            vector_store_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            data_sources: Optional[List[VectorStoreDataSource]] = ..., 
            file_ids: Optional[List[str]] = ..., 
            **kwargs: Any
        ) -> VectorStoreFileBatch

    - @overload
    - async def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFileBatch
    - @overload
    - async def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_sources: Optional[List[VectorStoreDataSource]] = ..., 
      -     file_ids: Optional[List[str]] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFileBatch
    - @overload
    - async def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFileBatch
    - @distributed_trace_async
    - async def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_sources: Optional[List[VectorStoreDataSource]] = ..., 
      -     file_ids: Optional[List[str]] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFileBatch
      @distributed_trace_async
      async def get(
            self, 
            vector_store_id: str, 
            batch_id: str, 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @distributed_trace
      def list_files(
            self, 
            vector_store_id: str, 
            batch_id: str, 
            *, 
            before: Optional[str] = ..., 
            filter: Optional[Union[str, VectorStoreFileStatusFilter]] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[VectorStoreFile]


  - class azure.ai.agents.aio.operations.VectorStoreFilesOperations(VectorStoreFilesOperations):
  + class azure.ai.agents.aio.operations.VectorStoreFilesOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @overload
      async def create(
            self, 
            vector_store_id: str, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            content_type: str = "application/json", 
            data_source: Optional[VectorStoreDataSource] = ..., 
            file_id: Optional[str] = ..., 
            **kwargs: Any
        ) -> VectorStoreFile

      @overload
      async def create(
            self, 
            vector_store_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStoreFile

      @overload
      async def create(
            self, 
            vector_store_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStoreFile

      @distributed_trace_async
      async def create(
            self, 
            vector_store_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            data_source: Optional[VectorStoreDataSource] = ..., 
            file_id: Optional[str] = ..., 
            **kwargs: Any
        ) -> VectorStoreFile

    - @overload
    - async def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFile
    - @overload
    - async def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_source: Optional[VectorStoreDataSource] = ..., 
      -     file_id: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFile
    - @overload
    - async def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFile
    - @distributed_trace_async
    - async def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_source: Optional[VectorStoreDataSource] = ..., 
      -     file_id: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFile
      @distributed_trace_async
      async def delete(
            self, 
            vector_store_id: str, 
            file_id: str, 
            **kwargs: Any
        ) -> VectorStoreFileDeletionStatus

      @distributed_trace_async
      async def get(
            self, 
            vector_store_id: str, 
            file_id: str, 
            **kwargs: Any
        ) -> VectorStoreFile

      @distributed_trace
      def list(
            self, 
            vector_store_id: str, 
            *, 
            before: Optional[str] = ..., 
            filter: Optional[Union[str, VectorStoreFileStatusFilter]] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[VectorStoreFile]


  - class azure.ai.agents.aio.operations.VectorStoresOperations(VectorStoresOperations):
  + class azure.ai.agents.aio.operations.VectorStoresOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @overload
      async def create(
            self, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            content_type: str = "application/json", 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            file_ids: Optional[List[str]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            name: Optional[str] = ..., 
            store_configuration: Optional[VectorStoreConfiguration] = ..., 
            **kwargs: Any
        ) -> VectorStore

      @overload
      async def create(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStore

      @overload
      async def create(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStore

      @distributed_trace_async
      async def create(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            file_ids: Optional[List[str]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            name: Optional[str] = ..., 
            store_configuration: Optional[VectorStoreConfiguration] = ..., 
            **kwargs: Any
        ) -> VectorStore

    - @overload
    - async def create_and_poll(
      -     self, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStore
    - @overload
    - async def create_and_poll(
      -     self, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_sources: Optional[List[VectorStoreDataSource]] = ..., 
      -     expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
      -     file_ids: Optional[List[str]] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     name: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStore
    - @overload
    - async def create_and_poll(
      -     self, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStore
    - @distributed_trace_async
    - async def create_and_poll(
      -     self, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_sources: Optional[List[VectorStoreDataSource]] = ..., 
      -     expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
      -     file_ids: Optional[List[str]] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     name: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStore
      @distributed_trace_async
      async def delete(
            self, 
            vector_store_id: str, 
            **kwargs: Any
        ) -> VectorStoreDeletionStatus

      @distributed_trace_async
      async def get(
            self, 
            vector_store_id: str, 
            **kwargs: Any
        ) -> VectorStore

      @distributed_trace
      def list(
            self, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> AsyncIterable[VectorStore]

      @overload
      async def modify(
            self, 
            vector_store_id: str, 
            *, 
            content_type: str = "application/json", 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            name: Optional[str] = ..., 
            **kwargs: Any
        ) -> VectorStore

      @overload
      async def modify(
            self, 
            vector_store_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStore

      @overload
      async def modify(
            self, 
            vector_store_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStore

      @distributed_trace_async
      async def modify(
            self, 
            vector_store_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            name: Optional[str] = ..., 
            **kwargs: Any
        ) -> VectorStore


    namespace azure.ai.agents.models

    class azure.ai.agents.models.AISearchIndexResource(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar filter: Optional[str]
      ivar index_asset_id: Optional[str]
      ivar index_connection_id: str
      ivar index_name: str
      ivar query_type: Optional[Union[str, AzureAISearchQueryType]]
      ivar top_k: Optional[int]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            filter: Optional[str] = ..., 
            index_asset_id: Optional[str] = ..., 
            index_connection_id: str, 
            index_name: str, 
            query_type: Optional[Union[str, AzureAISearchQueryType]] = ..., 
            top_k: Optional[int] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.Agent(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar created_at: datetime
      ivar description: str
      ivar id: str
      ivar instructions: str
      ivar metadata: Dict[str, str]
      ivar model: str
      ivar name: str
      ivar object: Literal[assistant]
      ivar response_format: Optional[AgentsResponseFormatOption]
      ivar temperature: float
      ivar tool_resources: ToolResources
      ivar tools: List[ToolDefinition]
      ivar top_p: float

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            created_at: datetime, 
            description: str, 
            id: str, 
            instructions: str, 
            metadata: Dict[str, str], 
            model: str, 
            name: str, 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: float, 
            tool_resources: ToolResources, 
            tools: List[ToolDefinition], 
            top_p: float
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.AgentDeletionStatus(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar deleted: bool
      ivar id: str
      ivar object: Literal[deleted]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            deleted: bool, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.AgentEventHandler(BaseAgentEventHandler[Tuple[str, Union[ForwardRef('MessageDeltaChunk'), ForwardRef('ThreadMessage'), ThreadRun, RunStep, str], Optional[EventFunctionReturnT]]]):

    - def __init__(self) -> None

    - def __next__(self) -> T

    - def __next_impl__(self) -> bytes

    - def initialize(
      -     self, 
      -     response_iterator: Iterator[bytes], 
      -     submit_tool_outputs: Callable[[ThreadRun, BaseAgentEventHandler[T], bool], Any]
      - ) -> None

    - def on_done(self) -> Optional[EventFunctionReturnT]

    - def on_error(self, data: str) -> Optional[EventFunctionReturnT]

    - def on_message_delta(self, delta: MessageDeltaChunk) -> Optional[EventFunctionReturnT]

    - def on_run_step(self, step: RunStep) -> Optional[EventFunctionReturnT]

    - def on_run_step_delta(self, delta: RunStepDeltaChunk) -> Optional[EventFunctionReturnT]

    - def on_thread_message(self, message: ThreadMessage) -> Optional[EventFunctionReturnT]

    - def on_thread_run(self, run: ThreadRun) -> Optional[EventFunctionReturnT]

    - def on_unhandled_event(
      -     self, 
      -     event_type: str, 
      -     event_data: str
      - ) -> Optional[EventFunctionReturnT]

    - def set_max_retry(self, max_retry: int) -> None

    - def until_done(self) -> None


  - class azure.ai.agents.models.AgentRunStream(Generic[BaseAgentEventHandlerT]): implements ContextManager 

    - def __init__(
      -     self, 
      -     response_iterator: Iterator[bytes], 
      -     submit_tool_outputs: Callable[[ThreadRun, BaseAgentEventHandlerT, bool], Any], 
      -     event_handler: BaseAgentEventHandlerT
      - )


    class azure.ai.agents.models.AgentStreamEvent(str, Enum):
      DONE = "done"
      ERROR = "error"
      THREAD_CREATED = "thread.created"
      THREAD_MESSAGE_COMPLETED = "thread.message.completed"
      THREAD_MESSAGE_CREATED = "thread.message.created"
      THREAD_MESSAGE_DELTA = "thread.message.delta"
      THREAD_MESSAGE_INCOMPLETE = "thread.message.incomplete"
      THREAD_MESSAGE_IN_PROGRESS = "thread.message.in_progress"
      THREAD_RUN_CANCELLED = "thread.run.cancelled"
      THREAD_RUN_CANCELLING = "thread.run.cancelling"
      THREAD_RUN_COMPLETED = "thread.run.completed"
      THREAD_RUN_CREATED = "thread.run.created"
      THREAD_RUN_EXPIRED = "thread.run.expired"
      THREAD_RUN_FAILED = "thread.run.failed"
      THREAD_RUN_INCOMPLETE = "thread.run.incomplete"
      THREAD_RUN_IN_PROGRESS = "thread.run.in_progress"
      THREAD_RUN_QUEUED = "thread.run.queued"
      THREAD_RUN_REQUIRES_ACTION = "thread.run.requires_action"
      THREAD_RUN_STEP_CANCELLED = "thread.run.step.cancelled"
      THREAD_RUN_STEP_COMPLETED = "thread.run.step.completed"
      THREAD_RUN_STEP_CREATED = "thread.run.step.created"
      THREAD_RUN_STEP_DELTA = "thread.run.step.delta"
      THREAD_RUN_STEP_EXPIRED = "thread.run.step.expired"
      THREAD_RUN_STEP_FAILED = "thread.run.step.failed"
      THREAD_RUN_STEP_IN_PROGRESS = "thread.run.step.in_progress"


    class azure.ai.agents.models.AgentThread(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar created_at: datetime
      ivar id: str
      ivar metadata: Dict[str, str]
      ivar object: Literal[thread]
      ivar tool_resources: ToolResources

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            created_at: datetime, 
            id: str, 
            metadata: Dict[str, str], 
            tool_resources: ToolResources
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.AgentThreadCreationOptions(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar messages: Optional[List[ForwardRef('ThreadMessageOptions')]]
      ivar metadata: Optional[Dict[str, str]]
      ivar tool_resources: Optional[ToolResources]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            messages: Optional[List[ThreadMessageOptions]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.AgentsNamedToolChoice(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar function: Optional[FunctionName]
      ivar type: Union[str, AgentsNamedToolChoiceType]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            function: Optional[FunctionName] = ..., 
            type: Union[str, AgentsNamedToolChoiceType]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.AgentsNamedToolChoiceType(str, Enum):
      AZURE_AI_SEARCH = "azure_ai_search"
      BING_CUSTOM_SEARCH = "bing_custom_search"
      BING_GROUNDING = "bing_grounding"
      CODE_INTERPRETER = "code_interpreter"
      CONNECTED_AGENT = "connected_agent"
      FILE_SEARCH = "file_search"
      FUNCTION = "function"
      MICROSOFT_FABRIC = "fabric_dataagent"
      SHAREPOINT = "sharepoint_grounding"


    class azure.ai.agents.models.AgentsResponseFormat(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: Optional[Union[str, ResponseFormat]]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: Optional[Union[str, ResponseFormat]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.AgentsResponseFormatMode(str, Enum):
      AUTO = "auto"
      NONE = "none"


    class azure.ai.agents.models.AgentsToolChoiceOptionMode(str, Enum):
      AUTO = "auto"
      NONE = "none"


  - class azure.ai.agents.models.AsyncAgentEventHandler(BaseAsyncAgentEventHandler[Tuple[str, Union[ForwardRef('MessageDeltaChunk'), ForwardRef('ThreadMessage'), ThreadRun, RunStep, str], Optional[EventFunctionReturnT]]]):

    - async def __anext__(self) -> T

    - async def __anext_impl__(self) -> bytes

    - def __init__(self) -> None

    - def initialize(
      -     self, 
      -     response_iterator: AsyncIterator[bytes], 
      -     submit_tool_outputs: Callable[[ThreadRun, BaseAsyncAgentEventHandler[T], bool], Awaitable[Any]]
      - )

    - async def on_done(self) -> Optional[EventFunctionReturnT]

    - async def on_error(self, data: str) -> Optional[EventFunctionReturnT]

    - async def on_message_delta(self, delta: MessageDeltaChunk) -> Optional[EventFunctionReturnT]

    - async def on_run_step(self, step: RunStep) -> Optional[EventFunctionReturnT]

    - async def on_run_step_delta(self, delta: RunStepDeltaChunk) -> Optional[EventFunctionReturnT]

    - async def on_thread_message(self, message: ThreadMessage) -> Optional[EventFunctionReturnT]

    - async def on_thread_run(self, run: ThreadRun) -> Optional[EventFunctionReturnT]

    - async def on_unhandled_event(
      -     self, 
      -     event_type: str, 
      -     event_data: str
      - ) -> Optional[EventFunctionReturnT]

    - def set_max_retry(self, max_retry: int) -> None

    - async def until_done(self) -> None


  - class azure.ai.agents.models.AsyncAgentRunStream(Generic[BaseAsyncAgentEventHandlerT]): implements AsyncContextManager 

    - def __init__(
      -     self, 
      -     response_iterator: AsyncIterator[bytes], 
      -     submit_tool_outputs: Callable[[ThreadRun, BaseAsyncAgentEventHandlerT, bool], Awaitable[Any]], 
      -     event_handler: BaseAsyncAgentEventHandlerT
      - )


  - class azure.ai.agents.models.AsyncFunctionTool(Tool[FunctionToolDefinition]):
    - property definitions: List[FunctionToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(self, functions: Set[Callable[, Any]])

    - def add_functions(self, extra_functions: Set[Callable[, Any]]) -> None

    - async def execute(self, tool_call: RequiredFunctionToolCall) -> Any


  - class azure.ai.agents.models.AsyncToolSet(BaseToolSet):
    - property definitions: List[ToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(self) -> None

    - def add(self, tool: Tool)

    - async def execute_tool_calls(self, tool_calls: List[Any]) -> Any

    - def get_definitions_and_resources(self) -> Dict[str, Any]

    - def get_tool(self, tool_type: Type[ToolT]) -> ToolT

    - def remove(self, tool_type: Type[Tool]) -> None

    - def validate_tool_type(self, tool: Tool) -> None


    class azure.ai.agents.models.AzureAISearchQueryType(str, Enum):
      SEMANTIC = "semantic"
      SIMPLE = "simple"
      VECTOR = "vector"
      VECTOR_SEMANTIC_HYBRID = "vector_semantic_hybrid"
      VECTOR_SIMPLE_HYBRID = "vector_simple_hybrid"


    class azure.ai.agents.models.AzureAISearchResource(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar index_list: Optional[List[ForwardRef('AISearchIndexResource')]]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            index_list: Optional[List[AISearchIndexResource]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.AzureAISearchTool(Tool[AzureAISearchToolDefinition]):
    - property definitions: List[AzureAISearchToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(
      -     self, 
      -     index_connection_id: str, 
      -     index_name: str, 
      -     query_type: AzureAISearchQueryType = AzureAISearchQueryType.SIMPLE, 
      -     filter: str = "", 
      -     top_k: int = 5, 
      -     index_asset_id: str = ""
      - )

    - def execute(self, tool_call: Any)


    class azure.ai.agents.models.AzureAISearchToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: Literal[azure_ai_search]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(self) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.AzureFunctionBinding(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar storage_queue: AzureFunctionStorageQueue
      ivar type: Literal[storage_queue]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            storage_queue: AzureFunctionStorageQueue
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.AzureFunctionDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar function: FunctionDefinition
      ivar input_binding: AzureFunctionBinding
      ivar output_binding: AzureFunctionBinding

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            function: FunctionDefinition, 
            input_binding: AzureFunctionBinding, 
            output_binding: AzureFunctionBinding
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.AzureFunctionStorageQueue(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar queue_name: str
      ivar storage_service_endpoint: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            queue_name: str, 
            storage_service_endpoint: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.AzureFunctionTool(Tool[AzureFunctionToolDefinition]):
    - property definitions: List[AzureFunctionToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(
      -     self, 
      -     name: str, 
      -     description: str, 
      -     parameters: Dict[str, Any], 
      -     input_queue: AzureFunctionStorageQueue, 
      -     output_queue: AzureFunctionStorageQueue
      - ) -> None

    - def execute(self, tool_call: Any) -> Any


    class azure.ai.agents.models.AzureFunctionToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar azure_function: AzureFunctionDefinition
      ivar type: Literal[azure_function]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            azure_function: AzureFunctionDefinition
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.BaseAgentEventHandler(Iterator[T]):

    - def __init__(self) -> None

    - def __next__(self) -> T

    - def __next_impl__(self) -> bytes

    - def initialize(
      -     self, 
      -     response_iterator: Iterator[bytes], 
      -     submit_tool_outputs: Callable[[ThreadRun, BaseAgentEventHandler[T], bool], Any]
      - ) -> None

    - def until_done(self) -> None


  - class azure.ai.agents.models.BaseAsyncAgentEventHandler(AsyncIterator[T]):

    - async def __anext__(self) -> T

    - async def __anext_impl__(self) -> bytes

    - def __init__(self) -> None

    - def initialize(
      -     self, 
      -     response_iterator: AsyncIterator[bytes], 
      -     submit_tool_outputs: Callable[[ThreadRun, BaseAsyncAgentEventHandler[T], bool], Awaitable[Any]]
      - )

    - async def until_done(self) -> None


    class azure.ai.agents.models.BingCustomSearchConfiguration(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar connection_id: str
      ivar count: Optional[int]
      ivar freshness: Optional[str]
      ivar instance_name: str
      ivar market: Optional[str]
      ivar set_lang: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            connection_id: str, 
            count: Optional[int] = ..., 
            freshness: Optional[str] = ..., 
            instance_name: str, 
            market: Optional[str] = ..., 
            set_lang: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.BingCustomSearchConfigurationList(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar search_configurations: List[BingCustomSearchConfiguration]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            search_configurations: List[BingCustomSearchConfiguration]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.BingCustomSearchTool(Tool[BingCustomSearchToolDefinition]):
    - property definitions: List[BingCustomSearchToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(
      -     self, 
      -     connection_id: str, 
      -     instance_name: str
      - )

    - def execute(self, tool_call: Any) -> Any


    class azure.ai.agents.models.BingCustomSearchToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar bing_custom_search: BingCustomSearchConfigurationList
      ivar type: Literal[bing_custom_search]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            bing_custom_search: BingCustomSearchConfigurationList
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.BingGroundingSearchConfiguration(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar connection_id: str
      ivar count: Optional[int]
      ivar freshness: Optional[str]
      ivar market: Optional[str]
      ivar set_lang: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            connection_id: str, 
            count: Optional[int] = ..., 
            freshness: Optional[str] = ..., 
            market: Optional[str] = ..., 
            set_lang: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.BingGroundingSearchConfigurationList(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar search_configurations: List[BingGroundingSearchConfiguration]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            search_configurations: List[BingGroundingSearchConfiguration]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.BingGroundingTool(Tool[BingGroundingToolDefinition]):
    - property definitions: List[BingGroundingToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(
      -     self, 
      -     connection_id: str, 
      -     market: str = "", 
      -     set_lang: str = "", 
      -     count: int = 5, 
      -     freshness: str = ""
      - )

    - def execute(self, tool_call: Any) -> Any


    class azure.ai.agents.models.BingGroundingToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar bing_grounding: BingGroundingSearchConfigurationList
      ivar type: Literal[bing_grounding]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            bing_grounding: BingGroundingSearchConfigurationList
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.CodeInterpreterTool(Tool[CodeInterpreterToolDefinition]):
    - property definitions: List[CodeInterpreterToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(self, file_ids: Optional[List[str]] = None)

    - def add_file(self, file_id: str) -> None

    - def execute(self, tool_call: Any) -> Any

    - def remove_file(self, file_id: str) -> None


    class azure.ai.agents.models.CodeInterpreterToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: Literal[code_interpreter]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(self) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.CodeInterpreterToolResource(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar data_sources: Optional[List[ForwardRef('VectorStoreDataSource')]]
      ivar file_ids: Optional[List[str]]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            data_sources: Optional[List[VectorStoreDataSource]] = ..., 
            file_ids: Optional[List[str]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ConnectedAgentDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar description: str
      ivar id: str
      ivar name: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            description: str, 
            id: str, 
            name: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.ConnectedAgentTool(Tool[ConnectedAgentToolDefinition]):
    - property definitions: List[ConnectedAgentToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(
      -     self, 
      -     id: str, 
      -     name: str, 
      -     description: str
      - )

    - def execute(self, tool_call: Any) -> None


    class azure.ai.agents.models.ConnectedAgentToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar connected_agent: ConnectedAgentDetails
      ivar type: Literal[connected_agent]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            connected_agent: ConnectedAgentDetails
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.DoneEvent(str, Enum):
      DONE = "done"


    class azure.ai.agents.models.ErrorEvent(str, Enum):
      ERROR = "error"


  - class azure.ai.agents.models.FabricTool(ConnectionTool[MicrosoftFabricToolDefinition]):
    - property definitions: List[MicrosoftFabricToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(self, connection_id: str)

    - def execute(self, tool_call: Any) -> Any


    class azure.ai.agents.models.FileDeletionStatus(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar deleted: bool
      ivar id: str
      ivar object: Literal[file]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            deleted: bool, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.FileInfo(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar bytes: int
      ivar created_at: datetime
      ivar filename: str
      ivar id: str
      ivar object: Literal[file]
      ivar purpose: Union[str, FilePurpose]
      ivar status: Optional[Union[str, FileState]]
      ivar status_details: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            bytes: int, 
            created_at: datetime, 
            filename: str, 
            id: str, 
            purpose: Union[str, FilePurpose], 
            status: Optional[Union[str, FileState]] = ..., 
            status_details: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.FileListResponse(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar data: List[FileInfo]
      ivar object: Literal[list]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            data: List[FileInfo]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.FilePurpose(str, Enum):
      AGENTS = "assistants"
      AGENTS_OUTPUT = "assistants_output"
      BATCH = "batch"
      BATCH_OUTPUT = "batch_output"
      FINE_TUNE = "fine-tune"
      FINE_TUNE_RESULTS = "fine-tune-results"
      VISION = "vision"


    class azure.ai.agents.models.FileSearchRankingOptions(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar ranker: str
      ivar score_threshold: float

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            ranker: str, 
            score_threshold: float
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.FileSearchTool(Tool[FileSearchToolDefinition]):
    - property definitions: List[FileSearchToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(self, vector_store_ids: Optional[List[str]] = None)

    - def add_vector_store(self, store_id: str) -> None

    - def execute(self, tool_call: Any) -> Any

    - def remove_vector_store(self, store_id: str) -> None


    class azure.ai.agents.models.FileSearchToolCallContent(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar text: str
      ivar type: Literal[text]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            text: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.FileSearchToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_search: Optional[FileSearchToolDefinitionDetails]
      ivar type: Literal[file_search]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_search: Optional[FileSearchToolDefinitionDetails] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.FileSearchToolDefinitionDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar max_num_results: Optional[int]
      ivar ranking_options: Optional[FileSearchRankingOptions]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            max_num_results: Optional[int] = ..., 
            ranking_options: Optional[FileSearchRankingOptions] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.FileSearchToolResource(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar vector_store_ids: Optional[List[str]]
      ivar vector_stores: Optional[List[ForwardRef('VectorStoreConfigurations')]]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            vector_store_ids: Optional[List[str]] = ..., 
            vector_stores: Optional[List[VectorStoreConfigurations]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.FileState(str, Enum):
      DELETED = "deleted"
      DELETING = "deleting"
      ERROR = "error"
      PENDING = "pending"
      PROCESSED = "processed"
      RUNNING = "running"
      UPLOADED = "uploaded"


    class azure.ai.agents.models.FunctionDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar description: Optional[str]
      ivar name: str
      ivar parameters: Any

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            description: Optional[str] = ..., 
            name: str, 
            parameters: Any
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.FunctionName(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar name: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            name: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.FunctionTool(Tool[FunctionToolDefinition]):
    - property definitions: List[FunctionToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(self, functions: Set[Callable[, Any]])

    - def add_functions(self, extra_functions: Set[Callable[, Any]]) -> None

    - def execute(self, tool_call: RequiredFunctionToolCall) -> Any


    class azure.ai.agents.models.FunctionToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar function: FunctionDefinition
      ivar type: Literal[function]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            function: FunctionDefinition
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ImageDetailLevel(str, Enum):
      AUTO = "auto"
      HIGH = "high"
      LOW = "low"


    class azure.ai.agents.models.IncompleteDetailsReason(str, Enum):
      MAX_COMPLETION_TOKENS = "max_completion_tokens"
      MAX_PROMPT_TOKENS = "max_prompt_tokens"


    class azure.ai.agents.models.IncompleteRunDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar reason: Union[str, IncompleteDetailsReason]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            reason: Union[str, IncompleteDetailsReason]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ListSortOrder(str, Enum):
      ASCENDING = "asc"
      DESCENDING = "desc"


    class azure.ai.agents.models.MessageAttachment(MutableMapping[str, Any]): implements Collection , Mapping 
    + ivar data_source: Optional[VectorStoreDataSource]
    + ivar file_id: Optional[str]
    + ivar tools: List[MessageAttachmentToolDefinition]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            data_source: Optional[VectorStoreDataSource] = ..., 
            file_id: Optional[str] = ..., 
      -     tools: List[FileSearchToolDefinition]
      +     tools: List[MessageAttachmentToolDefinition]
        ) -> None

      @overload
    - def __init__(
      -     self, 
      -     *, 
      -     data_source: Optional[VectorStoreDataSource] = ..., 
      -     file_id: Optional[str] = ..., 
      -     tools: List[CodeInterpreterToolDefinition]
      - ) -> None
    + def __init__(self, mapping: Mapping[str, Any]) -> None

    - @overload
    - def __init__(
      -     self, 
      -     *, 
      -     data_source: Optional[VectorStoreDataSource] = ..., 
      -     file_id: Optional[str] = ..., 
      -     tools: List[MessageAttachmentToolDefinition]
      - ) -> None
    - @overload
    - def __init__(self, mapping: Mapping[str, Any]) -> None
    - @overload
    - def __init__(
      -     self, 
      -     *, 
      -     data_source: Optional[VectorStoreDataSource] = ..., 
      -     file_id: Optional[str] = ..., 
      -     tools: List[MessageAttachmentToolDefinition]
      - ) -> None
    - @overload
    - def __init__(self, mapping: Mapping[str, Any]) -> None
      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageBlockType(str, Enum):
      IMAGE_FILE = "image_file"
      IMAGE_URL = "image_url"
      TEXT = "text"


    class azure.ai.agents.models.MessageContent(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDelta(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar content: List[MessageDeltaContent]
      ivar role: Union[str, MessageRole]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            content: List[MessageDeltaContent], 
            role: Union[str, MessageRole]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaChunk(MutableMapping[str, Any]): implements Collection , Mapping 
    + ivar delta: MessageDelta
    + ivar id: str
    + ivar object: Literal[delta]
    - property text: str    # Read-only

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            delta: MessageDelta, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaContent(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar index: int
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaImageFileContent(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar image_file: Optional[MessageDeltaImageFileContentObject]
      ivar index: int
      ivar type: Literal[image_file]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            image_file: Optional[MessageDeltaImageFileContentObject] = ..., 
            index: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaImageFileContentObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_id: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_id: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextAnnotation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar index: int
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextContent(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar index: int
      ivar text: Optional[MessageDeltaTextContentObject]
      ivar type: Literal[text]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            text: Optional[MessageDeltaTextContentObject] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextContentObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar annotations: Optional[List[ForwardRef('MessageDeltaTextAnnotation')]]
      ivar value: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            annotations: Optional[List[MessageDeltaTextAnnotation]] = ..., 
            value: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextFileCitationAnnotation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar end_index: Optional[int]
      ivar file_citation: Optional[MessageDeltaTextFileCitationAnnotationObject]
      ivar index: int
      ivar start_index: Optional[int]
      ivar text: Optional[str]
      ivar type: Literal[file_citation]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            end_index: Optional[int] = ..., 
            file_citation: Optional[MessageDeltaTextFileCitationAnnotationObject] = ..., 
            index: int, 
            start_index: Optional[int] = ..., 
            text: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextFileCitationAnnotationObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_id: Optional[str]
      ivar quote: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_id: Optional[str] = ..., 
            quote: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextFilePathAnnotation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar end_index: Optional[int]
      ivar file_path: Optional[MessageDeltaTextFilePathAnnotationObject]
      ivar index: int
      ivar start_index: Optional[int]
      ivar text: Optional[str]
      ivar type: Literal[file_path]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            end_index: Optional[int] = ..., 
            file_path: Optional[MessageDeltaTextFilePathAnnotationObject] = ..., 
            index: int, 
            start_index: Optional[int] = ..., 
            text: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextFilePathAnnotationObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_id: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_id: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextUrlCitationAnnotation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar end_index: Optional[int]
      ivar index: int
      ivar start_index: Optional[int]
      ivar type: Literal[url_citation]
      ivar url_citation: MessageDeltaTextUrlCitationDetails

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            end_index: Optional[int] = ..., 
            index: int, 
            start_index: Optional[int] = ..., 
            url_citation: MessageDeltaTextUrlCitationDetails
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageDeltaTextUrlCitationDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar title: Optional[str]
      ivar url: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            title: Optional[str] = ..., 
            url: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageImageFileContent(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar image_file: MessageImageFileDetails
      ivar type: Literal[image_file]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            image_file: MessageImageFileDetails
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageImageFileDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageImageFileParam(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar detail: Optional[Union[str, ImageDetailLevel]]
      ivar file_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            detail: Optional[Union[str, ImageDetailLevel]] = ..., 
            file_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageImageUrlParam(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar detail: Optional[Union[str, ImageDetailLevel]]
      ivar url: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            detail: Optional[Union[str, ImageDetailLevel]] = ..., 
            url: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageIncompleteDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar reason: Union[str, MessageIncompleteDetailsReason]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            reason: Union[str, MessageIncompleteDetailsReason]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageIncompleteDetailsReason(str, Enum):
      CONTENT_FILTER = "content_filter"
      MAX_TOKENS = "max_tokens"
      RUN_CANCELLED = "run_cancelled"
      RUN_EXPIRED = "run_expired"
      RUN_FAILED = "run_failed"


    class azure.ai.agents.models.MessageInputContentBlock(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageInputImageFileBlock(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar image_file: MessageImageFileParam
      ivar type: Literal[IMAGE_FILE]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            image_file: MessageImageFileParam
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageInputImageUrlBlock(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar image_url: MessageImageUrlParam
      ivar type: Literal[IMAGE_URL]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            image_url: MessageImageUrlParam
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageInputTextBlock(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar text: str
      ivar type: Literal[TEXT]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            text: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageRole(str, Enum):
      AGENT = "assistant"
      USER = "user"


    class azure.ai.agents.models.MessageStatus(str, Enum):
      COMPLETED = "completed"
      INCOMPLETE = "incomplete"
      IN_PROGRESS = "in_progress"


    class azure.ai.agents.models.MessageStreamEvent(str, Enum):
      THREAD_MESSAGE_COMPLETED = "thread.message.completed"
      THREAD_MESSAGE_CREATED = "thread.message.created"
      THREAD_MESSAGE_DELTA = "thread.message.delta"
      THREAD_MESSAGE_INCOMPLETE = "thread.message.incomplete"
      THREAD_MESSAGE_IN_PROGRESS = "thread.message.in_progress"


    class azure.ai.agents.models.MessageTextAnnotation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar text: str
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            text: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageTextContent(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar text: MessageTextDetails
      ivar type: Literal[text]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            text: MessageTextDetails
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageTextDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar annotations: List[MessageTextAnnotation]
      ivar value: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            annotations: List[MessageTextAnnotation], 
            value: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageTextFileCitationAnnotation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar end_index: Optional[int]
      ivar file_citation: MessageTextFileCitationDetails
      ivar start_index: Optional[int]
      ivar text: str
      ivar type: Literal[file_citation]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            end_index: Optional[int] = ..., 
            file_citation: MessageTextFileCitationDetails, 
            start_index: Optional[int] = ..., 
            text: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            text: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageTextFileCitationDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_id: str
      ivar quote: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_id: str, 
            quote: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageTextFilePathAnnotation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar end_index: Optional[int]
      ivar file_path: MessageTextFilePathDetails
      ivar start_index: Optional[int]
      ivar text: str
      ivar type: Literal[file_path]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            end_index: Optional[int] = ..., 
            file_path: MessageTextFilePathDetails, 
            start_index: Optional[int] = ..., 
            text: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            text: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageTextFilePathDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageTextUrlCitationAnnotation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar end_index: Optional[int]
      ivar start_index: Optional[int]
      ivar text: str
      ivar type: Literal[url_citation]
      ivar url_citation: MessageTextUrlCitationDetails

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            end_index: Optional[int] = ..., 
            start_index: Optional[int] = ..., 
            text: str, 
            url_citation: MessageTextUrlCitationDetails
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            text: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MessageTextUrlCitationDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar title: Optional[str]
      ivar url: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            title: Optional[str] = ..., 
            url: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.MicrosoftFabricToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar fabric_dataagent: ToolConnectionList
      ivar type: Literal[fabric_dataagent]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            fabric_dataagent: ToolConnectionList
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.OpenApiAnonymousAuthDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: Literal[ANONYMOUS]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(self) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.OpenApiAuthDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.OpenApiAuthType(str, Enum):
      ANONYMOUS = "anonymous"
      CONNECTION = "connection"
      MANAGED_IDENTITY = "managed_identity"


    class azure.ai.agents.models.OpenApiConnectionAuthDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar security_scheme: OpenApiConnectionSecurityScheme
      ivar type: Literal[CONNECTION]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            security_scheme: OpenApiConnectionSecurityScheme
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.OpenApiConnectionSecurityScheme(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar connection_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            connection_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.OpenApiFunctionDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar auth: OpenApiAuthDetails
      ivar default_params: Optional[List[str]]
      ivar description: Optional[str]
      ivar name: str
      ivar spec: Any

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            auth: OpenApiAuthDetails, 
            default_params: Optional[List[str]] = ..., 
            description: Optional[str] = ..., 
            name: str, 
            spec: Any
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.OpenApiManagedAuthDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar security_scheme: OpenApiManagedSecurityScheme
      ivar type: Literal[MANAGED_IDENTITY]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            security_scheme: OpenApiManagedSecurityScheme
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.OpenApiManagedSecurityScheme(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar audience: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            audience: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.OpenApiTool(Tool[OpenApiToolDefinition]):
    - property definitions: List[OpenApiToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(
      -     self, 
      -     name: str, 
      -     description: str, 
      -     spec: Any, 
      -     auth: OpenApiAuthDetails, 
      -     default_parameters: Optional[List[str]] = None
      - ) -> None

    - def add_definition(
      -     self, 
      -     name: str, 
      -     description: str, 
      -     spec: Any, 
      -     auth: Optional[OpenApiAuthDetails] = None, 
      -     default_parameters: Optional[List[str]] = None
      - ) -> None

    - def execute(self, tool_call: Any) -> None

    - def remove_definition(self, name: str) -> None


    class azure.ai.agents.models.OpenApiToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar openapi: OpenApiFunctionDefinition
      ivar type: Literal[openapi]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            openapi: OpenApiFunctionDefinition
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RequiredAction(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RequiredFunctionToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar function: RequiredFunctionToolCallDetails
      ivar id: str
      ivar type: Literal[function]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            function: RequiredFunctionToolCallDetails, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RequiredFunctionToolCallDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar arguments: str
      ivar name: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            arguments: str, 
            name: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RequiredToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar id: str
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ResponseFormat(str, Enum):
      JSON_OBJECT = "json_object"
      TEXT = "text"


    class azure.ai.agents.models.ResponseFormatJsonSchema(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar description: Optional[str]
      ivar name: str
      ivar schema: Any

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            description: Optional[str] = ..., 
            name: str, 
            schema: Any
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ResponseFormatJsonSchemaType(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar json_schema: ResponseFormatJsonSchema
      ivar type: Literal[json_schema]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            json_schema: ResponseFormatJsonSchema
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunAdditionalFieldList(str, Enum):
      FILE_SEARCH_CONTENTS = "step_details.tool_calls[*].file_search.results[*].content"


    class azure.ai.agents.models.RunCompletionUsage(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar completion_tokens: int
      ivar prompt_tokens: int
      ivar total_tokens: int

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            completion_tokens: int, 
            prompt_tokens: int, 
            total_tokens: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunError(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar code: str
      ivar message: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            code: str, 
            message: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStatus(str, Enum):
      CANCELLED = "cancelled"
      CANCELLING = "cancelling"
      COMPLETED = "completed"
      EXPIRED = "expired"
      FAILED = "failed"
      IN_PROGRESS = "in_progress"
      QUEUED = "queued"
      REQUIRES_ACTION = "requires_action"


    class azure.ai.agents.models.RunStep(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar agent_id: str
      ivar cancelled_at: datetime
      ivar completed_at: datetime
      ivar created_at: datetime
      ivar expired_at: datetime
      ivar failed_at: datetime
      ivar id: str
      ivar last_error: RunStepError
      ivar metadata: Dict[str, str]
      ivar object: Literal[step]
      ivar run_id: str
      ivar status: Union[str, RunStepStatus]
      ivar step_details: RunStepDetails
      ivar thread_id: str
      ivar type: Union[str, RunStepType]
      ivar usage: Optional[RunStepCompletionUsage]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            agent_id: str, 
            cancelled_at: datetime, 
            completed_at: datetime, 
            created_at: datetime, 
            expired_at: datetime, 
            failed_at: datetime, 
            id: str, 
            last_error: RunStepError, 
            metadata: Dict[str, str], 
            run_id: str, 
            status: Union[str, RunStepStatus], 
            step_details: RunStepDetails, 
            thread_id: str, 
            type: Union[str, RunStepType], 
            usage: Optional[RunStepCompletionUsage] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepAzureAISearchToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar azure_ai_search: Dict[str, str]
      ivar id: str
      ivar type: Literal[azure_ai_search]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            azure_ai_search: Dict[str, str], 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepBingCustomSearchToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar bing_custom_search: Dict[str, str]
      ivar id: str
      ivar type: Literal[bing_custom_search]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            bing_custom_search: Dict[str, str], 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepBingGroundingToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar bing_grounding: Dict[str, str]
      ivar id: str
      ivar type: Literal[bing_grounding]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            bing_grounding: Dict[str, str], 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepCodeInterpreterImageOutput(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar image: RunStepCodeInterpreterImageReference
      ivar type: Literal[image]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            image: RunStepCodeInterpreterImageReference
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepCodeInterpreterImageReference(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepCodeInterpreterLogOutput(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar logs: str
      ivar type: Literal[logs]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            logs: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepCodeInterpreterToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar code_interpreter: RunStepCodeInterpreterToolCallDetails
      ivar id: str
      ivar type: Literal[code_interpreter]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            code_interpreter: RunStepCodeInterpreterToolCallDetails, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepCodeInterpreterToolCallDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar input: str
      ivar outputs: List[RunStepCodeInterpreterToolCallOutput]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            input: str, 
            outputs: List[RunStepCodeInterpreterToolCallOutput]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepCodeInterpreterToolCallOutput(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepCompletionUsage(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar completion_tokens: int
      ivar prompt_tokens: int
      ivar total_tokens: int

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            completion_tokens: int, 
            prompt_tokens: int, 
            total_tokens: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDelta(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar step_details: Optional[RunStepDeltaDetail]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            step_details: Optional[RunStepDeltaDetail] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaChunk(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar delta: RunStepDelta
      ivar id: str
      ivar object: Literal[delta]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            delta: RunStepDelta, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaCodeInterpreterDetailItemObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar input: Optional[str]
      ivar outputs: Optional[List[ForwardRef('RunStepDeltaCodeInterpreterOutput')]]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            input: Optional[str] = ..., 
            outputs: Optional[List[RunStepDeltaCodeInterpreterOutput]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaCodeInterpreterImageOutput(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar image: Optional[RunStepDeltaCodeInterpreterImageOutputObject]
      ivar index: int
      ivar type: Literal[image]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            image: Optional[RunStepDeltaCodeInterpreterImageOutputObject] = ..., 
            index: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaCodeInterpreterImageOutputObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_id: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_id: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaCodeInterpreterLogOutput(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar index: int
      ivar logs: Optional[str]
      ivar type: Literal[logs]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            logs: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaCodeInterpreterOutput(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar index: int
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaCodeInterpreterToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar code_interpreter: Optional[RunStepDeltaCodeInterpreterDetailItemObject]
      ivar id: str
      ivar index: int
      ivar type: Literal[code_interpreter]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            code_interpreter: Optional[RunStepDeltaCodeInterpreterDetailItemObject] = ..., 
            id: str, 
            index: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaDetail(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaFileSearchToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_search: Optional[RunStepFileSearchToolCallResults]
      ivar id: str
      ivar index: int
      ivar type: Literal[file_search]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_search: Optional[RunStepFileSearchToolCallResults] = ..., 
            id: str, 
            index: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaFunction(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar arguments: Optional[str]
      ivar name: Optional[str]
      ivar output: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            arguments: Optional[str] = ..., 
            name: Optional[str] = ..., 
            output: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaFunctionToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar function: Optional[RunStepDeltaFunction]
      ivar id: str
      ivar index: int
      ivar type: Literal[function]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            function: Optional[RunStepDeltaFunction] = ..., 
            id: str, 
            index: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaMessageCreation(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar message_creation: Optional[RunStepDeltaMessageCreationObject]
      ivar type: Literal[message_creation]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            message_creation: Optional[RunStepDeltaMessageCreationObject] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaMessageCreationObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar message_id: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            message_id: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar id: str
      ivar index: int
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            index: int, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDeltaToolCallObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar tool_calls: Optional[List[ForwardRef('RunStepDeltaToolCall')]]
      ivar type: Literal[tool_calls]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            tool_calls: Optional[List[RunStepDeltaToolCall]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepError(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar code: Union[str, RunStepErrorCode]
      ivar message: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            code: Union[str, RunStepErrorCode], 
            message: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepErrorCode(str, Enum):
      RATE_LIMIT_EXCEEDED = "rate_limit_exceeded"
      SERVER_ERROR = "server_error"


    class azure.ai.agents.models.RunStepFileSearchToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_search: RunStepFileSearchToolCallResults
      ivar id: str
      ivar type: Literal[file_search]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_search: RunStepFileSearchToolCallResults, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepFileSearchToolCallResult(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar content: Optional[List[ForwardRef('FileSearchToolCallContent')]]
      ivar file_id: str
      ivar file_name: str
      ivar score: float

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            content: Optional[List[FileSearchToolCallContent]] = ..., 
            file_id: str, 
            file_name: str, 
            score: float
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepFileSearchToolCallResults(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar ranking_options: Optional[FileSearchRankingOptions]
      ivar results: List[RunStepFileSearchToolCallResult]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            ranking_options: Optional[FileSearchRankingOptions] = ..., 
            results: List[RunStepFileSearchToolCallResult]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepFunctionToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar function: RunStepFunctionToolCallDetails
      ivar id: str
      ivar type: Literal[function]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            function: RunStepFunctionToolCallDetails, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepFunctionToolCallDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar arguments: str
      ivar name: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            arguments: str, 
            name: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepMessageCreationDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar message_creation: RunStepMessageCreationReference
      ivar type: Literal[MESSAGE_CREATION]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            message_creation: RunStepMessageCreationReference
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepMessageCreationReference(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar message_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            message_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepMicrosoftFabricToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar id: str
      ivar microsoft_fabric: Dict[str, str]
      ivar type: Literal[fabric_dataagent]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            microsoft_fabric: Dict[str, str]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepOpenAPIToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar id: str
      ivar open_api: Dict[str, str]
      ivar type: Literal[openapi]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            open_api: Dict[str, str]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepSharepointToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar id: str
      ivar share_point: Dict[str, str]
      ivar type: Literal[sharepoint_grounding]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            share_point: Dict[str, str]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepStatus(str, Enum):
      CANCELLED = "cancelled"
      COMPLETED = "completed"
      EXPIRED = "expired"
      FAILED = "failed"
      IN_PROGRESS = "in_progress"


    class azure.ai.agents.models.RunStepStreamEvent(str, Enum):
      THREAD_RUN_STEP_CANCELLED = "thread.run.step.cancelled"
      THREAD_RUN_STEP_COMPLETED = "thread.run.step.completed"
      THREAD_RUN_STEP_CREATED = "thread.run.step.created"
      THREAD_RUN_STEP_DELTA = "thread.run.step.delta"
      THREAD_RUN_STEP_EXPIRED = "thread.run.step.expired"
      THREAD_RUN_STEP_FAILED = "thread.run.step.failed"
      THREAD_RUN_STEP_IN_PROGRESS = "thread.run.step.in_progress"


    class azure.ai.agents.models.RunStepToolCall(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar id: str
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            id: str, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepToolCallDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar tool_calls: List[RunStepToolCall]
      ivar type: Literal[TOOL_CALLS]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            tool_calls: List[RunStepToolCall]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.RunStepType(str, Enum):
      MESSAGE_CREATION = "message_creation"
      TOOL_CALLS = "tool_calls"


    class azure.ai.agents.models.RunStreamEvent(str, Enum):
      THREAD_RUN_CANCELLED = "thread.run.cancelled"
      THREAD_RUN_CANCELLING = "thread.run.cancelling"
      THREAD_RUN_COMPLETED = "thread.run.completed"
      THREAD_RUN_CREATED = "thread.run.created"
      THREAD_RUN_EXPIRED = "thread.run.expired"
      THREAD_RUN_FAILED = "thread.run.failed"
      THREAD_RUN_INCOMPLETE = "thread.run.incomplete"
      THREAD_RUN_IN_PROGRESS = "thread.run.in_progress"
      THREAD_RUN_QUEUED = "thread.run.queued"
      THREAD_RUN_REQUIRES_ACTION = "thread.run.requires_action"


  - class azure.ai.agents.models.SharepointTool(ConnectionTool[SharepointToolDefinition]):
    - property definitions: List[SharepointToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(self, connection_id: str)

    - def execute(self, tool_call: Any) -> Any


    class azure.ai.agents.models.SharepointToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar sharepoint_grounding: ToolConnectionList
      ivar type: Literal[sharepoint_grounding]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            sharepoint_grounding: ToolConnectionList
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.SubmitToolOutputsAction(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar submit_tool_outputs: SubmitToolOutputsDetails
      ivar type: Literal[submit_tool_outputs]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            submit_tool_outputs: SubmitToolOutputsDetails
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.SubmitToolOutputsDetails(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar tool_calls: List[RequiredToolCall]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            tool_calls: List[RequiredToolCall]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ThreadDeletionStatus(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar deleted: bool
      ivar id: str
      ivar object: Literal[deleted]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            deleted: bool, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ThreadMessage(MutableMapping[str, Any]): implements Collection , Mapping 
    + ivar agent_id: str
    + ivar attachments: List[MessageAttachment]
    + ivar completed_at: datetime
    + ivar content: List[MessageContent]
    + ivar created_at: datetime
    + ivar id: str
    + ivar incomplete_at: datetime
    + ivar incomplete_details: MessageIncompleteDetails
    + ivar metadata: Dict[str, str]
    + ivar object: Literal[message]
    + ivar role: Union[str, MessageRole]
    + ivar run_id: str
    + ivar status: Union[str, MessageStatus]
    + ivar thread_id: str
    - property file_citation_annotations: List[MessageTextFileCitationAnnotation]    # Read-only
    - property file_path_annotations: List[MessageTextFilePathAnnotation]    # Read-only
    - property image_contents: List[MessageImageFileContent]    # Read-only
    - property text_messages: List[MessageTextContent]    # Read-only
    - property url_citation_annotations: List[MessageTextUrlCitationAnnotation]    # Read-only

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            agent_id: str, 
            attachments: List[MessageAttachment], 
            completed_at: datetime, 
            content: List[MessageContent], 
            created_at: datetime, 
            id: str, 
            incomplete_at: datetime, 
            incomplete_details: MessageIncompleteDetails, 
            metadata: Dict[str, str], 
            role: Union[str, MessageRole], 
            run_id: str, 
            status: Union[str, MessageStatus], 
            thread_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ThreadMessageOptions(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar attachments: Optional[List[ForwardRef('MessageAttachment')]]
      ivar content: MessageInputContent
      ivar metadata: Optional[Dict[str, str]]
      ivar role: Union[str, MessageRole]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            attachments: Optional[List[MessageAttachment]] = ..., 
            content: MessageInputContent, 
            metadata: Optional[Dict[str, str]] = ..., 
            role: Union[str, MessageRole]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ThreadRun(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar agent_id: str
      ivar cancelled_at: datetime
      ivar completed_at: datetime
      ivar created_at: datetime
      ivar expires_at: datetime
      ivar failed_at: datetime
      ivar id: str
      ivar incomplete_details: IncompleteRunDetails
      ivar instructions: str
      ivar last_error: RunError
      ivar max_completion_tokens: int
      ivar max_prompt_tokens: int
      ivar metadata: Dict[str, str]
      ivar model: str
      ivar object: Literal[run]
      ivar parallel_tool_calls: bool
      ivar required_action: Optional[RequiredAction]
      ivar response_format: AgentsResponseFormatOption
      ivar started_at: datetime
      ivar status: Union[str, RunStatus]
      ivar temperature: Optional[float]
      ivar thread_id: str
      ivar tool_choice: AgentsToolChoiceOption
      ivar tool_resources: Optional[UpdateToolResourcesOptions]
      ivar tools: List[ToolDefinition]
      ivar top_p: Optional[float]
      ivar truncation_strategy: TruncationObject
      ivar usage: RunCompletionUsage

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            agent_id: str, 
            cancelled_at: datetime, 
            completed_at: datetime, 
            created_at: datetime, 
            expires_at: datetime, 
            failed_at: datetime, 
            id: str, 
            incomplete_details: IncompleteRunDetails, 
            instructions: str, 
            last_error: RunError, 
            max_completion_tokens: int, 
            max_prompt_tokens: int, 
            metadata: Dict[str, str], 
            model: str, 
            parallel_tool_calls: bool, 
            required_action: Optional[RequiredAction] = ..., 
            response_format: AgentsResponseFormatOption, 
            started_at: datetime, 
            status: Union[str, RunStatus], 
            temperature: Optional[float] = ..., 
            thread_id: str, 
            tool_choice: AgentsToolChoiceOption, 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: List[ToolDefinition], 
            top_p: Optional[float] = ..., 
            truncation_strategy: TruncationObject, 
            usage: RunCompletionUsage
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ThreadStreamEvent(str, Enum):
      THREAD_CREATED = "thread.created"


  - class azure.ai.agents.models.Tool(ABC, Generic[ToolDefinitionT]):
    - property definitions: List[ToolDefinitionT]    # Read-only
    - property resources: ToolResources    # Read-only

    - @abstractmethod
    - def execute(self, tool_call: Any) -> Any


    class azure.ai.agents.models.ToolConnection(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar connection_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            connection_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ToolConnectionList(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar connection_list: Optional[List[ForwardRef('ToolConnection')]]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            connection_list: Optional[List[ToolConnection]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ToolDefinition(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ToolOutput(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar output: Optional[str]
      ivar tool_call_id: Optional[str]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            output: Optional[str] = ..., 
            tool_call_id: Optional[str] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.ToolResources(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar azure_ai_search: Optional[AzureAISearchResource]
      ivar code_interpreter: Optional[CodeInterpreterToolResource]
      ivar file_search: Optional[FileSearchToolResource]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            azure_ai_search: Optional[AzureAISearchResource] = ..., 
            code_interpreter: Optional[CodeInterpreterToolResource] = ..., 
            file_search: Optional[FileSearchToolResource] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


  - class azure.ai.agents.models.ToolSet(BaseToolSet):
    - property definitions: List[ToolDefinition]    # Read-only
    - property resources: ToolResources    # Read-only

    - def __init__(self) -> None

    - def add(self, tool: Tool)

    - def execute_tool_calls(self, tool_calls: List[Any]) -> Any

    - def get_definitions_and_resources(self) -> Dict[str, Any]

    - def get_tool(self, tool_type: Type[ToolT]) -> ToolT

    - def remove(self, tool_type: Type[Tool]) -> None

    - def validate_tool_type(self, tool: Tool) -> None


    class azure.ai.agents.models.TruncationObject(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar last_messages: Optional[int]
      ivar type: Union[str, TruncationStrategy]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            last_messages: Optional[int] = ..., 
            type: Union[str, TruncationStrategy]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.TruncationStrategy(str, Enum):
      AUTO = "auto"
      LAST_MESSAGES = "last_messages"


    class azure.ai.agents.models.UpdateCodeInterpreterToolResourceOptions(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar file_ids: Optional[List[str]]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            file_ids: Optional[List[str]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.UpdateFileSearchToolResourceOptions(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar vector_store_ids: Optional[List[str]]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            vector_store_ids: Optional[List[str]] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.UpdateToolResourcesOptions(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar azure_ai_search: Optional[AzureAISearchResource]
      ivar code_interpreter: Optional[UpdateCodeInterpreterToolResourceOptions]
      ivar file_search: Optional[UpdateFileSearchToolResourceOptions]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            azure_ai_search: Optional[AzureAISearchResource] = ..., 
            code_interpreter: Optional[UpdateCodeInterpreterToolResourceOptions] = ..., 
            file_search: Optional[UpdateFileSearchToolResourceOptions] = ...
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStore(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar created_at: datetime
      ivar expires_after: Optional[VectorStoreExpirationPolicy]
      ivar expires_at: Optional[datetime]
      ivar file_counts: VectorStoreFileCount
      ivar id: str
      ivar last_active_at: datetime
      ivar metadata: Dict[str, str]
      ivar name: str
      ivar object: Literal[vector_store]
      ivar status: Union[str, VectorStoreStatus]
      ivar usage_bytes: int

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            created_at: datetime, 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            expires_at: Optional[datetime] = ..., 
            file_counts: VectorStoreFileCount, 
            id: str, 
            last_active_at: datetime, 
            metadata: Dict[str, str], 
            name: str, 
            status: Union[str, VectorStoreStatus], 
            usage_bytes: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreAutoChunkingStrategyRequest(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: Literal[AUTO]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(self) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreAutoChunkingStrategyResponse(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: Literal[OTHER]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(self) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreChunkingStrategyRequest(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreChunkingStrategyRequestType(str, Enum):
      AUTO = "auto"
      STATIC = "static"


    class azure.ai.agents.models.VectorStoreChunkingStrategyResponse(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar type: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreChunkingStrategyResponseType(str, Enum):
      OTHER = "other"
      STATIC = "static"


    class azure.ai.agents.models.VectorStoreConfiguration(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar data_sources: List[VectorStoreDataSource]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            data_sources: List[VectorStoreDataSource]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreConfigurations(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar store_configuration: VectorStoreConfiguration
      ivar store_name: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            store_configuration: VectorStoreConfiguration, 
            store_name: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreDataSource(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar asset_identifier: str
      ivar asset_type: Union[str, VectorStoreDataSourceAssetType]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            asset_identifier: str, 
            asset_type: Union[str, VectorStoreDataSourceAssetType]
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreDataSourceAssetType(str, Enum):
      ID_ASSET = "id_asset"
      URI_ASSET = "uri_asset"


    class azure.ai.agents.models.VectorStoreDeletionStatus(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar deleted: bool
      ivar id: str
      ivar object: Literal[deleted]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            deleted: bool, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreExpirationPolicy(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar anchor: Union[str, VectorStoreExpirationPolicyAnchor]
      ivar days: int

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            anchor: Union[str, VectorStoreExpirationPolicyAnchor], 
            days: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreExpirationPolicyAnchor(str, Enum):
      LAST_ACTIVE_AT = "last_active_at"


    class azure.ai.agents.models.VectorStoreFile(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar chunking_strategy: VectorStoreChunkingStrategyResponse
      ivar created_at: datetime
      ivar id: str
      ivar last_error: VectorStoreFileError
      ivar object: Literal[file]
      ivar status: Union[str, VectorStoreFileStatus]
      ivar usage_bytes: int
      ivar vector_store_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            chunking_strategy: VectorStoreChunkingStrategyResponse, 
            created_at: datetime, 
            id: str, 
            last_error: VectorStoreFileError, 
            status: Union[str, VectorStoreFileStatus], 
            usage_bytes: int, 
            vector_store_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreFileBatch(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar created_at: datetime
      ivar file_counts: VectorStoreFileCount
      ivar id: str
      ivar object: Literal[files_batch]
      ivar status: Union[str, VectorStoreFileBatchStatus]
      ivar vector_store_id: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            created_at: datetime, 
            file_counts: VectorStoreFileCount, 
            id: str, 
            status: Union[str, VectorStoreFileBatchStatus], 
            vector_store_id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreFileBatchStatus(str, Enum):
      CANCELLED = "cancelled"
      COMPLETED = "completed"
      FAILED = "failed"
      IN_PROGRESS = "in_progress"


    class azure.ai.agents.models.VectorStoreFileCount(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar cancelled: int
      ivar completed: int
      ivar failed: int
      ivar in_progress: int
      ivar total: int

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            cancelled: int, 
            completed: int, 
            failed: int, 
            in_progress: int, 
            total: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreFileDeletionStatus(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar deleted: bool
      ivar id: str
      ivar object: Literal[deleted]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            deleted: bool, 
            id: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreFileError(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar code: Union[str, VectorStoreFileErrorCode]
      ivar message: str

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            code: Union[str, VectorStoreFileErrorCode], 
            message: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreFileErrorCode(str, Enum):
      INVALID_FILE = "invalid_file"
      SERVER_ERROR = "server_error"
      UNSUPPORTED_FILE = "unsupported_file"


    class azure.ai.agents.models.VectorStoreFileStatus(str, Enum):
      CANCELLED = "cancelled"
      COMPLETED = "completed"
      FAILED = "failed"
      IN_PROGRESS = "in_progress"


    class azure.ai.agents.models.VectorStoreFileStatusFilter(str, Enum):
      CANCELLED = "cancelled"
      COMPLETED = "completed"
      FAILED = "failed"
      IN_PROGRESS = "in_progress"


    class azure.ai.agents.models.VectorStoreStaticChunkingStrategyOptions(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar chunk_overlap_tokens: int
      ivar max_chunk_size_tokens: int

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            chunk_overlap_tokens: int, 
            max_chunk_size_tokens: int
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreStaticChunkingStrategyRequest(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar static: VectorStoreStaticChunkingStrategyOptions
      ivar type: Literal[STATIC]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            static: VectorStoreStaticChunkingStrategyOptions
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreStaticChunkingStrategyResponse(MutableMapping[str, Any]): implements Collection , Mapping 
      ivar static: VectorStoreStaticChunkingStrategyOptions
      ivar type: Literal[STATIC]

      def __delitem__(self, key: str) -> None

      @overload
      def __init__(
            self, 
            *, 
            static: VectorStoreStaticChunkingStrategyOptions
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      @overload
      def __init__(
            self, 
            *, 
            type: str
        ) -> None

      @overload
      def __init__(self, mapping: Mapping[str, Any]) -> None

      def __init__(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None

      def __init_subclass__(cls, discriminator: Optional[str] = None) -> None

      def __new__(
            cls, 
            *args: Any, 
            **kwargs: Any
        ) -> Self

      def __repr__(self) -> str

      def __setitem__(
            self, 
            key: str, 
            value: Any
        ) -> None

      def as_dict(
            self, 
            *, 
            exclude_readonly: bool = False
        ) -> Dict[str, Any]

      def clear(self) -> None

      def copy(self) -> Model

      def pop(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def popitem(self) -> Tuple[str, Any]

      def setdefault(
            self, 
            key: str, 
            default: Any = _UNSET
        ) -> Any

      def update(
            self, 
            *args: Any, 
            **kwargs: Any
        ) -> None


    class azure.ai.agents.models.VectorStoreStatus(str, Enum):
      COMPLETED = "completed"
      EXPIRED = "expired"
      IN_PROGRESS = "in_progress"


    namespace azure.ai.agents.operations

  - class azure.ai.agents.operations.AgentsClientOperationsMixin(ClientMixinABC[PipelineClient, AgentsClientConfiguration]):
  + class azure.ai.agents.operations.AgentsClientOperationsMixin(ClientMixinABC[PipelineClient[HttpRequest, HttpResponse], AgentsClientConfiguration]):

      @overload
      def create_agent(
            self, 
            *, 
            content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: str, 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      def create_agent(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

      @overload
      def create_agent(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

      @distributed_trace
      def create_agent(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: str = _Unset, 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      def create_thread_and_run(
            self, 
            *, 
            agent_id: str, 
            content_type: str = "application/json", 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            thread: Optional[AgentThreadCreationOptions] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def create_thread_and_run(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def create_thread_and_run(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace
      def create_thread_and_run(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            agent_id: str = _Unset, 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            thread: Optional[AgentThreadCreationOptions] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tool_resources: Optional[UpdateToolResourcesOptions] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace
      def delete_agent(
            self, 
            agent_id: str, 
            **kwargs: Any
        ) -> AgentDeletionStatus

      @distributed_trace
      def get_agent(
            self, 
            agent_id: str, 
            **kwargs: Any
        ) -> Agent

      @distributed_trace
      def list_agents(
            self, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> Iterable[Agent]

      @overload
      def update_agent(
            self, 
            agent_id: str, 
            *, 
            content_type: str = "application/json", 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent

      @overload
      def update_agent(
            self, 
            agent_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

      @overload
      def update_agent(
            self, 
            agent_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> Agent

      @distributed_trace
      def update_agent(
            self, 
            agent_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            description: Optional[str] = ..., 
            instructions: Optional[str] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            name: Optional[str] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
            temperature: Optional[float] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            **kwargs: Any
        ) -> Agent


  - class azure.ai.agents.operations.FilesOperations(FilesOperations):
  + class azure.ai.agents.operations.FilesOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
      + ) -> None
      - )

      @distributed_trace
      def delete(
            self, 
            file_id: str, 
            **kwargs: Any
        ) -> FileDeletionStatus

      @distributed_trace
      def get(
            self, 
            file_id: str, 
            **kwargs: Any
        ) -> FileInfo

    - @distributed_trace
    - def get_content(
      -     self, 
      -     file_id: str, 
      -     **kwargs: Any
      - ) -> Iterator[bytes]
      @distributed_trace
      def list(
            self, 
            *, 
            purpose: Optional[Union[str, FilePurpose]] = ..., 
            **kwargs: Any
        ) -> FileListResponse

    - @distributed_trace
    - def save(
      -     self, 
      -     file_id: str, 
      -     file_name: str, 
      -     target_dir: Optional[Union[str, Path]] = None
      - ) -> None
    - @overload
    - def upload(
      -     self, 
      -     *, 
      -     file_path: str, 
      -     purpose: Union[str, FilePurpose], 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - def upload(
      -     self, 
      -     *, 
      -     file: FileType, 
      -     filename: Optional[str] = ..., 
      -     purpose: Union[str, FilePurpose], 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - def upload(
      -     self, 
      -     body: JSON, 
      -     **kwargs: Any
      - ) -> FileInfo
    - @distributed_trace
    - def upload(
      -     self, 
      -     body: Optional[JSON] = None, 
      -     *, 
      -     file: Optional[FileType] = ..., 
      -     file_path: Optional[str] = ..., 
      -     filename: Optional[str] = ..., 
      -     purpose: Union[str, FilePurpose, None] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - def upload_and_poll(
      -     self, 
      -     body: JSON, 
      -     *, 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - def upload_and_poll(
      -     self, 
      -     *, 
      -     file: FileType, 
      -     filename: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     purpose: Union[str, FilePurpose], 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo
    - @overload
    - def upload_and_poll(
      -     self, 
      -     *, 
      -     file_path: str, 
      -     polling_interval: float = 1, 
      -     purpose: Union[str, FilePurpose], 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo
    - @distributed_trace
    - def upload_and_poll(
      -     self, 
      -     body: Optional[JSON] = None, 
      -     *, 
      -     file: Optional[FileType] = ..., 
      -     file_path: Optional[str] = ..., 
      -     filename: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     purpose: Union[str, FilePurpose, None] = ..., 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> FileInfo

  - class azure.ai.agents.operations.MessagesOperations(MessagesOperations):
  + class azure.ai.agents.operations.MessagesOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
      + ) -> None
      - )

      @overload
      def create(
            self, 
            thread_id: str, 
            *, 
            attachments: Optional[List[MessageAttachment]] = ..., 
            content: MessageInputContent, 
            content_type: str = "application/json", 
            metadata: Optional[Dict[str, str]] = ..., 
            role: Union[str, MessageRole], 
            **kwargs: Any
        ) -> ThreadMessage

      @overload
      def create(
            self, 
            thread_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadMessage

      @overload
      def create(
            self, 
            thread_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadMessage

      @distributed_trace
      def create(
            self, 
            thread_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            attachments: Optional[List[MessageAttachment]] = ..., 
            content: MessageInputContent = _Unset, 
            metadata: Optional[Dict[str, str]] = ..., 
            role: Union[str, MessageRole] = _Unset, 
            **kwargs: Any
        ) -> ThreadMessage

      @distributed_trace
      def get(
            self, 
            thread_id: str, 
            message_id: str, 
            **kwargs: Any
        ) -> ThreadMessage

    - def get_last_message_by_role(
      -     self, 
      -     thread_id: str, 
      -     role: MessageRole, 
      -     **kwargs
      - ) -> Optional[ThreadMessage]
    - def get_last_text_message_by_role(
      -     self, 
      -     thread_id: str, 
      -     role: MessageRole, 
      -     **kwargs
      - ) -> Optional[MessageTextContent]
      @distributed_trace
      def list(
            self, 
            thread_id: str, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            run_id: Optional[str] = ..., 
            **kwargs: Any
        ) -> Iterable[ThreadMessage]

      @overload
      def update(
            self, 
            thread_id: str, 
            message_id: str, 
            *, 
            content_type: str = "application/json", 
            metadata: Optional[Dict[str, str]] = ..., 
            **kwargs: Any
        ) -> ThreadMessage

      @overload
      def update(
            self, 
            thread_id: str, 
            message_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadMessage

      @overload
      def update(
            self, 
            thread_id: str, 
            message_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadMessage

      @distributed_trace
      def update(
            self, 
            thread_id: str, 
            message_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            metadata: Optional[Dict[str, str]] = ..., 
            **kwargs: Any
        ) -> ThreadMessage


    class azure.ai.agents.operations.RunStepsOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
      + ) -> None
      - )

      @distributed_trace
      def get(
            self, 
            thread_id: str, 
            run_id: str, 
            step_id: str, 
            *, 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            **kwargs: Any
        ) -> RunStep

      @distributed_trace
      def list(
            self, 
            thread_id: str, 
            run_id: str, 
            *, 
            before: Optional[str] = ..., 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> Iterable[RunStep]


  - class azure.ai.agents.operations.RunsOperations(RunsOperations):
  + class azure.ai.agents.operations.RunsOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
        ) -> None

      @distributed_trace
      def cancel(
            self, 
            thread_id: str, 
            run_id: str, 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def create(
            self, 
            thread_id: str, 
            *, 
            additional_instructions: Optional[str] = ..., 
            additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
            agent_id: str, 
            content_type: str = "application/json", 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
      +     stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def create(
            self, 
            thread_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def create(
            self, 
            thread_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            **kwargs: Any
        ) -> ThreadRun

    - @overload
    - def create(
      -     self, 
      -     thread_id: str, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str, 
      -     content_type: str = "application/json", 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     stream_parameter: Optional[bool] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - def create(
      -     self, 
      -     thread_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - def create(
      -     self, 
      -     thread_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
      @distributed_trace
      def create(
            self, 
            thread_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            additional_instructions: Optional[str] = ..., 
            additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
            agent_id: str = _Unset, 
            include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
            instructions: Optional[str] = ..., 
            max_completion_tokens: Optional[int] = ..., 
            max_prompt_tokens: Optional[int] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            model: Optional[str] = ..., 
            parallel_tool_calls: Optional[bool] = ..., 
            response_format: Optional[AgentsResponseFormatOption] = ..., 
      +     stream_parameter: Optional[bool] = ..., 
            temperature: Optional[float] = ..., 
            tool_choice: Optional[AgentsToolChoiceOption] = ..., 
            tools: Optional[List[ToolDefinition]] = ..., 
            top_p: Optional[float] = ..., 
            truncation_strategy: Optional[TruncationObject] = ..., 
            **kwargs: Any
        ) -> ThreadRun

    - @distributed_trace
    - def create_and_process(
      -     self, 
      -     thread_id: str, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str, 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     polling_interval: int = 1, 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     toolset: Optional[ToolSet] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> ThreadRun
      @distributed_trace
      def get(
            self, 
            thread_id: str, 
            run_id: str, 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace
      def list(
            self, 
            thread_id: str, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> Iterable[ThreadRun]

    - @overload
    - def stream(
      -     self, 
      -     thread_id: str, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str, 
      -     content_type: str = "application/json", 
      -     event_handler: None = ..., 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> AgentRunStream[AgentEventHandler]
    - @overload
    - def stream(
      -     self, 
      -     thread_id: str, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str, 
      -     content_type: str = "application/json", 
      -     event_handler: BaseAgentEventHandlerT, 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> AgentRunStream[BaseAgentEventHandlerT]
    - @overload
    - def stream(
      -     self, 
      -     thread_id: str, 
      -     body: Union[JSON, IO[bytes]], 
      -     *, 
      -     content_type: str = "application/json", 
      -     event_handler: None = ..., 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     **kwargs: Any
      - ) -> AgentRunStream[AgentEventHandler]
    - @overload
    - def stream(
      -     self, 
      -     thread_id: str, 
      -     body: Union[JSON, IO[bytes]], 
      -     *, 
      -     content_type: str = "application/json", 
      -     event_handler: BaseAgentEventHandlerT, 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     **kwargs: Any
      - ) -> AgentRunStream[BaseAgentEventHandlerT]
    - @distributed_trace
    - def stream(
      -     self, 
      -     thread_id: str, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     additional_instructions: Optional[str] = ..., 
      -     additional_messages: Optional[List[ThreadMessageOptions]] = ..., 
      -     agent_id: str = _Unset, 
      -     event_handler: Optional[BaseAgentEventHandlerT] = ..., 
      -     include: Optional[List[Union[str, RunAdditionalFieldList]]] = ..., 
      -     instructions: Optional[str] = ..., 
      -     max_completion_tokens: Optional[int] = ..., 
      -     max_prompt_tokens: Optional[int] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     model: Optional[str] = ..., 
      -     parallel_tool_calls: Optional[bool] = ..., 
      -     response_format: Optional[AgentsResponseFormatOption] = ..., 
      -     temperature: Optional[float] = ..., 
      -     tool_choice: Optional[AgentsToolChoiceOption] = ..., 
      -     tools: Optional[List[ToolDefinition]] = ..., 
      -     top_p: Optional[float] = ..., 
      -     truncation_strategy: Optional[TruncationObject] = ..., 
      -     **kwargs: Any
      - ) -> AgentRunStream[BaseAgentEventHandlerT]
      @overload
      def submit_tool_outputs(
            self, 
            thread_id: str, 
            run_id: str, 
            *, 
            content_type: str = "application/json", 
      +     stream_parameter: Optional[bool] = ..., 
      -     event_handler: Optional[AgentEventHandler] = ..., 
            tool_outputs: List[ToolOutput], 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def submit_tool_outputs(
            self, 
            thread_id: str, 
            run_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def submit_tool_outputs(
            self, 
            thread_id: str, 
            run_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

    - @overload
    - def submit_tool_outputs(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     *, 
      -     content_type: str = "application/json", 
      -     stream_parameter: Optional[bool] = ..., 
      -     tool_outputs: List[ToolOutput], 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - def submit_tool_outputs(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> ThreadRun
    - @overload
    - def submit_tool_outputs(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     **kwargs: Any
      - ) -> ThreadRun
      @distributed_trace
      def submit_tool_outputs(
            self, 
            thread_id: str, 
            run_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
      +     stream_parameter: Optional[bool] = ..., 
            tool_outputs: List[ToolOutput] = _Unset, 
            **kwargs: Any
        ) -> ThreadRun

    - @overload
    - def submit_tool_outputs_stream(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     body: Union[JSON, IO[bytes]], 
      -     *, 
      -     content_type: str = "application/json", 
      -     event_handler: BaseAgentEventHandler, 
      -     **kwargs: Any
      - ) -> None
    - @overload
    - def submit_tool_outputs_stream(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     *, 
      -     content_type: str = "application/json", 
      -     event_handler: BaseAgentEventHandler, 
      -     tool_outputs: List[ToolOutput], 
      -     **kwargs: Any
      - ) -> None
    - @distributed_trace
    - def submit_tool_outputs_stream(
      -     self, 
      -     thread_id: str, 
      -     run_id: str, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     event_handler: BaseAgentEventHandler, 
      -     tool_outputs: List[ToolOutput] = _Unset, 
      -     **kwargs: Any
      - ) -> None
      @overload
      def update(
            self, 
            thread_id: str, 
            run_id: str, 
            *, 
            content_type: str = "application/json", 
            metadata: Optional[Dict[str, str]] = ..., 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def update(
            self, 
            thread_id: str, 
            run_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @overload
      def update(
            self, 
            thread_id: str, 
            run_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> ThreadRun

      @distributed_trace
      def update(
            self, 
            thread_id: str, 
            run_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            metadata: Optional[Dict[str, str]] = ..., 
            **kwargs: Any
        ) -> ThreadRun


    class azure.ai.agents.operations.ThreadsOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
      + ) -> None
      - )

      @overload
      def create(
            self, 
            *, 
            content_type: str = "application/json", 
            messages: Optional[List[ThreadMessageOptions]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            **kwargs: Any
        ) -> AgentThread

      @overload
      def create(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> AgentThread

      @overload
      def create(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> AgentThread

      @distributed_trace
      def create(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            messages: Optional[List[ThreadMessageOptions]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            **kwargs: Any
        ) -> AgentThread

      @distributed_trace
      def delete(
            self, 
            thread_id: str, 
            **kwargs: Any
        ) -> ThreadDeletionStatus

      @distributed_trace
      def get(
            self, 
            thread_id: str, 
            **kwargs: Any
        ) -> AgentThread

      @distributed_trace
      def list(
            self, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> Iterable[AgentThread]

      @overload
      def update(
            self, 
            thread_id: str, 
            *, 
            content_type: str = "application/json", 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            **kwargs: Any
        ) -> AgentThread

      @overload
      def update(
            self, 
            thread_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> AgentThread

      @overload
      def update(
            self, 
            thread_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> AgentThread

      @distributed_trace
      def update(
            self, 
            thread_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            metadata: Optional[Dict[str, str]] = ..., 
            tool_resources: Optional[ToolResources] = ..., 
            **kwargs: Any
        ) -> AgentThread


  - class azure.ai.agents.operations.VectorStoreFileBatchesOperations(VectorStoreFileBatchesOperations):
  + class azure.ai.agents.operations.VectorStoreFileBatchesOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
      + ) -> None
      - )

      @distributed_trace
      def cancel(
            self, 
            vector_store_id: str, 
            batch_id: str, 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @overload
      def create(
            self, 
            vector_store_id: str, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            content_type: str = "application/json", 
            data_sources: Optional[List[VectorStoreDataSource]] = ..., 
            file_ids: Optional[List[str]] = ..., 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @overload
      def create(
            self, 
            vector_store_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @overload
      def create(
            self, 
            vector_store_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @distributed_trace
      def create(
            self, 
            vector_store_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            data_sources: Optional[List[VectorStoreDataSource]] = ..., 
            file_ids: Optional[List[str]] = ..., 
            **kwargs: Any
        ) -> VectorStoreFileBatch

    - @overload
    - def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFileBatch
    - @overload
    - def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_sources: Optional[List[VectorStoreDataSource]] = ..., 
      -     file_ids: Optional[List[str]] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFileBatch
    - @overload
    - def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFileBatch
    - @distributed_trace
    - def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_sources: Optional[List[VectorStoreDataSource]] = ..., 
      -     file_ids: Optional[List[str]] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFileBatch
      @distributed_trace
      def get(
            self, 
            vector_store_id: str, 
            batch_id: str, 
            **kwargs: Any
        ) -> VectorStoreFileBatch

      @distributed_trace
      def list_files(
            self, 
            vector_store_id: str, 
            batch_id: str, 
            *, 
            before: Optional[str] = ..., 
            filter: Optional[Union[str, VectorStoreFileStatusFilter]] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> Iterable[VectorStoreFile]


  - class azure.ai.agents.operations.VectorStoreFilesOperations(VectorStoreFilesOperations):
  + class azure.ai.agents.operations.VectorStoreFilesOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
      + ) -> None
      - )

      @overload
      def create(
            self, 
            vector_store_id: str, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            content_type: str = "application/json", 
            data_source: Optional[VectorStoreDataSource] = ..., 
            file_id: Optional[str] = ..., 
            **kwargs: Any
        ) -> VectorStoreFile

      @overload
      def create(
            self, 
            vector_store_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStoreFile

      @overload
      def create(
            self, 
            vector_store_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStoreFile

      @distributed_trace
      def create(
            self, 
            vector_store_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            data_source: Optional[VectorStoreDataSource] = ..., 
            file_id: Optional[str] = ..., 
            **kwargs: Any
        ) -> VectorStoreFile

    - @overload
    - def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFile
    - @overload
    - def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_source: Optional[VectorStoreDataSource] = ..., 
      -     file_id: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFile
    - @overload
    - def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFile
    - @distributed_trace
    - def create_and_poll(
      -     self, 
      -     vector_store_id: str, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_source: Optional[VectorStoreDataSource] = ..., 
      -     file_id: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStoreFile
      @distributed_trace
      def delete(
            self, 
            vector_store_id: str, 
            file_id: str, 
            **kwargs: Any
        ) -> VectorStoreFileDeletionStatus

      @distributed_trace
      def get(
            self, 
            vector_store_id: str, 
            file_id: str, 
            **kwargs: Any
        ) -> VectorStoreFile

      @distributed_trace
      def list(
            self, 
            vector_store_id: str, 
            *, 
            before: Optional[str] = ..., 
            filter: Optional[Union[str, VectorStoreFileStatusFilter]] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> Iterable[VectorStoreFile]


  - class azure.ai.agents.operations.VectorStoresOperations(VectorStoresOperations):
  + class azure.ai.agents.operations.VectorStoresOperations:

      def __init__(
            self, 
            *args, 
            **kwargs
      + ) -> None
      - )

      @overload
      def create(
            self, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            content_type: str = "application/json", 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            file_ids: Optional[List[str]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            name: Optional[str] = ..., 
            store_configuration: Optional[VectorStoreConfiguration] = ..., 
            **kwargs: Any
        ) -> VectorStore

      @overload
      def create(
            self, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStore

      @overload
      def create(
            self, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStore

      @distributed_trace
      def create(
            self, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            file_ids: Optional[List[str]] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            name: Optional[str] = ..., 
            store_configuration: Optional[VectorStoreConfiguration] = ..., 
            **kwargs: Any
        ) -> VectorStore

    - @overload
    - def create_and_poll(
      -     self, 
      -     body: JSON, 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStore
    - @overload
    - def create_and_poll(
      -     self, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_sources: Optional[List[VectorStoreDataSource]] = ..., 
      -     expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
      -     file_ids: Optional[List[str]] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     name: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStore
    - @overload
    - def create_and_poll(
      -     self, 
      -     body: IO[bytes], 
      -     *, 
      -     content_type: str = "application/json", 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStore
    - @distributed_trace
    - def create_and_poll(
      -     self, 
      -     body: Union[JSON, IO[bytes]] = _Unset, 
      -     *, 
      -     chunking_strategy: Optional[VectorStoreChunkingStrategyRequest] = ..., 
      -     content_type: str = "application/json", 
      -     data_sources: Optional[List[VectorStoreDataSource]] = ..., 
      -     expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
      -     file_ids: Optional[List[str]] = ..., 
      -     metadata: Optional[Dict[str, str]] = ..., 
      -     name: Optional[str] = ..., 
      -     polling_interval: float = 1, 
      -     timeout: Optional[float] = ..., 
      -     **kwargs: Any
      - ) -> VectorStore
      @distributed_trace
      def delete(
            self, 
            vector_store_id: str, 
            **kwargs: Any
        ) -> VectorStoreDeletionStatus

      @distributed_trace
      def get(
            self, 
            vector_store_id: str, 
            **kwargs: Any
        ) -> VectorStore

      @distributed_trace
      def list(
            self, 
            *, 
            before: Optional[str] = ..., 
            limit: Optional[int] = ..., 
            order: Optional[Union[str, ListSortOrder]] = ..., 
            **kwargs: Any
        ) -> Iterable[VectorStore]

      @overload
      def modify(
            self, 
            vector_store_id: str, 
            *, 
            content_type: str = "application/json", 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            name: Optional[str] = ..., 
            **kwargs: Any
        ) -> VectorStore

      @overload
      def modify(
            self, 
            vector_store_id: str, 
            body: JSON, 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStore

      @overload
      def modify(
            self, 
            vector_store_id: str, 
            body: IO[bytes], 
            *, 
            content_type: str = "application/json", 
            **kwargs: Any
        ) -> VectorStore

      @distributed_trace
      def modify(
            self, 
            vector_store_id: str, 
            body: Union[JSON, IO[bytes]] = _Unset, 
            *, 
            expires_after: Optional[VectorStoreExpirationPolicy] = ..., 
            metadata: Optional[Dict[str, str]] = ..., 
            name: Optional[str] = ..., 
            **kwargs: Any
        ) -> VectorStore


  - namespace azure.ai.agents.telemetry

  - def azure.ai.agents.telemetry.enable_telemetry(destination: Union[TextIO, str, None] = None, **kwargs) -> None


  - def azure.ai.agents.telemetry.trace_function(span_name: Optional[str] = None) -> Callable


  - class azure.ai.agents.telemetry.AIAgentsInstrumentor:

    - def __init__(self)

    - def instrument(self, enable_content_recording: Optional[bool] = None) -> None

    - def is_content_recording_enabled(self) -> bool

    - def is_instrumented(self) -> bool

    - def uninstrument(self) -> None


