import "@typespec/rest";

using TypeSpec.Rest;
using TypeSpec.Http;

@service(#{ title: "APIView Copilot Service" })
namespace ApiViewCopilot {
  /** Requests a synchronous API review */
  #deprecated "Use /api-review/start instead"
  @route("/{language}")
  @post
  op legacyApiReview(
    @path language: string,
    @body request: ApiReviewRequest,
  ): ApiReviewResponse;

  /** Starts a new API review job */
  @route("/api-review/start")
  @post
  op startApiReviewJob(
    @body request: ApiReviewJobRequest,
  ): ApiReviewJobStartResponse;

  /** Gets the status of an API review job */
  @route("/api-review/{jobId}")
  @get
  op getApiReviewJobStatus(@path jobId: string): ApiReviewJobStatusResponse;

  /** Summarizes an API or the diff between two APIs */
  @route("/api-review/summarize")
  @post
  op summarizeApi(@body request: SummarizeRequest): SummarizeResponse;

  /** Submit a chat message to the agent. */
  @route("/agent/chat")
  @post
  op agentChat(@body request: AgentChatRequest): AgentChatResponse;

  /** Handles an @mention from ApiView. Requires the bearer token to be set to the GH OAuth2 token. */
  @route("/api-review/mention")
  @post
  op handleMention(
    @body request: MentionRequest,
    @header("Authorization") authorization: string,
  ): string;

  model MentionRequest {
    /** The programming language of the APIView. */
    language: string;

    /** The name of the package in question */
    packageName: string;

    /** The code line being discussed */
    code: string;

    /** The comments in the APIView thread. */
    comments: ApiViewComment[];
  }

  model ApiReviewRequest {
    /** The API specification to review */
    target: string;

    /** The base API specification to compare against */
    base?: string;

    /** The outline of the API to review */
    outline?: string;

    /** Any existing comments on the API */
    comments?: ApiViewComment[];
  }

  model ApiReviewResponse {
    /** The list of review comments */
    comments: ReviewComment[];
  }

  /** An existing comment in APIView */
  model ApiViewComment {
    /** The line number of the comment */
    lineNo: int32;

    /** The datetime the comment was created */
    createdOn: offsetDateTime;

    /** The count of upvotes */
    upvotes?: int32;

    /** The count of downvotes */
    downvotes?: int32;

    /** The creator of the comment */
    createdBy: string;

    /** The contents of the comment */
    commentText: string;

    /** Whether the comment is marked resolved */
    isResolved?: boolean;
  }

  /** A review comment generated by Copilot */
  model ReviewComment {
    /** The applicable guideline IDs relevant to this comment */
    ruleIds: string[];

    /** The line number of the comment */
    lineNo: int32;

    /** The offending code */
    badCode: string;

    /** Suggested code to improve the bad_code */
    suggestion?: string;

    /** The contents of the comment */
    comment: string;

    /** Tag that identifies the source of the comment */
    source: string;
  }

  model ApiReviewJobRequest {
    /** The programming language of the APIView */
    language: string;

    ...ApiReviewRequest;
  }

  model ApiReviewJobStartResponse {
    /** The unique identifier for the job */
    jobId: string;
  }

  model ApiReviewJobStatusResponse {
    /** The current status of the job */
    status: "InProgress" | "Success" | "Error";

    /** The review comments, if the status is Success. `null` while InProgress. */
    comments?: ReviewComment[];

    /** Error details if the status is Error. `null` while InProgress. */
    details?: string;
  }

  model SummarizeRequest {
    /** The programming language of the involved APIViews. */
    language: string;

    /** The target APIView to summarize. */
    target: string;

    /** The base APIView to compare against. If provided, the summary will be a summary of the diff between target and base. */
    base?: string;
  }

  model SummarizeResponse {
    /** The summary of the APIView or the summary of the diff between two APIViews. */
    summary: string;
  }

  model AgentChatRequest {
    /** The user's input message to the agent. */
    userInput: string;

    /** The ID of the thread to continue the conversation. If `null` a new thread will be created. */
    threadId?: string;

    /** The list of messages in the conversation. */
    messages?: {}[];
  }

  model AgentChatResponse {
    /** The agent's response to the user's message. */
    response: string;

    /** The ID of the thread for the conversation. */
    threadId: string;

    /** The list of messages in the conversation. */
    messages: {}[];
  }
}
