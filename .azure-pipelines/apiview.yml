trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - .azure-pipelines/apiview.yml
      - src/dotnet/APIView
      - src/java/apiview-java-processor
      - src/swift
      - tools/apiview/parsers/js-api-parser

pr:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - .azure-pipelines/apiview.yml
      - src/dotnet/APIView
      - src/java/apiview-java-processor
      - src/swift
      - tools/apiview/parsers/js-api-parser

variables:
  DotNetRuntimeVersion: '6.x'
  PythonVersion: '3.10.5'
  WebClientProjectDirectory: 'src/dotnet/APIView/APIViewWeb/Client'
  WebProjectPath: 'src/dotnet/APIView/APIViewWeb/APIViewWeb.csproj'
  NodeVersion: '12.x'
  BuildConfiguration: 'Release'
  TypeScriptGeneratorDirectory: 'tools/apiview/parsers/js-api-parser'
  GoParserPackagePath: 'src/go'
  GoVersion: '1.18'
  NugetSecurityAnalysisWarningLevel: 'none'
  AzuriteConnectionString: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1"
  CosmosEmulatorConnectionString: "AccountEndpoint=https://localhost:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=="

stages:
  - stage: 'Main'
    jobs:
      - job: 'Build'

        pool:
          name: azsdk-pool-mms-win-2022-general
          vmImage: MMS2022

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '$(NodeVersion)'
            displayName: 'Use NodeJS $(NodeVersion)'

          - task: GoTool@0
            inputs:
              version: '$(GoVersion)'
            displayName: "Use Go $(GoVersion)"

          - script: |
              npm install -g npm@6.14.6
            displayName: "Install npm 6.14.6"

          - script: |
              npm install
            workingDirectory: $(WebClientProjectDirectory)
            displayName: "Install npm packages"

          - script: |
              npm run-script build
            workingDirectory: $(WebClientProjectDirectory)
            displayName: "Build client assets"

          - script: |
              npm install
            workingDirectory: $(TypeScriptGeneratorDirectory)
            displayName: "Install npm packages typescript generator"

          - script: |
              npm run-script build
            workingDirectory: $(TypeScriptGeneratorDirectory)
            displayName: "Build typescript generator"

          - task: Maven@3
            inputs:
              mavenPomFile: 'src/java/apiview-java-processor/pom.xml'
              goals: 'clean package'

            # Below 3 steps to package Python 3.10 is temporary work around until we have sandboxing ready
          - template: /eng/pipelines/templates/steps/use-python-version.yml
            parameters:
              versionSpec: '$(PythonVersion)'

          - script: |
              python --version
              pip install virtualenv aiohttp chardet trio
            displayName: 'Setup Python Environment'

          - pwsh: |
              $pythonPath = split-path (get-command python).Path -Parent
              Write-Host "Python home path $($pythonPath)"
              copy-item -Path "$pythonPath" -Destination "$(Build.ArtifactStagingDirectory)/APIViewWeb/Python" -Recurse -Force
              Write-Host "Packaged Python"
            displayName: 'Package Python'

          - script: |
              go build
            workingDirectory: $(GoParserPackagePath)
            displayName: 'Build go parser'

          - script: 'dotnet build $(WebProjectPath) -warnaserror'
            displayName: 'Build and Package'
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0

          - task: DotNetCoreCLI@2
            displayName: 'Publish site'
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0
            inputs:
              command: 'publish'
              projects: '$(WebProjectPath)'
              publishWebProjects: false
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'APIView'
              

      - job: 'Test'

        pool:
          name: azsdk-pool-mms-win-2022-general
          vmImage: MMS2022

        steps:
          - template: /eng/common/pipelines/templates/steps/cosmos-emulator.yml
            parameters:
              StartParameters: '/noexplorer /noui /enablepreview /disableratelimiting /enableaadauthentication /partitioncount=50 /consistency=Strong'
          
          - script: |
              npm install -g azurite
            displayName: 'Install Azurite'

          - task: Powershell@2
            inputs:
              workingDirectory: $(Agent.TempDirectory)
              filePath: $(Build.SourcesDirectory)/eng/scripts/Start-LocalHostApp.ps1
              arguments: >
                -Process "azurite.cmd"
                -ArgumentList "--silent"
                -Port "10000"
              pwsh: true
            displayName: 'Start Azurite'

          - task: UseDotNet@2
            displayName: 'Install .NET'
            inputs:
              version: '$(DotNetRuntimeVersion)'
          
          - pwsh: |
              dotnet --list-runtimes
              dotnet --version
            displayName: 'List .Net run times'

          - task: DotNetCoreCLI@2
            displayName: 'Build & Test'
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0
              APIVIEW_ENDPOINT: "http://localhost:5000"
              APIVIEW_BLOB__CONNECTIONSTRING: $(AzuriteConnectionString)
              APIVIEW_COSMOS__CONNECTIONSTRING: $(CosmosEmulatorConnectionString)
            inputs:
              command: test
              projects: |
                src/dotnet/APIView/**/APIViewUnitTests.csproj
                src/dotnet/APIView/**/APIViewIntegrationTests.csproj
              arguments: --logger trx
              publishTestResults: false
          
          - ${{ if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal')) }}:
            - template: /eng/pipelines/templates/steps/apiview-ui-tests.yml
              parameters:
                NodeVersion: $(NodeVersion)
                WebClientProjectDirectory: $(WebClientProjectDirectory)
                AzuriteConnectionString: $(AzuriteConnectionString)
                CosmosEmulatorConnectionString: $(CosmosEmulatorConnectionString)

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/*.trx'
              testRunTitle: 'Windows DotNet $(DotNetRuntimeVersion)'
              testResultsFormat: 'VSTest'
              mergeTestResults: true
