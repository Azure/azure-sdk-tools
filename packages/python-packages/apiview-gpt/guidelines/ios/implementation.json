[
  {
    "id": "ios-implementation",
    "category": "API Implementation",
    "text": "DO NOT allow implementation code (that is, code that doesn't form part of the public API) to be mistaken as public API. Implementation code can be made internal or file-private and placed within the same source file as the consuming code.\n\nService clients are the main starting points for developers calling Azure services with the Azure SDK. Each client library should have at least one client, so it\u2019s easy to discover. The guidelines in this section describe patterns for the design of a service client. Because for iOS only asynchronous service clients are required, the sections below are organized into general service client guidance.\n\nService methods are the methods on the client that invoke operations on the service.\n\nThe Azure SDK team has provided an AzureCore library that contains common mechanisms for cross cutting concerns such as configuration and doing HTTP requests."
  },
  {
    "id": "ios-requests-use-pipeline",
    "category": "Using the HTTP Pipeline",
    "text": "DO use the HTTP pipeline component within AzureCore for communicating to service REST endpoints.\n\nThe HTTP pipeline consists of a HTTP transport that is wrapped by multiple policies. Each policy is a control point during which the pipeline can modify either the request and/or response. We prescribe a default set of policies to standardize how client libraries interact with Azure services.  The order in the list is the most sensible order for implementation."
  },
  {
    "id": "ios-requests-implement-policies",
    "category": "Using the HTTP Pipeline",
    "text": "DO include the following policies provided by AzureCore when constructing the HTTP pipeline:\nTelemetry\nUnique Request ID\nRetry\nAuthentication\nResponse downloader\nLogging"
  },
  {
    "id": "ios-requests-use-azurecore-impl",
    "category": "Using the HTTP Pipeline",
    "text": "YOU SHOULD use the policy implementations in AzureCore whenever possible.  Do not try to \"write your own\" policy unless it is doing something unique to your service.  If you need another option to an existing policy, engage with the [Architecture Board] to add the option.\n\nThe following guidance applies to Swift attributes (https://docs.swift.org/swift-book/ReferenceManual/Attributes.html) :"
  },
  {
    "id": "ios-attr-objc",
    "category": "Attributes",
    "text": "YOU SHOULD use the @objc and @objMembers attributes ONLY when a Swift object must be exposed to ObjectiveC."
  },
  {
    "id": "ios-attr-available",
    "category": "Attributes",
    "text": "DO use the @available attribute when implementation is contingent upon differences in supported OS or Swift versions."
  },
  {
    "id": "ios-attr-available",
    "category": "Attributes",
    "text": "DO use the @available attribute to manage breaking changes and transition customers away from deprecated APIs. For example:\n\n```swift\n// usable but will issue a warning\n@available(*, deprecated, message: \"Optional message here...\")\nfunc myFunction() { ... }\n\n// unusable -- will issue a compiler error\n@available(*, unavailable, message: \"Optional message here...\")\nfunc myUnavailableFunc() { ... }\n\n// usable but will issue a warning\n@available(*, deprecated, renamed: \"BetterProtocolName\")\ntypealias BadProtocolName = BetterProtocolName\n\n```"
  },
  {
    "id": "ios-attr-escaping",
    "category": "Attributes",
    "text": "DO use @escaping on completion handler closures."
  },
  {
    "id": "ios-attr-unspecified",
    "category": "Attributes",
    "text": "DO contact the Azure SDK team if you are using an attribute not specified here.\n\nWhen configuring your client library, particular care must be taken to ensure that the consumer of your client library can properly configure the connectivity to your Azure service both globally (along with other client libraries the consumer is using) and specifically with your client library."
  },
  {
    "id": "ios-config-global-config",
    "category": "Client configuration",
    "text": "DO use relevant global configuration settings either by default or when explicitly requested to by the user, for example by passing in a configuration object to a client constructor."
  },
  {
    "id": "ios-config-for-different-clients",
    "category": "Client configuration",
    "text": "DO allow different clients of the same type to use different configurations."
  },
  {
    "id": "ios-config-optout",
    "category": "Client configuration",
    "text": "DO allow consumers of your service clients to opt out of all global configuration settings at once."
  },
  {
    "id": "ios-config-global-overrides",
    "category": "Client configuration",
    "text": "DO allow all global configuration settings to be overridden by client-provided options. The names of these options should align with any user-facing global configuration keys."
  },
  {
    "id": "general-config-behaviour-changes",
    "category": "Client configuration",
    "text": "DO NOT change behavior based on configuration changes that occur after the client is constructed. Hierarchies of clients inherit parent client configuration unless explicitly changed or overridden. Exceptions to this requirement are as follows:\nLog level, which must take effect immediately across the Azure SDK.\nTelemetry on/off, which must take effect immediately across the Azure SDK.\n\nTODO: Update these guidelines to specify exactly how to do these things in Swift\n\nFor iOS applications, configuration is applied using Info.plist and directly mirrors the environment variables within a service written in other languages."
  },
  {
    "id": "ios-config-plist-key-prefix",
    "category": "Service-specific configuration",
    "text": "DO prefix Azure-specific plist keys with AZURE_."
  },
  {
    "id": "ios-config-plist-key-use-client-specific",
    "category": "Service-specific configuration",
    "text": "YOU MAY use client library-specific plist keys set in Info.plist for portal-configured settings which are provided as parameters to your client library. This generally includes credentials and connection details. For example, Service Bus could support the following environment variables:\nAZURE_SERVICEBUS_CONNECTION_STRING\nAZURE_SERVICEBUS_NAMESPACE\nAZURE_SERVICEBUS_ISSUER\nAZURE_SERVICEBUS_ACCESS_KEY\n\nStorage could support:\nAZURE_STORAGE_ACCOUNT\nAZURE_STORAGE_ACCESS_KEY\nAZURE_STORAGE_DNS_SUFFIX\nAZURE_STORAGE_CONNECTION_STRING"
  },
  {
    "id": "ios-config-plist-key-get-approval",
    "category": "Service-specific configuration",
    "text": "DO get approval from the [Architecture Board] for every new plist key.  If an environment variable has been approved for the same client library within a different language, a key by the same name is approved for iOS."
  },
  {
    "id": "ios-config-plist-key-format",
    "category": "Service-specific configuration",
    "text": "DO use this syntax for Info.plist keys specific to a particular Azure service:\nAZURE_<ServiceName>_<ConfigurationKey>\n\nwhere ServiceName is the canonical shortname without spaces, and ConfigurationKey refers to an unnested configuration key for that client library."
  },
  {
    "id": "ios-config-plist-key-posix-compatible",
    "category": "Service-specific configuration",
    "text": "DO NOT use non-alpha-numeric characters in your environment variable names with the exception of underscore. This ensures broad interoperability.\n\nClient libraries must support robust logging mechanisms so that the consumer can adequately diagnose issues with the method calls and quickly determine whether the issue is in the consumer code, client library code, or service."
  },
  {
    "id": "ios-logging-pluggable-logger",
    "category": "Logging",
    "text": "DO support pluggable log handlers.  This should be provided by allowing the consumer to specify a logger parameter in the client options.  The logger parameter points to an instance of the AzureCoreLogger protocol."
  },
  {
    "id": "ios-logging-console-logger",
    "category": "Logging",
    "text": "DO make it easy for a consumer to enable logging output to the console. This is done by setting the logger client option to a new instance of the AzureCoreOSLogger."
  },
  {
    "id": "ios-logging-levels",
    "category": "Logging",
    "text": "DO use one of the following log levels when emitting logs: Verbose (details), Informational (things happened), Warning (might be a problem or not), and Error.  This are provided by the enum AzureCoreLogLevels."
  },
  {
    "id": "ios-logging-failure",
    "category": "Logging",
    "text": "DO use the Error logging level for failures that the application is unlikely to recover from (out of memory, etc.)."
  },
  {
    "id": "ios-logging-warning",
    "category": "Logging",
    "text": "DO use the Warning logging level when a function fails to perform its intended task. This generally means that the function will raise an exception.  Do not include occurrences of self-healing events (for example, when a request will be automatically retried)."
  },
  {
    "id": "ios-logging-info",
    "category": "Logging",
    "text": "DO use the Informational logging level when a function operates normally."
  },
  {
    "id": "ios-logging-verbose",
    "category": "Logging",
    "text": "DO use the Verbose logging level for detailed troubleshooting scenarios. This is primarily intended for developers or system administrators to diagnose specific failures.\n\nThe client library can log using the following:\n\n{% highlight swift %}\nlogger.writeLog(for: \"MyClient\", withLevel: AzureCoreLogLevels.Verbose, message: \"A message\")\n{% endhighlight %}"
  },
  {
    "id": "ios-logging-no-sensitive-info",
    "category": "Logging",
    "text": "DO NOT send sensitive information in log levels other than Verbose. For example, remove account keys when logging headers.  Headers and query parameters must be redacted using the loggingAllowedHeaders array and loggingAllowedQueryParams array specified within the client options"
  },
  {
    "id": "ios-logging-default-allowedlist",
    "category": "Logging",
    "text": "DO set reasonable defaults for the loggingAllowedHeaders and loggingAllowedQueryParams properties in the client options."
  },
  {
    "id": "ios-logging-requests",
    "category": "Logging",
    "text": "DO log request line, response line, and headers, as Informational message."
  },
  {
    "id": "ios-logging-cancellations",
    "category": "Logging",
    "text": "DO log an Informational message if a service call is cancelled."
  },
  {
    "id": "ios-logging-exceptions",
    "category": "Logging",
    "text": "DO log exceptions thrown as a Warning level message. If the log level set to Verbose, append stack trace information to the message.\n\nTODO: Logging (see general guidelines)\nProvide abstracted logger in AzureCore\nUse os_logger unless over-ridden\nallowHeaders & allowQueryParams\n\nTBD:\nHook in to HockeyApp\n\nDistributed tracing is uncommon in a mobile context. If you feel like you need to support distributed tracing, contact the Azure SDK mobile team for advice."
  },
  {
    "id": "ios-testing-unit-xctest",
    "category": "Testing",
    "text": "DO use the built-in XCTest framework for unit testing.\nDO use the AzureTest static framework for end-to-end testing.\nYOU SHOULD NOT mock service calls for end-to-end tests due to the inherent complexity. Instead, AzureTest should be used for most end-to-end scenario tests.\nYOU MAY use OHHTTPStubs to perform mocking for abnormal network conditions such as dropped connectivity.\n\n<!-- Project Links -->\n"
  }
]