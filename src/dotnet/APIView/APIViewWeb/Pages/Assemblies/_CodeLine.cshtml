@using ApiView
@using APIView.DIff
@using System.Text.RegularExpressions
@model APIViewWeb.Models.CodeLineModel
@{
    bool isRemoved = Model.Kind == DiffLineKind.Removed;
    string lineClass = Model.Kind switch
    {
        DiffLineKind.Removed => "code-removed",
        DiffLineKind.Added => "code-added",
        _ => ""
    };

    string foldableClass = Model.CodeLine.LineClass;
    bool isHeading = false;
    bool isContent = false;
    string hiddenSectionClass = String.Empty;
    if (!String.IsNullOrWhiteSpace(foldableClass))
    {
        string [] foldableClassParts = Regex.Split(foldableClass, "\\s+");
        isHeading = foldableClassParts.Any(x => x.EndsWith("-heading"));
        isContent = foldableClassParts.Any(x => x.EndsWith("-content"));
        hiddenSectionClass = isContent ? "d-none" : "";
    }
}

<tr class="code-line @lineClass @foldableClass @hiddenSectionClass" data-line-id="@(isRemoved ? string.Empty : Model.CodeLine.ElementId)">
    <td class="line-details">
        <table>
            <tr>
                <td class="line-number @lineClass"><span>@Model.LineNumber</span></td>
                <td class="line-details-button-cell @lineClass">
                    @if (!isRemoved && Model.CodeLine.ElementId != null)
                    {
                        <a class="line-comment-button">+</a>
                    }
                    else
                    {
                       <a class="line-comment-button" style="visibility: hidden;">+</a> // Added for visual consistency
                    }
                </td>
                <td class="line-details-button-cell @lineClass">
                    @if (isHeading)
                    {
                        <span class="row-fold-caret"><i class="fa-solid fa-angle-right"></i></span>
                    }
                </td>
            </tr>
        </table>
    </td>
    <td class="code @lineClass">
        @{
            string collapseMenu = isHeading ? "<span class='row-fold-elipsis'><i class='fa-solid fa-ellipsis'></i></span>" : "";
            var indent = "";
            for (var i = 0; i < Model.CodeLine.IndentSize; i++)
            {
                indent += "<span class=\"code-inner-indent\"></span>";
            }
        }
        @if (Model.Kind == DiffLineKind.Removed)
        {
            <span class="code-inner">@Html.Raw(indent)&nbsp;-&nbsp;@Html.Raw(Model.CodeLine.DisplayString)</span>
        }
        else if(Model.Kind == DiffLineKind.Added)
        {
            <span class="code-inner">@Html.Raw(indent)&nbsp;+&nbsp;@Html.Raw(Model.CodeLine.DisplayString)</span>
        }
        else 
        {
            <span class="code-inner">@Html.Raw(indent)&nbsp;&nbsp;&nbsp;@Html.Raw(Model.CodeLine.DisplayString)@Html.Raw(collapseMenu)</span> 
        }
    </td>
</tr>
@if (Model.Diagnostics.Any())
{
    var errorDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Default || d.Level == APIView.CodeDiagnosticLevel.Error);
    var warningDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Warning);
    var infoDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Info);
    <tr class="code-diagnostics" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@errorDiags" />
    </tr>
    <tr class="code-diagnostics" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@warningDiags" />
    </tr>
    <tr class="code-diagnostics" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@infoDiags" />
    </tr>
}

@if (Model.CommentThread != null)
{
    <partial name="_CommentThreadPartial" model="@Model.CommentThread" />
}