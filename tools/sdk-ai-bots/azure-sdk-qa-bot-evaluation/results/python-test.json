[
    {
        "testcase": "Python Live Test for async api",
        "expected": "You're encountering an SSL certificate error when running live tests for async APIs, specifically when connecting to https://localhost:5001. This is the test proxy endpoint, and the error is likely due to certificate verification failing. Although the same code works for another team member, the issue may be caused by environment variables \u2014 either missing or incorrectly set.\nTo run live tests, make sure AZURE_TEST_RUN_LIVE is set to \"true\". If you also want to record, avoid setting AZURE_SKIP_LIVE_RECORDING. As a workaround for the SSL issue, set the environment variable PROXY_URL to http://localhost:5000 instead of using HTTPS. This bypasses certificate validation and resolves the issue.",
        "actual": "The SSL certificate issue you are encountering during async live test runs with the test proxy (\"certificate verify failed: self-signed certificate\") is a known problem, especially when using HTTPS (`https://localhost:5001`) for the test proxy. This typically happens because the test proxy's self-signed certificate is not trusted by your system or not correctly configured in your async test environment.\n\nRecommended steps to resolve or work around this:\n\n1. **Update your branch**: Make sure you have the latest version of the Azure SDK test tools, as the test proxy certificate is occasionally rotated. This ensures your local setup matches the current expected certificate.\n\n2. **Try HTTP instead of HTTPS**: If possible, unset the `PROXY_URL` environment variable to default to HTTP (`http://localhost:5000`). HTTP does not require certificate verification and avoids these SSL issues:\n\n   > To work around this, unset the `PROXY_URL` environment variable to default to HTTP, which doesn't require a certificate. If your tests require an HTTPS endpoint, reach out to the Azure SDK team for assistance.\n\n3. **If HTTPS is required**: There are known async-specific issues with certificate configuration that can cause nondeterministic failures. If you must use HTTPS and updating does not resolve the problem, you may need to seek further help from the Azure SDK team for a long-term fix.\n\nReference links are provided below for more detailed troubleshooting steps and explanations.",
        "similarity": 3.0,
        "gpt_similarity": 3.0,
        "similarity_threshold": 3.0,
        "similarity_result": "pass",
        "groundedness": 5.0,
        "gpt_groundedness": 5.0,
        "groundedness_threshold": 3.0,
        "groundedness_result": "pass",
        "overall_score": 3.8
    },
    {
        "testcase": "release pipeline link for Python SDK `azure-mgmt-resource-bicep`",
        "expected": "To find the specific release pipeline link for the Python SDK `azure-mgmt-resource-bicep`, you typically need to locate the corresponding pipeline in Azure DevOps under the internal Azure SDK project. The naming convention for the pipeline is usually `python - <servicedir>`, where `<servicedir>` matches the service directory (in this case, likely resource or resource-bicep).\nHere is the general process:\n1. Go to [Azure DevOps - Azure SDK Internal Project](https://dev.azure.com/azure-sdk/internal/_build)\n2. Search for the pipeline named `python - resource` or similar, as the pipeline is named according to the service directory for management SDKs.\n3. The direct link format for a service pipeline is: `https://dev.azure.com/azure-sdk/internal/_build?definitionId=<ID>&_a=summary`\n- You can search for `resource` in the pipelines list to locate the exact one.",
        "actual": "To find the release pipeline link for the Python SDK `azure-mgmt-resource-bicep`, you should look for the Azure DevOps pipeline named using the convention `python - <servicedir>`. For `azure-mgmt-resource-bicep`, the service directory is likely `resources` or `bicep` under the `sdk` folder. \n\nThe general approach is:\n1. Go to Azure DevOps at https://dev.azure.com/azure-sdk/internal/_build.\n2. Search for the pipeline with a name like `python - resources` or `python - bicep`.\n\nThere isn't a direct link to the specific pipeline for `azure-mgmt-resource-bicep` in the provided references, but you can use this pattern to locate it. For example, for the core package, the direct link is:\nhttps://dev.azure.com/azure-sdk/internal/_build?definitionId=983&_a=summary (for core; replace `core` with the service directory name for your SDK).\n\nOnce you have located the pipeline, you can queue a build and follow the release steps as described in the Azure SDK release documentation.",
        "similarity": 4.0,
        "gpt_similarity": 4.0,
        "similarity_threshold": 3.0,
        "similarity_result": "pass",
        "groundedness": 3.0,
        "gpt_groundedness": 3.0,
        "groundedness_threshold": 3.0,
        "groundedness_result": "pass",
        "overall_score": 3.6
    },
    {
        "testcase": "Is test recordings working in azure-sdk-for-python-pr repo?",
        "expected": "Based on the available information, if you are running tests in the azure-sdk-for-python-pr repo with AZURE_TEST_RUN_LIVE=true and AZURE_SKIP_LIVE_RECORDING=false, and no .assets folder is being created (but tests pass), it likely indicates that the recording migration (to out-of-repo assets) has not yet been completed or set up for your package/branch in the azure-sdk-for-python-pr repository.\nThe current Azure SDK test infrastructure expects the following when running live tests:\nIf the package has been migrated to use the test proxy and out-of-repo recordings, running live tests with the correct environment variables should create/update the .assets directory at the root of the repo. This directory contains the local sparse clone of the required recordings.\nIf your package has not been migrated, the recordings may still be expected in the old /tests/recordings folder structure, or the test proxy integration may not be fully configured in the PR branch.\nKey points from the documentation:\n\"If tests were recorded for a new library, there should now be a folder called recordings inside your package's tests directory. Each recording in this folder will be a .json file... The final step in setting up recordings is to move these files out of the azure-sdk-for-python and into the azure-sdk-assets repository.\"\nAfter migration: \"These recording updates will be reflected in a git-excluded .assets folder at the root of the repo.\"\nIf you do not see a .assets folder, it likely means the test proxy migration is not yet in place or fully set up for your topic branch.\nRecommended next steps:\nConfirm if your package in azure-sdk-for-python-pr has been migrated to use the test proxy and out-of-repo recordings. Look for an assets.json file at the package root and .assets at the repo root.\nIf not migrated, refer to the recording migration guide for the migration process.\nIf migrated and still no .assets folder is created, verify that your test environment and variables are set up as required (including git version and credentials), and consult the test proxy troubleshooting guide.\nSummary:Your observation suggests that the recording support via the .assets folder is not yet active for your branch or package in the azure-sdk-for-python-pr repo. This could be due to the migration not being completed, or the package not being configured for out-of-repo recordings yet. Please check the migration status or reach out to the repo maintainers for confirmation.",
        "actual": "Based on the documentation, for test recordings to work in the Azure SDK for Python, you must:\n\n1. Ensure `AZURE_TEST_RUN_LIVE=true` and `AZURE_SKIP_LIVE_RECORDING=false` are set. This matches what you have done.\n2. When you run your tests, a `.assets` folder should be created in the repo root (for migrated packages) or a `recordings` folder inside your package's `tests` directory (for non-migrated packages).\n\nHowever, after the migration to the new recording system, the test recordings are no longer stored directly in the repo. Instead, they are pushed to the `azure-sdk-assets` repo and tracked by an `assets.json` file in your package. Running tests with the correct environment variables will update recordings in the `.assets` folder, which is a local git cache for the recordings. \n\nIf you do not see the `.assets` folder being created:\n- Double-check that your package has been migrated (i.e., has an `assets.json` file in its root).\n- Ensure you are running the tests from the correct location (typically the root of the SDK repo).\n- Check your `pytest` output for any warnings or errors about test proxy setup or missing configuration.\n- Confirm you have Git > 2.30.0 installed and in your PATH.\n\nIf you have verified all the above and recordings are still not being produced, consult the troubleshooting steps:\n- Remove any existing `.assets` and `.proxy` folders and rerun the tests.\n- Make sure your test code is properly decorated and following SDK test conventions (class names, decorators, etc.).\n\nThere is no explicit indication in the provided context that the `azure-sdk-for-python-pr` repo disables or changes the recording support from the main `azure-sdk-for-python` repo. If your branch is correctly configured, the behavior should match the main repo. If you continue to have issues, it may be worth confirming that your branch's test infrastructure has not diverged from the main repo's setup.\n\nSee the references below for more details and troubleshooting steps.",
        "similarity": 5.0,
        "gpt_similarity": 5.0,
        "similarity_threshold": 3.0,
        "similarity_result": "pass",
        "groundedness": 5.0,
        "gpt_groundedness": 5.0,
        "groundedness_threshold": 3.0,
        "groundedness_result": "pass",
        "overall_score": 5.0
    },
    {
        "average_score": 4.133333333333334,
        "total_evals": 3,
        "similarity_pass_rate": 3,
        "groundedness_pass_rate": 3
    }
]