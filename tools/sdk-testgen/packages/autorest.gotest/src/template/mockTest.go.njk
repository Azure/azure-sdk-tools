//go:build go1.18
// +build go1.18

{{copyright}}

package {{packageName}}_test

import (
	"context"
	"fmt"
	"net/http"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
    "github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
    "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/stretchr/testify/suite"
	"golang.org/x/net/http2"
)
{{imports}}

type MockTestSuite struct {
	suite.Suite

	cred              azcore.TokenCredential
	options           arm.ClientOptions
}

func (testsuite *MockTestSuite) SetupSuite() {
	mockHost := testutil.GetEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	err := http2.ConfigureTransport(tr)
	testsuite.Require().NoError(err, "Failed to configure http2 transport")
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	testsuite.cred = &testutil.FakeCredential{}

	testsuite.options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func TestMockTest(t *testing.T) {
	suite.Run(t, new(MockTestSuite))
}

{% for exampleGroup in exampleGroups %}
{% if exampleGroup.operation.language.default.name == exampleGroup.operation.language.go.name %}
func (testsuite *MockTestSuite) Test{{exampleGroup.operationGroup.language.go.name}}_{{exampleGroup.operation.language.go.name}}() {
{%- if exampleGroup.examples|length <=0 %}
	testsuite.T().Skip("Warning: No test steps for this operation!")
{%- else -%}
    ctx := context.Background()
{%- endif %}
{%- for example in exampleGroup.examples %}
    // From example {{example.originalFile}}
	{%- if sendExampleId %}
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
        "example-id": {"{{example.name.split('\\').join('\\\\').split('"').join('\\"')}}"},
    })
	{%- endif %}
	{%- if loop.first %}
	client, err := {{packageName}}.{{example.operationGroup.language.go.clientCtorName}}({{example.clientParametersOutput + ", " if example.clientParametersOutput else ""}}testsuite.cred, &testsuite.options)
    testsuite.Require().NoError(err, "Failed to create client")
    {%- else %}
    client, err = {{packageName}}.{{example.operationGroup.language.go.clientCtorName}}({{example.clientParametersOutput + ", " if example.clientParametersOutput else ""}}testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
    {%- endif %}
	{%- if example.returnInfo.length == 2 %}
        {%- if example.isLRO %}
            poller, err {% if loop.first %}:{% endif %}= client.{{example.opName}}({{example.methodParametersOutput}})
        {%- else %}
            {% if example.checkResponse %}res{% else %}_{% endif %}, err {% if loop.first and example.checkResponse %}:{% endif %}= client.{{example.opName}}({{example.methodParametersOutput}})
        {%- endif %}
        testsuite.Require().NoError(err, "Failed to get result for example {{example.originalFile}}")
        {%- if example.isLRO %}
            {% if example.checkResponse %}res{% else %}_{% endif %}, err {% if loop.first and example.checkResponse %}:{% endif %}= poller.PollUntilDone(ctx, nil)
            testsuite.Require().NoError(err, "Failed to get LRO result for example {{example.originalFile}}")
        {%- endif %}
    {%- elif  (example.returnInfo.length == 1) and (example.isPageable) %}
        pager {% if loop.first %}:{% endif %}= client.{{example.opName}}({{example.methodParametersOutput}})
        for pager.More() {
            {% if example.checkResponse and verifyResponse%}nextResult{% else %}_{% endif %}, err := pager.NextPage(ctx)
            testsuite.Require().NoError(err, "Failed to advance page for example {{example.originalFile}}")
            {%- if example.checkResponse and verifyResponse%}
            // Response check
            pagerExampleRes := {{example.responseOutput}}
            if !reflect.DeepEqual(pagerExampleRes, {% if example.responseTypePointer %}*{% endif %}nextResult{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %}) {
                exampleResJson, _ := json.Marshal(pagerExampleRes)
                mockResJson, _ := json.Marshal({% if example.responseTypePointer %}*{% endif %}nextResult{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %})
                testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example {{example.originalFile}}:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
            }
            {%- endif %}
        }
    {%- else %}
        client.{{example.opName}}({{example.methodParametersOutput}})
    {%- endif %}

    {%- if example.isLRO and example.isPageable and example.checkResponse %}
        for res.More() {
            {% if example.checkResponse and verifyResponse%}nextResult{% else %}_{% endif %}, err := res.NextPage(ctx)
            testsuite.Require().NoError(err, "Failed to advance page for example {{example.originalFile}}")
            {%- if example.checkResponse and verifyResponse%}
            // Response check
            pagerExampleRes := {{example.responseOutput}}
            if !reflect.DeepEqual(pagerExampleRes, {% if example.responseTypePointer %}*{% endif %}nextResult{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %}) {
                exampleResJson, _ := json.Marshal(pagerExampleRes)
                mockResJson, _ := json.Marshal({% if example.responseTypePointer %}*{% endif %}nextResult{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %})
                testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example {{example.originalFile}}:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
            }
            {%- endif %}
        }
    {%- endif %}
        
    {%- if example.checkResponse and not example.isPageable and verifyResponse%}
        // Response check
        exampleRes {%- if loop.first %}:{% endif %}= {{example.responseOutput}}
        if !reflect.DeepEqual(exampleRes, {% if example.responseTypePointer %}*{% endif %}res{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %}) {
            exampleResJson, _ := json.Marshal(exampleRes)
            mockResJson, _ := json.Marshal({% if example.responseTypePointer %}*{% endif %}res{% if not example.responseIsDiscriminator %}.{{example.responseType}}{% endif %})
            testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example {{example.originalFile}}:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
        }
    {%- endif %}
    {%- if not loop.last %}

    {% endif %}
{%- endfor %}
}
{%- endif %}
{% endfor %}