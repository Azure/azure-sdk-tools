//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package main

import (
	"context"
	"fmt"
	"math/rand"
	"os"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
)

var (
	err               error
	ctx               context.Context
	cred              azcore.TokenCredential
	fakeStepVar       = "signalrswaggertest4"
	resourceName      = "signalrswaggertest4"
	location          = getEnv("LOCATION", "eastus")
	resourceGroupName = getEnv("RESOURCE_GROUP_NAME", "")
	subscriptionId    = getEnv("AZURE_SUBSCRIPTION_ID", "")
)

func main() {
	ctx = context.Background()
	cred, err = azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		panic(err)
	}
	createResourceGroup()
	prepare()
	microsoftSignalrserviceBasicCrudSample()
	microsoftSignalrserviceDeleteonlySample()
	deleteResourceGroup()
}

func prepare() {
	// From step Delete-proximity-placement-group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, nil)
	_, err = proximityPlacementGroupsClient.Delete(ctx,
		resourceGroupName,
		resourceName,
		nil)
	if err != nil {
		panic(err)
	}
}

func microsoftSignalrserviceBasicCrudSample() {
	fakeScenarioVar := "signalrswaggertest5"
	resourceName := resourceName
	// From step Generate_Unique_Name
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"outputs": map[string]interface{}{
			"name": map[string]interface{}{
				"type":  "string",
				"value": "[variables('name').value]",
			},
			"resourceName": map[string]interface{}{
				"type":  "string",
				"value": "[variables('name').value]",
			},
		},
		"resources": []interface{}{},
		"variables": map[string]interface{}{
			"name": map[string]interface{}{
				"type": "string",
				"metadata": map[string]interface{}{
					"description": "Name of the SignalR service.",
				},
				"value": "[concat('sw',uniqueString(resourceGroup().id))]",
			},
		},
	}
	params := map[string]interface{}{}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       armresources.DeploymentModeIncremental.ToPtr(),
		},
	}
	deploymentExtend := createDeployment("Generate_Unique_Name", &deployment)
	name = deploymentExtend.Properties.Outputs["name"].(map[string]interface{})["value"].(string)
	resourceName = deploymentExtend.Properties.Outputs["resourceName"].(map[string]interface{})["value"].(string)

	// From step Create-or-Update-a-proximity-placement-group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, nil)
	proximityPlacementGroupsClientCreateOrUpdateResponse, err := proximityPlacementGroupsClient.CreateOrUpdate(ctx,
		resourceGroupName,
		resourceName,
		test.ProximityPlacementGroup{
			Location: to.StringPtr(location),
			Properties: &test.ProximityPlacementGroupProperties{
				ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	fakeScenarioVar = *proximityPlacementGroupsClientCreateOrUpdateResponse.ID

	// From step Delete-proximity_placement_group
	_, err = proximityPlacementGroupsClient.Delete(ctx,
		resourceGroupName,
		resourceName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Create_a_vm_with_Host_Encryption_using_encryptionAtHost_property
	virtualMachinesClient := test.NewVirtualMachinesClient(subscriptionId, cred, nil)
	fakeStepVar := "signalrswaggertest6"
	virtualMachinesClientCreateOrUpdatePollerResponse, err := virtualMachinesClient.BeginCreateOrUpdate(ctx,
		resourceGroupName,
		"myVM",
		test.VirtualMachine{
			Location: to.StringPtr(location),
			Plan: &test.Plan{
				Name:      to.StringPtr(fakeStepVar),
				Product:   to.StringPtr("windows-data-science-vm"),
				Publisher: to.StringPtr("microsoft-ads"),
			},
			Properties: &test.VirtualMachineProperties{
				HardwareProfile: &test.HardwareProfile{
					VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
				},
				NetworkProfile: &test.NetworkProfile{
					NetworkInterfaces: []*test.NetworkInterfaceReference{
						{
							ID: to.StringPtr("/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &test.NetworkInterfaceReferenceProperties{
								Primary: to.BoolPtr(true),
							},
						}},
				},
				OSProfile: &test.OSProfile{
					AdminPassword: to.StringPtr("{your-password}"),
					AdminUsername: to.StringPtr("{your-username}"),
					ComputerName:  to.StringPtr("myVM"),
				},
				SecurityProfile: &test.SecurityProfile{
					EncryptionAtHost: to.BoolPtr(true),
				},
				StorageProfile: &test.StorageProfile{
					ImageReference: &test.ImageReference{
						Offer:     to.StringPtr("windows-data-science-vm"),
						Publisher: to.StringPtr(fakeScenarioVar),
						SKU:       to.StringPtr("windows2016"),
						Version:   to.StringPtr("latest"),
					},
					OSDisk: &test.OSDisk{
						Name:         to.StringPtr("myVMosdisk"),
						Caching:      test.CachingTypesReadOnly.ToPtr(),
						CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
						ManagedDisk: &test.ManagedDiskParameters{
							StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = virtualMachinesClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}
}
func microsoftSignalrserviceDeleteonlySample() {
	// From step Delete_proximity_placement_group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, nil)
	_, err = proximityPlacementGroupsClient.Delete(ctx,
		resourceGroupName,
		resourceName,
		nil)
	if err != nil {
		panic(err)
	}
}

func createResourceGroup() error {
	rand.Seed(time.Now().UnixNano())
	resourceGroupName = fmt.Sprintf("go-sdk-sample-%d", rand.Intn(1000))
	rgClient := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)
	param := armresources.ResourceGroup{
		Location: to.StringPtr(location),
	}
	_, err := rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)
	if err != nil {
		panic(err)
	}
	return nil
}

func deleteResourceGroup() error {
	resourceGroup := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)
	pollerResponse, err := resourceGroup.BeginDelete(ctx, resourceGroupName, nil)
	if err != nil {
		panic(err)
	}
	_, err = pollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}
	return nil
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func createDeployment(deploymentName string, deployment *armresources.Deployment) *armresources.DeploymentExtended {
	deployClient := armresources.NewDeploymentsClient(subscriptionId, cred, nil)
	poller, err := deployClient.BeginCreateOrUpdate(
		ctx,
		resourceGroupName,
		deploymentName,
		*deployment,
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{},
	)
	if err != nil {
		panic(err)
	}
	res, err := poller.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}
	return &res.DeploymentExtended
}
