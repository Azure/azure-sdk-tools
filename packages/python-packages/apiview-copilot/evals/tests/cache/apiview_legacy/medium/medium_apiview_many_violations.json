{
   "testcase": "medium_apiview_many_violations",
   "row": {
      "outputs.actual": "{\"comments\":[{\"guideline_ids\":[\"python_design.html#python-client-service-verbs\",\"python_design.html#python-response-paged-results\"],\"memory_ids\":[],\"is_generic\":false,\"line_no\":102,\"bad_code\":\"def trials(\",\"suggestion\":\"def list_trials(self, **kwargs: Any) -> ItemPaged[TrialMatcherResult]\",\"comment\":\"Listing methods should use the 'list_' prefix and return an ItemPaged iterable to transparently support pagination.\",\"correlation_id\":\"f3aa6b13-97b0-445b-8b82-aa390d59456d\",\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[\"python_design.html#python-client-service-verbs\"],\"memory_ids\":[],\"is_generic\":false,\"line_no\":108,\"bad_code\":\"def erase_trials(\",\"suggestion\":\"def delete_trials(self, trial: str, *, timeout: float = None, **kwargs: Any) -> None\",\"comment\":\"Delete operations must use the standard 'delete_' prefix and include a timeout keyword parameter to clearly signal failures.\",\"correlation_id\":\"6a460886-8ae0-4cb8-ac7a-5ad55c71b548\",\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[\"python_design.html#python-client-service-verbs\",\"python_design.html#python-response-paged-results\"],\"memory_ids\":[],\"is_generic\":true,\"line_no\":223,\"bad_code\":\"def trials(\",\"suggestion\":\"def list_trials(self, **kwargs: Any) -> AsyncItemPaged[TrialMatcherResult]\",\"comment\":\"Async client methods should use the 'list_' prefix, be defined with async def, and return an AsyncItemPaged iterable to support awaitable operations and proper pagination.\",\"correlation_id\":\"f3aa6b13-97b0-445b-8b82-aa390d59456d\",\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[\"python_design.html#python-client-service-verbs\"],\"memory_ids\":[],\"is_generic\":false,\"line_no\":229,\"bad_code\":\"async def erase_trials(\",\"suggestion\":\"async def delete_trials(self, *, trial: str, timeout: float = None, **kwargs: Any) -> None\",\"comment\":\"Async delete operations must use the standard 'delete_' prefix and include a timeout keyword parameter for consistent error handling.\",\"correlation_id\":\"6a460886-8ae0-4cb8-ac7a-5ad55c71b548\",\"confidence_score\":1.0,\"severity\":\"MUST\"},{\"guideline_ids\":[\"python_implementation.html#python-models-repr\"],\"memory_ids\":[],\"is_generic\":false,\"line_no\":248,\"bad_code\":\"class azure.healthinsights.clinicalmatching.models.CreateTrialsOptions(MutableMapping[str, Any]):\",\"suggestion\":\"def __repr__(self) -> str: return f\\\"{self.__class__.__name__}({self.__dict__})\\\"\",\"comment\":\"Model types should implement __repr__ to include the type name and key properties for enhanced debuggability.\",\"correlation_id\":\"635f8d20-afe3-4f9b-8ccb-342eb41d8e6f\",\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[\"e2a9a6ea-731c-4d09-9daa-2cbc760a0bed\"],\"is_generic\":false,\"line_no\":318,\"bad_code\":\"class azure.healthinsights.clinicalmatching.models.AgeUnit(str, Enum):\",\"suggestion\":\"class azure.healthinsights.clinicalmatching.models.AgeUnit(str, Enum, metaclass=CaseInsensitiveEnumMeta):\",\"comment\":\"Enums should include a CaseInsensitiveEnumMeta metaclass for case-insensitive behavior.\",\"correlation_id\":\"5de0cfd6-70c1-4c0b-8f70-0f078bfb9221\",\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[\"e2a9a6ea-731c-4d09-9daa-2cbc760a0bed\"],\"is_generic\":false,\"line_no\":394,\"bad_code\":\"class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(str, Enum):\",\"suggestion\":\"class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(str, Enum, metaclass=CaseInsensitiveEnumMeta):\",\"comment\":\"Enums should include a CaseInsensitiveEnumMeta metaclass for case-insensitive behavior.\",\"correlation_id\":\"5de0cfd6-70c1-4c0b-8f70-0f078bfb9221\",\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[\"e2a9a6ea-731c-4d09-9daa-2cbc760a0bed\"],\"is_generic\":false,\"line_no\":431,\"bad_code\":\"class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(str, Enum):\",\"suggestion\":\"class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(str, Enum, metaclass=CaseInsensitiveEnumMeta):\",\"comment\":\"Enums should include a CaseInsensitiveEnumMeta metaclass for case-insensitive behavior.\",\"correlation_id\":\"5de0cfd6-70c1-4c0b-8f70-0f078bfb9221\",\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[\"b6d16b30-4dc3-4f63-8b26-5864b4605139\"],\"is_generic\":false,\"line_no\":462,\"bad_code\":\"ivar id: str\",\"suggestion\":\"ivar id: Optional[str]\",\"comment\":\"The 'id' attribute should be optional to align with the API specification.\",\"correlation_id\":null,\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[],\"is_generic\":true,\"line_no\":501,\"bad_code\":\"phases: Optional[List[Union[str, ClinicalTrialPhase]]] = ...\",\"suggestion\":null,\"comment\":\"Define a type alias for the union (e.g. PhaseType = Union[str, ClinicalTrialPhase]) to simplify the parameter signature.\",\"correlation_id\":null,\"confidence_score\":0.4,\"severity\":\"SUGGESTION\"},{\"guideline_ids\":[\"python_implementation.html#python-models-repr\"],\"memory_ids\":[],\"is_generic\":false,\"line_no\":546,\"bad_code\":\"class azure.healthinsights.clinicalmatching.models.ClinicalTrialRegistryFilter(MutableMapping[str, Any]):\",\"suggestion\":\"def __repr__(self) -> str: return f\\\"{self.__class__.__name__}({self.__dict__})\\\"\",\"comment\":\"Model types should implement a __repr__ method that returns the type name and key properties to aid in debugging.\",\"correlation_id\":\"635f8d20-afe3-4f9b-8ccb-342eb41d8e6f\",\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[\"python_implementation.html#python-models-repr\"],\"memory_ids\":[\"3c68449b-341f-4f65-8515-5142eea2852b\"],\"is_generic\":false,\"line_no\":997,\"bad_code\":\"class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceEvidence(MutableMapping[str, Any]):\",\"suggestion\":\"class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceEvidence(Mapping[str, Any]):\",\"comment\":\"Consider updating the model to use Mapping instead of MutableMapping for output-only models, and implement a __repr__ method that includes the type name and key properties to improve debugging.\",\"correlation_id\":null,\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[],\"is_generic\":true,\"line_no\":998,\"bad_code\":\"ivar eligibilityCriteriaEvidence: Optional[str]\",\"suggestion\":\"ivar eligibility_criteria_evidence: Optional[str]\",\"comment\":\"Rename the attribute to snake_case so it aligns with the __init__ parameter naming.\",\"correlation_id\":\"2da18c18-3b3d-40d1-85e2-529849d8345c\",\"confidence_score\":0.8,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[],\"is_generic\":true,\"line_no\":1000,\"bad_code\":\"ivar patientDataEvidence: Optional[ClinicalNoteEvidence]\",\"suggestion\":\"ivar patient_data_evidence: Optional[ClinicalNoteEvidence]\",\"comment\":\"Use snake_case for the attribute name to match the __init__ parameter naming.\",\"correlation_id\":\"2da18c18-3b3d-40d1-85e2-529849d8345c\",\"confidence_score\":0.8,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[],\"is_generic\":true,\"line_no\":1001,\"bad_code\":\"ivar patientInfoEvidence: Optional[ClinicalCodedElement]\",\"suggestion\":\"ivar patient_info_evidence: Optional[ClinicalCodedElement]\",\"comment\":\"Rename the attribute to snake_case for consistency with the constructor parameters.\",\"correlation_id\":\"2da18c18-3b3d-40d1-85e2-529849d8345c\",\"confidence_score\":0.8,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[],\"is_generic\":true,\"line_no\":1018,\"bad_code\":\"    *args: Any,\",\"suggestion\":null,\"comment\":\"Using *args and **kwargs in the concrete __init__ hides the expected parameters and can reduce API discoverability; consider a more explicit signature if possible.\",\"correlation_id\":null,\"confidence_score\":0.4,\"severity\":\"SHOULD\"},{\"guideline_ids\":[\"python_implementation.html#python-models-repr-length\"],\"memory_ids\":[],\"is_generic\":false,\"line_no\":1023,\"bad_code\":\"class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(str, Enum):\",\"suggestion\":\"class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):\",\"comment\":\"Enum types should use CaseInsensitiveEnumMeta to allow case‐insensitive comparisons.\",\"correlation_id\":null,\"confidence_score\":1.0,\"severity\":\"SHOULD\"},{\"guideline_ids\":[],\"memory_ids\":[\"5b697e30-5cff-44f3-a3eb-8af7c3d1275e\"],\"is_generic\":false,\"line_no\":1052,\"bad_code\":\"ivar id: str\",\"suggestion\":\"ivar id: Optional[str]\",\"comment\":\"The 'id' attribute should be optional to align with the API specification.\",\"correlation_id\":null,\"confidence_score\":1.0,\"severity\":\"SHOULD\"}]}",
      "inputs.testcase": "medium_apiview_many_violations",
      "inputs.query": "# Package is parsed using apiview-stub-generator(version:0.3.16), Python version: 3.10.16\n\n\nnamespace azure.healthinsights.clinicalmatching\n\nclass azure.healthinsights.clinicalmatching.ClinicalMatching(ClinicalMatchingClientOperationsMixin): implements ContextManager \n\ndef __init__(\n    self, \n    endpoint: str, \n    api_key: str, \n    *, \n    api_version: str = ..., \n    polling_interval: Optional[int] = ..., \n    **kwargs: Any\n) -> None\n\n@overload\ndef begin_match_trials(\n    self, \n    body: TrialMatcherData, \n    *, \n    content_type: str = \"application/json\", \n    repeatability_first_sent: Optional[datetime] = ..., \n    repeatability_request_id: Optional[str] = ..., \n    **kwargs: Any\n) -> LROPoller[TrialMatcherResult]\n\n@overload\ndef begin_match_trials(\n    self, \n    body: JSON, \n    *, \n    content_type: str = \"application/json\", \n    repeatability_first_sent: Optional[datetime] = ..., \n    repeatability_request_id: Optional[str] = ..., \n    **kwargs: Any\n) -> LROPoller[TrialMatcherResult]\n\n@overload\ndef begin_match_trials(\n    self, \n    body: IO, \n    *, \n    content_type: str = \"application/json\", \n    repeatability_first_sent: Optional[datetime] = ..., \n    repeatability_request_id: Optional[str] = ..., \n    **kwargs: Any\n) -> LROPoller[TrialMatcherResult]\n\n@distributed_trace\ndef begin_match_trials(\n    self, \n    body: Union[TrialMatcherData, JSON, IO], \n    *, \n    content_type: str = ..., \n    continuation_token: Optional[str] = ..., \n    polling: Union[bool, PollingMethod] = ..., \n    polling_interval: Optional[int] = ..., \n    repeatability_first_sent: Optional[datetime] = ..., \n    repeatability_request_id: Optional[str] = ..., \n    **kwargs: Any\n) -> LROPoller[TrialMatcherResult]\n\n@overload\ndef create_trials(\n    self, \n    body: TrialMatcherData, \n    *, \n    options: Optional[CreateTrialsOptions] = None,\n    **kwargs: Any\n) -> LROPoller[TrialMatcherResult]\n\n@overload\ndef create_trials(\n    self, \n    body: JSON, \n    *, \n    options: Optional[CreateTrialsOptions] = None,\n    **kwargs: Any\n) -> LROPoller[TrialMatcherResult]\n\n@overload\ndef create_trials(\n    self, \n    body: IO, \n    *, \n    options: Optional[CreateTrialsOptions] = None,\n    **kwargs: Any\n) -> LROPoller[TrialMatcherResult]\n\n@distributed_trace\ndef create_trials(\n    self, \n    body: Union[TrialMatcherData, JSON, IO], \n    *, \n    options: Optional[CreateTrialsOptions] = None,\n    **kwargs: Any\n) -> LROPoller[TrialMatcherResult]\n\n@distributed_trace\ndef trials(\n    self, \n    **kwargs: Any\n) -> List[TrialMatcherResult]\n\n@distributed_trace\ndef erase_trials(\n    self, \n                trial: str,\n    **kwargs: Any\n) -> None\n\ndef close(self) -> None\n\ndef send_request(\n    self, \n    request: HttpRequest, \n    *, \n    stream: Optional[bool] = ..., \n    **kwargs: Any\n) -> HttpResponse\n\n\nnamespace azure.healthinsights.clinicalmatching.aio\n\nclass azure.healthinsights.clinicalmatching.aio.ClinicalMatchingClient(ClinicalMatchingClientOperationsMixin): implements AsyncContextManager \n\ndef __init__(\n    self, \n    endpoint: str, \n    api_key: str, \n    *, \n    api_version: str = ..., \n    polling_interval: Optional[int] = ..., \n    **kwargs: Any\n) -> None\n\n@overload\nasync def begin_match_trials(\n    self, \n    body: TrialMatcherData, \n    *, \n    content_type: str = \"application/json\", \n    repeatability_first_sent: Optional[datetime] = ..., \n    repeatability_request_id: Optional[str] = ..., \n    **kwargs: Any\n) -> AsyncLROPoller[TrialMatcherResult]\n\n@overload\nasync def begin_match_trials(\n    self, \n    body: JSON, \n    *, \n    content_type: str = \"application/json\", \n    repeatability_first_sent: Optional[datetime] = ..., \n    repeatability_request_id: Optional[str] = ..., \n    **kwargs: Any\n) -> AsyncLROPoller[TrialMatcherResult]\n\n@overload\nasync def begin_match_trials(\n    self, \n    body: IO, \n    *, \n    content_type: str = \"application/json\", \n    repeatability_first_sent: Optional[datetime] = ..., \n    repeatability_request_id: Optional[str] = ..., \n    **kwargs: Any\n) -> AsyncLROPoller[TrialMatcherResult]\n\n@distributed_trace_async\nasync def begin_match_trials(\n    self, \n    body: Union[TrialMatcherData, JSON, IO], \n    *, \n    content_type: str = ..., \n    continuation_token: Optional[str] = ..., \n    polling: Union[bool, AsyncPollingMethod] = ..., \n    polling_interval: Optional[int] = ..., \n    repeatability_first_sent: Optional[datetime] = ..., \n    repeatability_request_id: Optional[str] = ..., \n    **kwargs: Any\n) -> AsyncLROPoller[TrialMatcherResult]\n\n@overload\nasync def create_trials(\n    self, \n    body: TrialMatcherData, \n    *, \n    options: Optional[CreateTrialsOptions] = None,\n    **kwargs: Any\n) -> AsyncLROPoller[TrialMatcherResult]\n\n@overload\nasync def create_trials(\n    self, \n    body: JSON, \n    *, \n    options: Optional[CreateTrialsOptions] = None,\n    **kwargs: Any\n) -> AsyncLROPoller[TrialMatcherResult]\n\n@overload\nasync def create_trials(\n    self, \n    body: IO, \n    *, \n    options: Optional[CreateTrialsOptions] = None,\n    **kwargs: Any\n) -> AsyncLROPoller[TrialMatcherResult]\n\n@distributed_trace_async\nasync def create_trials(\n    self, \n    body: Union[TrialMatcherData, JSON, IO], \n    *, \n    options: Optional[CreateTrialsOptions] = None,\n    **kwargs: Any\n) -> AsyncLROPoller[TrialMatcherResult]\n\n@distributed_trace\ndef trials(\n    self, \n    **kwargs: Any\n) -> List[TrialMatcherResult]\n\n@distributed_trace_async\nasync def erase_trials(\n    self, \n                trial: str,\n    **kwargs: Any\n) -> None\n\nasync def close(self) -> None\n\ndef send_request(\n    self, \n    request: HttpRequest, \n    *, \n    stream: Optional[bool] = ..., \n    **kwargs: Any\n) -> Awaitable[AsyncHttpResponse]\n\n\nnamespace azure.healthinsights.clinicalmatching.models\n\nclass azure.healthinsights.clinicalmatching.models.CreateTrialsOptions(MutableMapping[str, Any]):\nivar unit: Optional[Union[str, AgeUnit]]\nivar value: Optional[float]\n        ivar language: Optional[str]\n        ivar date: Optional[datetime.datetime]\n\n@overload\ndef __init__(\n    self, \n    *, \n    unit: Optional[Union[str, AgeUnit]], \n    value: Optional[float],\n                language: Optional[str],\n                date: Optional[datetime.datetime]\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.AcceptedAge(MutableMapping[str, Any]):\nivar unit: Union[str, AgeUnit]\nivar value: float\n\n@overload\ndef __init__(\n    self, \n    *, \n    unit: Union[str, AgeUnit], \n    value: float\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.AcceptedAgeRange(MutableMapping[str, Any]):\nivar maximum_age: Optional[AcceptedAge]\nivar minimum_age: Optional[AcceptedAge]\n\n@overload\ndef __init__(\n    self, \n    *, \n    maximum_age: Optional[AcceptedAge] = ..., \n    minimum_age: Optional[AcceptedAge] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.AgeUnit(str, Enum):\nDAYS = \"days\"\nMONTHS = \"months\"\nYEARS = \"years\"\n\n\nclass azure.healthinsights.clinicalmatching.models.AreaGeometry(MutableMapping[str, Any]):\nivar coordinates: List[float]\nivar type: Union[str, GeoJsonGeometryType]\n\n@overload\ndef __init__(\n    self, \n    *, \n    coordinates: List[float], \n    type: Union[str, GeoJsonGeometryType]\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.AreaProperties(MutableMapping[str, Any]):\nivar radius: float\nivar sub_type: Union[str, GeoJsonPropertiesSubType]\n\n@overload\ndef __init__(\n    self, \n    *, \n    radius: float, \n    sub_type: Union[str, GeoJsonPropertiesSubType]\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalCodedElement(MutableMapping[str, Any]):\nivar code: str\nivar name: Optional[str]\nivar system: str\nivar value: Optional[str]\n\n@overload\ndef __init__(\n    self, \n    *, \n    code: str, \n    name: Optional[str] = ..., \n    system: str, \n    value: Optional[str] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(str, Enum):\nCONSULTATION = \"consultation\"\nDISCHARGE_SUMMARY = \"dischargeSummary\"\nHISTORY_AND_PHYSICAL = \"historyAndPhysical\"\nIMAGING = \"imaging\"\nLABORATORY = \"laboratory\"\nPATHOLOGY = \"pathology\"\nPROCEDURE = \"procedure\"\nPROGRESS = \"progress\"\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalNoteEvidence(MutableMapping[str, Any]):\nivar id: str\nivar length: int\nivar offset: int\nivar text: Optional[str]\n\n@overload\ndef __init__(\n    self, \n    *, \n    id: str, \n    length: int, \n    offset: int, \n    text: Optional[str] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(str, Enum):\nALL = \"all\"\nFEMALE = \"female\"\nMALE = \"male\"\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialDemographics(MutableMapping[str, Any]):\nivar accepted_age_range: Optional[AcceptedAgeRange]\nivar accepted_sex: Optional[Union[str, ClinicalTrialAcceptedSex]]\n\n@overload\ndef __init__(\n    self, \n    *, \n    accepted_age_range: Optional[AcceptedAgeRange] = ..., \n    accepted_sex: Optional[Union[str, ClinicalTrialAcceptedSex]] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialDetails(MutableMapping[str, Any]):\nivar demographics: Optional[ClinicalTrialDemographics]\nivar eligibility_criteria_text: Optional[str]\nivar id: str\nivar metadata: ClinicalTrialMetadata\n\n@overload\ndef __init__(\n    self, \n    *, \n    demographics: Optional[ClinicalTrialDemographics] = ..., \n    eligibility_criteria_text: Optional[str] = ..., \n    id: str, \n    metadata: ClinicalTrialMetadata\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialMetadata(MutableMapping[str, Any]):\nivar conditions: List[str]\nivar contacts: Optional[List[ForwardRef('ContactDetails')]]\nivar facilities: Optional[List[ForwardRef('ClinicalTrialResearchFacility')]]\nivar phases: Optional[List[Union[str, ForwardRef('ClinicalTrialPhase')]]]\nivar recruitment_status: Optional[Union[str, ClinicalTrialRecruitmentStatus]]\nivar sponsors: Optional[List[str]]\nivar study_type: Optional[Union[str, ClinicalTrialStudyType]]\n\n@overload\ndef __init__(\n    self, \n    *, \n    conditions: List[str], \n    contacts: Optional[List[ContactDetails]] = ..., \n    facilities: Optional[List[ClinicalTrialResearchFacility]] = ..., \n    phases: Optional[List[Union[str, ClinicalTrialPhase]]] = ..., \n    recruitment_status: Optional[Union[str, ClinicalTrialRecruitmentStatus]] = ..., \n    sponsors: Optional[List[str]] = ..., \n    study_type: Optional[Union[str, ClinicalTrialStudyType]] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(str, Enum):\nEARLY_PHASE1 = \"earlyPhase1\"\nNOT_APPLICABLE = \"notApplicable\"\nPHASE1 = \"phase1\"\nPHASE2 = \"phase2\"\nPHASE3 = \"phase3\"\nPHASE4 = \"phase4\"\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(str, Enum):\nBASIC_SCIENCE = \"basicScience\"\nDEVICE_FEASIBILITY = \"deviceFeasibility\"\nDIAGNOSTIC = \"diagnostic\"\nHEALTH_SERVICES_RESEARCH = \"healthServicesResearch\"\nNOT_APPLICABLE = \"notApplicable\"\nOTHER = \"other\"\nPREVENTION = \"prevention\"\nSCREENING = \"screening\"\nSUPPORTIVE_CARE = \"supportiveCare\"\nTREATMENT = \"treatment\"\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(str, Enum):\nENROLLING_BY_INVITATION = \"enrollingByInvitation\"\nNOT_YET_RECRUITING = \"notYetRecruiting\"\nRECRUITING = \"recruiting\"\nUNKNOWN_STATUS = \"unknownStatus\"\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialRegistryFilter(MutableMapping[str, Any]):\nivar conditions: Optional[List[str]]\nivar facility_areas: Optional[List[ForwardRef('GeographicArea')]]\nivar facility_locations: Optional[List[ForwardRef('GeographicLocation')]]\nivar facility_names: Optional[List[str]]\nivar ids: Optional[List[str]]\nivar phases: Optional[List[Union[str, ForwardRef('ClinicalTrialPhase')]]]\nivar purposes: Optional[List[Union[str, ForwardRef('ClinicalTrialPurpose')]]]\nivar recruitment_statuses: Optional[List[Union[str, ForwardRef('ClinicalTrialRecruitmentStatus')]]]\nivar sources: Optional[List[Union[str, ForwardRef('ClinicalTrialSource')]]]\nivar sponsors: Optional[List[str]]\nivar study_types: Optional[List[Union[str, ForwardRef('ClinicalTrialStudyType')]]]\n\n@overload\ndef __init__(\n    self, \n    *, \n    conditions: Optional[List[str]] = ..., \n    facility_areas: Optional[List[GeographicArea]] = ..., \n    facility_locations: Optional[List[GeographicLocation]] = ..., \n    facility_names: Optional[List[str]] = ..., \n    ids: Optional[List[str]] = ..., \n    phases: Optional[List[Union[str, ClinicalTrialPhase]]] = ..., \n    purposes: Optional[List[Union[str, ClinicalTrialPurpose]]] = ..., \n    recruitment_statuses: Optional[List[Union[str, ClinicalTrialRecruitmentStatus]]] = ..., \n    sources: Optional[List[Union[str, ClinicalTrialSource]]] = ..., \n    sponsors: Optional[List[str]] = ..., \n    study_types: Optional[List[Union[str, ClinicalTrialStudyType]]] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialResearchFacility(MutableMapping[str, Any]):\nivar city: Optional[str]\nivar country_or_region: str\nivar name: str\nivar state: Optional[str]\n\n@overload\ndef __init__(\n    self, \n    *, \n    city: Optional[str] = ..., \n    country_or_region: str, \n    name: str, \n    state: Optional[str] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialSource(str, Enum):\nCLINICALTRIALS_GOV = \"clinicaltrials.gov\"\nCUSTOM = \"custom\"\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(str, Enum):\nEXPANDED_ACCESS = \"expandedAccess\"\nINTERVENTIONAL = \"interventional\"\nOBSERVATIONAL = \"observational\"\nPATIENT_REGISTRIES = \"patientRegistries\"\n\n\nclass azure.healthinsights.clinicalmatching.models.ClinicalTrials(MutableMapping[str, Any]):\nivar custom_trials: Optional[List[ForwardRef('ClinicalTrialDetails')]]\nivar registry_filters: Optional[List[ForwardRef('ClinicalTrialRegistryFilter')]]\n\n@overload\ndef __init__(\n    self, \n    *, \n    custom_trials: Optional[List[ClinicalTrialDetails]] = ..., \n    registry_filters: Optional[List[ClinicalTrialRegistryFilter]] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ContactDetails(MutableMapping[str, Any]):\nivar email: Optional[str]\nivar name: Optional[str]\nivar phone: Optional[str]\n\n@overload\ndef __init__(\n    self, \n    *, \n    email: Optional[str] = ..., \n    name: Optional[str] = ..., \n    phone: Optional[str] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.DocumentContent(MutableMapping[str, Any]):\nivar source_type: Union[str, DocumentContentSourceType]\nivar value: str\n\n@overload\ndef __init__(\n    self, \n    *, \n    source_type: Union[str, DocumentContentSourceType], \n    value: str\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(str, Enum):\nINLINE = \"inline\"\nREFERENCE = \"reference\"\n\n\nclass azure.healthinsights.clinicalmatching.models.DocumentType(str, Enum):\nDICOM = \"dicom\"\nFHIR_BUNDLE = \"fhirBundle\"\nGENOMIC_SEQUENCING = \"genomicSequencing\"\nNOTE = \"note\"\n\n\nclass azure.healthinsights.clinicalmatching.models.Error(MutableMapping[str, Any]):\nivar code: str\nivar details: List[Error]\nivar innererror: Optional[InnerError]\nivar message: str\nivar target: Optional[str]\n\n@overload\ndef __init__(\n    self, \n    *, \n    code: str, \n    details: List[Error], \n    innererror: Optional[InnerError] = ..., \n    message: str, \n    target: Optional[str] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.ExtendedClinicalCodedElement(MutableMapping[str, Any]):\nivar category: Optional[str]\nivar code: str\nivar name: Optional[str]\nivar semantic_type: Optional[str]\nivar system: str\nivar value: Optional[str]\n\n@overload\ndef __init__(\n    self, \n    *, \n    category: Optional[str] = ..., \n    code: str, \n    name: Optional[str] = ..., \n    semantic_type: Optional[str] = ..., \n    system: str, \n    value: Optional[str] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.GeoJsonGeometryType(str, Enum):\nPOINT = \"Point\"\n\n\nclass azure.healthinsights.clinicalmatching.models.GeoJsonPropertiesSubType(str, Enum):\nCIRCLE = \"Circle\"\n\n\nclass azure.healthinsights.clinicalmatching.models.GeoJsonType(str, Enum):\nFEATURE = \"Feature\"\n\n\nclass azure.healthinsights.clinicalmatching.models.GeographicArea(MutableMapping[str, Any]):\nivar geometry: AreaGeometry\nivar properties: AreaProperties\nivar type: Union[str, GeoJsonType]\n\n@overload\ndef __init__(\n    self, \n    *, \n    geometry: AreaGeometry, \n    properties: AreaProperties, \n    type: Union[str, GeoJsonType]\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.GeographicLocation(MutableMapping[str, Any]):\nivar city: Optional[str]\nivar country_or_region: str\nivar state: Optional[str]\n\n@overload\ndef __init__(\n    self, \n    *, \n    city: Optional[str] = ..., \n    country_or_region: str, \n    state: Optional[str] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.InnerError(MutableMapping[str, Any]):\nivar code: str\nivar innerrror: Optional[InnerError]\n\n@overload\ndef __init__(\n    self, \n    *, \n    code: str, \n    innererror: Optional[InnerError] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.JobStatus(str, Enum):\nFAILED = \"failed\"\nNOT_STARTED = \"notStarted\"\nPARTIALLY_COMPLETED = \"partiallyCompleted\"\nRUNNING = \"running\"\nSUCCEEDED = \"succeeded\"\n\n\nclass azure.healthinsights.clinicalmatching.models.PatientDocument(MutableMapping[str, Any]):\nivar clinical_type: Optional[Union[str, ClinicalDocumentType]]\nivar content: DocumentContent\nivar created_date_time: Optional[datetime]\nivar id: str\nivar language: Optional[str]\nivar type: Union[str, DocumentType]\n\n@overload\ndef __init__(\n    self, \n    *, \n    clinical_type: Optional[Union[str, ClinicalDocumentType]] = ..., \n    content: DocumentContent, \n    created_date_time: Optional[datetime] = ..., \n    id: str, \n    language: Optional[str] = ..., \n    type: Union[str, DocumentType]\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.PatientInfo(MutableMapping[str, Any]):\nivar birth_date: Optional[date]\nivar clinical_info: Optional[List[ForwardRef('ClinicalCodedElement')]]\nivar sex: Optional[Union[str, PatientInfoSex]]\n\n@overload\ndef __init__(\n    self, \n    *, \n    birth_date: Optional[date] = ..., \n    clinical_info: Optional[List[ClinicalCodedElement]] = ..., \n    sex: Optional[Union[str, PatientInfoSex]] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.PatientInfoSex(str, Enum):\nFEMALE = \"female\"\nMALE = \"male\"\nUNSPECIFIED = \"unspecified\"\n\n\nclass azure.healthinsights.clinicalmatching.models.PatientRecord(MutableMapping[str, Any]):\nivar data: Optional[List[ForwardRef('PatientDocument')]]\nivar id: str\nivar info: Optional[PatientInfo]\n\n@overload\ndef __init__(\n    self, \n    *, \n    data: Optional[List[PatientDocument]] = ..., \n    id: str, \n    info: Optional[PatientInfo] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.RepeatabilityResultType(str, Enum):\nACCEPTED = \"accepted\"\nREJECTED = \"rejected\"\n\n\nclass azure.healthinsights.clinicalmatching.models.TrialMatcherData(MutableMapping[str, Any]):\nivar configuration: Optional[TrialMatcherModelConfiguration]\nivar patients: List[PatientRecord]\n\n@overload\ndef __init__(\n    self, \n    *, \n    configuration: Optional[TrialMatcherModelConfiguration] = ..., \n    patients: List[PatientRecord]\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.TrialMatcherInference(MutableMapping[str, Any]):\nivar confidence_score: Optional[float]\nivar description: Optional[str]\nivar evidence: Optional[List[ForwardRef('TrialMatcherInferenceEvidence')]]\nivar id: Optional[str]\nivar metadata: Optional[ClinicalTrialMetadata]\nivar source: Optional[Union[str, ClinicalTrialSource]]\nivar type: Union[str, TrialMatcherInferenceType]\nivar value: str\n\n@overload\ndef __init__(\n    self, \n    *, \n    confidence_score: Optional[float] = ..., \n    description: Optional[str] = ..., \n    evidence: Optional[List[TrialMatcherInferenceEvidence]] = ..., \n    id: Optional[str] = ..., \n    metadata: Optional[ClinicalTrialMetadata] = ..., \n    source: Optional[Union[str, ClinicalTrialSource]] = ..., \n    type: Union[str, TrialMatcherInferenceType], \n    value: str\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceEvidence(MutableMapping[str, Any]):\nivar eligibilityCriteriaEvidence: Optional[str]\nivar importance: Optional[float]\nivar patientDataEvidence: Optional[ClinicalNoteEvidence]\nivar patientInfoEvidence: Optional[ClinicalCodedElement]\n\n@overload\ndef __init__(\n    self, \n    *, \n    eligibility_criteria_evidence: Optional[str] = ..., \n    importance: Optional[float] = ..., \n    patient_data_evidence: Optional[ClinicalNoteEvidence] = ..., \n    patient_info_evidence: Optional[ClinicalCodedElement] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(str, Enum):\nTRIAL_ELIGIBILITY = \"trialEligibility\"\n\n\nclass azure.healthinsights.clinicalmatching.models.TrialMatcherModelConfiguration(MutableMapping[str, Any]):\nivar clinical_trials: ClinicalTrials\nivar include_evidence: bool\nivar verbose: bool\n\n@overload\ndef __init__(\n    self, \n    *, \n    clinical_trials: ClinicalTrials, \n    include_evidence: bool = True, \n    verbose: bool = False\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.TrialMatcherPatientResult(MutableMapping[str, Any]):\nivar id: str\nivar inferences: List[TrialMatcherInference]\nivar needed_clinical_info: Optional[List[ForwardRef('ExtendedClinicalCodedElement')]]\n\n@overload\ndef __init__(\n    self, \n    *, \n    id: str, \n    inferences: List[TrialMatcherInference], \n    needed_clinical_info: Optional[List[ExtendedClinicalCodedElement]] = ...\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n\n\nclass azure.healthinsights.clinicalmatching.models.TrialMatcherResult(MutableMapping[str, Any]):\nivar created_date_time: datetime\nivar errors: Optional[List[ForwardRef('Error')]]\nivar expiration_date_time: datetime\nivar job_id: str\nivar last_update_date_time: datetime\nivar results: Optional[TrialMatcherResults]\nivar status: Union[str, JobStatus]\n\n\nclass azure.healthinsights.clinicalmatching.models.TrialMatcherResults(MutableMapping[str, Any]):\nivar knowledge_graph_last_update_date: Optional[date]\nivar model_version: str\nivar patients: List[TrialMatcherPatientResult]\n\n@overload\ndef __init__(\n    self, \n    *, \n    knowledge_graph_last_update_date: Optional[date] = ..., \n    model_version: str, \n    patients: List[TrialMatcherPatientResult]\n)\n\n@overload\ndef __init__(self, mapping: Mapping[str, Any])\n\ndef __init__(\n    self, \n    *args: Any, \n    **kwargs: Any\n) -> None\n",
      "inputs.language": "python",
      "inputs.context": "\nDO name service client types with a Client suffix.\nDO use the same client name for sync and async packages\n\nExample:\n\n|Sync/async|Namespace|Distribution package name|Client name|\n|-|-|-|-|\n|Sync|azure.sampleservice|azure-sampleservice|azure.sampleservice.SampleServiceClient|\n|Async|azure.sampleservice.aio|azure-sampleservice-aio|azure.sampleservice.aio.SampleServiceClient|\nDO use the credentials classes in azure-core whenever possible.\nDO NOT use an \"options bag\" object to group optional parameters. Instead, pass as individual keyword-only arguments.\nDO use a begin_ prefix for all long running operations.\nDO prefix methods with list_ for methods that enumerate (lists) resources.\nYOU SHOULD prefer the usage one of the preferred verbs for method names. You should have a good (articulated) reason to have an alternate verb for one of these operations.\n\n|Verb|Parameters|Returns|Comments|\n|-|-|-|-|\n|create_\\<noun>|key, item, [allow_overwrite=False]|Created item|Create new item. Fails if item already exists.|\n|upsert_\\<noun>|key, item|item|Create new item, or update existing item. Verb is primarily used in database-like services |\n|set_\\<noun>|key, item|item|Create new item, or update existing item. Verb is primarily used for dictionary-like properties of a service |\n|update_\\<noun>|key, partial item|item|Fails if item doesn't exist. |\n|replace_\\<noun>|key, item|item|Completely replaces an existing item. Fails if the item doesn't exist. |\n|append_\\<noun>|item|item|Add item to a collection. Item will be added last. |\n|add_\\<noun>|index, item|item|Add item to a collection. Item will be added at the given index. |\n|get_\\<noun>|key|item|Raises an exception if item doesn't exist |\n|list_\\<noun>||azure.core.ItemPaged[Item]|Return an iterable of Items. Returns an iterable with no items if no items exist (doesn't return None or throw)|\n|\\<noun>\\_exists|key|bool|Return True if the item exists. Must raise an exception if the method failed to determine if the item exists (for example, the service returned an HTTP 503 response)|\n|delete_\\<noun>|key|None|Delete an existing item. Must succeed even if item didn't exist.|\n|remove_\\<noun>|key|removed item or None|Remove a reference to an item from a collection. This method doesn't delete the actual item, only the reference.|\nDO use snake_case for variable, function, and method names:\n\n```python\n# Yes:\nservice_client = ServiceClient()\n\nservice_client.list_things()\n\ndef do_something():\n    ...\n\n# No:\nserviceClient = ServiceClient()\n\nservice_client.listThings()\n\ndef DoSomething():\n    ...\n\n```",
      "inputs.response": {
         "comments": [
            {
               "guideline_ids": [
                  "python_design.html#python-client-naming",
                  "python_design.html#python-client-same-name-sync-async"
               ],
               "line_no": 6,
               "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatching(ClinicalMatchingClientOperationsMixin): implements ContextManager",
               "suggestion": "class azure.healthinsights.clinicalmatching.ClinicalMatchingClient(ClinicalMatchingClientOperationsMixin): implements ContextManager",
               "comment": "Service client types should be named with a 'Client' suffix. In addition, the sync and async clients must share the same name. Rename the sync client from 'ClinicalMatching' to 'ClinicalMatchingClient' to comply with these guidelines.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_design.html#python-auth-credential-azure-core"
               ],
               "line_no": 11,
               "bad_code": "api_key: str",
               "suggestion": "Use a credential object from azure.core.credentials (e.g., AzureKeyCredential) instead of a raw string for the api key.",
               "comment": "Authentication parameters should leverage azure-core credential classes rather than using a simple string.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_design.html#python-client-options-naming"
               ],
               "line_no": 70,
               "bad_code": "    options: Optional[CreateTrialsOptions] = None,",
               "suggestion": "    <individual keyword parameters> instead of an options bag",
               "comment": "Avoid using an options bag object to group optional parameters. Pass each optional parameter as a separate keyword-only argument.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_design.html#python-lro-poller-begin-naming"
               ],
               "line_no": 93,
               "bad_code": "def create_trials(",
               "suggestion": "def begin_create_trials(",
               "comment": "Long running operations must use a 'begin_' prefix. Rename 'create_trials' to 'begin_create_trials' per the long running operations naming guideline.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_design.html#python-paged-prefix"
               ],
               "line_no": 102,
               "bad_code": "def trials(",
               "suggestion": "def list_trials(",
               "comment": "Methods that enumerate resources should be prefixed with 'list_'. Rename 'trials' to 'list_trials' to follow the paging method naming guideline.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_design.html#python-client-service-verbs"
               ],
               "line_no": 108,
               "bad_code": "def erase_trials(",
               "suggestion": "def delete_trials(",
               "comment": "For deletion operations the preferred verb is 'delete_'. Rename 'erase_trials' to 'delete_trials' per the service verb naming guidelines.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_design.html#python-lro-poller-begin-naming"
               ],
               "line_no": 214,
               "bad_code": "async def create_trials(",
               "suggestion": "async def begin_create_trials(",
               "comment": "Long running operations should use a 'begin_' prefix. Rename the async 'create_trials' method to 'begin_create_trials'.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_design.html#python-paged-prefix"
               ],
               "line_no": 223,
               "bad_code": "def trials(",
               "suggestion": "def list_trials(",
               "comment": "Methods that enumerate resources should be prefixed with 'list_'. Consider renaming 'trials' to 'list_trials' and returning an ItemPaged type.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_design.html#python-client-service-verbs"
               ],
               "line_no": 229,
               "bad_code": "async def erase_trials(",
               "suggestion": "async def delete_trials(",
               "comment": "Deletion operation names should use the 'delete_' prefix rather than 'erase_'. Rename 'erase_trials' to 'delete_trials' in the async client.",
               "source": "guideline"
            },
            {
               "guideline_ids": [],
               "line_no": 824,
               "bad_code": "ivar innerrror: Optional[InnerError]",
               "suggestion": "ivar inner_error: Optional[InnerError]",
               "comment": "There is a typo in the attribute name ('innerrror'). Correcting it to 'inner_error' (or a similar consistent name) improves clarity and consistency in the API.",
               "source": "generic"
            },
            {
               "guideline_ids": [
                  "python_implementation.html#python-codestyle-vars-naming"
               ],
               "line_no": 998,
               "bad_code": "ivar eligibilityCriteriaEvidence: Optional[str]",
               "suggestion": "ivar eligibility_criteria_evidence: Optional[str]",
               "comment": "Variable names should use snake_case instead of camelCase.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_implementation.html#python-codestyle-vars-naming"
               ],
               "line_no": 1000,
               "bad_code": "ivar patientDataEvidence: Optional[ClinicalNoteEvidence]",
               "suggestion": "ivar patient_data_evidence: Optional[ClinicalNoteEvidence]",
               "comment": "Variable names should use snake_case instead of camelCase.",
               "source": "guideline"
            },
            {
               "guideline_ids": [
                  "python_implementation.html#python-codestyle-vars-naming"
               ],
               "line_no": 1001,
               "bad_code": "ivar patientInfoEvidence: Optional[ClinicalCodedElement]",
               "suggestion": "ivar patient_info_evidence: Optional[ClinicalCodedElement]",
               "comment": "Variable names should use snake_case instead of camelCase.",
               "source": "guideline"
            }
         ]
      },
      "outputs.metrics.expected_comments": 12,
      "outputs.metrics.comments_found": 18,
      "outputs.metrics.true_positives": 2,
      "outputs.metrics.valid_generic_comments": 0,
      "outputs.metrics.invalid_generic_comments": 0,
      "outputs.metrics.false_positives": 16,
      "outputs.metrics.false_negatives": 10,
      "outputs.metrics.percent_coverage": 16.6666666667,
      "outputs.metrics.rule_matches_wrong_line": 0,
      "outputs.metrics.wrong_line_details": [],
      "outputs.metrics.fuzzy_matches": 0,
      "outputs.metrics.groundedness": 5,
      "outputs.metrics.groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately and thoroughly applying all relevant guidelines without unsupported additions or omissions.",
      "outputs.metrics.similarity": 2,
      "outputs.metrics.testcase": "medium_apiview_many_violations",
      "outputs.metrics.score": 8
   }
}