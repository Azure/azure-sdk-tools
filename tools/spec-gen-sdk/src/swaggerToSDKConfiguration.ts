import { AutoRestOptions, StringMap } from '@ts-common/azure-js-dev-tools';

/**
 * A configuration that describes how SwaggerToSDK should behave for a specific repository.
 */
export interface SwaggerToSDKConfiguration {
  meta?: {
    /**
     * The version of SwaggerToSDK to use.
     * The version must be 0.2.0.
     */
    version?: string;

    after_scripts_in_repo?: string[];
    /**
     * List of commands to execute after the generation is done. Will be executed in the order of the
     * list. Current working directory will be the cloned path. See also "envs" node.
     * Different from after_scripts, the arguments will be added automatically.
     * Note: initialized for Terraform.
     */
    after_scripts_in_repo_with_service?: string[];

    /**
     * List of commands to execute after the generation is done. Will be executed in the order of the
     * list. Current working directory will be the cloned path. See also "envs" node.
     */
    after_scripts?: string[];
    /**
     * An optional dictionary of options you want to pass to Autorest. This will be passed in any
     * call, but can be override by "autorest_options" in each data. Note that you CAN'T override
     * "--output-folder" which is filled contextually. All options prefixed by "sdkrel:" can be a
     * relative path that will be solved against SDK folder before being sent to Autorest.
     */
    autorest_options?: AutoRestOptions;
    /**
     * An optional dictionary of options specified for internal sdk generation you want to pass to Autorest.
     * This will be passed in any call. Note that you CAN'T override
     * "--output-folder" which is filled contextually. All options prefixed by "sdkrel:" can be a
     * relative path that will be solved against SDK folder before being sent to Autorest.
     * Note: initialized for Terraform.
     */
    autorest_options_for_otherSDK?: AutoRestOptions;
    /**
     * The name of the repository that contains this configuration.
     */
    repotag?: string;
    /**
     * Environment variables for after_scripts. All options prefixed by "sdkrel:" can be a relative
     * path that will be resolved against SDK folder before being sent to the scripts.
     */
    envs?: StringMap<string | boolean | number>;
    /**
     * A set of advanced options that can change how SwaggerToSDK interacts with the repository.
     */
    advanced_options?: AdvancedOptions;
    /**
     * An optional list of files/directory to keep when we generate new SDK. This support a
     * Bash-like wildcard syntax (i.e. "my*file.py"). This applies to every Swagger files.
     */
    wrapper_filesOrDirs?: string[];
    /**
     * An optional list of files/directory to delete from the generated SDK. This support a
     * Bash-like wildcard syntax (i.e. "my*file.py") This applies to every Swagger files.
     */
    delete_filesOrDirs?: string[];
    /**
     * If the data to consider generated by Autorest are not directly in the root folder. For
     * instance, if Autorest generates a network client folder and you want to consider this folder
     * as the root of data. This parameter is applied before 'delete_filesOrDirs', consider it in
     * your paths. This applies to every Swagger files.
     */
    generated_relative_base_directory?: string;
    /**
     * A file that marks the root of a package. In Node.js this is package.json. In Python it's
     * setup.py.
     */
    package_root_file?: string;
  };
  /**
   * It's a dict where keys are a project id. The project id has no constraint, but it's recommended
   * to use namespace style, like "datalake.store.account" to provide the best flexibility for the
   * --project parameter.
   */
  projects?: StringMap<Project>;
}

/**
 * The strategy that will be used for determining the base branch that a SDK generation pull
 * request will be made against. If "integration_branch" is chosen, then the SDK generation pull
 * request will be made against a branch that is used to stage the changes for a specific package
 * before it is released. If "main_branch" is chosen, then the SDK generation pull request
 * will be made against the specified main branch (or "master" if no main branch is specified). If
 * no value is specified, then this will default to "integration_branch".
 */
export type SDKGenerationPullRequestBaseOptions = 'integration_branch' | 'main_branch';

/**
 * A set of advanced options that can change how SwaggerToSDK interacts with the repository.
 */
export interface AdvancedOptions {
  /**
   * Add more layers of folders to clone the repo, if necessary. Right now, useful for Go only.
   * "sdkrel:" will consider this as the final folder path.
   */
  clone_dir?: string;
  /**
   * Whether or not pull requests will be made against this SDK repository with the changes
   * generated from a specification pull request.
   */
  create_sdk_pull_requests?: boolean;
  /**
   * The strategy that will be used for determining the base branch that a SDK generation pull
   * request will be made against. If "integration_pull_request" is chosen, then the SDK generation
   * pull request will be made against a branch that is used to stage the changes for a specific
   * package before it is released. If "master" is chosen, then the SDK generation pull request will
   * be made against "master". If no value is specified, then this will default to
   * "integration_pull_request".
   */
  sdk_generation_pull_request_base?: SDKGenerationPullRequestBaseOptions;
  /**
   * Wether or not to disable sdk automation to automatically CLOSE or MERGE generation pull
   * request.
   */
  disable_generation_pr_automation?: boolean;
  /**
   * An optional list of files/directory to keep when we generate new SDK. This support a
   * Bash-like wildcard syntax (i.e. "my*file.py"). This applies to every Swagger files.
   */
  wrapper_filesOrDirs?: string[];
  /**
   * An optional list of files/directory to delete from the generated SDK. This support a
   * Bash-like wildcard syntax (i.e. "my*file.py") This applies to every Swagger files.
   */
  delete_filesOrDirs?: string[];
  /**
   * If the data to consider generated by Autorest are not directly in the root folder. For
   * instance, if Autorest generates a network client folder and you want to consider this folder as
   * the root of data. This parameter is applied before 'delete_filesOrDirs', consider it in your
   * paths. This applies to every Swagger files.
   */
  generated_relative_base_directory?: string;
  /**
   * This is the folder in your SDK repository where you want to put the generated files.
   */
  output_dir?: string;
  /**
   * This is an optional folder where to put metadata about the generation (Autorest version, date
   * of generation, etc.). This can be used by our monitoring system to detect package that needs an
   * update. Be sure this folder is unique in the entire file, to avoid overwriting a file from
   * another project.
   */
  build_dir?: string;
}

/**
 * A set of options for giving specific properties to certain service/resource providers.
 */
export interface Project {
  /**
   * This is an optional parameter which specify the Autorest MD file path for this project. This
   * is relative to the rest-folder paramter.
   */
  markdown?: string;
  /**
   * An optional dictionary of options you want to pass to Autorest. This will be passed in any
   * call, but can be override by "autorest_options" in each data. Note that you CAN'T override
   * "--output-folder" which is filled contextually. All options prefixed by "sdkrel:" can be a
   * relative path that will be resolved against SDK folder before being sent to Autorest.
   */
  autorest_options?: AutoRestOptions;
  /**
   * An optional list of files/directory to keep when we generate new SDK. This support a
   * Bash-like wildcard syntax (i.e. "my*file.py"). This applies to every Swagger files.
   */
  wrapper_filesOrDirs?: string[];
  /**
   * An optional list of files/directory to delete from the generated SDK. This support a
   * Bash-like wildcard syntax (i.e. "my*file.py") This applies to every Swagger files.
   */
  delete_filesOrDirs?: string[];
  /**
   * If the data to consider generated by Autorest are not directly in the root folder. For
   * instance, if Autorest generates a network client folder and you want to consider this folder
   * as the root of data. This parameter is applied before 'delete_filesOrDirs', consider it in
   * your paths. This applies to every Swagger files.
   */
  generated_relative_base_directory?: string;
  /**
   * This is the folder in your SDK repository where you want to put the generated files.
   */
  output_dir?: string;
  /**
   * This is an optional folder where to put metadata about the generation (Autorest version, date
   * of generation, etc.). This can be used by our monitoring system to detect package that needs an
   * update. Be sure this folder is unique in the entire file, to avoid overwriting a file from
   * another project.
   */
  build_dir?: string;
}

export function getCreateSdkPullRequests(
  swaggerToSDKConfiguration: SwaggerToSDKConfiguration | undefined,
  defaultValue: boolean = false
): boolean {
  return getConfigAdvancedOption(swaggerToSDKConfiguration, 'create_sdk_pull_requests') || defaultValue;
}

export function getSDKGenerationPullRequestBase(
  swaggerToSDKConfiguration: SwaggerToSDKConfiguration | undefined,
  defaultValue: SDKGenerationPullRequestBaseOptions = 'integration_branch'
): SDKGenerationPullRequestBaseOptions {
  return getConfigAdvancedOption(swaggerToSDKConfiguration, 'sdk_generation_pull_request_base') || defaultValue;
}

type metaType = Exclude<SwaggerToSDKConfiguration['meta'], undefined>;
export function getConfigMeta<TKey extends keyof metaType>(
  swaggerToSDKConfiguration: SwaggerToSDKConfiguration | undefined,
  key: TKey
): metaType[TKey] | undefined {
  return swaggerToSDKConfiguration && swaggerToSDKConfiguration.meta && swaggerToSDKConfiguration.meta[key];
}

type advancedOptionsType = Exclude<metaType['advanced_options'], undefined>;
export function getConfigAdvancedOption<TKey extends keyof advancedOptionsType>(
  swaggerToSDKConfiguration: SwaggerToSDKConfiguration | undefined,
  key: TKey
): advancedOptionsType[TKey] | undefined {
  const advancedOptions = getConfigMeta(swaggerToSDKConfiguration, 'advanced_options');
  return advancedOptions && advancedOptions[key];
}
