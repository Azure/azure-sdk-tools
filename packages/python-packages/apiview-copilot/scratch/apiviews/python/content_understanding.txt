# Package is parsed using apiview-stub-generator(version:0.3.18), Python version: 3.10.12


namespace azure.ai.contentunderstanding
	
	class azure.ai.contentunderstanding.ContentUnderstandingClient: implements ContextManager 
		ivar analyzers: AnalyzersOperations
		
		def __init__(
			    self, 
			    endpoint: str, 
			    credential: Union[AzureKeyCredential, TokenCredential], 
			    *, 
			    api_version: str = ..., 
			    polling_interval: Optional[int] = ..., 
			    **kwargs: Any
			) -> None
		
		def close(self) -> None
		
		def send_request(
			    self, 
			    request: HttpRequest, 
			    *, 
			    stream: bool = False, 
			    **kwargs: Any
			) -> HttpResponse
		
		
namespace azure.ai.contentunderstanding.aio
	
	class azure.ai.contentunderstanding.aio.ContentUnderstandingClient: implements AsyncContextManager 
		ivar analyzers: AnalyzersOperations
		
		def __init__(
			    self, 
			    endpoint: str, 
			    credential: Union[AzureKeyCredential, AsyncTokenCredential], 
			    *, 
			    api_version: str = ..., 
			    polling_interval: Optional[int] = ..., 
			    **kwargs: Any
			) -> None
		
		async def close(self) -> None
		
		def send_request(
			    self, 
			    request: HttpRequest, 
			    *, 
			    stream: bool = False, 
			    **kwargs: Any
			) -> Awaitable[AsyncHttpResponse]
		
		
namespace azure.ai.contentunderstanding.aio.operations
	
	class azure.ai.contentunderstanding.aio.operations.AnalyzersOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			) -> None
		
		@overload
		async def begin_analyze(
			    self, 
			    analyzer_id: str, 
			    *, 
			    content_type: str = "application/json", 
			    url: Optional[str] = ..., 
			    **kwargs: Any
			) -> AsyncLROPoller[AnalyzeResult]
		
		@overload
		async def begin_analyze(
			    self, 
			    analyzer_id: str, 
			    body: JSON, 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> AsyncLROPoller[AnalyzeResult]
		
		@overload
		async def begin_analyze(
			    self, 
			    analyzer_id: str, 
			    body: IO[bytes], 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> AsyncLROPoller[AnalyzeResult]
		
		@distributed_trace_async
		async def begin_analyze(
			    self, 
			    analyzer_id: str, 
			    body: Union[JSON, IO[bytes]] = _Unset, 
			    *, 
			    url: Optional[str] = ..., 
			    **kwargs: Any
			) -> AsyncLROPoller[AnalyzeResult]
		
		@distributed_trace_async
		async def begin_analyze_binary(
			    self, 
			    analyzer_id: str, 
			    input: bytes, 
			    **kwargs: Any
			) -> AsyncLROPoller[AnalyzeResult]
		
		@overload
		async def begin_create_or_replace(
			    self, 
			    analyzer_id: str, 
			    resource: ContentAnalyzer, 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> AsyncLROPoller[ContentAnalyzer]
		
		@overload
		async def begin_create_or_replace(
			    self, 
			    analyzer_id: str, 
			    resource: JSON, 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> AsyncLROPoller[ContentAnalyzer]
		
		@overload
		async def begin_create_or_replace(
			    self, 
			    analyzer_id: str, 
			    resource: IO[bytes], 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> AsyncLROPoller[ContentAnalyzer]
		
		@distributed_trace_async
		async def begin_create_or_replace(
			    self, 
			    analyzer_id: str, 
			    resource: Union[ContentAnalyzer, JSON, IO[bytes]], 
			    **kwargs: Any
			) -> AsyncLROPoller[ContentAnalyzer]
		
		@distributed_trace_async
		async def delete(
			    self, 
			    analyzer_id: str, 
			    **kwargs: Any
			) -> None
		
		@distributed_trace_async
		async def get(
			    self, 
			    analyzer_id: str, 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		@distributed_trace_async
		async def get_operation_status(
			    self, 
			    analyzer_id: str, 
			    operation_id: str, 
			    **kwargs: Any
			) -> ResourceOperationStatusContentAnalyzerContentAnalyzerError
		
		@distributed_trace_async
		async def get_result(
			    self, 
			    analyzer_id: str, 
			    operation_id: str, 
			    **kwargs: Any
			) -> OperationStatusAnalyzeResultError
		
		@distributed_trace_async
		async def get_result_image(
			    self, 
			    analyzer_id: str, 
			    operation_id: str, 
			    image_id: str, 
			    **kwargs: Any
			) -> AsyncIterator[bytes]
		
		@distributed_trace
		def list(self, **kwargs: Any) -> AsyncIterable[ContentAnalyzer]
		
		@overload
		async def update(
			    self, 
			    analyzer_id: str, 
			    resource: ContentAnalyzer, 
			    *, 
			    content_type: str = "application/merge-patch+json", 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		@overload
		async def update(
			    self, 
			    analyzer_id: str, 
			    resource: JSON, 
			    *, 
			    content_type: str = "application/merge-patch+json", 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		@overload
		async def update(
			    self, 
			    analyzer_id: str, 
			    resource: IO[bytes], 
			    *, 
			    content_type: str = "application/merge-patch+json", 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		@distributed_trace_async
		async def update(
			    self, 
			    analyzer_id: str, 
			    resource: Union[ContentAnalyzer, JSON, IO[bytes]], 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		
namespace azure.ai.contentunderstanding.models
	
	class azure.ai.contentunderstanding.models.AnalyzeResult(MutableMapping[str, Any]):
		ivar analyzer_id: Optional[str]
		ivar api_version: Optional[str]
		ivar contents: List[MediaContent]
		ivar created_at: Optional[datetime]
		ivar warnings: Optional[List[ODataV4Format]]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    analyzer_id: Optional[str] = ..., 
			    api_version: Optional[str] = ..., 
			    contents: List[MediaContent], 
			    created_at: Optional[datetime] = ..., 
			    warnings: Optional[List[ODataV4Format]] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.ArrayField(MutableMapping[str, Any]):
		ivar confidence: float
		ivar source: str
		ivar spans: list[ContentSpan]
		ivar type: Literal[ARRAY]
		ivar value_array: Optional[List[ForwardRef('ContentField')]]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    value_array: Optional[List[ContentField]] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.AudioVisualContent(MutableMapping[str, Any]):
		ivar end_time_ms: int
		ivar faces: Optional[List[ForwardRef('ImageFace')]]
		ivar fields: dict[str, ContentField]
		ivar height: Optional[int]
		ivar key_frame_times_ms: Optional[List[int]]
		ivar kind: Literal[AUDIO_VISUAL]
		ivar markdown: str
		ivar start_time_ms: int
		ivar transcript_phrases: Optional[List[ForwardRef('TranscriptPhrase')]]
		ivar width: Optional[int]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    end_time_ms: int, 
			    faces: Optional[List[ImageFace]] = ..., 
			    fields: Optional[Dict[str, ContentField]] = ..., 
			    height: Optional[int] = ..., 
			    key_frame_times_ms: Optional[List[int]] = ..., 
			    markdown: Optional[str] = ..., 
			    start_time_ms: int, 
			    transcript_phrases: Optional[List[TranscriptPhrase]] = ..., 
			    width: Optional[int] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    fields: Optional[Dict[str, ContentField]] = ..., 
			    kind: str, 
			    markdown: Optional[str] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.BlobDataSource(MutableMapping[str, Any]):
		ivar container_url: str
		ivar file_list_path: Optional[str]
		ivar kind: Literal[BLOB]
		ivar prefix: Optional[str]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    container_url: str, 
			    file_list_path: Optional[str] = ..., 
			    prefix: Optional[str] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    kind: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.BooleanField(MutableMapping[str, Any]):
		ivar confidence: float
		ivar source: str
		ivar spans: list[ContentSpan]
		ivar type: Literal[BOOLEAN]
		ivar value_boolean: Optional[bool]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    value_boolean: Optional[bool] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.ContentAnalyzer(MutableMapping[str, Any]):
		ivar analyzer_id: str
		ivar config: Optional[ContentAnalyzerConfig]
		ivar created_at: datetime
		ivar description: Optional[str]
		ivar field_schema: Optional[FieldSchema]
		ivar last_modified_at: datetime
		ivar scenario: Optional[str]
		ivar status: Union[str, ResourceStatus]
		ivar tags: Optional[Dict[str, str]]
		ivar training_data: Optional[DataSource]
		ivar warnings: Optional[List[ODataV4Format]]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    config: Optional[ContentAnalyzerConfig] = ..., 
			    description: Optional[str] = ..., 
			    field_schema: Optional[FieldSchema] = ..., 
			    scenario: Optional[str] = ..., 
			    tags: Optional[Dict[str, str]] = ..., 
			    training_data: Optional[DataSource] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.ContentAnalyzerConfig(MutableMapping[str, Any]):
		ivar enable_barcode: Optional[bool]
		ivar enable_face: Optional[bool]
		ivar enable_formula: Optional[bool]
		ivar enable_layout: Optional[bool]
		ivar enable_ocr: Optional[bool]
		ivar locales: Optional[List[str]]
		ivar return_details: Optional[bool]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    enable_barcode: Optional[bool] = ..., 
			    enable_face: Optional[bool] = ..., 
			    enable_formula: Optional[bool] = ..., 
			    enable_layout: Optional[bool] = ..., 
			    enable_ocr: Optional[bool] = ..., 
			    locales: Optional[List[str]] = ..., 
			    return_details: Optional[bool] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.ContentField(MutableMapping[str, Any]):
		ivar confidence: Optional[float]
		ivar source: Optional[str]
		ivar spans: Optional[List[ForwardRef('ContentSpan')]]
		ivar type: str
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.ContentSpan(MutableMapping[str, Any]):
		ivar length: int
		ivar offset: int
		
		@overload
		def __init__(
			    self, 
			    *, 
			    length: int, 
			    offset: int
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DataSource(MutableMapping[str, Any]):
		ivar kind: str
		
		@overload
		def __init__(
			    self, 
			    *, 
			    kind: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DataSourceKind(str, Enum):
		BLOB = "blob"
		
		
	class azure.ai.contentunderstanding.models.DateField(MutableMapping[str, Any]):
		ivar confidence: float
		ivar source: str
		ivar spans: list[ContentSpan]
		ivar type: Literal[DATE]
		ivar value_date: Optional[date]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    value_date: Optional[date] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentBarcode(MutableMapping[str, Any]):
		ivar confidence: Optional[float]
		ivar kind: Union[str, DocumentBarcodeKind]
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		ivar value: str
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    kind: Union[str, DocumentBarcodeKind], 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ..., 
			    value: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentBarcodeKind(str, Enum):
		AZTEC = "Aztec"
		CODABAR = "Codabar"
		CODE128 = "Code128"
		CODE39 = "Code39"
		CODE93 = "Code93"
		DATA_BAR = "DataBar"
		DATA_BAR_EXPANDED = "DataBarExpanded"
		DATA_MATRIX = "DataMatrix"
		EAN13 = "EAN13"
		EAN8 = "EAN8"
		ITF = "ITF"
		MAXI_CODE = "MaxiCode"
		MICRO_QR_CODE = "MicroQRCode"
		PDF417 = "PDF417"
		QR_CODE = "QRCode"
		UPCA = "UPCA"
		UPCE = "UPCE"
		
		
	class azure.ai.contentunderstanding.models.DocumentCaption(MutableMapping[str, Any]):
		ivar content: str
		ivar elements: Optional[List[str]]
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    content: str, 
			    elements: Optional[List[str]] = ..., 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentContent(MutableMapping[str, Any]):
		ivar end_page_number: int
		ivar faces: Optional[List[ForwardRef('ImageFace')]]
		ivar fields: dict[str, ContentField]
		ivar figures: Optional[List[ForwardRef('DocumentFigure')]]
		ivar kind: Literal[DOCUMENT]
		ivar markdown: str
		ivar pages: Optional[List[ForwardRef('DocumentPage')]]
		ivar paragraphs: Optional[List[ForwardRef('DocumentParagraph')]]
		ivar sections: Optional[List[ForwardRef('DocumentSection')]]
		ivar start_page_number: int
		ivar tables: Optional[List[ForwardRef('DocumentTable')]]
		ivar unit: Optional[Union[str, LengthUnit]]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    end_page_number: int, 
			    faces: Optional[List[ImageFace]] = ..., 
			    fields: Optional[Dict[str, ContentField]] = ..., 
			    figures: Optional[List[DocumentFigure]] = ..., 
			    markdown: Optional[str] = ..., 
			    pages: Optional[List[DocumentPage]] = ..., 
			    paragraphs: Optional[List[DocumentParagraph]] = ..., 
			    sections: Optional[List[DocumentSection]] = ..., 
			    start_page_number: int, 
			    tables: Optional[List[DocumentTable]] = ..., 
			    unit: Optional[Union[str, LengthUnit]] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    fields: Optional[Dict[str, ContentField]] = ..., 
			    kind: str, 
			    markdown: Optional[str] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentFigure(MutableMapping[str, Any]):
		ivar caption: Optional[DocumentCaption]
		ivar elements: Optional[List[str]]
		ivar footnotes: Optional[List[ForwardRef('DocumentFootnote')]]
		ivar id: str
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    caption: Optional[DocumentCaption] = ..., 
			    elements: Optional[List[str]] = ..., 
			    footnotes: Optional[List[DocumentFootnote]] = ..., 
			    id: str, 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentFootnote(MutableMapping[str, Any]):
		ivar content: str
		ivar elements: Optional[List[str]]
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    content: str, 
			    elements: Optional[List[str]] = ..., 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentFormula(MutableMapping[str, Any]):
		ivar confidence: Optional[float]
		ivar kind: Union[str, DocumentFormulaKind]
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		ivar value: str
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    kind: Union[str, DocumentFormulaKind], 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ..., 
			    value: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentFormulaKind(str, Enum):
		DISPLAY = "display"
		INLINE = "inline"
		
		
	class azure.ai.contentunderstanding.models.DocumentLine(MutableMapping[str, Any]):
		ivar content: str
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    content: str, 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentPage(MutableMapping[str, Any]):
		ivar angle: Optional[float]
		ivar barcodes: Optional[List[ForwardRef('DocumentBarcode')]]
		ivar formulas: Optional[List[ForwardRef('DocumentFormula')]]
		ivar height: Optional[float]
		ivar lines: Optional[List[ForwardRef('DocumentLine')]]
		ivar page_number: int
		ivar spans: Optional[List[ForwardRef('ContentSpan')]]
		ivar width: Optional[float]
		ivar words: Optional[List[ForwardRef('DocumentWord')]]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    angle: Optional[float] = ..., 
			    barcodes: Optional[List[DocumentBarcode]] = ..., 
			    formulas: Optional[List[DocumentFormula]] = ..., 
			    height: Optional[float] = ..., 
			    lines: Optional[List[DocumentLine]] = ..., 
			    page_number: int, 
			    spans: Optional[List[ContentSpan]] = ..., 
			    width: Optional[float] = ..., 
			    words: Optional[List[DocumentWord]] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentParagraph(MutableMapping[str, Any]):
		ivar content: str
		ivar role: Optional[Union[str, ParagraphRole]]
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    content: str, 
			    role: Optional[Union[str, ParagraphRole]] = ..., 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentSection(MutableMapping[str, Any]):
		ivar elements: Optional[List[str]]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    elements: Optional[List[str]] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentTable(MutableMapping[str, Any]):
		ivar caption: Optional[DocumentCaption]
		ivar cells: List[DocumentTableCell]
		ivar column_count: int
		ivar footnotes: Optional[List[ForwardRef('DocumentFootnote')]]
		ivar row_count: int
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    caption: Optional[DocumentCaption] = ..., 
			    cells: List[DocumentTableCell], 
			    column_count: int, 
			    footnotes: Optional[List[DocumentFootnote]] = ..., 
			    row_count: int, 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentTableCell(MutableMapping[str, Any]):
		ivar column_index: int
		ivar column_span: Optional[int]
		ivar content: str
		ivar elements: Optional[List[str]]
		ivar kind: Optional[Union[str, DocumentTableCellKind]]
		ivar row_index: int
		ivar row_span: Optional[int]
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    column_index: int, 
			    column_span: Optional[int] = ..., 
			    content: str, 
			    elements: Optional[List[str]] = ..., 
			    kind: Optional[Union[str, DocumentTableCellKind]] = ..., 
			    row_index: int, 
			    row_span: Optional[int] = ..., 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.DocumentTableCellKind(str, Enum):
		COLUMN_HEADER = "columnHeader"
		CONTENT = "content"
		DESCRIPTION = "description"
		ROW_HEADER = "rowHeader"
		STUB_HEAD = "stubHead"
		
		
	class azure.ai.contentunderstanding.models.DocumentWord(MutableMapping[str, Any]):
		ivar confidence: Optional[float]
		ivar content: str
		ivar source: Optional[str]
		ivar span: Optional[ContentSpan]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    content: str, 
			    source: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.FieldDefinition(MutableMapping[str, Any]):
		ivar description: Optional[str]
		ivar enum: Optional[List[str]]
		ivar enum_descriptions: Optional[Dict[str, str]]
		ivar examples: Optional[List[str]]
		ivar items_property: Optional[FieldDefinition]
		ivar method: Optional[Union[str, GenerationMethod]]
		ivar properties: Optional[Dict[str, ForwardRef('FieldDefinition')]]
		ivar ref: Optional[str]
		ivar type: Optional[Union[str, FieldType]]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    description: Optional[str] = ..., 
			    enum: Optional[List[str]] = ..., 
			    enum_descriptions: Optional[Dict[str, str]] = ..., 
			    examples: Optional[List[str]] = ..., 
			    items_property: Optional[FieldDefinition] = ..., 
			    method: Optional[Union[str, GenerationMethod]] = ..., 
			    properties: Optional[Dict[str, FieldDefinition]] = ..., 
			    ref: Optional[str] = ..., 
			    type: Optional[Union[str, FieldType]] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.FieldSchema(MutableMapping[str, Any]):
		ivar definitions: Optional[Dict[str, ForwardRef('FieldDefinition')]]
		ivar description: Optional[str]
		ivar fields: Dict[str, FieldDefinition]
		ivar name: Optional[str]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    definitions: Optional[Dict[str, FieldDefinition]] = ..., 
			    description: Optional[str] = ..., 
			    fields: Dict[str, FieldDefinition], 
			    name: Optional[str] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.FieldType(str, Enum):
		ARRAY = "array"
		BOOLEAN = "boolean"
		DATE = "date"
		INTEGER = "integer"
		NUMBER = "number"
		OBJECT = "object"
		STRING = "string"
		TIME = "time"
		
		
	class azure.ai.contentunderstanding.models.GenerationMethod(str, Enum):
		CLASSIFY = "classify"
		EXTRACT = "extract"
		GENERATE = "generate"
		
		
	class azure.ai.contentunderstanding.models.ImageFace(MutableMapping[str, Any]):
		ivar confidence: Optional[float]
		ivar face_id: Optional[str]
		ivar source: Optional[str]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    face_id: Optional[str] = ..., 
			    source: Optional[str] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.IntegerField(MutableMapping[str, Any]):
		ivar confidence: float
		ivar source: str
		ivar spans: list[ContentSpan]
		ivar type: Literal[INTEGER]
		ivar value_integer: Optional[int]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    value_integer: Optional[int] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.LengthUnit(str, Enum):
		INCH = "inch"
		PIXEL = "pixel"
		
		
	class azure.ai.contentunderstanding.models.MediaContent(MutableMapping[str, Any]):
		ivar fields: Optional[Dict[str, ForwardRef('ContentField')]]
		ivar kind: str
		ivar markdown: Optional[str]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    fields: Optional[Dict[str, ContentField]] = ..., 
			    kind: str, 
			    markdown: Optional[str] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.MediaContentKind(str, Enum):
		AUDIO_VISUAL = "audioVisual"
		DOCUMENT = "document"
		
		
	class azure.ai.contentunderstanding.models.NumberField(MutableMapping[str, Any]):
		ivar confidence: float
		ivar source: str
		ivar spans: list[ContentSpan]
		ivar type: Literal[NUMBER]
		ivar value_number: Optional[float]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    value_number: Optional[float] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.ObjectField(MutableMapping[str, Any]):
		ivar confidence: float
		ivar source: str
		ivar spans: list[ContentSpan]
		ivar type: Literal[OBJECT]
		ivar value_object: Optional[Dict[str, ForwardRef('ContentField')]]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    value_object: Optional[Dict[str, ContentField]] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.OperationState(str, Enum):
		CANCELED = "Canceled"
		FAILED = "Failed"
		NOT_STARTED = "NotStarted"
		RUNNING = "Running"
		SUCCEEDED = "Succeeded"
		
		
	class azure.ai.contentunderstanding.models.OperationStatusAnalyzeResultError(MutableMapping[str, Any]):
		ivar error: Optional[ODataV4Format]
		ivar id: str
		ivar result: Optional[AnalyzeResult]
		ivar status: Union[str, OperationState]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    error: Optional[ODataV4Format] = ..., 
			    id: str, 
			    result: Optional[AnalyzeResult] = ..., 
			    status: Union[str, OperationState]
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.ParagraphRole(str, Enum):
		FOOTNOTE = "footnote"
		FORMULA_BLOCK = "formulaBlock"
		PAGE_FOOTER = "pageFooter"
		PAGE_HEADER = "pageHeader"
		PAGE_NUMBER = "pageNumber"
		SECTION_HEADING = "sectionHeading"
		TITLE = "title"
		
		
	class azure.ai.contentunderstanding.models.ResourceOperationStatusContentAnalyzerContentAnalyzerError(MutableMapping[str, Any]):
		ivar error: Optional[ODataV4Format]
		ivar id: str
		ivar result: Optional[ContentAnalyzer]
		ivar status: Union[str, OperationState]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    error: Optional[ODataV4Format] = ..., 
			    id: str, 
			    result: Optional[ContentAnalyzer] = ..., 
			    status: Union[str, OperationState]
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.ResourceStatus(str, Enum):
		CREATING = "creating"
		DELETING = "deleting"
		FAILED = "failed"
		READY = "ready"
		
		
	class azure.ai.contentunderstanding.models.StringField(MutableMapping[str, Any]):
		ivar confidence: float
		ivar source: str
		ivar spans: list[ContentSpan]
		ivar type: Literal[STRING]
		ivar value_string: Optional[str]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    value_string: Optional[str] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.TimeField(MutableMapping[str, Any]):
		ivar confidence: float
		ivar source: str
		ivar spans: list[ContentSpan]
		ivar type: Literal[TIME]
		ivar value_time: Optional[time]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    value_time: Optional[time] = ...
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    source: Optional[str] = ..., 
			    spans: Optional[List[ContentSpan]] = ..., 
			    type: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.TranscriptPhrase(MutableMapping[str, Any]):
		ivar confidence: Optional[float]
		ivar end_time_ms: int
		ivar locale: Optional[str]
		ivar span: Optional[ContentSpan]
		ivar speaker: Optional[str]
		ivar start_time_ms: int
		ivar text: str
		ivar words: List[TranscriptWord]
		
		@overload
		def __init__(
			    self, 
			    *, 
			    confidence: Optional[float] = ..., 
			    end_time_ms: int, 
			    locale: Optional[str] = ..., 
			    span: Optional[ContentSpan] = ..., 
			    speaker: Optional[str] = ..., 
			    start_time_ms: int, 
			    text: str, 
			    words: List[TranscriptWord]
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
	class azure.ai.contentunderstanding.models.TranscriptWord(MutableMapping[str, Any]):
		ivar end_time_ms: int
		ivar span: Optional[ContentSpan]
		ivar start_time_ms: int
		ivar text: str
		
		@overload
		def __init__(
			    self, 
			    *, 
			    end_time_ms: int, 
			    span: Optional[ContentSpan] = ..., 
			    start_time_ms: int, 
			    text: str
			) -> None
		
		@overload
		def __init__(self, mapping: Mapping[str, Any]) -> None
		
		def __init__(
			    self, 
			    *args: Any, 
			    **kwargs: Any
			) -> None
		
		
namespace azure.ai.contentunderstanding.operations
	
	class azure.ai.contentunderstanding.operations.AnalyzersOperations:
		
		def __init__(
			    self, 
			    *args, 
			    **kwargs
			)
		
		@overload
		def begin_analyze(
			    self, 
			    analyzer_id: str, 
			    *, 
			    content_type: str = "application/json", 
			    url: Optional[str] = ..., 
			    **kwargs: Any
			) -> LROPoller[AnalyzeResult]
		
		@overload
		def begin_analyze(
			    self, 
			    analyzer_id: str, 
			    body: JSON, 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> LROPoller[AnalyzeResult]
		
		@overload
		def begin_analyze(
			    self, 
			    analyzer_id: str, 
			    body: IO[bytes], 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> LROPoller[AnalyzeResult]
		
		@distributed_trace
		def begin_analyze(
			    self, 
			    analyzer_id: str, 
			    body: Union[JSON, IO[bytes]] = _Unset, 
			    *, 
			    url: Optional[str] = ..., 
			    **kwargs: Any
			) -> LROPoller[AnalyzeResult]
		
		@distributed_trace
		def begin_analyze_binary(
			    self, 
			    analyzer_id: str, 
			    input: bytes, 
			    **kwargs: Any
			) -> LROPoller[AnalyzeResult]
		
		@overload
		def begin_create_or_replace(
			    self, 
			    analyzer_id: str, 
			    resource: ContentAnalyzer, 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> LROPoller[ContentAnalyzer]
		
		@overload
		def begin_create_or_replace(
			    self, 
			    analyzer_id: str, 
			    resource: JSON, 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> LROPoller[ContentAnalyzer]
		
		@overload
		def begin_create_or_replace(
			    self, 
			    analyzer_id: str, 
			    resource: IO[bytes], 
			    *, 
			    content_type: str = "application/json", 
			    **kwargs: Any
			) -> LROPoller[ContentAnalyzer]
		
		@distributed_trace
		def begin_create_or_replace(
			    self, 
			    analyzer_id: str, 
			    resource: Union[ContentAnalyzer, JSON, IO[bytes]], 
			    **kwargs: Any
			) -> LROPoller[ContentAnalyzer]
		
		@distributed_trace
		def delete(
			    self, 
			    analyzer_id: str, 
			    **kwargs: Any
			) -> None
		
		@distributed_trace
		def get(
			    self, 
			    analyzer_id: str, 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		@distributed_trace
		def get_operation_status(
			    self, 
			    analyzer_id: str, 
			    operation_id: str, 
			    **kwargs: Any
			) -> ResourceOperationStatusContentAnalyzerContentAnalyzerError
		
		@distributed_trace
		def get_result(
			    self, 
			    analyzer_id: str, 
			    operation_id: str, 
			    **kwargs: Any
			) -> OperationStatusAnalyzeResultError
		
		@distributed_trace
		def get_result_image(
			    self, 
			    analyzer_id: str, 
			    operation_id: str, 
			    image_id: str, 
			    **kwargs: Any
			) -> Iterator[bytes]
		
		@distributed_trace
		def list(self, **kwargs: Any) -> Iterable[ContentAnalyzer]
		
		@overload
		def update(
			    self, 
			    analyzer_id: str, 
			    resource: ContentAnalyzer, 
			    *, 
			    content_type: str = "application/merge-patch+json", 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		@overload
		def update(
			    self, 
			    analyzer_id: str, 
			    resource: JSON, 
			    *, 
			    content_type: str = "application/merge-patch+json", 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		@overload
		def update(
			    self, 
			    analyzer_id: str, 
			    resource: IO[bytes], 
			    *, 
			    content_type: str = "application/merge-patch+json", 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		@distributed_trace
		def update(
			    self, 
			    analyzer_id: str, 
			    resource: Union[ContentAnalyzer, JSON, IO[bytes]], 
			    **kwargs: Any
			) -> ContentAnalyzer
		
		