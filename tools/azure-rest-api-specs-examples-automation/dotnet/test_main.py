import unittest
import parameterized
from main import break_down_aggregated_dotnet_example, format_dotnet, get_dotnet_using_statements
from typing import List
from unittest.mock import patch, mock_open, MagicMock
import os
from os import path
import json
import tempfile
import shutil
from typing import List
from main import break_down_aggregated_dotnet_example, format_dotnet, get_dotnet_using_statements, Release


class TestMain(unittest.TestCase):
    @parameterized.parameterized.expand(
        [
            (
                """// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.ContainerInstance;
using Azure.ResourceManager.ContainerInstance.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.ContainerInstance.Samples
{
    public partial class Sample_ContainerGroupCollection
    {
        // ContainerGroupsListByResourceGroup
        [Test]
        [Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ContainerGroupsListByResourceGroup()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsListByResourceGroup.json
            // this example is just showing the usage of "ContainerGroups_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation and iterate over the result
            await foreach (ContainerGroupResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ContainerGroupData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ContainerGroupsGet_Failed
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ContainerGroupsGetFailed()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Failed.json
            // this example is just showing the usage of "ContainerGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            ContainerGroupResource result = await collection.GetAsync(containerGroupName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ContainerGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ContainerGroupsGet_Failed
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ContainerGroupsGetFailed()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Failed.json
            // this example is just showing the usage of "ContainerGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            bool result = await collection.ExistsAsync(containerGroupName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ContainerGroupsGet_Succeeded
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ContainerGroupsGetSucceeded()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Succeeded.json
            // this example is just showing the usage of "ContainerGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            ContainerGroupResource result = await collection.GetAsync(containerGroupName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ContainerGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ContainerGroupsGet_Succeeded
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ContainerGroupsGetSucceeded()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Succeeded.json
            // this example is just showing the usage of "ContainerGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            bool result = await collection.ExistsAsync(containerGroupName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ContainerGroupsCreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ContainerGroupsCreateOrUpdate()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsCreateOrUpdate.json
            // this example is just showing the usage of "ContainerGroups_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            ContainerGroupData data = new ContainerGroupData(new AzureLocation("west us"), new ContainerInstanceContainer[]
            {
new ContainerInstanceContainer("demo1","nginx",new ContainerResourceRequirements(new ContainerResourceRequestsContent(1.5,1)
{
Gpu = new ContainerGpuResourceInfo(1,ContainerGpuSku.K80),
}))
{
Command =
{
},
Ports =
{
new ContainerPort(80)
},
EnvironmentVariables =
{
},
VolumeMounts =
{
new ContainerVolumeMount("volume1","/mnt/volume1")
{
IsReadOnly = false,
},new ContainerVolumeMount("volume2","/mnt/volume2")
{
IsReadOnly = false,
},new ContainerVolumeMount("volume3","/mnt/volume3")
{
IsReadOnly = true,
}
},
}
            }, ContainerInstanceOperatingSystemType.Linux)
            {
                Identity = new ManagedServiceIdentity("SystemAssigned, UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name")] = new UserAssignedIdentity(),
},
                },
                ImageRegistryCredentials =
{
},
                IPAddress = new ContainerGroupIPAddress(new ContainerGroupPort[]
            {
new ContainerGroupPort(80)
{
Protocol = ContainerGroupNetworkProtocol.Tcp,
}
            }, ContainerGroupIPAddressType.Public)
                {
                    DnsNameLabel = "dnsnamelabel1",
                    DnsNameLabelReusePolicy = AutoGeneratedDomainNameLabelScope.Unsecure,
                },
                Volumes =
{
new ContainerVolume("volume1")
{
AzureFile = new ContainerInstanceAzureFileVolume("shareName","accountName")
{
StorageAccountKey = "accountKey",
},
},new ContainerVolume("volume2")
{
EmptyDir = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
},new ContainerVolume("volume3")
{
Secret =
{
["secretKey1"] = "SecretValue1InBase64",
["secretKey2"] = "SecretValue2InBase64",
},
}
},
                DiagnosticsLogAnalytics = new ContainerGroupLogAnalytics("workspaceid", "workspaceKey")
                {
                    LogType = ContainerGroupLogAnalyticsLogType.ContainerInsights,
                    Metadata =
{
["test-key"] = "test-metadata-value",
},
                    WorkspaceResourceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/microsoft.operationalinsights/workspaces/workspace"),
                },
                SubnetIds =
{
new ContainerGroupSubnetId(new ResourceIdentifier("[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"))
},
                DnsConfig = new ContainerGroupDnsConfiguration(new string[]
            {
"1.1.1.1"
            })
                {
                    SearchDomains = "cluster.local svc.cluster.local",
                    Options = "ndots:2",
                },
            };
            ArmOperation<ContainerGroupResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, containerGroupName, data);
            ContainerGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ContainerGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
"""
            )
        ]
    )
    def test_break_down_aggregated_dotnet_example(self, file_content: str):
        lines = file_content.splitlines(keepends=True)
        examples = break_down_aggregated_dotnet_example(lines)
        self.assertIsNotNone(examples.class_opening)
        for example_method in examples.methods:
            self.assertIsNotNone(example_method.content)

        for dotnet_example_method in examples.methods:
            example_lines = examples.class_opening + format_dotnet(dotnet_example_method.content)
            example_content = "".join(example_lines)
            self.assertIsNotNone(example_content)

    @parameterized.parameterized.expand(
        [
            (
                """// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Samples
{
}""",
                [
                    "using System;\n",
                    "using System.Threading.Tasks;\n",
                    "using Azure;\n",
                    "using Azure.Core;\n",
                    "using Azure.Identity;\n",
                    "using Azure.ResourceManager;\n",
                    "using Azure.ResourceManager.Compute;\n",
                    "using Azure.ResourceManager.Compute.Models;\n",
                    "using Azure.ResourceManager.Resources;\n",
                    "using Azure.ResourceManager.Resources.Models;\n",
                ],
            )
        ]
    )
    def test_example_usings(self, content: str, expected_usings: List[str]):
        lines = content.splitlines(keepends=True)
        usings = get_dotnet_using_statements(lines)

        self.assertSetEqual(set(expected_usings), set(usings))

class TestDotNetExamplesPathDiscovery(unittest.TestCase):
    """Test cases for the dotnet examples path discovery logic."""

    def setUp(self):
        """Set up test fixtures."""
        self.release = Release("v1.0.0", "Azure.ResourceManager.TestService", "1.0.0")
        self.module_relative_path = "sdk/testservice/Azure.ResourceManager.TestService"

    @patch('main.get_module_relative_path')
    @patch('os.path.exists')
    @patch('os.listdir')
    @patch('os.path.isdir')
    def test_primary_path_exists(self, mock_isdir, mock_listdir, mock_exists, mock_get_module_path):
        """Test when the primary path exists."""
        # Setup
        mock_get_module_path.return_value = self.module_relative_path
        
        # Mock path.exists to return True for the primary path
        def mock_exists_side_effect(path_arg):
            return path_arg == "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Generated/Samples"
        mock_exists.side_effect = mock_exists_side_effect
        
        # Execute the path discovery logic
        sdk_path = "/path/to/sdk"
        module_relative_path_local = mock_get_module_path(self.release.package, sdk_path)
        dotnet_examples_relative_path = path.join(module_relative_path_local, "tests", "Generated", "Samples")
        dotnet_examples_path = path.join(sdk_path, dotnet_examples_relative_path)
        dotnet_examples_paths: List[str] = []
        
        if path.exists(dotnet_examples_path):
            dotnet_examples_paths.append(dotnet_examples_path)
        else:
            # fallback logic...
            pass
        
        # Assert
        self.assertEqual(len(dotnet_examples_paths), 1)
        self.assertEqual(dotnet_examples_paths[0], "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Generated/Samples")
        mock_listdir.assert_not_called()  # Should not reach fallback logic

    @patch('main.get_module_relative_path')
    @patch('os.path.exists')
    @patch('os.listdir')
    @patch('os.path.isdir')
    def test_fallback_path_discovery(self, mock_isdir, mock_listdir, mock_exists, mock_get_module_path):
        """Test fallback path discovery when primary path doesn't exist."""
        # Setup
        mock_get_module_path.return_value = self.module_relative_path
        
        # Mock primary path doesn't exist, but fallback paths do
        def mock_exists_side_effect(path_arg):
            if path_arg == "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Generated/Samples":
                return False
            elif path_arg == "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests":
                return True
            elif path_arg == "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Integration/Generated/Samples":
                return True
            return False
        mock_exists.side_effect = mock_exists_side_effect
        
        # Mock directory listing
        mock_listdir.return_value = ["Unit", "Integration", "Other"]
        
        # Mock isdir to return True for actual directories
        def mock_isdir_side_effect(path_arg):
            return path_arg.endswith(("Unit", "Integration", "Other"))
        mock_isdir.side_effect = mock_isdir_side_effect
        
        # Execute the path discovery logic
        sdk_path = "/path/to/sdk"
        module_relative_path_local = mock_get_module_path(self.release.package, sdk_path)
        dotnet_examples_relative_path = path.join(module_relative_path_local, "tests", "Generated", "Samples")
        dotnet_examples_path = path.join(sdk_path, dotnet_examples_relative_path)
        dotnet_examples_paths: List[str] = []
        
        if path.exists(dotnet_examples_path):
            dotnet_examples_paths.append(dotnet_examples_path)
        else:
            # fallback to iterating all directories under tests/*/Generated/Samples
            tests_dir = path.join(sdk_path, module_relative_path_local, "tests")
            if path.exists(tests_dir):
                for item in os.listdir(tests_dir):
                    item_path = path.join(tests_dir, item)
                    if path.isdir(item_path):
                        candidate_path = path.join(item_path, "Generated", "Samples")
                        if path.exists(candidate_path):
                            dotnet_examples_paths.append(candidate_path)
                            break
        
        # Assert
        self.assertEqual(len(dotnet_examples_paths), 1)
        self.assertEqual(dotnet_examples_paths[0], "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Integration/Generated/Samples")
        mock_listdir.assert_called_once_with("/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests")

    @patch('main.get_module_relative_path')
    @patch('os.path.exists')
    @patch('os.listdir')
    @patch('os.path.isdir')
    def test_no_paths_found(self, mock_isdir, mock_listdir, mock_exists, mock_get_module_path):
        """Test when no valid paths are found."""
        # Setup
        mock_get_module_path.return_value = self.module_relative_path
        
        # Mock all paths don't exist
        def mock_exists_side_effect(path_arg):
            if path_arg == "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests":
                return True
            return False
        mock_exists.side_effect = mock_exists_side_effect
        
        mock_listdir.return_value = ["Unit", "Integration"]
        mock_isdir.return_value = True
        
        # Execute the path discovery logic
        sdk_path = "/path/to/sdk"
        module_relative_path_local = mock_get_module_path(self.release.package, sdk_path)
        dotnet_examples_relative_path = path.join(module_relative_path_local, "tests", "Generated", "Samples")
        dotnet_examples_path = path.join(sdk_path, dotnet_examples_relative_path)
        dotnet_examples_paths: List[str] = []
        
        if path.exists(dotnet_examples_path):
            dotnet_examples_paths.append(dotnet_examples_path)
        else:
            # fallback to iterating all directories under tests/*/Generated/Samples
            tests_dir = path.join(sdk_path, module_relative_path_local, "tests")
            if path.exists(tests_dir):
                for item in os.listdir(tests_dir):
                    item_path = path.join(tests_dir, item)
                    if path.isdir(item_path):
                        candidate_path = path.join(item_path, "Generated", "Samples")
                        if path.exists(candidate_path):
                            dotnet_examples_paths.append(candidate_path)
                            break
        
        # Assert
        self.assertEqual(len(dotnet_examples_paths), 0)

    @patch('main.get_module_relative_path')
    @patch('os.path.exists')
    @patch('os.listdir')
    @patch('os.path.isdir')
    def test_tests_directory_not_exists(self, mock_isdir, mock_listdir, mock_exists, mock_get_module_path):
        """Test when the tests directory itself doesn't exist."""
        # Setup
        mock_get_module_path.return_value = self.module_relative_path
        mock_exists.return_value = False  # All paths don't exist
        
        # Execute the path discovery logic
        sdk_path = "/path/to/sdk"
        module_relative_path_local = mock_get_module_path(self.release.package, sdk_path)
        dotnet_examples_relative_path = path.join(module_relative_path_local, "tests", "Generated", "Samples")
        dotnet_examples_path = path.join(sdk_path, dotnet_examples_relative_path)
        dotnet_examples_paths: List[str] = []
        
        if path.exists(dotnet_examples_path):
            dotnet_examples_paths.append(dotnet_examples_path)
        else:
            # fallback to iterating all directories under tests/*/Generated/Samples
            tests_dir = path.join(sdk_path, module_relative_path_local, "tests")
            if path.exists(tests_dir):
                for item in os.listdir(tests_dir):
                    item_path = path.join(tests_dir, item)
                    if path.isdir(item_path):
                        candidate_path = path.join(item_path, "Generated", "Samples")
                        if path.exists(candidate_path):
                            dotnet_examples_paths.append(candidate_path)
                            break
        
        # Assert
        self.assertEqual(len(dotnet_examples_paths), 0)
        mock_listdir.assert_not_called()  # Should not be called if tests dir doesn't exist

    @patch('main.get_module_relative_path')
    @patch('os.path.exists')
    @patch('os.listdir')
    @patch('os.path.isdir')
    def test_multiple_fallback_directories_found(self, mock_isdir, mock_listdir, mock_exists, mock_get_module_path):
        """Test when multiple fallback directories exist, should use the first one found."""
        # Setup
        mock_get_module_path.return_value = self.module_relative_path
        
        # Mock primary path doesn't exist, but multiple fallback paths do
        def mock_exists_side_effect(path_arg):
            if path_arg == "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Generated/Samples":
                return False
            elif path_arg == "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests":
                return True
            elif "Generated/Samples" in path_arg:
                return True  # Both Unit and Integration have Generated/Samples
            return False
        mock_exists.side_effect = mock_exists_side_effect
        
        # Mock directory listing - Unit comes first alphabetically
        mock_listdir.return_value = ["Unit", "Integration"]
        mock_isdir.return_value = True
        
        # Execute the path discovery logic
        sdk_path = "/path/to/sdk"
        module_relative_path_local = mock_get_module_path(self.release.package, sdk_path)
        dotnet_examples_relative_path = path.join(module_relative_path_local, "tests", "Generated", "Samples")
        dotnet_examples_path = path.join(sdk_path, dotnet_examples_relative_path)
        dotnet_examples_paths: List[str] = []
        
        if path.exists(dotnet_examples_path):
            dotnet_examples_paths.append(dotnet_examples_path)
        else:
            # fallback to iterating all directories under tests/*/Generated/Samples
            tests_dir = path.join(sdk_path, module_relative_path_local, "tests")
            if path.exists(tests_dir):
                for item in os.listdir(tests_dir):
                    item_path = path.join(tests_dir, item)
                    if path.isdir(item_path):
                        candidate_path = path.join(item_path, "Generated", "Samples")
                        if path.exists(candidate_path):
                            dotnet_examples_paths.append(candidate_path)
                            break  # Should break after finding the first one
        
        # Assert - should find Unit first (since it comes first in the list)
        self.assertEqual(len(dotnet_examples_paths), 1)
        self.assertEqual(dotnet_examples_paths[0], "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Unit/Generated/Samples")


class TestWithRealFileSystem(unittest.TestCase):
    """Tests using a real temporary file system."""

    def setUp(self):
        """Create a temporary directory structure for testing."""
        self.temp_dir = tempfile.mkdtemp()
        self.sdk_path = path.join(self.temp_dir, "sdk")
        self.module_path = path.join(self.sdk_path, "sdk", "testservice", "Azure.ResourceManager.TestService")
        
        # Create directory structure
        os.makedirs(path.join(self.module_path, "tests", "Generated", "Samples"), exist_ok=True)
        os.makedirs(path.join(self.module_path, "tests", "Integration", "Generated", "Samples"), exist_ok=True)
        
        # Create some test files
        with open(path.join(self.module_path, "tests", "Generated", "Samples", "test1.cs"), 'w') as f:
            f.write("// Test file 1")
        with open(path.join(self.module_path, "tests", "Integration", "Generated", "Samples", "test2.cs"), 'w') as f:
            f.write("// Test file 2")

    def tearDown(self):
        """Clean up temporary directory."""
        shutil.rmtree(self.temp_dir)

    @patch('main.get_module_relative_path')
    def test_real_filesystem_primary_path(self, mock_get_module_path):
        """Test path discovery with real file system - primary path exists."""
        mock_get_module_path.return_value = "sdk/testservice/Azure.ResourceManager.TestService"
        
        # Execute path discovery logic
        module_relative_path_local = mock_get_module_path("Azure.ResourceManager.TestService", self.sdk_path)
        dotnet_examples_relative_path = path.join(module_relative_path_local, "tests", "Generated", "Samples")
        dotnet_examples_path = path.join(self.sdk_path, dotnet_examples_relative_path)
        dotnet_examples_paths: List[str] = []
        
        if path.exists(dotnet_examples_path):
            dotnet_examples_paths.append(dotnet_examples_path)
        
        # Assert
        self.assertEqual(len(dotnet_examples_paths), 1)
        self.assertTrue(path.exists(dotnet_examples_paths[0]))

    @patch('main.get_module_relative_path')
    def test_real_filesystem_fallback_path(self, mock_get_module_path):
        """Test path discovery with real file system - fallback path."""
        mock_get_module_path.return_value = "sdk/testservice/Azure.ResourceManager.TestService"
        
        # Remove primary path to force fallback
        primary_path = path.join(self.module_path, "tests", "Generated", "Samples")
        shutil.rmtree(primary_path)
        
        # Execute path discovery logic
        module_relative_path_local = mock_get_module_path("Azure.ResourceManager.TestService", self.sdk_path)
        dotnet_examples_relative_path = path.join(module_relative_path_local, "tests", "Generated", "Samples")
        dotnet_examples_path = path.join(self.sdk_path, dotnet_examples_relative_path)
        dotnet_examples_paths: List[str] = []
        
        if path.exists(dotnet_examples_path):
            dotnet_examples_paths.append(dotnet_examples_path)
        else:
            # fallback to iterating all directories under tests/*/Generated/Samples
            tests_dir = path.join(self.sdk_path, module_relative_path_local, "tests")
            if path.exists(tests_dir):
                for item in os.listdir(tests_dir):
                    item_path = path.join(tests_dir, item)
                    if path.isdir(item_path):
                        candidate_path = path.join(item_path, "Generated", "Samples")
                        if path.exists(candidate_path):
                            dotnet_examples_paths.append(candidate_path)
                            break
        
        # Assert
        self.assertEqual(len(dotnet_examples_paths), 1)
        self.assertTrue(path.exists(dotnet_examples_paths[0]))
        self.assertIn("Integration", dotnet_examples_paths[0])

    @patch('main.get_module_relative_path')
    @patch('os.path.exists')
    @patch('os.listdir')
    @patch('os.path.isdir')
    def test_find_dotnet_examples_paths_helper_primary(self, mock_isdir, mock_listdir, mock_exists, mock_get_module_path):
        """Test the extracted helper function for primary path."""
        from main import find_dotnet_examples_paths
        
        # Mock primary path exists
        def mock_exists_side_effect(path_arg):
            return path_arg == "/sdk/module/tests/Generated/Samples"
        mock_exists.side_effect = mock_exists_side_effect
        
        # Execute
        result = find_dotnet_examples_paths("/sdk", "module")
        
        # Assert
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0], "/sdk/module/tests/Generated/Samples")
        mock_listdir.assert_not_called()

    @patch('main.get_module_relative_path')
    @patch('os.path.exists')
    @patch('os.listdir')
    @patch('os.path.isdir')
    def test_find_dotnet_examples_paths_helper_fallback(self, mock_isdir, mock_listdir, mock_exists, mock_get_module_path):
        """Test the extracted helper function for fallback path."""
        from main import find_dotnet_examples_paths
        
        # Mock primary path doesn't exist, fallback does
        def mock_exists_side_effect(path_arg):
            if path_arg == "/sdk/module/tests/Generated/Samples":
                return False
            elif path_arg == "/sdk/module/tests":
                return True
            elif path_arg == "/sdk/module/tests/Unit/Generated/Samples":
                return True
            return False
        mock_exists.side_effect = mock_exists_side_effect
        
        mock_listdir.return_value = ["Unit", "Integration"]
        mock_isdir.return_value = True
        
        # Execute
        result = find_dotnet_examples_paths("/sdk", "module")
        
        # Assert
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0], "/sdk/module/tests/Unit/Generated/Samples")
