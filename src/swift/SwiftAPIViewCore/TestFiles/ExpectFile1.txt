Package parsed using Swift APIView (version 0.1.0)

package TestFile1.swifttxt {
    
    @available(macOS 10.12, *)
    public class SomeClass<GenericType> where GenericType: Codable {
        public let const: String = "value"
        public var value: String
        public private(set) var numberOfEdits: Int = 0
        public init(value: String)
        public convenience init?()
        public func test(name: String) throws -> Bool
        static public func ==(lhs: SomeClass<GenericType>, rhs: SomeClass<GenericType>) -> Bool
    }
    
    public protocol Container {
        associatedtype Item
        mutating func append(_: Item)
        var count: Int { get }
        subscript(i: Int) -> Item
    }
    
    public protocol SomeOtherProtocol {
        var mutatableValue: String { mutating get mutating set }
        func doSomething(param1: Int, _: String...) throws -> String
        subscript(index: Int) -> String
        init?(withName: String) throws
        init!(withRisk: String)
        init(withRegular: String)
    }
    
    public final class ThirdClass: SomeOtherProtocol {
        public var mutatableValue: String
        public func doSomething(param1: Int, _: String...) throws -> String
        public subscript(index: Int) -> String
        public init?(withName: String = "Great Name!") throws
        public init!(withRisk: String)
        public init(withRegular: String)
        public typealias SomeProtocolType = String
        public var value: String
        public func allItemsMatch<C1: Container, C2: Container> (_: C1, _: C2) -> Bool where C1.Item == C2.Item, C1.Item: Equatable
    }
    
    public typealias SomeClosure = (Result<String, Error>) -> Void
    
    public func invoke(withClosure: @escaping SomeClosure)
    
    
    @available(macOS 10.12, *)
    public struct SomeStruct: Codable, Equatable {
        public static var staticVar: String = "initial value"
        public let const: String = "value"
        public func myMethod(takes: Any) -> Any
    }
    
    
    @available(macOS 10.12, *)
    public class SomeGeneric<GenericType> {
    }
    
    public class MultiGeneric<TypeA: Hashable, TypeB> {
    }
    
    
    @available(macOS 10.12, *)
    indirect public enum VariableNode<GenericType> {
        case endpoint(value: GenericType)
        case node(value: GenericType, next: VariableNode)
        case vague(GenericType)
    }
    
    public enum RawValue: String {
        case first = "First"
        case second
    }
    
    public extension SomeStruct {
        
        @discardableResult
        func somePublicMethod() throws -> String
    }
    
    extension SomeStruct {
        public func specialPublicMethod()
    }
    
    public class SomeSubscriptable {
        public subscript(index: String) -> String
    }
    
    precedencegroup SquareSumOperatorPrecedence {
        lowerThan: MultiplicationPrecedence
        higherThan: AdditionPrecedence
        associativity: left
        assignment: false
    }
    
    infix operator +-: SquareSumOperatorPrecedence
    
    prefix operator +++
    
    postfix operator ---
    
    
    @objcMembers
    open class SomeObjCClass: NSObject {
        open func myFunc() -> String
        public func doubleInPlace(number: Int)
    }
}
