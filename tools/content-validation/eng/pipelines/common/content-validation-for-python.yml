parameters:
- name: DotNetSdkVersion  
  type: string
- name: PackageName
  type: string
- name: ReadmeName
  type: string
- name: GitHubPat
  type: string
  default: ''
- name: GitHubOwner
  type: string
  default: ''
- name: GitHubRepo
  type: string
  default: ''
- name: OrganizationName
  type: string
  default: 'zedy-wj'
- name: ProjectName
  type: string
  default: 'content-validation-automation'
- name: AzureDevOpsPat
  type: string
  default: ''
- name: jobDisplayName
  type: string
  default: ''
- name: Branch
  type: string
  default: ''
- name: Language
  type: string
  default: 'Python'

jobs:
  - job: ${{ parameters.jobDisplayName }}
    displayName: ${{ parameters.jobDisplayName }}
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: ${{ parameters.DotNetSdkVersion }}
        installationPath: $(Agent.ToolsDirectory)/dotnet 

    - task: DotNetCoreCLI@2
      displayName: New Manifest for tool
      inputs:
        command: custom
        custom: 'new '
        arguments: tool-manifest

    - task: DotNetCoreCLI@2
      displayName: Install Playwright CLI
      inputs:
        command: custom
        custom: 'tool '
        arguments: install Microsoft.Playwright.CLI

    - task: DotNetCoreCLI@2
      displayName: Build all projects and libraries
      inputs:
        command: 'build'
        projects: 'content-validation.sln'

    - task: DotNetCoreCLI@2
      displayName: Run Playwright Install
      inputs:
        command: custom
        custom: 'tool '
        arguments: run playwright install

    - task: DotNetCoreCLI@2
      displayName: Build get data source project
      inputs:
        command: 'build'
        projects: 'DataSource/DataSource.csproj'

    - task: DotNetCoreCLI@2
      displayName: Get test data source
      env:
        ReadmeName: ${{ parameters.ReadmeName }}
        Branch: ${{ parameters.Branch }}
        Language: ${{ parameters.Language }}
        PackageName: ${{ parameters.PackageName }}
      inputs:
        command: 'run'
        workingDirectory: '$(System.DefaultWorkingDirectory)/DataSource'

    - task: DotNetCoreCLI@2
      displayName: Build test project
      inputs:
        command: 'build'
        projects: 'ContentValidation.Test/ContentValidation.Test.csproj'

    - task: DotNetCoreCLI@2
      displayName: Restore project dependencies
      inputs:
        command: 'restore'
        projects: 'ContentValidation.Test/ContentValidation.Test.csproj'

    - task: DotNetCoreCLI@2
      displayName: Run test case
      inputs:
        command: 'test'
        projects: 'ContentValidation.Test/ContentValidation.Test.csproj'
        arguments: '-e BROWSER=chromium --filter Category=PythonTest'
        testRunTitle: 'Content Validation Testing Start'
      continueOnError: true

    - task: DownloadPipelineArtifact@2
      displayName: Download The Last Artifact issues-summary
      inputs:
        buildType: 'specific'
        project: 'content-validation-automation'
        pipeline: 'Content Validation For Python'
        buildVersionToDownload: 'latestFromBranch'
        allowPartiallySucceededBuilds: true
        allowFailedBuilds: false
        branchName: 'refs/heads/main'
        artifactName: 'issues-summary'
        downloadPath: '$(System.DefaultWorkingDirectory)/Artifacts'
      continueOnError: true

    - task: DotNetCoreCLI@2
      displayName: Build report helper project
      inputs:
        command: 'build'
        projects: 'ReportHelper/ReportHelper.csproj'

    - task: DotNetCoreCLI@2
      displayName: Resolve data by report helper
      env:
        PackageName: ${{ parameters.PackageName }}
        Language: ${{ parameters.Language }}
        GitHubToken: ${{ parameters.GitHubPat }}
        Owner: ${{ parameters.GitHubOwner }}
        Repo: ${{ parameters.GitHubRepo }}
      inputs:
        command: 'run'
        workingDirectory: '$(System.DefaultWorkingDirectory)/ReportHelper'

    - task: PublishPipelineArtifact@1
      displayName: "Upload pipeline test data"
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/Reports
        artifactName: ${{ parameters.PackageName }}
        publishLocation: "pipeline"

    # If some rules failed, change the pipeline status to failed.
    - task: Bash@3
      displayName: Check the status of test case
      inputs:
        targetType: 'inline'
        script: |
          #!/bin/bash
          FILE_PATH="$(System.DefaultWorkingDirectory)/eng/PipelineFailedStatus.txt"
 
          if [ ! -f "$FILE_PATH" ]; then
            echo "No exception was caught during the test case execution. Please check the test case running results."
            exit 0
          else
            echo "An exception was caught during the test case execution, interrupting subsequent execution. Printing contents and exiting abnormally."
            cat "$FILE_PATH"
            exit 1
          fi

    # - task: Bash@3
    #   displayName: 'Set Script Executable'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       chmod +x $(System.DefaultWorkingDirectory)/eng/scripts/create-github-issue.sh

    # - task: Bash@3
    #   displayName: 'Create GitHub Issue'
    #   inputs:
    #     targetType: 'filePath'
    #     filePath: '$(System.DefaultWorkingDirectory)/eng/scripts/create-github-issue.sh'
    #     arguments: >-
    #       ${{ parameters.PackageName }}
    #       ${{ parameters.GitHubPat }}
    #       ${{ parameters.GitHubOwner }}
    #       ${{ parameters.GitHubRepo }}
    #       ${{ parameters.OrganizationName }}
    #       ${{ parameters.ProjectName }}
    #       $(Build.BuildId)
    #       ${{ parameters.Language }}