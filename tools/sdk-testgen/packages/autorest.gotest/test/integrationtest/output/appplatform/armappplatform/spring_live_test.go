//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform_test

import (
	"context"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform/v2"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	"github.com/stretchr/testify/suite"
)

type SpringTestSuite struct {
	suite.Suite

	ctx                        context.Context
	cred                       azcore.TokenCredential
	options                    *arm.ClientOptions
	appName                    string
	ascDomainName              string
	dnsCname                   string
	insightsInstrumentationKey string
	serviceName                string
	blobUrl                    string
	customDomainName           string
	dnsResourceGroup           string
	dnsSubscriptionId          string
	location                   string
	mysqlKey                   string
	resourceGroupName          string
	subscriptionId             string
	userAssignedIdentity       string
}

func (testsuite *SpringTestSuite) SetupSuite() {
	testsuite.ctx = context.Background()
	testsuite.cred, testsuite.options = testutil.GetCredAndClientOptions(testsuite.T())
	testsuite.appName = "app01"
	testsuite.ascDomainName = ".azuremicroservices.io"
	testsuite.dnsCname = "asc"
	testsuite.serviceName = "test-scenario-instance"
	testsuite.blobUrl = testutil.GetEnv("BLOB_URL", "")
	testsuite.customDomainName = testutil.GetEnv("CUSTOM_DOMAIN_NAME", "")
	testsuite.dnsResourceGroup = testutil.GetEnv("DNS_RESOURCE_GROUP", "")
	testsuite.dnsSubscriptionId = testutil.GetEnv("DNS_SUBSCRIPTION_ID", "")
	testsuite.location = testutil.GetEnv("LOCATION", "westus")
	testsuite.mysqlKey = testutil.GetEnv("MYSQL_KEY", "")
	testsuite.resourceGroupName = testutil.GetEnv("RESOURCE_GROUP_NAME", "scenarioTestTempGroup")
	testsuite.subscriptionId = testutil.GetEnv("AZURE_SUBSCRIPTION_ID", "")
	testsuite.userAssignedIdentity = testutil.GetEnv("USER_ASSIGNED_IDENTITY", "")

	testutil.StartRecording(testsuite.T(), "sdk/resourcemanager/appplatform/armappplatform/testdata")
	resourceGroup, _, err := testutil.CreateResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.location)
	testsuite.Require().NoError(err)
	testsuite.resourceGroupName = *resourceGroup.Name
	testsuite.Prepare()
}

func (testsuite *SpringTestSuite) TearDownSuite() {
	testsuite.Cleanup()
	_, err := testutil.DeleteResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName)
	testsuite.Require().NoError(err)
	testutil.StopRecording(testsuite.T())
}

func TestSpringTestSuite(t *testing.T) {
	suite.Run(t, new(SpringTestSuite))
}

func (testsuite *SpringTestSuite) Prepare() {
	var err error
	// From step Generate_Unique_ServiceName
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"outputs": map[string]interface{}{
			"serviceName": map[string]interface{}{
				"type":  "string",
				"value": "[substring(variables('serviceNameLong'), 0, 12)]",
			},
		},
		"parameters": map[string]interface{}{
			"serviceNamePrefix": map[string]interface{}{
				"type":         "string",
				"defaultValue": "asc-",
			},
		},
		"resources": []interface{}{},
		"variables": map[string]interface{}{
			"serviceNameLong": "[concat(parameters('serviceNamePrefix'), uniqueString(resourceGroup().id))]",
		},
	}
	params := map[string]interface{}{}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       to.Ptr(armresources.DeploymentModeIncremental),
		},
	}
	deploymentExtend, err := testutil.CreateDeployment(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName, "Generate_Unique_ServiceName", &deployment)
	testsuite.Require().NoError(err)
	testsuite.serviceName = deploymentExtend.Properties.Outputs.(map[string]interface{})["serviceName"].(map[string]interface{})["value"].(string)

	// From step Create_Application_Insight_Instance
	template = map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"outputs": map[string]interface{}{
			"insightsInstrumentationKey": map[string]interface{}{
				"type":  "string",
				"value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2014-04-01').InstrumentationKey]",
			},
		},
		"parameters": map[string]interface{}{
			"name": map[string]interface{}{
				"type":         "string",
				"defaultValue": "asc-api-ai-instance",
				"metadata": map[string]interface{}{
					"description": "Name of Application Insights resource.",
				},
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "[parameters('name')]",
				"type":       "microsoft.insights/components",
				"apiVersion": "2014-04-01",
				"location":   "eastus",
				"properties": map[string]interface{}{
					"ApplicationId":    "[parameters('name')]",
					"Application_Type": "web",
					"Flow_Type":        "Redfield",
					"Request_Source":   "CustomDeployment",
				},
				"tags": map[string]interface{}{},
			},
		},
	}
	params = map[string]interface{}{}
	deployment = armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       to.Ptr(armresources.DeploymentModeIncremental),
		},
	}
	deploymentExtend, err = testutil.CreateDeployment(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName, "Create_Application_Insight_Instance", &deployment)
	testsuite.Require().NoError(err)
	testsuite.insightsInstrumentationKey = deploymentExtend.Properties.Outputs.(map[string]interface{})["insightsInstrumentationKey"].(map[string]interface{})["value"].(string)

	// From step Add_Dns_Cname_Record
	template = map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"parameters": map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{
				"type":         "string",
				"defaultValue": "$(userAssignedIdentity)",
			},
			"utcValue": map[string]interface{}{
				"type":         "string",
				"defaultValue": "[utcNow()]",
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "Add_Dns_Cname_Record",
				"type":       "Microsoft.Resources/deploymentScripts",
				"apiVersion": "2020-10-01",
				"identity": map[string]interface{}{
					"type": "UserAssigned",
					"userAssignedIdentities": map[string]interface{}{
						"[parameters('userAssignedIdentity')]": map[string]interface{}{},
					},
				},
				"kind":     "AzurePowerShell",
				"location": "[resourceGroup().location]",
				"properties": map[string]interface{}{
					"azPowerShellVersion": "6.2",
					"cleanupPreference":   "OnSuccess",
					"environmentVariables": []interface{}{
						map[string]interface{}{
							"name":  "resourceGroupName",
							"value": testsuite.dnsResourceGroup,
						},
						map[string]interface{}{
							"name":  "dnsZoneName",
							"value": testsuite.customDomainName,
						},
						map[string]interface{}{
							"name":  "dnsCname",
							"value": "asc",
						},
						map[string]interface{}{
							"name":  "dnsCnameAlias",
							"value": testsuite.serviceName + ".azuremicroservices.io",
						},
					},
					"forceUpdateTag":    "[parameters('utcValue')]",
					"retentionInterval": "P1D",
					"scriptContent":     "# Copyright (c) 2021 Microsoft Corporation\n# \n# This software is released under the MIT License.\n# https://opensource.org/licenses/MIT\n$resourceGroupName = ${Env:resourceGroupName}\n$dnsCname = ${Env:dnsCname}\n$dnsZoneName = ${Env:dnsZoneName}\n$dnsCnameAlias = ${Env:dnsCnameAlias}\nConnect-AzAccount -Identity\nNew-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ZoneName $dnsZoneName -ResourceGroupName $resourceGroupName -Ttl 3600 -DnsRecords (New-AzDnsRecordConfig -Cname $dnsCnameAlias) -Overwrite\n$RecordSet = Get-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ResourceGroupName $resourceGroupName -ZoneName $dnsZoneName\n$RecordSet",
					"timeout":           "PT1H",
				},
			},
		},
	}
	params = map[string]interface{}{
		"userAssignedIdentity": map[string]interface{}{"value": testsuite.userAssignedIdentity},
	}
	deployment = armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       to.Ptr(armresources.DeploymentModeIncremental),
		},
	}
	_, err = testutil.CreateDeployment(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName, "Add_Dns_Cname_Record", &deployment)
	testsuite.Require().NoError(err)
}

func (testsuite *SpringTestSuite) TestSpring() {
	var relativePath string
	var uploadUrl string
	var err error
	// From step Services_CheckNameAvailability
	servicesClient, err := armappplatform.NewServicesClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	_, err = servicesClient.CheckNameAvailability(testsuite.ctx,
		testsuite.location,
		armappplatform.NameAvailabilityParameters{
			Name: to.Ptr(testsuite.serviceName),
			Type: to.Ptr("Microsoft.AppPlatform/Spring"),
		},
		nil)
	testsuite.Require().NoError(err)

	// From step Services_CreateOrUpdate
	servicesClientCreateOrUpdateResponsePoller, err := servicesClient.BeginCreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		armappplatform.ServiceResource{
			Location: to.Ptr(testsuite.location),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armappplatform.ClusterResourceProperties{},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, servicesClientCreateOrUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Services_Get
	_, err = servicesClient.Get(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	testsuite.Require().NoError(err)

	// From step Services_Update
	servicesClientUpdateResponsePoller, err := servicesClient.BeginUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		armappplatform.ServiceResource{
			Tags: map[string]*string{
				"created-by": to.Ptr("api-test"),
				"hello":      to.Ptr("world"),
			},
			SKU: &armappplatform.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, servicesClientUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Services_DisableTestEndpoint
	_, err = servicesClient.DisableTestEndpoint(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	testsuite.Require().NoError(err)

	// From step Services_EnableTestEndpoint
	_, err = servicesClient.EnableTestEndpoint(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	testsuite.Require().NoError(err)

	// From step Services_RegenerateTestKey
	_, err = servicesClient.RegenerateTestKey(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		armappplatform.RegenerateTestKeyRequestPayload{
			KeyType: to.Ptr(armappplatform.TestKeyTypePrimary),
		},
		nil)
	testsuite.Require().NoError(err)

	// From step Services_ListTestKeys
	_, err = servicesClient.ListTestKeys(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	testsuite.Require().NoError(err)

	// From step Certificates_CreateOrUpdate
	certificatesClient, err := armappplatform.NewCertificatesClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	certificateName := "asc-certificate"
	certificatesClientCreateOrUpdateResponsePoller, err := certificatesClient.BeginCreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		certificateName,
		armappplatform.CertificateResource{
			Properties: &armappplatform.CertificateProperties{
				KeyVaultCertName: to.Ptr("pfx-cert"),
				VaultURI:         to.Ptr("https://integration-test-prod.vault.azure.net/"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, certificatesClientCreateOrUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Certificates_Get
	certificateName = "asc-certificate"
	_, err = certificatesClient.Get(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		certificateName,
		nil)
	testsuite.Require().NoError(err)

	// From step Certificates_List
	certificatesClientNewListPager := certificatesClient.NewListPager(testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	for certificatesClientNewListPager.More() {
		_, err := certificatesClientNewListPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step ConfigServers_Validate
	configServersClient, err := armappplatform.NewConfigServersClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	configServersClientValidateResponsePoller, err := configServersClient.BeginValidate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		armappplatform.ConfigServerSettings{
			GitProperty: &armappplatform.ConfigServerGitProperty{
				Label: to.Ptr("master"),
				SearchPaths: []*string{
					to.Ptr("/")},
				URI: to.Ptr("https://github.com/VSChina/asc-config-server-test-public.git"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, configServersClientValidateResponsePoller)
	testsuite.Require().NoError(err)

	// From step ConfigServers_UpdatePut
	configServersClientUpdatePutResponsePoller, err := configServersClient.BeginUpdatePut(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		armappplatform.ConfigServerResource{
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						Label: to.Ptr("master"),
						SearchPaths: []*string{
							to.Ptr("/")},
						URI: to.Ptr("https://github.com/VSChina/asc-config-server-test-public.git"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, configServersClientUpdatePutResponsePoller)
	testsuite.Require().NoError(err)

	// From step ConfigServers_UpdatePatch
	configServersClientUpdatePatchResponsePoller, err := configServersClient.BeginUpdatePatch(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		armappplatform.ConfigServerResource{
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						URI: to.Ptr("https://github.com/azure-samples/spring-petclinic-microservices-config"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, configServersClientUpdatePatchResponsePoller)
	testsuite.Require().NoError(err)

	// From step ConfigServers_Get
	_, err = configServersClient.Get(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	testsuite.Require().NoError(err)

	// From step MonitoringSettings_UpdatePut
	monitoringSettingsClient, err := armappplatform.NewMonitoringSettingsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	monitoringSettingsClientUpdatePutResponsePoller, err := monitoringSettingsClient.BeginUpdatePut(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		armappplatform.MonitoringSettingResource{
			Properties: &armappplatform.MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.Ptr(testsuite.insightsInstrumentationKey),
				AppInsightsSamplingRate:       to.Ptr[float64](50),
				TraceEnabled:                  to.Ptr(true),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, monitoringSettingsClientUpdatePutResponsePoller)
	testsuite.Require().NoError(err)

	// From step MonitoringSettings_Get
	_, err = monitoringSettingsClient.Get(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	testsuite.Require().NoError(err)

	// From step MonitoringSettings_UpdatePatch
	monitoringSettingsClientUpdatePatchResponsePoller, err := monitoringSettingsClient.BeginUpdatePatch(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		armappplatform.MonitoringSettingResource{
			Properties: &armappplatform.MonitoringSettingProperties{
				AppInsightsSamplingRate: to.Ptr[float64](100),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, monitoringSettingsClientUpdatePatchResponsePoller)
	testsuite.Require().NoError(err)

	// From step Apps_Create
	appsClient, err := armappplatform.NewAppsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	appsClientCreateOrUpdateResponsePoller, err := appsClient.BeginCreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		armappplatform.AppResource{
			Identity: &armappplatform.ManagedIdentityProperties{
				Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("principalid"),
				TenantID:    to.Ptr("tenantid"),
			},
			Location: to.Ptr(testsuite.location),
			Properties: &armappplatform.AppResourceProperties{
				ActiveDeploymentName: to.Ptr("mydeployment1"),
				EnableEndToEndTLS:    to.Ptr(false),
				Fqdn:                 to.Ptr(testsuite.appName + ".mydomain.com"),
				HTTPSOnly:            to.Ptr(false),
				Public:               to.Ptr(false),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, appsClientCreateOrUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Apps_Get
	_, err = appsClient.Get(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		&armappplatform.AppsClientGetOptions{SyncStatus: nil})
	testsuite.Require().NoError(err)

	// From step Deployments_CreateOrUpdate_Default
	deploymentsClient, err := armappplatform.NewDeploymentsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	deploymentName := "default"
	deploymentsClientCreateOrUpdateResponsePoller, err := deploymentsClient.BeginCreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		deploymentName,
		armappplatform.DeploymentResource{
			Properties: &armappplatform.DeploymentResourceProperties{
				DeploymentSettings: &armappplatform.DeploymentSettings{
					CPU: to.Ptr[int32](1),
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Ptr[int32](3),
					RuntimeVersion: to.Ptr(armappplatform.RuntimeVersionJava8),
				},
				Source: &armappplatform.UserSourceInfo{
					Type:             to.Ptr(armappplatform.UserSourceTypeJar),
					ArtifactSelector: to.Ptr("sub-module-1"),
					RelativePath:     to.Ptr("<default>"),
					Version:          to.Ptr("1.0"),
				},
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, deploymentsClientCreateOrUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Deployments_Get
	deploymentName = "default"
	_, err = deploymentsClient.Get(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		deploymentName,
		nil)
	testsuite.Require().NoError(err)

	// From step Apps_Update_ActiveDeployment
	appsClientUpdateResponsePoller, err := appsClient.BeginUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		armappplatform.AppResource{
			Identity: &armappplatform.ManagedIdentityProperties{
				Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("principalid"),
				TenantID:    to.Ptr("tenantid"),
			},
			Properties: &armappplatform.AppResourceProperties{
				ActiveDeploymentName: to.Ptr("default"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, appsClientUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Apps_Update_Disk
	appsClientUpdateResponsePoller, err = appsClient.BeginUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		armappplatform.AppResource{
			Identity: &armappplatform.ManagedIdentityProperties{
				Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("principalid"),
				TenantID:    to.Ptr("tenantid"),
			},
			Properties: &armappplatform.AppResourceProperties{
				PersistentDisk: &armappplatform.PersistentDisk{
					MountPath: to.Ptr("/data"),
					SizeInGB:  to.Ptr[int32](10),
				},
				TemporaryDisk: &armappplatform.TemporaryDisk{
					MountPath: to.Ptr("/tmpdisk"),
					SizeInGB:  to.Ptr[int32](3),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, appsClientUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Apps_List
	appsClientNewListPager := appsClient.NewListPager(testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	for appsClientNewListPager.More() {
		_, err := appsClientNewListPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step Bindings_Create
	bindingsClient, err := armappplatform.NewBindingsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	bindingName := "mysql-binding"
	bindingsClientCreateOrUpdateResponsePoller, err := bindingsClient.BeginCreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		bindingName,
		armappplatform.BindingResource{
			Properties: &armappplatform.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"databaseName": "mysqldb",
					"username":     "test",
				},
				Key:        to.Ptr(testsuite.mysqlKey),
				ResourceID: to.Ptr("/subscriptions/b46590cb-a111-4b84-935f-c305aaf1f424/resourceGroups/mary-west/providers/Microsoft.DBforMySQL/servers/fake-sql"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, bindingsClientCreateOrUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Bindings_Update
	bindingName = "mysql-binding"
	bindingsClientUpdateResponsePoller, err := bindingsClient.BeginUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		bindingName,
		armappplatform.BindingResource{
			Properties: &armappplatform.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"databaseName": "mysqldb2",
					"username":     "test2",
				},
				Key:        to.Ptr(testsuite.mysqlKey),
				ResourceID: to.Ptr("/subscriptions/" + testsuite.subscriptionId + "/resourceGroups/" + testsuite.resourceGroupName + "/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, bindingsClientUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Bindings_Get
	bindingName = "mysql-binding"
	_, err = bindingsClient.Get(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		bindingName,
		nil)
	testsuite.Require().NoError(err)

	// From step Bindings_List
	bindingsClientNewListPager := bindingsClient.NewListPager(testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		nil)
	for bindingsClientNewListPager.More() {
		_, err := bindingsClientNewListPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step Bindings_Delete
	bindingName = "mysql-binding"
	bindingsClientDeleteResponsePoller, err := bindingsClient.BeginDelete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		bindingName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, bindingsClientDeleteResponsePoller)
	testsuite.Require().NoError(err)

	// From step Apps_ValidateDomain
	_, err = appsClient.ValidateDomain(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		armappplatform.CustomDomainValidatePayload{
			Name: to.Ptr(testsuite.customDomainName),
		},
		nil)
	testsuite.Require().NoError(err)

	// From step CustomDomains_CreateOrUpdate
	customDomainsClient, err := armappplatform.NewCustomDomainsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	domainName := testsuite.dnsCname + "." + testsuite.customDomainName
	customDomainsClientCreateOrUpdateResponsePoller, err := customDomainsClient.BeginCreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		domainName,
		armappplatform.CustomDomainResource{
			Properties: &armappplatform.CustomDomainProperties{
				CertName: to.Ptr("asc-certificate"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, customDomainsClientCreateOrUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step CustomDomains_Update
	domainName = testsuite.dnsCname + "." + testsuite.customDomainName
	customDomainsClientUpdateResponsePoller, err := customDomainsClient.BeginUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		domainName,
		armappplatform.CustomDomainResource{
			Properties: &armappplatform.CustomDomainProperties{
				CertName: to.Ptr("asc-certificate"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, customDomainsClientUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step CustomDomains_Get
	domainName = testsuite.dnsCname + "." + testsuite.customDomainName
	_, err = customDomainsClient.Get(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		domainName,
		nil)
	testsuite.Require().NoError(err)

	// From step CustomDomains_List
	customDomainsClientNewListPager := customDomainsClient.NewListPager(testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		nil)
	for customDomainsClientNewListPager.More() {
		_, err := customDomainsClientNewListPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step Apps_GetResourceUploadUrl
	appsClientGetResourceUploadURLResponse, err := appsClient.GetResourceUploadURL(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		nil)
	testsuite.Require().NoError(err)
	relativePath = *appsClientGetResourceUploadURLResponse.RelativePath
	uploadUrl = *appsClientGetResourceUploadURLResponse.UploadURL

	// From step Upload_File
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"parameters": map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{
				"type":         "string",
				"defaultValue": "$(userAssignedIdentity)",
			},
			"utcValue": map[string]interface{}{
				"type":         "string",
				"defaultValue": "[utcNow()]",
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "Upload_File",
				"type":       "Microsoft.Resources/deploymentScripts",
				"apiVersion": "2020-10-01",
				"identity": map[string]interface{}{
					"type": "UserAssigned",
					"userAssignedIdentities": map[string]interface{}{
						"[parameters('userAssignedIdentity')]": map[string]interface{}{},
					},
				},
				"kind":     "AzurePowerShell",
				"location": "[resourceGroup().location]",
				"properties": map[string]interface{}{
					"azPowerShellVersion": "6.2",
					"cleanupPreference":   "OnSuccess",
					"environmentVariables": []interface{}{
						map[string]interface{}{
							"name":        "uploadUrl",
							"secureValue": uploadUrl,
						},
						map[string]interface{}{
							"name":        "blobUrl",
							"secureValue": testsuite.blobUrl,
						},
					},
					"forceUpdateTag":    "[parameters('utcValue')]",
					"retentionInterval": "P1D",
					"scriptContent": "$uploadUri = ${Env:uploadUrl}\n$blobUri = ${Env:blobUrl}\n$localFilePath = '/tmp/temp.file'\nfunction DownloadJarFromBlob([string]$blobUri, [string]$localOutputFilePath) {\n	$BlobFile = [Microsoft.WindowsAzure.Storage.Blob.CloudBlob]::new($blobUri)\n	$DownLoadTask = $BlobFile.DownloadToFileAsync($localOutputFilePath, 4)\n	$DownLoadTask\n}\n\nfunction UploadToFileShare([string]$uploadUri, [string]$localFilePath) {\n	$CloudFile = [Microsoft.WindowsAzure.Storage.File.CloudFile]::New($uploadUri)\n	$UploadTask = $CloudFile.UploadFromFileAsync($localFilePath)\n	$UploadTask\n}\n\nConnect-AzAccount -Identity\nDownloadJarFromBlob $blobUri $localFilePath\nUploadToFileShare $uploadUri $localFilePath",
					"timeout": "PT1H",
				},
			},
		},
	}
	params := map[string]interface{}{
		"userAssignedIdentity": map[string]interface{}{"value": testsuite.userAssignedIdentity},
	}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       to.Ptr(armresources.DeploymentModeIncremental),
		},
	}
	_, err = testutil.CreateDeployment(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName, "Upload_File", &deployment)
	testsuite.Require().NoError(err)

	// From step Deployments_CreateOrUpdate
	deploymentName = "blue"
	deploymentsClientCreateOrUpdateResponsePoller, err = deploymentsClient.BeginCreateOrUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		deploymentName,
		armappplatform.DeploymentResource{
			Properties: &armappplatform.DeploymentResourceProperties{
				DeploymentSettings: &armappplatform.DeploymentSettings{
					CPU: to.Ptr[int32](1),
					EnvironmentVariables: map[string]*string{
						"env": to.Ptr("test"),
					},
					JvmOptions:     to.Ptr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Ptr[int32](3),
					RuntimeVersion: to.Ptr(armappplatform.RuntimeVersionJava8),
				},
				Source: &armappplatform.UserSourceInfo{
					Type:             to.Ptr(armappplatform.UserSourceTypeJar),
					ArtifactSelector: to.Ptr("sub-module-1"),
					RelativePath:     to.Ptr(relativePath),
					Version:          to.Ptr("1.0"),
				},
			},
			SKU: &armappplatform.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, deploymentsClientCreateOrUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Apps_Update
	appsClientUpdateResponsePoller, err = appsClient.BeginUpdate(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		armappplatform.AppResource{
			Identity: &armappplatform.ManagedIdentityProperties{
				Type:        to.Ptr(armappplatform.ManagedIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("principalid"),
				TenantID:    to.Ptr("tenantid"),
			},
			Properties: &armappplatform.AppResourceProperties{
				ActiveDeploymentName: to.Ptr("blue"),
			},
		},
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, appsClientUpdateResponsePoller)
	testsuite.Require().NoError(err)

	// From step Deployments_Restart
	deploymentName = "blue"
	deploymentsClientRestartResponsePoller, err := deploymentsClient.BeginRestart(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		deploymentName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, deploymentsClientRestartResponsePoller)
	testsuite.Require().NoError(err)

	// From step Deployments_Stop
	deploymentName = "blue"
	deploymentsClientStopResponsePoller, err := deploymentsClient.BeginStop(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		deploymentName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, deploymentsClientStopResponsePoller)
	testsuite.Require().NoError(err)

	// From step Deployments_Start
	deploymentName = "blue"
	deploymentsClientStartResponsePoller, err := deploymentsClient.BeginStart(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		deploymentName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, deploymentsClientStartResponsePoller)
	testsuite.Require().NoError(err)

	// From step Deployments_GetLogFileUrl
	deploymentName = "blue"
	_, err = deploymentsClient.GetLogFileURL(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		deploymentName,
		nil)
	testsuite.Require().NoError(err)

	// From step Deployments_List
	deploymentsClientNewListPager := deploymentsClient.NewListPager(testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		&armappplatform.DeploymentsClientListOptions{Version: []string{}})
	for deploymentsClientNewListPager.More() {
		_, err := deploymentsClientNewListPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step Deployments_ListForCluster
	deploymentsClientNewListForClusterPager := deploymentsClient.NewListForClusterPager(testsuite.resourceGroupName,
		testsuite.serviceName,
		&armappplatform.DeploymentsClientListForClusterOptions{Version: []string{}})
	for deploymentsClientNewListForClusterPager.More() {
		_, err := deploymentsClientNewListForClusterPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step Services_List
	servicesClientNewListPager := servicesClient.NewListPager(testsuite.resourceGroupName,
		nil)
	for servicesClientNewListPager.More() {
		_, err := servicesClientNewListPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step Services_ListBySubscription
	servicesClientNewListBySubscriptionPager := servicesClient.NewListBySubscriptionPager(nil)
	for servicesClientNewListBySubscriptionPager.More() {
		_, err := servicesClientNewListBySubscriptionPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step Deployments_Delete
	deploymentName = "blue"
	deploymentsClientDeleteResponsePoller, err := deploymentsClient.BeginDelete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		deploymentName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, deploymentsClientDeleteResponsePoller)
	testsuite.Require().NoError(err)

	// From step CustomDomains_Delete
	domainName = testsuite.dnsCname + "." + testsuite.customDomainName
	customDomainsClientDeleteResponsePoller, err := customDomainsClient.BeginDelete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		domainName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, customDomainsClientDeleteResponsePoller)
	testsuite.Require().NoError(err)

	// From step Apps_Delete
	testsuite.appName = "app01"
	appsClientDeleteResponsePoller, err := appsClient.BeginDelete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		testsuite.appName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, appsClientDeleteResponsePoller)
	testsuite.Require().NoError(err)

	// From step Certificates_Delete
	certificateName = "asc-certificate"
	certificatesClientDeleteResponsePoller, err := certificatesClient.BeginDelete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		certificateName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, certificatesClientDeleteResponsePoller)
	testsuite.Require().NoError(err)

	// From step Services_Delete
	servicesClientDeleteResponsePoller, err := servicesClient.BeginDelete(testsuite.ctx,
		testsuite.resourceGroupName,
		testsuite.serviceName,
		nil)
	testsuite.Require().NoError(err)
	_, err = testutil.PollForTest(testsuite.ctx, servicesClientDeleteResponsePoller)
	testsuite.Require().NoError(err)

	// From step Skus_List
	sKUsClient, err := armappplatform.NewSKUsClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	sKUsClientNewListPager := sKUsClient.NewListPager(nil)
	for sKUsClientNewListPager.More() {
		_, err := sKUsClientNewListPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step Operations_List
	operationsClient, err := armappplatform.NewOperationsClient(testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	operationsClientNewListPager := operationsClient.NewListPager(nil)
	for operationsClientNewListPager.More() {
		_, err := operationsClientNewListPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}
}

func (testsuite *SpringTestSuite) Cleanup() {
	var err error
	// From step delete_cname_record
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"parameters": map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{
				"type":         "string",
				"defaultValue": "$(userAssignedIdentity)",
			},
			"utcValue": map[string]interface{}{
				"type":         "string",
				"defaultValue": "[utcNow()]",
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "delete_cname_record",
				"type":       "Microsoft.Resources/deploymentScripts",
				"apiVersion": "2020-10-01",
				"identity": map[string]interface{}{
					"type": "UserAssigned",
					"userAssignedIdentities": map[string]interface{}{
						"[parameters('userAssignedIdentity')]": map[string]interface{}{},
					},
				},
				"kind":     "AzurePowerShell",
				"location": "[resourceGroup().location]",
				"properties": map[string]interface{}{
					"azPowerShellVersion": "6.2",
					"cleanupPreference":   "OnSuccess",
					"environmentVariables": []interface{}{
						map[string]interface{}{
							"name":  "resourceGroupName",
							"value": testsuite.dnsResourceGroup,
						},
						map[string]interface{}{
							"name":  "dnsCname",
							"value": "asc",
						},
						map[string]interface{}{
							"name":  "dnsZoneName",
							"value": testsuite.customDomainName,
						},
					},
					"forceUpdateTag":    "[parameters('utcValue')]",
					"retentionInterval": "P1D",
					"scriptContent":     "$resourceGroupName = ${Env:resourceGroupName}\n$dnsCNAME = ${Env:dnsCname}\n$dnsZoneName = ${Env:dnsZoneName}\n\nConnect-AzAccount -Identity\n\n$RecordSet = Get-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ResourceGroupName $resourceGroupName -ZoneName $dnsZoneName\n$Result = Remove-AzDnsRecordSet -RecordSet $RecordSet\n$Result",
					"timeout":           "PT1H",
				},
			},
		},
	}
	params := map[string]interface{}{
		"userAssignedIdentity": map[string]interface{}{"value": testsuite.userAssignedIdentity},
	}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       to.Ptr(armresources.DeploymentModeIncremental),
		},
	}
	_, err = testutil.CreateDeployment(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName, "delete_cname_record", &deployment)
	testsuite.Require().NoError(err)
}
