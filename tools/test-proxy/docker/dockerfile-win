FROM mcr.microsoft.com/dotnet/sdk:6.0.101-nanoserver-1809 AS build_env

# copy the code
COPY docker_build/Azure.Sdk.Tools.TestProxy/ /proxyservercode
COPY windows-git-install.ps1 /tempcode/

RUN pwsh /tempcode/windows-git-install.ps1

# publish the package
RUN cd /proxyservercode && dotnet publish -c Release -o /proxyserver -f net6.0

FROM mcr.microsoft.com/dotnet/aspnet:6.0.1-nanoserver-1809 AS build

ENV ProgramFiles="C:\Program Files" \
    # set a fixed location for the Module analysis cache
    PSModuleAnalysisCachePath="C:\Users\Public\AppData\Local\Microsoft\Windows\PowerShell\docker\ModuleAnalysisCache" \
    # Persist %PSCORE% ENV variable for user convenience
    PSCORE="$ProgramFiles\PowerShell\pwsh.exe" \
    # Set the default windows path so we can use it
    WindowsPATH="C:\Windows\system32;C:\Windows" \
    NO_AT_BRIDGE=1 \
    ASPNETCORE_ENVIRONMENT=Development \
    # these environment variables are workarounds for the inability to "trust" a certificate due to permissions issues on the windows platform
    # we would obviously prefer to use...
    # RUN dotnet dev-certs https --trust
    # ...to trust the cert we imported above. However, due to the fact that a UI is REQUIRED to assent to this specific tool, 
    # it won't work on docker. ADDITIONALLY, we can't use the methodology of using powershell to insert into the LocalMachine/Root
    # as even if we surround it in a USER ContainerAdministrator to elevate our access, we STILL hit weird permission denied errors 
    # and he ASP.NET startup still can't load it as a dev certificate. 
    ASPNETCORE_Kestrel__Certificates__Default__Path="/certwork/dotnet-devcert.pfx" \
    ASPNETCORE_Kestrel__Certificates__Default__Password="password"  \
    # this override allows the tool server to listen to traffic over the docker bridge.
    # default URL of localhost:5000 or localhost:50001 are not usable from outside the container
    ASPNETCORE_URLS="http://0.0.0.0:5000;https://0.0.0.0:5001"

USER ContainerAdministrator

# while it may seem a bit strange to use "etc" on a windows container. We are mirroring
# the methodology from the primary container, which is linux.
RUN mkdir certwork & mkdir srv & cd srv & mkdir testproxy
ADD docker_build/dotnet-devcert.pfx certwork

# we still need to import this certificate to ensure it's available to all users. there is _something_ gnarly going on that purely having the cert 
# available through the environment variables is causing some inconsistent weirdness.    
COPY --from=build_env ["C:/Program Files/dotnet/sdk/6.0.101/DotnetTools/dotnet-dev-certs/6.0.1-servicing.21567.14/tools/net6.0/any/", "C:/dotnet-dev-certs/"]
COPY --from=build_env ["C:/git", "C:/git"]

RUN setx /M PATH "C:\git\cmd;%PATH%" && dotnet /dotnet-dev-certs/dotnet-dev-certs.dll https --clean --import /certwork/dotnet-devcert.pfx -p "password"

WORKDIR /proxyserver
ADD host-patcher.cmd .

COPY --from=build_env /proxyserver .

EXPOSE 5001
EXPOSE 5000

ENTRYPOINT ["host-patcher.cmd", "&",  "dotnet", "Azure.Sdk.Tools.TestProxy.dll", "--storage-location", "/srv/testproxy/", "--dump"]
