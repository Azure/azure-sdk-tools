{% macro method_signature() %}
def __init__(
    self,
    {% for parameter in code_model.global_parameters.parameters %}
        {% if parameter.required %}
    {{ parameter.signature(async_mode) }}
        {% endif %}
    {% endfor %}
    {% for parameter in code_model.global_parameters.parameters %}
        {% if not parameter.required %}
    {{ parameter.signature(async_mode) }}
        {% endif %}
    {% endfor %}
    {% for parameter in code_model.global_parameters.service_client_specific_global_parameters %}
    {{ parameter.signature(async_mode) }}
    {% endfor %}
    **kwargs  # type: Any
){{" -> None" if async_mode else "" }}:{% endmacro %}
{# actual template starts here #}
{% set pipeline_client = "ARMPipelineClient" if azure_arm else "PipelineClient" %}
{% set relative_path = ".." if async_mode else "." %}
{% set def = "async def" if async_mode else "def" %}
{% set async_prefix = "Async" if async_mode else "" %}
{% set a_prefix = "a" if async_mode else "" %}
{% set await = "await " if async_mode else "" %}
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

{{ imports }}

class _SDKClient(object):
    def __init__(self, *args, **kwargs):
        """This is a fake class to support current implemetation of MultiApiClientMixin."
        Will be removed in final version of multiapi azure-core based client
        """
        pass

class {{ code_model.service_client.name }}({% if code_model.operation_mixin_group.mixin_operations %}{{ code_model.service_client.name }}OperationsMixin, {% endif %}MultiApiClientMixin, _SDKClient):
    """{{ code_model.service_client.description }}

    This ready contains multiple API versions, to help you deal with all of the Azure clouds
    (Azure Stack, Azure Government, Azure China, etc.).
    By default, it uses the latest API version available on public Azure.
    For production, you should stick to a particular api-version and/or profile.
    The profile sets a mapping between an operation group and its API version.
    The api-version parameter sets the default API version if the operation
    group is not described in the profile.
{% if code_model.global_parameters.parameters %}

{% endif %}
{% for parameter in code_model.global_parameters.parameters %}
    :param {{ parameter.name }}: {{ parameter.description(async_mode) }}
    :type {{ parameter.name }}: {{ parameter.docstring_type(async_mode) }}
{% endfor %}
{% for parameter in code_model.global_parameters.service_client_specific_global_parameters %}
    :param {{ parameter.name }}: {{ parameter.description(async_mode) }}
    :type {{ parameter.name }}: {{ parameter.docstring_type(async_mode) }}
{% endfor %}
    {% if code_model.service_client.has_lro_operations %}
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    {% endif %}
    """

    DEFAULT_API_VERSION = '{{ code_model.mod_to_api_version[code_model.default_api_version] }}'
    _PROFILE_TAG = "{{ code_model.module_name }}.{{ code_model.service_client.name }}"
    LATEST_PROFILE = ProfileDefinition({
        _PROFILE_TAG: {
            None: DEFAULT_API_VERSION,
{% for rt_name, api_version in code_model.last_rt_list|dictsort %}
            '{{ rt_name }}': '{{ code_model.mod_to_api_version[api_version] }}',
{% endfor %}
        }},
        _PROFILE_TAG + " latest"
    )

    {{ method_signature()|indent }}
        {% if not code_model.service_client.base_url %}
        {% for custom_base_url, api_versions in code_model.service_client.custom_base_url_to_api_version|dictsort %}
        {% set if_statement = "if" if loop.first else "elif" %}
        {{ if_statement ~ " api_version == '" ~ api_versions|join("' or api_version == '") ~ "'" }}:
            base_url = {{ custom_base_url }}
        {% endfor %}
        else:
            raise ValueError("API version {} is not available".format(api_version))
        {% else %}
        if not base_url:
            base_url = {{ code_model.service_client.base_url }}
        {% endif %}
        self._config = {{ code_model.service_client.name }}Configuration({{ code_model.global_parameters.call }}{{ ", " if code_model.global_parameters.call }}**kwargs)
        self._client = {{ async_prefix }}{{ code_model.service_client.pipeline_client }}(base_url=base_url, config=self._config, **kwargs)
        super({{ code_model.service_client.name }}, self).__init__(
            api_version=api_version,
            profile=profile
        )

    @classmethod
    def _models_dict(cls, api_version):
        return {k: v for k, v in cls.models(api_version).__dict__.items() if isinstance(v, type)}

    @classmethod
    def models(cls, api_version=DEFAULT_API_VERSION):
        """Module depends on the API version:

        {% for mod_api_version, api_version in code_model.mod_to_api_version|dictsort %}
           * {{ api_version }}: :mod:`{{ mod_api_version }}.models<{{ code_model.module_name }}.{{ mod_api_version }}.models>`
        {% endfor %}
        """
        {% for mod_api_version, api_version in code_model.mod_to_api_version|dictsort %}
        {% set if_statement = "if" if loop.first else "elif" %}
        {{if_statement }} api_version == '{{ api_version }}':
            from {{ relative_path }}{{ mod_api_version }} import models
            return models
        {% endfor %}
        raise ValueError("API version {} is not available".format(api_version))
    {% for operation_group in code_model.operation_groups %}

    @property
    def {{ operation_group.name }}(self):
        """Instance depends on the API version:

        {% for api in operation_group.available_apis | sort %}
           * {{ code_model.mod_to_api_version[api] }}: :class:`{{ operation_group.class_name(api) }}<{{ code_model.module_name }}.{{ api }}{{ ".aio" if async_mode else "" }}.operations.{{ operation_group.class_name(api) }}>`
        {% endfor %}
        """
        api_version = self._get_api_version('{{ operation_group.name }}')
        {% for api in operation_group.available_apis | sort %}
        {% set if_statement = "if" if loop.first else "elif" %}
        {{ if_statement }} api_version == '{{ code_model.mod_to_api_version[api] }}':
            from {{ relative_path }}{{ api }}.{{ "aio." if async_mode else "" }}operations import {{ operation_group.class_name(api) }} as OperationClass
        {% endfor %}
        else:
            raise ValueError("API version {} does not have operation group '{{ operation_group.name }}'".format(api_version))
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)))
    {% endfor %}

    {{ def }} close(self):
        {{ await }}self._client.close()
    {{ def }} __{{ a_prefix }}enter__(self):
        {{ await }}self._client.__{{ a_prefix }}enter__()
        return self
    {{ def }} __{{ a_prefix }}exit__(self, *exc_details):
        {{ await }}self._client.__{{ a_prefix }}exit__(*exc_details)
