parameters:
  - name: TargetDirectory
    type: string
  - name: CustomTestSteps
    type: object
    default: []
  - name: EnvVars
    type: object
    default: {}
  - name: TargetTags
    type: string
    default: ''

variables:
  - template: /eng/pipelines/templates/variables/globals.yml

stages:
  - stage: 'Test'
    jobs:
      - job: 'Test'

        strategy:
          matrix:
            Windows:
              Pool: 'azsdk-pool-mms-win-2019-general'
              Image: 'MMS2019'
            Linux:
              Pool: 'azsdk-pool-mms-ubuntu-2004-general'
              Image: 'MMSUbuntu20.04'
            Mac:
              Pool: 'Azure Pipelines'
              Image: 'macos-11'

        pool:
          name: $(Pool)
          vmImage: $(Image)

        steps:
          - pwsh: |
              Install-Module -Name Pester -Force
            displayName: Install Pester

          # default test steps
          - ${{ if eq(length(parameters.CustomTestSteps), 0) }}:
            - pwsh: |
                $tags = "${{ parameters.TargetTags }}" -Split "," | ForEach-Object { return $_.Trim() }

                $config = New-PesterConfiguration
                $config.CodeCoverage.Enabled = $true
                $config.TestResult.Enabled = $true

                if ($tags) {
                  $config.Filter.Tag = $tags
                }

                Invoke-Pester -Configuration $config
              displayName: Run Tests
              env: ${{ parameters.EnvVars }}
              workingDirectory: $(Build.SourcesDirectory)/${{ parameters.TargetDirectory }}

          - ${{ if not(eq(length(parameters.CustomTestSteps), 0)) }}:
            - ${{ parameters.CustomTestSteps }}

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: $(Build.SourcesDirectory)/${{ parameters.TargetDirectory }}/testResults.xml
              testRunTitle: 'Tests_$(Image)'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage to Azure DevOps'
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(Build.SourcesDirectory)/${{ parameters.TargetDirectory }}/coverage.xml'
              pathToSources: '$(Build.SourcesDirectory)/${{ parameters.TargetDirectory }}'
