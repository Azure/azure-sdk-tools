[
    {
        "testcase": "few_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async",
                        "python_design.html#python-namespaces-async"
                    ],
                    "line_no": 78,
                    "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatchingAsyncClient(ClinicalMatchingClientOperationsMixin): implements AsyncContextManager",
                    "suggestion": "Move the async client into an '.aio' sub-namespace (e.g. azure.healthinsights.clinicalmatching.aio) and rename the class to 'ClinicalMatchingClient' so that both sync and async clients share the same client name.",
                    "comment": "Async clients should use the same client name as the synchronous version and reside in an '.aio' namespace. Using 'ClinicalMatchingAsyncClient' in the same namespace violates the naming and namespace guidelines."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 91,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "Add full PEP484 type annotations to all parameters and the return type, for example: \n\n@overload\nasync def begin_match_trials(self, body: Union[TrialMatcherData, JSON, IO], *, content_type: str = \"application/json\", repeatability_first_sent: Optional[datetime] = None, repeatability_request_id: Optional[str] = None, **kwargs: Any) -> LROPoller[TrialMatcherResult]:\n    ...",
                    "comment": "Public async methods must include proper type hints. The async overloads for begin_match_trials are missing type annotations, which violates PEP484 guidelines."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async",
                        "python_design.html#python-namespaces-async"
                    ],
                    "line_no": 78,
                    "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatchingAsyncClient(ClinicalMatchingClientOperationsMixin): implements AsyncContextManager",
                    "suggestion": "Rename the asynchronous client to use the same client name as the synchronous version (e.g. 'ClinicalMatchingClient') and move it to the 'azure.healthinsights.clinicalmatching.aio' namespace.",
                    "comment": "Async clients in Azure SDK should use the same client name as their sync counterparts and be placed in an '.aio' subpackage. The current naming and namespace placement violates both of these guidelines."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-pep484"
                    ],
                    "line_no": 91,
                    "bad_code": "async def begin_match_trials(",
                    "suggestion": "Add complete PEP484 type hints for all parameters and the return type in the async 'begin_match_trials' overloads and implementation (e.g. annotate 'body', 'content_type', etc. and specify the return type as 'LROPoller[TrialMatcherResult]').",
                    "comment": "Public async methods must include PEP484 type hints. The async overloads for 'begin_match_trials' are missing type annotations, which violates the guidelines."
                }
            ]
        },
        "total_violations": 2,
        "violations_found": 2,
        "true_positives": 2,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 100.0,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 5,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately identifying and addressing the guidelines and violations mentioned, without adding unsupported information or omitting critical details.",
        "overall_score": 100
    },
    {
        "testcase": "many_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-naming",
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 6,
                    "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatching(ClinicalMatchingClientOperationsMixin): implements ContextManager",
                    "suggestion": "class azure.healthinsights.clinicalmatching.ClinicalMatchingClient(ClinicalMatchingClientOperationsMixin): implements ContextManager",
                    "comment": "Service client types must have a 'Client' suffix and the sync and async client classes should share the same name."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-auth-credential-azure-core"
                    ],
                    "line_no": 11,
                    "bad_code": "api_key: str",
                    "suggestion": "Use a credential object from azure.core.credentials (e.g., AzureKeyCredential) instead of a raw string for the api key.",
                    "comment": "Authentication parameters should leverage azure-core credential classes rather than using a simple string."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-lro-poller-begin-naming"
                    ],
                    "line_no": 66,
                    "bad_code": "def create_trials(",
                    "suggestion": "def begin_create_trials(",
                    "comment": "Long running operations should use a 'begin_' prefix. Rename 'create_trials' to 'begin_create_trials'."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-options-naming"
                    ],
                    "line_no": 70,
                    "bad_code": "options: Optional[CreateTrialsOptions] = None,",
                    "suggestion": "Remove the 'options' bag parameter and instead expose each optional parameter directly as keyword-only arguments.",
                    "comment": "The use of an 'options bag' (CreateTrialsOptions) is disallowed. Optional parameters should be provided as individual keyword-only arguments."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-lro-poller-begin-naming"
                    ],
                    "line_no": 181,
                    "bad_code": "async def create_trials(",
                    "suggestion": "async def begin_create_trials(",
                    "comment": "Long running operations should use a 'begin_' prefix. Rename the async 'create_trials' method to 'begin_create_trials'."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix"
                    ],
                    "line_no": 102,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Methods that enumerate resources should be prefixed with 'list_'. Consider renaming 'trials' to 'list_trials' and returning an ItemPaged type."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix"
                    ],
                    "line_no": 217,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(",
                    "comment": "Methods that enumerate resources should be prefixed with 'list_'. Consider renaming 'trials' to 'list_trials' and returning an ItemPaged type."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 108,
                    "bad_code": "def erase_trials(",
                    "suggestion": "def delete_trials(",
                    "comment": "Deletion operations should use a preferred verb like 'delete_' instead of 'erase_'."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 998,
                    "bad_code": "ivar eligibilityCriteriaEvidence: Optional[str]",
                    "suggestion": "ivar eligibility_criteria_evidence: Optional[str]",
                    "comment": "Variable names should use snake_case instead of camelCase."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1000,
                    "bad_code": "ivar patientDataEvidence: Optional[ClinicalNoteEvidence]",
                    "suggestion": "ivar patient_data_evidence: Optional[ClinicalNoteEvidence]",
                    "comment": "Variable names should use snake_case instead of camelCase."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-vars-naming"
                    ],
                    "line_no": 1001,
                    "bad_code": "ivar patientInfoEvidence: Optional[ClinicalCodedElement]",
                    "suggestion": "ivar patient_info_evidence: Optional[ClinicalCodedElement]",
                    "comment": "Variable names should use snake_case instead of camelCase."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-naming",
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 6,
                    "bad_code": "class azure.healthinsights.clinicalmatching.ClinicalMatching(ClinicalMatchingClientOperationsMixin): implements ContextManager",
                    "suggestion": "Rename the sync client to have the same name as the async client (e.g. ClinicalMatchingClient) so that both sync and async clients share the same base name.",
                    "comment": "Service client types should have a 'Client' suffix. Rename the synchronous client to 'ClinicalMatchingClient'. The sync and async clients must use the same client name across their respective namespaces."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-options-naming"
                    ],
                    "line_no": 70,
                    "bad_code": "options: Optional[CreateTrialsOptions] = None,",
                    "suggestion": "Remove the options bag parameter and expose individual keyword-only arguments for each optional setting.",
                    "comment": "Do not use an options bag object to group optional parameters; instead, each optional parameter should be a keyword-only argument."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-service-verbs"
                    ],
                    "line_no": 108,
                    "bad_code": "def erase_trials(",
                    "suggestion": "def delete_trials(",
                    "comment": "Deletion operations should use the preferred verb 'delete_' rather than 'erase_'."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-paged-prefix",
                        "python_design.html#python-response-paged-protocol"
                    ],
                    "line_no": 102,
                    "bad_code": "def trials(",
                    "suggestion": "def list_trials(\u2026) -> ItemPaged[TrialMatcherResult]:",
                    "comment": "Methods that enumerate resources should be prefixed with 'list_' and return a value that implements the ItemPaged protocol rather than a plain list."
                }
            ]
        },
        "total_violations": 11,
        "violations_found": 4,
        "true_positives": 4,
        "false_positives": 0,
        "false_negatives": 7,
        "percent_coverage": 36.3636363636,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 4,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, addressing specific violations and providing corrections that align with the guidelines provided. It does not introduce any unsupported information or omit any critical details from the CONTEXT.",
        "overall_score": 53
    },
    {
        "testcase": "no_violations",
        "expected": {
            "status": "Success",
            "violations": []
        },
        "actual": {
            "status": "Success",
            "violations": []
        },
        "total_violations": 0,
        "violations_found": 0,
        "true_positives": 0,
        "false_positives": 0,
        "false_negatives": 0,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 5,
        "groundedness": 1,
        "groundedness_reason": "The RESPONSE is completely ungrounded because there is no CONTEXT provided to relate it to, making it impossible for the RESPONSE to adhere to any information.",
        "overall_score": 100.0
    },
    {
        "testcase": "multiple_same_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 194,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.AgeUnit(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.AgeUnit(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 270,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalDocumentType(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 307,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialAcceptedSex(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 393,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPhase(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 402,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialPurpose(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 415,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialRecruitmentStatus(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 488,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialSource(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialSource(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 493,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.ClinicalTrialStudyType(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 568,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.DocumentContentSourceType(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 573,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.DocumentType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.DocumentType(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 720,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.JobStatus(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.JobStatus(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-string"
                    ],
                    "line_no": 899,
                    "bad_code": "class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(Enum):",
                    "suggestion": "class azure.healthinsights.clinicalmatching.models.TrialMatcherInferenceType(str, Enum):",
                    "comment": "Enums should subclass str to be extensible as per guidelines."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 139,
                    "bad_code": "def send_request(",
                    "suggestion": "async def send_request(",
                    "comment": "In the async client, all service methods should use the async/await keywords. The send_request method is defined with a regular def instead of async def, which violates the async client guidelines."
                }
            ]
        },
        "total_violations": 12,
        "violations_found": 1,
        "true_positives": 0,
        "false_positives": 1,
        "false_negatives": 12,
        "percent_coverage": 0.0,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 1,
        "groundedness": 3,
        "groundedness_reason": "The RESPONSE accurately describes a coding error and provides a suggestion, but this information is not supported by the CONTEXT, which only mentions using extensible enumerations.",
        "overall_score": 0
    },
    {
        "average_score": 63.25,
        "total_evals": 4
    }
]