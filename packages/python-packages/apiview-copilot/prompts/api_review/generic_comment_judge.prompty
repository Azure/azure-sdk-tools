---
name: Judge Generic APIView Review Comments
description: A prompt that judges generic API review comments to ensure they are not contradicting internal guidance.
authors:
  - tjprescott
version: 1.0.0
model:
  api: chat
  configuration:
    type: azure_openai
    azure_endpoint: ${env:AZURE_OPENAI_ENDPOINT}
    azure_deployment: gpt-4.1
    api_version: 2025-03-01-preview
  parameters:
    temperature: 0
    top_p: 1
    stop: []
    frequency_penalty: 0
    presence_penalty: 0
    max_tokens: 16384
sample:
  language: Python
  content: |
    {
      "line_no": 4,
      "bad_code": "def foo(self, a: str, b: str, *, c: ..., d: ..., e: ...) -> Foo:",
      "suggestion": "def foo(self, a: str, b: str, *, options: FooOptions) -> Foo:",
      "comment": "You have many optional keyword-only arguments. Consider organizing them into a configuration object.",
      "source": "generic"
    }
  context: |
    > **id:** python_design.html#python-client-constructor-policy-arguments<br>**score:** 69<br>
    ## Accept and pass optional request options as keyword arguments

    DO accept optional default request options as keyword arguments and pass them along to its pipeline policies. See Common service operation parameters for more information.

    ### GOOD Examples

    ```python
    # Change default number of retries to 18 and overall timeout to 2s.
    client = ExampleClient('https://contoso.com/xmpl',
                          DefaultAzureCredential(),
                          max_retries=18,
                          timeout=2)
    ```


    > **id:** python_design.html#python-client-service-per-call-args<br>**score:** 64<br>
    ## Provide Keyword-only Arguments for Per-request Policy Options

    DO provide keyword-only arguments that override per-request policy options. The name of the parameters MUST mirror the name of the arguments provided in the client constructor or factory methods.
    For a full list of supported optional arguments used for pipeline policy and transport configuration (both at the client constructor and per service operation), see the Azure Core developer documentation (https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md) 


    > **id:** 274d2f0e-330b-45bf-a52a-5a1a37976d01<br>**score:** 62<br>
    ## Make optional parameters keyword-only in overloads for better API design

    There was a discussion about making certain parameters keyword-only in the Python API for azure-appconfiguration, particularly for optional parameters like 'label_filter' and 'accept_datetime'. The rationale was to improve API evolution, readability, and resilience, as well as to correct a previous mistake where these were positional. It was agreed that optional parameters should be keyword-only in the overloads, while still being supported as positional in the implementation. No changes were made to the implementation, only to the API surface and overloads.

    ### BAD Examples

    ```python
        label_filter: Optional[str] = None, 
    ```


    > **id:** 6ef4fffe-f83b-46a5-9d18-6e03c303dfbb<br>**score:** 60<br>
    ## Potential for required arguments to become optional

    It was noted that the credential currently requires four keyword-only arguments, but there is potential for these to become optional in the future depending on discussions with the Azure Pipelines team about pre-populating environment variables. No immediate action was taken.

    ### GOOD Examples

    ```python
        system_access_token: str, 
    ```


    > **id:** python_design.html#python-models-input-constructor<br>**score:** 56<br>
    ## Craft user-facing model constructors with minimal required and keyword-only optional arguments

    DO craft a constructor for models that are intended to be instantiated by a user (i.e. non-result types) with minimal required information and optional information as keyword-only arguments.


    > **id:** 0aa42016-e6b1-4142-8b87-504576cca9b0<br>**score:** 55<br>
    ## Remove unused **_kwargs and update optional parameters to keyword-only

    The '**_kwargs' parameter was removed entirely due to linting errors when unused, and optional parameters were updated to be keyword-only. The team is reviewing the PR for final resolution.

    ### BAD Examples

    ```python
        **_kwargs
    ```


    > **id:** 4582e6f3-9cf4-4346-82f5-68a4b7906534<br>**score:** 54<br>
    ## Align classmethod and constructor parameters

    It was clarified that the classmethod should support the same optional parameters as the constructor, not necessarily all keyword arguments. A PR was planned to demonstrate the correct approach. The outcome was to align the classmethod's parameters with the constructor's optional parameters.

    ### BAD Examples

    ```python
        **kwargs: Any
    ```


    > **id:** python_implementation.html#python-codestyle-long-args<br>**score:** 54<br>
    ## Avoid methods with more than five positional parameters

    YOU SHOULD NOT have methods that require more than five positional parameters. Optional/flag parameters can be accepted using keyword-only arguments, or **kwargs.

    See TODO: insert link for general guidance on positional vs. optional parameters here.


    > **id:** python_design.html#python-client-immutable<br>**score:** 52<br>
    ## Make the service client immutable and require only minimal construction information

    DO make the service client immutable. See the Client Immutability section for more information.

    Only the minimal information needed to connect and interact with the service should be required in order to construct a client instance. All additional information should be optional and passed in as optional keyword-only arguments.


    > **id:** e2a9a6ea-731c-4d09-9daa-2cbc760a0bed<br>**score:** 47<br>
    ## Align ivar types with __init__ kwargs in Python SDK

    It was identified that certain instance variables in the Python SDK should be marked as Optional to match the __init__ keyword arguments. The team agreed to update the documentation for these variables accordingly.

    ### BAD Examples

    ```python
    ivar index_document: str

    ```


    > **id:** 12ebfe60-388a-4896-9a16-80a050d9e942<br>**score:** 44<br>
    ## Parameter renaming for brevity (virtual_machine_configuration to vm_config)

    A suggestion was made to rename the virtual_machine_configuration parameter to vm_config for brevity, and it was confirmed that this update would be made.

    ### BAD Examples

    ```python
        virtual_machine_configuration: Optional[VirtualMachineConfiguration] = ..., 
    ```


    > **id:** 053460f3-b04a-4f3b-82d5-fe5229eb1b34<br>**score:** 41<br>
    ## Renaming and clarifying dynamic options parameters for prompt configuration

    Naming and typing of keyword arguments for prompt options in the simulator were discussed. The current use of `*_kwargs` was considered non-idiomatic, and it was suggested to use `_options` as a prefix instead. The team agreed to rename the parameters to `_options_query_response_generating_prompty` and `_options_user_simulator_prompty`, acknowledging that further interface improvements may be made before GA. Typing was deemed impractical due to the dynamic nature of the options.

    ### BAD Examples

    ```python
        query_response_generating_prompty_kwargs: Dict[str, Any] = {}, 
    ```


    > **id:** a66d4a63-44cb-49c5-8f11-2fa501ff30d2<br>**score:** 40<br>
    ## Clarification and documentation of kwargs usage and type hints

    A request was made to clarify the purpose and usage of 'kwargs' in the code, including where they are passed and to add missing type hints. The rationale was to improve documentation and type safety. The end result was a recommendation to explicitly list all public keyword arguments in docstrings and remove documentation for private/internal kwargs, with iterative improvements suggested.

    ### GOOD Examples

    ```python
        kwargs = ..., 
    ```


    > **id:** a730f592-a705-468e-9664-27454e626253<br>**score:** 40<br>
    ## Use Optional for config parameter type annotation

    Recommended updating the type annotation for the config parameter to Optional[StorageConfiguration] to properly indicate that None is allowed. Feedback was consolidated for clarity.

    ### BAD Examples

    ```python
        config: StorageConfiguration = None, 
    ```


    > **id:** fdb37ff3-d255-4675-b2c2-3d1114e8c6cc<br>**score:** 38<br>
    ## Use of **kwargs in evaluator methods is justified for configuration passthrough

    The inclusion of **kwargs in evaluator __call__ methods was questioned. The rationale is to support passthrough for network configuration options. The approach was confirmed as necessary for flexibility.

    ### GOOD Examples

    ```python
        **kwargs
    ```


    > **id:** 3d9b41c9-344d-4fa5-9a83-be2510cd5516<br>**score:** 38<br>
    ## No **kwargs for model constructors in Python

    There was a discussion about whether to add **kwargs to model constructors in the Python azure-appconfiguration package. The decision was not to add **kwargs to these constructors.

    ### GOOD Examples

    ```python
        tags: Optional[Dict[str, str]] = ...
    ```


    > **id:** python_implementation.html#python-codestyle-optional-args<br>**score:** 35<br>
    ## Use keyword-only arguments for optional or less-used arguments in Python 3

    DO use keyword-only arguments for optional or less-often-used arguments for modules that only need to support Python 3.

    Note that you can even have required keyword-only arguments.

    ### GOOD Examples

    ```python
    def foo(a, b, *, c, d=None):
        # Note that I can even have required keyword-only arguments...
        ...
    ```
---
system:
  You are a helpful AI that reviews {{language}} API design comments from another AI. Your role is to flag any comment that runs contrary to the guidance provided in context. You will receive:
  1. A proposed comment to review
  2. The most relevant guidance based on that comment.

  # OUTPUT REQUIREMENTS
  
  - You must output the following schema, but NO DOT includes the ```json or ``` tags:
  ```json
  {
    "is_valid": boolean,
    "rationale": string
  }
  ```
  - `is_valid` should be `true` if the comment is consistent with the context, or `false` if it contradicts the context.
  - `rationale` should explain why the comment is valid or invalid, referencing relevant parts of the context

user:
  Please judge the following {{language}} comment:
  # PROPOSED COMMENT
  {{content}}

  Check if it aligns with or contradicts the provided context:
  # CONTEXT
  {{context}}

  # OUTPUT
  Out using the schema provided.