//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute_test

import (
	"context"
	"net/http"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/compute/armcompute"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/stretchr/testify/suite"
	"golang.org/x/net/http2"
)

type MockTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *MockTestSuite) SetupSuite() {
	mockHost := testutil.GetEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	err := http2.ConfigureTransport(tr)
	testsuite.Require().NoError(err, "Failed to configure http2 transport")
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	testsuite.cred = &testutil.FakeCredential{}

	testsuite.options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func TestMockTest(t *testing.T) {
	suite.Run(t, new(MockTestSuite))
}

func (testsuite *MockTestSuite) TestOperations_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestAvailabilitySets_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an availability set."},
	})
	client, err := armcompute.NewAvailabilitySetsClient("1", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myAvailabilitySet",
		armcompute.AvailabilitySet{
			Location: to.Ptr("westus"),
			AdditionalProperties: map[string]*string{
				"anyProperty": to.Ptr("fakeValue"),
			},
			Properties: &armcompute.AvailabilitySetProperties{
				PlatformFaultDomainCount:  to.Ptr[int32](2),
				PlatformUpdateDomainCount: to.Ptr[int32](20),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnAvailabilitySet.json")
	// Response check
	exampleRes := armcompute.AvailabilitySet{
		Name:     to.Ptr("myAvailabilitySet"),
		Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("Classic"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.AvailabilitySet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AvailabilitySet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnAvailabilitySet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestAvailabilitySets_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestAvailabilitySets_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestAvailabilitySets_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestAvailabilitySets_ListBySubscription() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailabilitySetsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List availability sets in a subscription."},
	})
	client, err := armcompute.NewAvailabilitySetsClient("{subscriptionId}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListBySubscriptionPager(&armcompute.AvailabilitySetsClientListBySubscriptionOptions{Expand: to.Ptr("Faked for test: +ge+2020, %3E2012")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailabilitySetsInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.AvailabilitySetListResult{
			Value: []*armcompute.AvailabilitySet{
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("australiasoutheast"),
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						VirtualMachines: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
							}},
					},
					SKU: &armcompute.SKU{
						Name: to.Ptr("Classic"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("australiasoutheast"),
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						VirtualMachines: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
							}},
					},
					SKU: &armcompute.SKU{
						Name: to.Ptr("Classic"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"{tagName}": to.Ptr("{tagValue}"),
					},
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						VirtualMachines:           []*armcompute.SubResource{},
					},
					SKU: &armcompute.SKU{
						Name: to.Ptr("Classic"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"{tagName}": to.Ptr("{tagValue}"),
					},
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						VirtualMachines:           []*armcompute.SubResource{},
					},
					SKU: &armcompute.SKU{
						Name: to.Ptr("Classic"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilitySetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilitySetListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailabilitySetsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestAvailabilitySets_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestAvailabilitySets_ListAvailableSizes() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestProximityPlacementGroups_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"$(resourceName)",
		armcompute.ProximityPlacementGroup{
			Location: to.Ptr("westus"),
			Properties: &armcompute.ProximityPlacementGroupProperties{
				ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAProximityPlacementGroup.json")
	// Response check
	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestProximityPlacementGroups_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PatchAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myProximityPlacementGroup",
		armcompute.ProximityPlacementGroupUpdate{
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PatchAProximityPlacementGroup.json")
	// Response check
	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PatchAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestProximityPlacementGroups_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Delete(ctx,
		"myResourceGroup",
		"$(resourceName)",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteAProximityPlacementGroup.json")
}

func (testsuite *MockTestSuite) TestProximityPlacementGroups_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myProximityPlacementGroup",
		&armcompute.ProximityPlacementGroupsClientGetOptions{IncludeColocationStatus: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAProximityPlacementGroup.json")
	// Response check
	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
			VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
			VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestProximityPlacementGroups_ListBySubscription() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.ProximityPlacementGroupListResult{
			Value: []*armcompute.ProximityPlacementGroup{
				{
					Name:     to.Ptr("myProximityPlacementGroup"),
					Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.ProximityPlacementGroupProperties{
						AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
						ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
						VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
						VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProximityPlacementGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProximityPlacementGroupListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestProximityPlacementGroups_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInAResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.ProximityPlacementGroupListResult{
			Value: []*armcompute.ProximityPlacementGroup{
				{
					Name:     to.Ptr("myProximityPlacementGroup"),
					Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.ProximityPlacementGroupProperties{
						AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
						ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
						VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
						VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProximityPlacementGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProximityPlacementGroupListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListProximityPlacementGroupsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDedicatedHostGroups_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host group."},
	})
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		armcompute.DedicatedHostGroup{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"department": to.Ptr("finance"),
			},
			Properties: &armcompute.DedicatedHostGroupProperties{
				PlatformFaultDomainCount:  to.Ptr[int32](3),
				SupportAutomaticPlacement: to.Ptr(true),
			},
			Zones: []*string{
				to.Ptr("1")},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHostGroup.json")
	// Response check
	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
			"owner":      to.Ptr("myCompany"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHostGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHostGroup)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDedicatedHostGroups_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDedicatedHostGroups_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDedicatedHostGroups_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a dedicated host group."},
	})
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscriptionId}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		&armcompute.DedicatedHostGroupsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHostGroup.json")
	// Response check
	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			Hosts: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost1"),
				},
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost2"),
				}},
			InstanceView: &armcompute.DedicatedHostGroupInstanceView{
				Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
					{
						AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost1"),
					},
					{
						AssetID: to.Ptr("f293d4ac-5eea-4be2-b0c0-0fcaa09aebf8"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost2"),
					}},
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("3")},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHostGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHostGroup)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDedicatedHostGroups_ListByResourceGroup() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDedicatedHostGroups_ListBySubscription() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDedicatedHosts_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host ."},
	})
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		"myDedicatedHost",
		armcompute.DedicatedHost{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"department": to.Ptr("HR"),
			},
			Properties: &armcompute.DedicatedHostProperties{
				PlatformFaultDomain: to.Ptr[int32](1),
			},
			SKU: &armcompute.SKU{
				Name: to.Ptr("DSv3-Type1"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json")
	// Response check
	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myDedicatedHost"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(false),
			HostID:               to.Ptr("{GUID}"),
			LicenseType:          to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
			PlatformFaultDomain:  to.Ptr[int32](1),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHost) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHost)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateADedicatedHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDedicatedHosts_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDedicatedHosts_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDedicatedHosts_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dedicated host."},
	})
	client, err := armcompute.NewDedicatedHostsClient("{subscriptionId}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		"myHost",
		&armcompute.DedicatedHostsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHost.json")
	// Response check
	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myHost"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(true),
			HostID:               to.Ptr("{GUID}"),
			InstanceView: &armcompute.DedicatedHostInstanceView{
				AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
				AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
					AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
						{
							Count:  to.Ptr[float64](10),
							VMSize: to.Ptr("Standard_A1"),
						}},
				},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					},
					{
						Code:          to.Ptr("HealthState/available"),
						DisplayStatus: to.Ptr("Host available"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					}},
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			ProvisioningTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-27T01:02:38.3138469+00:00"); return t }()),
			VirtualMachines: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/vm1"),
				}},
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHost) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHost)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetADedicatedHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDedicatedHosts_ListByHostGroup() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSSHPublicKeys_ListBySubscription() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSSHPublicKeys_ListByResourceGroup() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSSHPublicKeys_Create() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new SSH public key resource."},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Create(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		armcompute.SSHPublicKeyResource{
			Location: to.Ptr("westus"),
			Properties: &armcompute.SSHPublicKeyResourceProperties{
				PublicKey: to.Ptr("{ssh-rsa public key}"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnSshPublicKey.json")
	// Response check
	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SSHPublicKeyResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnSshPublicKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSSHPublicKeys_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSSHPublicKeys_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSSHPublicKeys_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAnSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an ssh public key."},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscriptionId}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAnSshPublicKey.json")
	// Response check
	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SSHPublicKeyResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetAnSshPublicKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSSHPublicKeys_GenerateKeyPair() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GenerateSshKeyPair.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate an SSH key pair."},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GenerateKeyPair(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GenerateSshKeyPair.json")
	// Response check
	exampleRes := armcompute.SSHPublicKeyGenerateKeyPairResult{
		ID:         to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
		PrivateKey: to.Ptr("{ssh private key}"),
		PublicKey:  to.Ptr("{ssh-rsa public key}"),
	}
	if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyGenerateKeyPairResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SSHPublicKeyGenerateKeyPairResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GenerateSshKeyPair.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineExtensionImages_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineExtensionImages_ListTypes() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineExtensionImages_ListVersions() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineExtensions_CreateOrUpdate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineExtensions_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineExtensions_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineExtensions_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineExtensions_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineImages_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineImages_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineImages_ListOffers() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineImages_ListPublishers() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineImagesEdgeZone_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineImagesEdgeZone_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineImagesEdgeZone_ListOffers() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineImagesEdgeZone_ListPublishers() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestUsage_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_ListByLocation() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachinesInASubscriptionByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the virtual machines under the specified subscription for the specified location."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscriptionId}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByLocationPager("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachinesInASubscriptionByLocation.json")
		// Response check
		pagerExampleRes := armcompute.VirtualMachineListResult{
			Value: []*armcompute.VirtualMachine{
				{
					Name:     to.Ptr("{virtualMachineName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"RG":      to.Ptr("rg"),
						"testTag": to.Ptr("1"),
					},
					Properties: &armcompute.VirtualMachineProperties{
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
						},
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("Test"),
							Secrets:                  []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								EnableAutomaticUpdates: to.Ptr(true),
								ProvisionVMAgent:       to.Ptr(true),
							},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{},
							ImageReference: &armcompute.ImageReference{
								Offer:     to.Ptr("WindowsServer"),
								Publisher: to.Ptr("MicrosoftWindowsServer"),
								SKU:       to.Ptr("2012-R2-Datacenter"),
								Version:   to.Ptr("4.127.20170406"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("test"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiskSizeGB:   to.Ptr[int32](127),
								OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
							},
						},
						VMID: to.Ptr("{vmId}"),
					},
				},
				{
					Name:     to.Ptr("{virtualMachineName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"RG":      to.Ptr("rg"),
						"testTag": to.Ptr("1"),
					},
					Properties: &armcompute.VirtualMachineProperties{
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
						},
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("Test"),
							Secrets:                  []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								EnableAutomaticUpdates: to.Ptr(true),
								ProvisionVMAgent:       to.Ptr(true),
							},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{},
							ImageReference: &armcompute.ImageReference{
								Offer:     to.Ptr("WindowsServer"),
								Publisher: to.Ptr("MicrosoftWindowsServer"),
								SKU:       to.Ptr("2012-R2-Datacenter"),
								Version:   to.Ptr("4.127.20170406"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("test"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiskSizeGB:   to.Ptr[int32](127),
								OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
							},
						},
						VMID: to.Ptr("{vmId}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachinesInASubscriptionByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_Capture() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting assessmentMode of ImageDefault."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json")
	// Response check
	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting patchMode of ImageDefault."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						PatchSettings: &armcompute.LinuxPatchSettings{
							PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
							PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with Uefi Settings of secureBoot and vTPM."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr("TrustedLaunch"),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windowsserver-gen2preview-preview"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows10-tvm"),
						Version:   to.Ptr("18363.592.2001092016"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr("TrustedLaunch"),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windowsserver-gen2preview-preview"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows10-tvm"),
					Version:   to.Ptr("18363.592.2001092016"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithUefiSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with UserData"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("{vm-name}"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("vmOSdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("{vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/{vm-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAVmWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with network interface configuration"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
						{
							Name: to.Ptr("{nic-config-name}"),
							Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
									{
										Name: to.Ptr("{ip-config-name}"),
										Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
											Primary: to.Ptr(true),
											PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
												Name: to.Ptr("{publicIP-config-name}"),
												Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
													DeleteOption:             to.Ptr(armcompute.DeleteOptionsDetach),
													PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodStatic),
												},
												SKU: &armcompute.PublicIPAddressSKU{
													PublicIPAddressSKUName: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
													PublicIPAddressSKUTier: to.Ptr(armcompute.PublicIPAddressSKUTierGlobal),
												},
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/toBeCreatedNetworkInterface"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithNetworkInterfaceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting assessmentMode of ImageDefault."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByOS."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByPlatform and enableHotpatching set to true."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							EnableHotpatching: to.Ptr(true),
							PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of Manual."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModeOfManual.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
							PatchMode:      to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image vm from an unmanaged generalized os image."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
					},
				},
			},
			VMID: to.Ptr("926cd555-a07c-4ff5-b214-4aa4dd09d79b"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image vm with unmanaged os and data disks."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd"),
							},
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd"),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("dataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk0.vhd"),
						},
					},
					{
						Name:         to.Ptr("dataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk1.vhd"),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
					},
				},
			},
			VMID: to.Ptr("5230a749-2f68-4830-900b-702182d32e63"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a custom image."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromACustomImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a generalized shared image."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromAGeneralizedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a specialized shared image."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmFromASpecializedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in a Virtual Machine Scale Set with customer assigned platformFaultDomain."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				PlatformFaultDomain: to.Ptr[int32](1),
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				VirtualMachineScaleSet: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VirtualMachineScaleSet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myExistingFlexVmss"),
			},
			VMID: to.Ptr("7cce54f2-ecd3-4ddd-a8d9-50984faa3918"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in an availability set."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				AvailabilitySet: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}"),
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/NSGEXISTINGAS"),
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmInAnAvailabilitySet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with DiskEncryptionSet resource id in the os disk and data disk."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskencryptionset-name}"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithDiskEncryptionSetResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Host Encryption using encryptionAtHost property."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("$(fakeStepVar)"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("$(fakeScenarioVar)"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Scheduled Events Profile"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT10M"),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
				TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
					Enable:           to.Ptr(true),
					NotBeforeTimeout: to.Ptr("PT10M"),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithScheduledEventsProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with a marketplace image plan."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithAMarketplaceImagePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with an extensions time budget."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				ExtensionsTimeBudget: to.Ptr("PT30M"),
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT30M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithExtensionsTimeBudget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with boot diagnostics."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with empty data disks."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithEmptyDataDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Cache disk using placement property."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Resource disk using placement property."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithADiffOsDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with managed boot diagnostics."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithManagedBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with password authentication."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b248db33-62ba-4d2d-b791-811e075ee0f5"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPasswordAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with premium storage."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithPremiumStorage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ssh authentication."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("{image_offer}"),
						Publisher: to.Ptr("{image_publisher}"),
						SKU:       to.Ptr("{image_sku}"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
								KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
							}},
					},
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("e0de9b84-a506-4b95-9623-00a425d05c90"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAVmWithSshAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by detaching data disk"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachineUpdate{
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ToBeDetached: to.Ptr(true),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ToBeDetached: to.Ptr(false),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json")
	// Response check
	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by force-detaching data disk"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachineUpdate{
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ToBeDetached: to.Ptr(true),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ToBeDetached: to.Ptr(false),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVMForceDetachDataDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force delete a VM"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myVM",
		&armcompute.VirtualMachinesClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachine.json")
}

func (testsuite *MockTestSuite) TestVirtualMachines_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Virtual Machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myVM",
		&armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachine.json")
	// Response check
	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/my-AvailabilitySet"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{myStorageAccount}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT50M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS3V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/my-ppg01"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("myDataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](30),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk0"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
					{
						Name:         to.Ptr("myDataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](100),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]interface{}{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine placed on a dedicated host group through automatic placement"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myVM",
		&armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json")
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_InstanceView() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Virtual Machine Instance View."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.InstanceView(ctx,
		"myResourceGroup",
		"myVM",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceView.json")
	// Response check
	exampleRes := armcompute.VirtualMachineInstanceView{
		BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
			ConsoleScreenshotBlobURI: to.Ptr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.screenshot.bmp"),
			SerialConsoleLogBlobURI:  to.Ptr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.serialconsole.log"),
		},
		ComputerName: to.Ptr("myVM"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOsDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.477089+00:00"); return t }()),
					}},
			},
			{
				Name: to.Ptr("myDataDisk0"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.461517+00:00"); return t }()),
					}},
			}},
		HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
		OSName:           to.Ptr("Windows Server 2016 Datacenter"),
		OSVersion:        to.Ptr("Microsoft Windows NT 10.0.14393.0"),
		PatchStatus: &armcompute.VirtualMachinePatchStatus{
			AvailablePatchSummary: &armcompute.AvailablePatchSummary{
				AssessmentActivityID:          to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				CriticalAndSecurityPatchCount: to.Ptr[int32](1),
				LastModifiedTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				OtherPatchCount:               to.Ptr[int32](2),
				RebootPending:                 to.Ptr(true),
				StartTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				Status:                        to.Ptr(armcompute.PatchOperationStatusSucceeded),
			},
			ConfigurationStatuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("PatchModeConfigurationState/Ready"),
					DisplayStatus: to.Ptr("Status_PatchModeConfigurationState_Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				},
				{
					Code:          to.Ptr("PatchModeConfigurationState/Pending"),
					DisplayStatus: to.Ptr("Status_PatchModeConfigurationState_Pending"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				},
				{
					Code:          to.Ptr("AssessmentModeConfigurationState/Pending"),
					DisplayStatus: to.Ptr("Status_AssessmentModeConfigurationState_Pending"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				}},
			LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
				ExcludedPatchCount:        to.Ptr[int32](1),
				FailedPatchCount:          to.Ptr[int32](1),
				InstallationActivityID:    to.Ptr("68f8b292-dfc2-4646-9981-33cc88631968"),
				InstalledPatchCount:       to.Ptr[int32](1),
				LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				MaintenanceWindowExceeded: to.Ptr(false),
				NotSelectedPatchCount:     to.Ptr[int32](1),
				PendingPatchCount:         to.Ptr[int32](1),
				StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				Status:                    to.Ptr(armcompute.PatchOperationStatusSucceeded),
			},
		},
		PlatformFaultDomain:  to.Ptr[int32](1),
		PlatformUpdateDomain: to.Ptr[int32](1),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:30:12.8051917+00:00"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
				{
					Type: to.Ptr("Microsoft.Azure.Security.IaaSAntimalware"),
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Ready"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					},
					TypeHandlerVersion: to.Ptr("1.5.5.9"),
				}},
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/succeeded"),
					DisplayStatus: to.Ptr("Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("GuestAgent is running and accepting new configurations."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T23:11:22+00:00"); return t }()),
				}},
			VMAgentVersion: to.Ptr("2.7.41491.949"),
		},
		Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
			{
				Name: to.Ptr("IaaSAntiMalware-ext0"),
				Type: to.Ptr("Microsoft.Azure.Security.IaaSAntimalware"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("Microsoft Antimalware enabled"),
					}},
				TypeHandlerVersion: to.Ptr("1.5.5.9"),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineInstanceView)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceView.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine placed on a dedicated host group through automatic placement."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.InstanceView(ctx,
		"myResourceGroup",
		"myVM",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json")
	// Response check
	exampleRes = armcompute.VirtualMachineInstanceView{
		AssignedHost: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
		ComputerName: to.Ptr("myVM"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOsDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T21:29:47.477089+00:00"); return t }()),
					}},
			}},
		HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
		OSName:           to.Ptr("Windows Server 2016 Datacenter"),
		OSVersion:        to.Ptr("Microsoft Windows NT 10.0.14393.0"),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T21:30:12.8051917+00:00"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/succeeded"),
					DisplayStatus: to.Ptr("Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("GuestAgent is running and accepting new configurations."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T23:11:22+00:00"); return t }()),
				}},
			VMAgentVersion: to.Ptr("2.7.41491.949"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineInstanceView)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_ConvertToManagedDisks() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_Deallocate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_Generalize() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GeneralizeVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generalize a Virtual Machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.Generalize(ctx,
		"myResourceGroup",
		"myVMName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GeneralizeVirtualMachine.json")
}

func (testsuite *MockTestSuite) TestVirtualMachines_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_ListAll() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_ListAvailableSizes() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailableVmSizes_VirtualMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available virtual machine sizes to which the specified virtual machine can be resized"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListAvailableSizesPager("myResourceGroup",
		"myVmName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailableVmSizes_VirtualMachines.json")
		// Response check
		pagerExampleRes := armcompute.VirtualMachineSizeListResult{
			Value: []*armcompute.VirtualMachineSize{
				{
					Name:                 to.Ptr("Standard_A1_V2"),
					MaxDataDiskCount:     to.Ptr[int32](2),
					MemoryInMB:           to.Ptr[int32](2048),
					NumberOfCores:        to.Ptr[int32](1),
					OSDiskSizeInMB:       to.Ptr[int32](1047552),
					ResourceDiskSizeInMB: to.Ptr[int32](10240),
				},
				{
					Name:                 to.Ptr("Standard_A2_V2"),
					MaxDataDiskCount:     to.Ptr[int32](4),
					MemoryInMB:           to.Ptr[int32](4096),
					NumberOfCores:        to.Ptr[int32](2),
					OSDiskSizeInMB:       to.Ptr[int32](1047552),
					ResourceDiskSizeInMB: to.Ptr[int32](20480),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineSizeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineSizeListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListAvailableVmSizes_VirtualMachines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_PowerOff() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_Reapply() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reapply the state of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginReapply(ctx,
		"ResourceGroup",
		"VMName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReapplyVirtualMachine.json")
}

func (testsuite *MockTestSuite) TestVirtualMachines_Restart() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_Start() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_Redeploy() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_Reimage() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage a Virtual Machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginReimage(ctx,
		"myResourceGroup",
		"myVMName",
		&armcompute.VirtualMachinesClientBeginReimageOptions{Parameters: &armcompute.VirtualMachineReimageParameters{
			TempDisk: to.Ptr(true),
		},
		})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageVirtualMachine.json")
}

func (testsuite *MockTestSuite) TestVirtualMachines_RetrieveBootDiagnosticsData() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.RetrieveBootDiagnosticsData(ctx,
		"ResourceGroup",
		"VMName",
		&armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVirtualMachine.json")
	// Response check
	exampleRes := armcompute.RetrieveBootDiagnosticsDataResult{
		ConsoleScreenshotBlobURI: to.Ptr("https://storageuri/vm.screenshot.bmp?{sasKey}"),
		SerialConsoleLogBlobURI:  to.Ptr("https://storageuri/vm.serialconsole.log?{sasKey}"),
	}
	if !reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RetrieveBootDiagnosticsDataResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_PerformMaintenance() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachines_SimulateEviction() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.SimulateEviction(ctx,
		"ResourceGroup",
		"VMName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVM.json")
}

func (testsuite *MockTestSuite) TestVirtualMachines_AssessPatches() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assess patch state of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginAssessPatches(ctx,
		"myResourceGroupName",
		"myVMName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json")
	// Response check
	exampleRes := armcompute.VirtualMachineAssessPatchesResult{
		AssessmentActivityID: to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
		AvailablePatches: []*armcompute.VirtualMachineSoftwarePatchProperties{
			{
				Name:            to.Ptr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
				ActivityID:      to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				AssessmentState: to.Ptr(armcompute.PatchAssessmentStateAvailable),
				Classifications: []*string{
					to.Ptr("Definition Updates")},
				KbID:                 to.Ptr("2267602"),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.2830263Z"); return t }()),
				PatchID:              to.Ptr("35428702-5784-4ba4-a6e0-5222258b5411"),
				PublishedDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00Z"); return t }()),
				RebootBehavior:       to.Ptr(armcompute.VMGuestPatchRebootBehaviorNeverReboots),
				Version:              to.Ptr(""),
			},
			{
				Name:            to.Ptr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
				ActivityID:      to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				AssessmentState: to.Ptr(armcompute.PatchAssessmentStateAvailable),
				Classifications: []*string{
					to.Ptr("Update Rollups")},
				KbID:                 to.Ptr("890830"),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.2830263Z"); return t }()),
				PatchID:              to.Ptr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
				PublishedDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00Z"); return t }()),
				RebootBehavior:       to.Ptr(armcompute.VMGuestPatchRebootBehaviorCanRequestReboot),
				Version:              to.Ptr(""),
			}},
		CriticalAndSecurityPatchCount: to.Ptr[int32](1),
		OtherPatchCount:               to.Ptr[int32](2),
		RebootPending:                 to.Ptr(true),
		StartDateTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
		Status:                        to.Ptr(armcompute.PatchOperationStatusSucceeded),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineAssessPatchesResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineAssessPatchesResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineAssessPatches.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_InstallPatches() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Install patch state of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginInstallPatches(ctx,
		"myResourceGroupName",
		"myVMName",
		armcompute.VirtualMachineInstallPatchesParameters{
			MaximumDuration: to.Ptr("PT4H"),
			RebootSetting:   to.Ptr(armcompute.VMGuestPatchRebootSettingIfRequired),
			WindowsParameters: &armcompute.WindowsParameters{
				ClassificationsToInclude: []*armcompute.VMGuestPatchClassificationWindows{
					to.Ptr(armcompute.VMGuestPatchClassificationWindowsCritical),
					to.Ptr(armcompute.VMGuestPatchClassificationWindowsSecurity)},
				MaxPatchPublishDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-19T02:36:43.0539904+00:00"); return t }()),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json")
	// Response check
	exampleRes := armcompute.VirtualMachineInstallPatchesResult{
		ExcludedPatchCount:        to.Ptr[int32](0),
		FailedPatchCount:          to.Ptr[int32](0),
		InstallationActivityID:    to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
		InstalledPatchCount:       to.Ptr[int32](3),
		MaintenanceWindowExceeded: to.Ptr(false),
		NotSelectedPatchCount:     to.Ptr[int32](0),
		Patches: []*armcompute.PatchInstallationDetail{
			{
				Name: to.Ptr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
				Classifications: []*string{
					to.Ptr("Definition Updates")},
				InstallationState: to.Ptr(armcompute.PatchInstallationStateInstalled),
				KbID:              to.Ptr("2267602"),
				PatchID:           to.Ptr("35428702-5784-4ba4-a6e0-5222258b5411"),
				Version:           to.Ptr(""),
			},
			{
				Name: to.Ptr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
				Classifications: []*string{
					to.Ptr("Update Rollups")},
				InstallationState: to.Ptr(armcompute.PatchInstallationStatePending),
				KbID:              to.Ptr("890830"),
				PatchID:           to.Ptr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
				Version:           to.Ptr(""),
			}},
		PendingPatchCount: to.Ptr[int32](2),
		RebootStatus:      to.Ptr(armcompute.VMGuestPatchRebootStatusCompleted),
		StartDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
		Status:            to.Ptr(armcompute.PatchOperationStatusSucceeded),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstallPatchesResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineInstallPatchesResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineInstallPatches.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachines_RunCommand() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommand"},
	})
	client, err := armcompute.NewVirtualMachinesClient("24fb23e3-6ba3-41f0-9b6e-e41131d5d61e", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRunCommand(ctx,
		"crptestar98131",
		"vm3036",
		armcompute.RunCommandInput{
			CommandID: to.Ptr("RunPowerShellScript"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json")
	// Response check
	exampleRes := armcompute.RunCommandResult{
		Value: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ComponentStatus/StdOut/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("This is a sample script with parameters value1 value2"),
			},
			{
				Code:          to.Ptr("ComponentStatus/StdErr/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RunCommandResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_ListByLocation() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetsInASubscriptionByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the VM scale sets under the specified subscription for the specified location."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByLocationPager("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetsInASubscriptionByLocation.json")
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetListResult{
			Value: []*armcompute.VirtualMachineScaleSet{
				{
					Name:     to.Ptr("{virtualMachineScaleSetName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.VirtualMachineScaleSetProperties{
						DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
						Overprovision:                          to.Ptr(false),
						PlatformFaultDomainCount:               to.Ptr[int32](1),
						ProvisioningState:                      to.Ptr("Succeeded"),
						SinglePlacementGroup:                   to.Ptr(false),
						UpgradePolicy: &armcompute.UpgradePolicy{
							AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
								EnableAutomaticOSUpgrade: to.Ptr(false),
							},
							Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
						},
						VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
							NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
								NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
									{
										Name: to.Ptr("myNic"),
										Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
											IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
												{
													Name: to.Ptr("myIPConfig"),
													Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
														Primary: to.Ptr(true),
														Subnet: &armcompute.APIEntityReference{
															ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
														},
													},
												}},
											NetworkSecurityGroup: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
											},
											Primary: to.Ptr(true),
										},
									}},
							},
							OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
								AdminUsername:      to.Ptr("admin"),
								ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(false),
								},
							},
							StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
								DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
								ImageReference: &armcompute.ImageReference{
									Offer:     to.Ptr("databricks"),
									Publisher: to.Ptr("azuredatabricks"),
									SKU:       to.Ptr("databricksworker"),
									Version:   to.Ptr("3.15.2"),
								},
								OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
									Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
									CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
									DiskSizeGB:   to.Ptr[int32](30),
									ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
									},
								},
							},
						},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_D2s_v3"),
						Capacity: to.Ptr[int64](4),
						Tier:     to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("{virtualMachineScaleSetName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}1"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue2"),
					},
					Properties: &armcompute.VirtualMachineScaleSetProperties{
						DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
						Overprovision:                          to.Ptr(false),
						PlatformFaultDomainCount:               to.Ptr[int32](1),
						ProvisioningState:                      to.Ptr("Succeeded"),
						SinglePlacementGroup:                   to.Ptr(false),
						UpgradePolicy: &armcompute.UpgradePolicy{
							AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
								EnableAutomaticOSUpgrade: to.Ptr(false),
							},
							Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
						},
						VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
							NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
								NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
									{
										Name: to.Ptr("myNic1"),
										Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
											IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
												{
													Name: to.Ptr("myIPConfig"),
													Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
														Primary: to.Ptr(true),
														Subnet: &armcompute.APIEntityReference{
															ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
														},
													},
												}},
											NetworkSecurityGroup: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
											},
											Primary: to.Ptr(true),
										},
									}},
							},
							OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
								AdminUsername:      to.Ptr("admin"),
								ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(false),
								},
							},
							StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
								DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
								ImageReference: &armcompute.ImageReference{
									Offer:     to.Ptr("databricks"),
									Publisher: to.Ptr("azuredatabricks"),
									SKU:       to.Ptr("databricksworker"),
									Version:   to.Ptr("3.15.2"),
								},
								OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
									Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
									CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
									DiskSizeGB:   to.Ptr[int32](30),
									ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
									},
								},
							},
						},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_D2s_v3"),
						Capacity: to.Ptr[int64](4),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetsInASubscriptionByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image scale set from an unmanaged generalized os image."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("<subscription-id>", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("osDisk"),
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
							},
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json")
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d6e9ab29-f8c9-4792-978c-ae2c07b98f17"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image scale set with unmanaged os disks."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("osDisk"),
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							VhdContainers: []*string{
								to.Ptr("http://{existing-storage-account-name-0}.blob.core.windows.net/vhdContainer"),
								to.Ptr("http://{existing-storage-account-name-1}.blob.core.windows.net/vhdContainer"),
								to.Ptr("http://{existing-storage-account-name-2}.blob.core.windows.net/vhdContainer"),
								to.Ptr("http://{existing-storage-account-name-3}.blob.core.windows.net/vhdContainer"),
								to.Ptr("http://{existing-storage-account-name-4}.blob.core.windows.net/vhdContainer")},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("77b7df9a-32fe-45e3-8911-60ac9c9b9c64"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						VhdContainers: []*string{
							to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds")},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a custom image."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromACustomImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a generalized shared image."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromAGeneralizedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a specialized shared image."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromASpecializedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with DiskEncryptionSet resource in os disk and data disk."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
							{
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](0),
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
							}},
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScalesetWithDiskEncryptionSetResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Fpga Network Interfaces."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							},
							{
								Name: to.Ptr("{fpgaNic-Name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableAcceleratedNetworking: to.Ptr(false),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(false),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{fpgaNic-Name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(false),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						},
						{
							Name: to.Ptr("{fpgaNic-Name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableFpga:                  to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{fpgaNic-Name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(false),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetFromWithFpgaNetworkInterface.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Host Encryption using encryptionAtHost property."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windows-data-science-vm"),
							Publisher: to.Ptr("microsoft-ads"),
							SKU:       to.Ptr("windows2016"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Uefi Settings of secureBoot and vTPM."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					SecurityProfile: &armcompute.SecurityProfile{
						SecurityType: to.Ptr("TrustedLaunch"),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windowsserver-gen2preview-preview"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("windows10-tvm"),
							Version:   to.Ptr("18363.592.2001092016"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D2s_v3"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr("TrustedLaunch"),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windowsserver-gen2preview-preview"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows10-tvm"),
						Version:   to.Ptr("18363.592.2001092016"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithUefiSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with a marketplace image plan."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windows-data-science-vm"),
							Publisher: to.Ptr("microsoft-ads"),
							SKU:       to.Ptr("windows2016"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAMarketplaceImagePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure application gateway."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/{existing-application-gateway-name}/backendAddressPools/{existing-backend-address-pool-name}"),
													}},
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("a0134477-b9d9-484b-b0e3-205c1c089ffa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/nsgExistingAppGw/backendAddressPools/appGatewayBackendPool"),
												}},
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureApplicationGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure load balancer."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/backendAddressPools/{existing-backend-address-pool-name}"),
													}},
												LoadBalancerInboundNatPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/inboundNatPools/{existing-nat-pool-name}"),
													}},
												PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("{vmss-name}"),
													Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													},
												},
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ec0b21ca-51ec-414b-9323-f236ffc21479"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/backendAddressPools/lbBackendPool"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/inboundNatPools/lbNatPool"),
												}},
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAnAzureLoadBalancer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with automatic repairs enabled"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
					Enabled:     to.Ptr(true),
					GracePeriod: to.Ptr("PT30M"),
				},
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT30M"),
			},
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithAutomaticRepairs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with boot diagnostics."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with empty data disks on each vm."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
							{
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](0),
							},
							{
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](1),
							}},
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiskSizeGB:   to.Ptr[int32](512),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D2_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithEmptyDataDisksOnEachVm.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks using placement property."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windows-data-science-vm"),
							Publisher: to.Ptr("microsoft-ads"),
							SKU:       to.Ptr("windows2016"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
							},
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windows-data-science-vm"),
							Publisher: to.Ptr("microsoft-ads"),
							SKU:       to.Ptr("windows2016"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
							},
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithDiffOsDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with extension time budget."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("PT1H20M"),
						Extensions: []*armcompute.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("{extension-name}"),
								Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("{extension-Type}"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									Publisher:               to.Ptr("{extension-Publisher}"),
									Settings:                map[string]interface{}{},
									TypeHandlerVersion:      to.Ptr("{handler-version}"),
								},
							}},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]interface{}{},
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithExtensionsTimeBudget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with managed boot diagnostics."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled: to.Ptr(true),
						},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithManagedBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with password authentication."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ffb27c5c-39a5-4d4e-b307-b32598689813"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPasswordAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with premium storage."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("19fd38a2-f50a-42c6-9dc7-3f9cf3791225"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithPremiumStorage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ssh authentication."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
										KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
									}},
							},
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("fb73af19-0090-467c-9ced-b00bceab1c45"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithSshAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with terminate scheduled events enabled."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
						TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT5M"),
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT5M"),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithTerminateScheduledEventEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with userData."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
					UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateAScaleSetWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with virtual machines in different zones."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("centralus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
							{
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](0),
							},
							{
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](1),
							}},
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiskSizeGB:   to.Ptr[int32](512),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_A1_v2"),
				Capacity: to.Ptr[int64](2),
				Tier:     to.Ptr("Standard"),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("3")},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("centralus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(false),
			UniqueID:             to.Ptr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
			ZoneBalance: to.Ptr(false),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("3")},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAScaleSetWithVMsInDifferentZones.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a VM scale set."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		&armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSets.json")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set placed on a dedicated host group through automatic placement."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		&armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json")
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set with UserData"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		&armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetWithUserData.json")
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_Deallocate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_DeleteInstances() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_GetInstanceView() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_ListAll() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_GetOSUpgradeHistory() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_PowerOff() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_Restart() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_Start() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_Redeploy() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_PerformMaintenance() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_UpdateInstances() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_Reimage() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_ReimageAll() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_ConvertToSinglePlacementGroup() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSets_SetOrchestrationServiceState() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineSizes_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestImages_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob with DiskEncryptionSet resource."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json")
	// Response check
	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlobWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(true),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromABlob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk with DiskEncryptionSet resource."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(true),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot with DiskEncryptionSet resource."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshotWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(false),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from an existing virtual machine."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				SourceVirtualMachine: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			SourceVirtualMachine: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myVM_OsDisk_1_6dc293b7d811433196903acf92665022"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageFromAVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a blob."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					DataDisks: []*armcompute.ImageDataDisk{
						{
							BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
							Lun:     to.Ptr[int32](1),
						}},
					OSDisk: &armcompute.ImageOSDisk{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(false),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						Lun:     to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromABlob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a managed disk."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					DataDisks: []*armcompute.ImageDataDisk{
						{
							ManagedDisk: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDisk: &armcompute.ImageOSDisk{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(false),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a snapshot."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					DataDisks: []*armcompute.ImageDataDisk{
						{
							Snapshot: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDisk: &armcompute.ImageOSDisk{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(true),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json")
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateAnImageThatIncludesADataDiskFromASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestImages_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates tags of an Image."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.ImageUpdate{
			Tags: map[string]*string{
				"department": to.Ptr("HR"),
			},
			Properties: &armcompute.ImageProperties{
				HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypesV1),
				SourceVirtualMachine: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json")
	// Response check
	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						Lun:                to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskSizeGB: to.Ptr[int32](20),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					},
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestImages_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestImages_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInformationAboutAnImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a virtual machine image."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myImage",
		&armcompute.ImagesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInformationAboutAnImage.json")
	// Response check
	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						Lun:                to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskSizeGB: to.Ptr[int32](20),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					},
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInformationAboutAnImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestImages_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a resource group."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInAResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.ImageListResult{
			Value: []*armcompute.Image{
				{
					Name:     to.Ptr("myImage"),
					Type:     to.Ptr("Microsoft.Compute/images"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.ImageProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						StorageProfile: &armcompute.ImageStorageProfile{
							DataDisks: []*armcompute.ImageDataDisk{
								{
									BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
									ManagedDisk: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
									},
									Snapshot: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									Lun:                to.Ptr[int32](1),
								}},
							OSDisk: &armcompute.ImageOSDisk{
								BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
								ManagedDisk: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
								},
								Snapshot: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
								OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImageListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestImages_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a subscription."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.ImageListResult{
			Value: []*armcompute.Image{
				{
					Name:     to.Ptr("myImage"),
					Type:     to.Ptr("Microsoft.Compute/images"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.ImageProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						StorageProfile: &armcompute.ImageStorageProfile{
							DataDisks: []*armcompute.ImageDataDisk{
								{
									BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
									ManagedDisk: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
									},
									Snapshot: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									Lun:                to.Ptr[int32](1),
								}},
							OSDisk: &armcompute.ImageOSDisk{
								BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
								ManagedDisk: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
								},
								Snapshot: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
								OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImageListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListImagesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestRestorePointCollections_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateARestorePointCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a restore point collection."},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myRpc",
		armcompute.RestorePointCollection{
			Location: to.Ptr("norwayeast"),
			Tags: map[string]*string{
				"myTag1": to.Ptr("tagValue1"),
			},
			Properties: &armcompute.RestorePointCollectionProperties{
				Source: &armcompute.RestorePointCollectionSourceProperties{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateARestorePointCollection.json")
	// Response check
	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateARestorePointCollection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestRestorePointCollections_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestRestorePointCollections_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestRestorePointCollections_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection (but not the restore points contained in the restore point collection)"},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRpc",
		&armcompute.RestorePointCollectionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollection.json")
	// Response check
	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
				Location: to.Ptr("eastus"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionWithContainedRestorePoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection, including the restore points contained in the restore point collection"},
	})
	client, err = armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"rpcName",
		&armcompute.RestorePointCollectionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionWithContainedRestorePoints.json")
	// Response check
	exampleRes = armcompute.RestorePointCollection{
		Name:     to.Ptr("rpcName"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
			RestorePoints: []*armcompute.RestorePoint{
				{
					Name:            to.Ptr("restorePointName"),
					ID:              to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName"),
					ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
					ExcludeDisks: []*armcompute.APIEntityReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
						}},
					ProvisioningDetails: &armcompute.RestorePointProvisioningDetails{
						CreationTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.8401519+00:00"); return t }()),
						StatusCode:           to.Ptr[int32](0),
						StatusMessage:        to.Ptr("{\"jobMessage\":\"\",\"messageStr\":\"1/27/2021 8:35:56 PM , snapshotCreator=guestExtension, hostStatusCodePreSnapshot=200, Plugin enable Succeeded (command: Snapshot) Snapshot command completed \",\"snapshotConsistency\":2}"),
						TotalUsedSizeInBytes: to.Ptr[int64](10835349504),
					},
					ProvisioningState: to.Ptr("Succeeded"),
					SourceMetadata: &armcompute.RestorePointSourceMetadata{
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled: to.Ptr(true),
							},
						},
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
						},
						OSProfile: &armcompute.OSProfile{
							AdminUsername:               to.Ptr("admin"),
							AllowExtensionOperations:    to.Ptr(true),
							ComputerName:                to.Ptr("computerName"),
							RequireGuestProvisionSignal: to.Ptr(true),
							Secrets:                     []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								EnableAutomaticUpdates: to.Ptr(true),
								ProvisionVMAgent:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
							DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
								{
									Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
									Caching: to.Ptr(armcompute.CachingTypesNone),
									DiskRestorePoint: &armcompute.APIEntityReference{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
									},
									Lun: to.Ptr[int32](1),
									ManagedDisk: &armcompute.ManagedDiskParameters{
										ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
								}},
							OSDisk: &armcompute.RestorePointSourceVMOSDisk{
								Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
								Caching: to.Ptr(armcompute.CachingTypesReadWrite),
								DiskRestorePoint: &armcompute.APIEntityReference{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
								},
								ManagedDisk: &armcompute.ManagedDiskParameters{
									ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
							},
						},
						VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
					},
				}},
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionWithContainedRestorePoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestRestorePointCollections_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a resource group."},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInAResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.RestorePointCollectionListResult{
			Value: []*armcompute.RestorePointCollection{
				{
					Name:     to.Ptr("restorePointCollection1"),
					Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.RestorePointCollectionProperties{
						ProvisioningState:        to.Ptr("Succeeded"),
						RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
						Source: &armcompute.RestorePointCollectionSourceProperties{
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
							Location: to.Ptr("West US"),
						},
					},
				},
				{
					Name:     to.Ptr("restorePointCollection2"),
					Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.RestorePointCollectionProperties{
						ProvisioningState:        to.Ptr("Succeeded"),
						RestorePointCollectionID: to.Ptr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
						Source: &armcompute.RestorePointCollectionSourceProperties{
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
							Location: to.Ptr("West US"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorePointCollectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorePointCollectionListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestRestorePointCollections_ListAll() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a subscription"},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.RestorePointCollectionListResult{
			Value: []*armcompute.RestorePointCollection{
				{
					Name:     to.Ptr("restorePointCollection1"),
					Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup1/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.RestorePointCollectionProperties{
						ProvisioningState:        to.Ptr("Succeeded"),
						RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
						Source: &armcompute.RestorePointCollectionSourceProperties{
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Test"),
							Location: to.Ptr("West US"),
						},
					},
				},
				{
					Name:     to.Ptr("restorePointCollection2"),
					Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup2/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.RestorePointCollectionProperties{
						ProvisioningState:        to.Ptr("Succeeded"),
						RestorePointCollectionID: to.Ptr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
						Source: &armcompute.RestorePointCollectionSourceProperties{
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Prod"),
							Location: to.Ptr("West US"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorePointCollectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorePointCollectionListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePointCollectionsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestRestorePoints_Create() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a restore point"},
	})
	client, err := armcompute.NewRestorePointsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"rpcName",
		"rpName",
		armcompute.RestorePoint{
			ExcludeDisks: []*armcompute.APIEntityReference{
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
				}},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateARestorePoint.json")
}

func (testsuite *MockTestSuite) TestRestorePoints_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestRestorePoints_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point"},
	})
	client, err := armcompute.NewRestorePointsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"rpcName",
		"rpName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePoint.json")
	// Response check
	exampleRes := armcompute.RestorePoint{
		Name:            to.Ptr("rpName"),
		ID:              to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName"),
		ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
		ExcludeDisks: []*armcompute.APIEntityReference{
			{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
			}},
		ProvisioningDetails: &armcompute.RestorePointProvisioningDetails{
			CreationTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.8401519+00:00"); return t }()),
			StatusCode:           to.Ptr[int32](0),
			StatusMessage:        to.Ptr("{\"jobMessage\":\"\",\"messageStr\":\"1/27/2021 8:35:56 PM , snapshotCreator=guestExtension, hostStatusCodePreSnapshot=200, Plugin enable Succeeded (command: Snapshot) Snapshot command completed \",\"snapshotConsistency\":2}"),
			TotalUsedSizeInBytes: to.Ptr[int64](10835349504),
		},
		ProvisioningState: to.Ptr("Succeeded"),
		SourceMetadata: &armcompute.RestorePointSourceMetadata{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:               to.Ptr("admin"),
				AllowExtensionOperations:    to.Ptr(true),
				ComputerName:                to.Ptr("computerName"),
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
				DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
					{
						Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
						Caching: to.Ptr(armcompute.CachingTypesNone),
						DiskRestorePoint: &armcompute.APIEntityReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
						},
						Lun: to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				OSDisk: &armcompute.RestorePointSourceVMOSDisk{
					Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskRestorePoint: &armcompute.APIEntityReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
				},
			},
			VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePoint)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRestorePoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetExtensions_CreateOrUpdate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetExtensions_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetExtensions_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetExtensions_Get() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetExtensions_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetRollingUpgrades_Cancel() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetRollingUpgrades_StartOSUpgrade() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetRollingUpgrades_StartExtensionUpgrade() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start an extension rolling upgrade."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginStartExtensionUpgrade(ctx,
		"myResourceGroup",
		"{vmss-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetExtensionRollingUpgrade.json")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetRollingUpgrades_GetLatest() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMExtensions_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM extension."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		armcompute.VirtualMachineScaleSetVMExtension{
			Properties: &armcompute.VirtualMachineExtensionProperties{
				Type:                    to.Ptr("extType"),
				AutoUpgradeMinorVersion: to.Ptr(true),
				Publisher:               to.Ptr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
					"items": []interface{}{
						map[string]interface{}{
							"name": "text - 2",
							"type": float64(1),
							"content": map[string]interface{}{
								"json": "## New workbook\n---\n\nWelcome to your new workbook.  This area will display text formatted as markdown.\n\n\nWe've included a basic analytics query to get you started. Use the `Edit` button below each section to configure it or add more sections.",
							},
						},
						map[string]interface{}{
							"name": "query - 2",
							"type": float64(3),
							"content": map[string]interface{}{
								"exportToExcelOptions": "visible",
								"query":                "union withsource=TableName *\n| summarize Count=count() by TableName\n| render barchart",
								"queryType":            float64(0),
								"resourceType":         "microsoft.operationalinsights/workspaces",
								"size":                 float64(1),
								"version":              "KqlItem/1.0",
							},
						},
					},
					"styleSettings": map[string]interface{}{},
					"test":          float64(1),
				},
				TypeHandlerVersion: to.Ptr("1.2"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json")
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]interface{}{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMExtensions_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM extension."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		armcompute.VirtualMachineScaleSetVMExtensionUpdate{
			Properties: &armcompute.VirtualMachineExtensionUpdateProperties{
				Type:                    to.Ptr("extType"),
				AutoUpgradeMinorVersion: to.Ptr(true),
				Publisher:               to.Ptr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
				},
				TypeHandlerVersion: to.Ptr("1.2"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json")
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]interface{}{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMExtensions_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM extension."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMExtensions.json")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMExtensions_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM extension."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		&armcompute.VirtualMachineScaleSetVMExtensionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMExtensions.json")
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]interface{}{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMExtensions_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List extensions in Vmss instance."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.List(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		&armcompute.VirtualMachineScaleSetVMExtensionsClientListOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMExtensions.json")
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMExtensionsListResult{
		Value: []*armcompute.VirtualMachineScaleSetVMExtension{
			{
				ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
				Name: to.Ptr("myVMExtension"),
				Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("extPublisher"),
					Settings: map[string]interface{}{
						"UserName": "xyz@microsoft.com",
					},
					TypeHandlerVersion: to.Ptr("1.2"),
				},
			},
			{
				ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension1"),
				Name: to.Ptr("myVMExtension1"),
				Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType1"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("extPublisher1"),
					Settings: map[string]interface{}{
						"UserName": "xyz@microsoft.com",
					},
					TypeHandlerVersion: to.Ptr("1.0"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtensionsListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtensionsListResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_Reimage() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_ReimageAll() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_Deallocate() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a virtual machine from a VM scale set."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		&armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ForceDeleteVirtualMachineScaleSetVM.json")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VM scale set VM with UserData"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"{vmss-name}",
		"0",
		&armcompute.VirtualMachineScaleSetVMsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMWithUserData.json")
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVM{
		Name:     to.Ptr("{vmss-vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile:        &armcompute.HardwareProfile{},
			LatestModelApplied:     to.Ptr(true),
			ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(false),
							EnableIPForwarding:          to.Ptr(false),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:               to.Ptr("Foo12"),
				AllowExtensionOperations:    to.Ptr(true),
				ComputerName:                to.Ptr("test000000"),
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](128),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					ExactVersion: to.Ptr("4.127.20180315"),
					Offer:        to.Ptr("WindowsServer"),
					Publisher:    to.Ptr("MicrosoftWindowsServer"),
					SKU:          to.Ptr("2012-R2-Datacenter"),
					Version:      to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](127),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]interface{}{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVM)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_GetInstanceView() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine from a VM scale set placed on a dedicated host group through automatic placement."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetInstanceView(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		"0",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json")
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMInstanceView{
		AssignedHost: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOSDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T04:58:58.0882815+00:00"); return t }()),
					}},
			}},
		PlatformFaultDomain:  to.Ptr[int32](0),
		PlatformUpdateDomain: to.Ptr[int32](0),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-05T04:59:58.1852966+00:00"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/Unavailable"),
					DisplayStatus: to.Ptr("Not Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesWarning),
					Message:       to.Ptr("VM status blob is found but not yet populated."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-01T05:00:32+00:00"); return t }()),
				}},
			VMAgentVersion: to.Ptr("Unknown"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMInstanceView)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_List() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_PowerOff() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_Restart() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_Start() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_Redeploy() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_RetrieveBootDiagnosticsData() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVMScaleSetVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.RetrieveBootDiagnosticsData(ctx,
		"ResourceGroup",
		"myvmScaleSet",
		"0",
		&armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVMScaleSetVM.json")
	// Response check
	exampleRes := armcompute.RetrieveBootDiagnosticsDataResult{
		ConsoleScreenshotBlobURI: to.Ptr("https://storageuri/myvmScaleSetinstance.screenshot.bmp?{saskey}"),
		SerialConsoleLogBlobURI:  to.Ptr("https://storageuri/myvmScaleSetinstance.serialconsole.log?{saskey}"),
	}
	if !reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RetrieveBootDiagnosticsDataResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RetrieveBootDiagnosticsDataVMScaleSetVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_PerformMaintenance() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_SimulateEviction() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVmssVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	_, err = client.SimulateEviction(ctx,
		"ResourceGroup",
		"VmScaleSetName",
		"InstanceId",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/SimulateEvictionOfVmssVM.json")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMs_RunCommand() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_RunCommand"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRunCommand(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		"0",
		armcompute.RunCommandInput{
			CommandID: to.Ptr("RunPowerShellScript"),
			Script: []*string{
				to.Ptr("# Test multi-line string\r\nWrite-Host Hello World!")},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json")
	// Response check
	exampleRes := armcompute.RunCommandResult{
		Value: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ComponentStatus/StdOut/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("Hello World!"),
			},
			{
				Code:          to.Ptr("ComponentStatus/StdErr/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RunCommandResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VMScaleSetRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestLogAnalytics_ExportRequestRateByInterval() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all Api requests made to Compute Resource Provider within the given time period broken down by intervals."},
	})
	client, err := armcompute.NewLogAnalyticsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginExportRequestRateByInterval(ctx,
		"westus",
		armcompute.RequestRateByIntervalInput{
			BlobContainerSasURI: to.Ptr("https://somesasuri"),
			FromTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862601Z"); return t }()),
			GroupByResourceName: to.Ptr(true),
			ToTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862601Z"); return t }()),
			IntervalLength:      to.Ptr(armcompute.IntervalInMinsFiveMins),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json")
	// Response check
	exampleRes := armcompute.LogAnalyticsOperationResult{
		Properties: &armcompute.LogAnalyticsOutput{
			Output: to.Ptr("https://crptestar4227.blob.core.windows.net:443/sascontainer/RequestRateByInterval_20180121-0154_20180123-0154.csv"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.LogAnalyticsOperationResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsRequestRateByInterval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestLogAnalytics_ExportThrottledRequests() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all throttled Api requests made to Compute Resource Provider within the given time period."},
	})
	client, err := armcompute.NewLogAnalyticsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginExportThrottledRequests(ctx,
		"westus",
		armcompute.ThrottledRequestsInput{
			BlobContainerSasURI:        to.Ptr("https://somesasuri"),
			FromTime:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862601Z"); return t }()),
			GroupByClientApplicationID: to.Ptr(false),
			GroupByOperationName:       to.Ptr(true),
			GroupByResourceName:        to.Ptr(false),
			GroupByUserAgent:           to.Ptr(false),
			ToTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862601Z"); return t }()),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json")
	// Response check
	exampleRes := armcompute.LogAnalyticsOperationResult{
		Properties: &armcompute.LogAnalyticsOutput{
			Output: to.Ptr("https://crptestar4227.blob.core.windows.net:443/sascontainer/ThrottledRequests_20180121-0154_20180123-0154.csv"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.LogAnalyticsOperationResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/LogAnalyticsThrottledRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineRunCommands_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandList"},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("subid", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("SoutheastAsia",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandList.json")
		// Response check
		pagerExampleRes := armcompute.RunCommandListResult{
			Value: []*armcompute.RunCommandDocumentBase{
				{
					Description: to.Ptr("Configure the machine to enable remote PowerShell."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("EnableRemotePS"),
					Label:       to.Ptr("Enable remote PowerShell"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Shows detailed information for the IP address, subnet mask and default gateway for each adapter bound to TCP/IP."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("IPConfig"),
					Label:       to.Ptr("List IP configuration"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("RunPowerShellScript"),
					Label:       to.Ptr("Executes a PowerShell script"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Custom multiline shell script should be defined in script property. Optional parameters can be set in parameters property."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("RunShellScript"),
					Label:       to.Ptr("Executes a Linux shell script"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				{
					Description: to.Ptr("Get the configuration of all network interfaces."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("ifconfig"),
					Label:       to.Ptr("List network configuration"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				{
					Description: to.Ptr("Checks if the local Administrator account is disabled, and if so enables it."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("EnableAdminAccount"),
					Label:       to.Ptr("Enable administrator account"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Reset built-in Administrator account password."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("ResetAccountPassword"),
					Label:       to.Ptr("Reset built-in Administrator account password"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Checks registry settings and domain policy settings. Suggests policy actions if machine is part of a domain or modifies the settings to default values."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("RDPSettings"),
					Label:       to.Ptr("Verify RDP Listener Settings"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Sets the default or user specified port number for Remote Desktop connections. Enables firewall rule for inbound access to the port."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("SetRDPPort"),
					Label:       to.Ptr("Set Remote Desktop port"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Removes the SSL certificate tied to the RDP listener and restores the RDP listerner security to default. Use this script if you see any issues with the certificate."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("ResetRDPCert"),
					Label:       to.Ptr("Restore RDP Authentication mode to defaults"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RunCommandListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RunCommandListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineRunCommands_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandGet"},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("24fb23e3-6ba3-41f0-9b6e-e41131d5d61e", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"SoutheastAsia",
		"RunPowerShellScript",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandGet.json")
	// Response check
	exampleRes := armcompute.RunCommandDocument{
		Description: to.Ptr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
		Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
		ID:          to.Ptr("RunPowerShellScript"),
		Label:       to.Ptr("Executes a PowerShell script"),
		OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
		Parameters: []*armcompute.RunCommandParameterDefinition{
			{
				Name:         to.Ptr("arg1"),
				Type:         to.Ptr("string"),
				DefaultValue: to.Ptr("value1"),
			},
			{
				Name:         to.Ptr("arg2"),
				Type:         to.Ptr("string"),
				DefaultValue: to.Ptr("value2"),
			}},
		Script: []*string{
			to.Ptr("param("),
			to.Ptr("    [string]$arg1,"),
			to.Ptr("    [string]$arg2"),
			to.Ptr(")"),
			to.Ptr("Write-Host This is a sample script with parameters $arg1 $arg2")},
	}
	if !reflect.DeepEqual(exampleRes, res.RunCommandDocument) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RunCommandDocument)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/VirtualMachineRunCommandGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineRunCommands_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a run command."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		armcompute.VirtualMachineRunCommand{
			Location: to.Ptr("West US"),
			Properties: &armcompute.VirtualMachineRunCommandProperties{
				AsyncExecution: to.Ptr(false),
				Parameters: []*armcompute.RunCommandInputParameter{
					{
						Name:  to.Ptr("param1"),
						Value: to.Ptr("value1"),
					},
					{
						Name:  to.Ptr("param2"),
						Value: to.Ptr("value2"),
					}},
				RunAsPassword: to.Ptr("<runAsPassword>"),
				RunAsUser:     to.Ptr("user1"),
				Source: &armcompute.VirtualMachineRunCommandScriptSource{
					Script: to.Ptr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Ptr[int32](3600),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json")
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineRunCommands_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a run command."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		armcompute.VirtualMachineRunCommandUpdate{
			Properties: &armcompute.VirtualMachineRunCommandProperties{
				Source: &armcompute.VirtualMachineRunCommandScriptSource{
					Script: to.Ptr("Write-Host Script Source Updated!"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json")
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Script Source Updated!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineRunCommands_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a run command."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteRunCommand.json")
}

func (testsuite *MockTestSuite) TestVirtualMachineRunCommands_GetByVirtualMachine() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a run command."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetByVirtualMachine(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		&armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRunCommand.json")
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineRunCommands_ListByVirtualMachine() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListRunCommandsInVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in a Virtual Machine."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByVirtualMachinePager("myResourceGroup",
		"myVM",
		&armcompute.VirtualMachineRunCommandsClientListByVirtualMachineOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListRunCommandsInVM.json")
		// Response check
		pagerExampleRes := armcompute.VirtualMachineRunCommandsListResult{
			Value: []*armcompute.VirtualMachineRunCommand{
				{
					Name:     to.Ptr("myRunCommand"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armcompute.VirtualMachineRunCommandProperties{
						AsyncExecution: to.Ptr(false),
						Parameters: []*armcompute.RunCommandInputParameter{
							{
								Name:  to.Ptr("param1"),
								Value: to.Ptr("value1"),
							},
							{
								Name:  to.Ptr("param2"),
								Value: to.Ptr("value2"),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						RunAsUser:         to.Ptr("user1"),
						Source: &armcompute.VirtualMachineRunCommandScriptSource{
							Script: to.Ptr("Write-Host Hello World!"),
						},
						TimeoutInSeconds: to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineRunCommandsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineRunCommandsListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListRunCommandsInVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMRunCommands_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM run command."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		armcompute.VirtualMachineRunCommand{
			Location: to.Ptr("West US"),
			Properties: &armcompute.VirtualMachineRunCommandProperties{
				AsyncExecution: to.Ptr(false),
				Parameters: []*armcompute.RunCommandInputParameter{
					{
						Name:  to.Ptr("param1"),
						Value: to.Ptr("value1"),
					},
					{
						Name:  to.Ptr("param2"),
						Value: to.Ptr("value2"),
					}},
				RunAsPassword: to.Ptr("<runAsPassword>"),
				RunAsUser:     to.Ptr("user1"),
				Source: &armcompute.VirtualMachineRunCommandScriptSource{
					Script: to.Ptr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Ptr[int32](3600),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json")
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMRunCommands_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM run command."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		armcompute.VirtualMachineRunCommandUpdate{
			Properties: &armcompute.VirtualMachineRunCommandProperties{
				Source: &armcompute.VirtualMachineRunCommandScriptSource{
					Script: to.Ptr("Write-Host Script Source Updated!"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json")
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Script Source Updated!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMRunCommands_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM run command."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteVirtualMachineScaleSetVMRunCommands.json")
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMRunCommands_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM run commands."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		&armcompute.VirtualMachineScaleSetVMRunCommandsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMRunCommands.json")
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestVirtualMachineScaleSetVMRunCommands_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in Vmss instance."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myResourceGroup",
		"myvmScaleSet",
		"0",
		&armcompute.VirtualMachineScaleSetVMRunCommandsClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMRunCommands.json")
		// Response check
		pagerExampleRes := armcompute.VirtualMachineRunCommandsListResult{
			Value: []*armcompute.VirtualMachineRunCommand{
				{
					Name:     to.Ptr("myRunCommand"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.VirtualMachineRunCommandProperties{
						AsyncExecution: to.Ptr(false),
						Parameters: []*armcompute.RunCommandInputParameter{
							{
								Name:  to.Ptr("param1"),
								Value: to.Ptr("value1"),
							},
							{
								Name:  to.Ptr("param2"),
								Value: to.Ptr("value2"),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						RunAsUser:         to.Ptr("user1"),
						Source: &armcompute.VirtualMachineRunCommandScriptSource{
							Script: to.Ptr("Write-Host Hello World!"),
						},
						TimeoutInSeconds: to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineRunCommandsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineRunCommandsListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestResourceSKUs_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs"},
	})
	client, err := armcompute.NewResourceSKUsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkus.json")
		// Response check
		pagerExampleRes := armcompute.ResourceSKUsResult{
			Value: []*armcompute.ResourceSKU{
				{
					Name: to.Ptr("Standard_A0"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("20480"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("0.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("50"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
								{
									Name: []*string{
										to.Ptr("2")},
									Capabilities: []*armcompute.ResourceSKUCapabilities{
										{
											Name:  to.Ptr("UltraSSDAvailable"),
											Value: to.Ptr("True"),
										}},
								}},
							Zones: []*string{
								to.Ptr("2"),
								to.Ptr("1")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A0"),
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("Standard_A1"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("71680"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("1.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("True"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("100"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							Zones: []*string{
								to.Ptr("1"),
								to.Ptr("2"),
								to.Ptr("3")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A1"),
					Tier:         to.Ptr("Standard"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUsResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkusForARegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs for the specified region"},
	})
	client, err = armcompute.NewResourceSKUsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager = client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: to.Ptr("location eq 'westus'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkusForARegion.json")
		// Response check
		pagerExampleRes := armcompute.ResourceSKUsResult{
			Value: []*armcompute.ResourceSKU{
				{
					Name: to.Ptr("Standard_A0"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("20480"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("0.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("50"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
								{
									Name: []*string{
										to.Ptr("2")},
									Capabilities: []*armcompute.ResourceSKUCapabilities{
										{
											Name:  to.Ptr("UltraSSDAvailable"),
											Value: to.Ptr("True"),
										}},
								}},
							Zones: []*string{
								to.Ptr("2"),
								to.Ptr("1")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A0"),
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("Standard_A1"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("71680"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("1.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("True"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("100"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							Zones: []*string{
								to.Ptr("1"),
								to.Ptr("2"),
								to.Ptr("3")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A1"),
					Tier:         to.Ptr("Standard"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUsResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2019-04-01/examples/ListAvailableResourceSkusForARegion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDisks_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk access resource."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskAccessID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
				DiskSizeGB:          to.Ptr[int32](200),
				NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowPrivate),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json")
	// Response check
	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskAccessID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowPrivate),
			ProvisioningState:   to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk encryption set."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskSizeGB: to.Ptr[int32](200),
				Encryption: &armcompute.Encryption{
					DiskEncryptionSetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
			Encryption: &armcompute.Encryption{
				DiskEncryptionSetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by copying a snapshot."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
					SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from a different subscription."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
					SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from the same subscription."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
					SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from a platform image."},
	})
	client, err = armcompute.NewDisksClient("{subscriptionId}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
					ImageReference: &armcompute.ImageDiskReference{
						ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
					},
				},
				OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("{sku}"),
				Product:   to.Ptr("{offer}"),
				Publisher: to.Ptr("{publisher}"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAPlatformImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from an existing managed disk in the same or different subscription."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk2",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
					SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with security profile"},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("North Central US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
					ImageReference: &armcompute.ImageDiskReference{
						ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
					},
				},
				OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				SecurityProfile: &armcompute.DiskSecurityProfile{
					SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("North Central US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
				},
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSecurityProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with ssd zrs account type."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskSizeGB: to.Ptr[int32](200),
			},
			SKU: &armcompute.DiskSKU{
				Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumZRS),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumZRS),
			Tier: to.Ptr("Premium"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed upload disk."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
					UploadSizeBytes: to.Ptr[int64](10737418752),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedUploadDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk in extended location."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("{edge-zone-id}"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskSizeGB: to.Ptr[int32](200),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("{edge-zone-id}"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskSizeGB: to.Ptr[int32](200),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAnEmptyManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ultra managed disk with logicalSectorSize 512E"},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
					LogicalSectorSize: to.Ptr[int32](512),
				},
				DiskSizeGB: to.Ptr[int32](200),
			},
			SKU: &armcompute.DiskSKU{
				Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
				LogicalSectorSize: to.Ptr[int32](512),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
			Tier: to.Ptr("Ultra"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDisks_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a bursting enabled managed disk."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				BurstingEnabled: to.Ptr(true),
				DiskSizeGB:      to.Ptr[int32](1024),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json")
	// Response check
	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			BurstingEnabled: to.Ptr(true),
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](1024),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add purchase plan."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				PurchasePlan: &armcompute.DiskPurchasePlan{
					Name:          to.Ptr("myPurchasePlanName"),
					Product:       to.Ptr("myPurchasePlanProduct"),
					PromotionCode: to.Ptr("myPurchasePlanPromotionCode"),
					Publisher:     to.Ptr("myPurchasePlanPublisher"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:          to.Ptr("myPurchasePlanName"),
				Product:       to.Ptr("myPurchasePlanProduct"),
				PromotionCode: to.Ptr("myPurchasePlanPromotionCode"),
				Publisher:     to.Ptr("myPurchasePlanPublisher"),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add supportsHibernation."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				SupportsHibernation: to.Ptr(true),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			DiskSizeGB:          to.Ptr[int32](127),
			HyperVGeneration:    to.Ptr(armcompute.HyperVGenerationV1),
			OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState:   to.Ptr("Succeeded"),
			SupportsHibernation: to.Ptr(true),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to change tier."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				Tier: to.Ptr("P30"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			ProvisioningState: to.Ptr("Succeeded"),
			Tier:              to.Ptr("P30"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToChangeTier.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to disable bursting."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				BurstingEnabled: to.Ptr(false),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToDisableBursting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update managed disk to remove disk access resource association."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json")
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			ProvisioningState:   to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDisks_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a managed disk."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myManagedDisk",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAManagedDisk.json")
	// Response check
	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myManagedDisk"),
		Type:     to.Ptr("Microsoft.Compute/disks"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("ManagedDisks"),
		},
		ManagedBy: to.Ptr("/subscriptions/123caaa-123v-v211-a49f-f88ccac5bf88/resourceGroups/ResourceGroupName/providers/Microsoft.Compute/virtualMachines/TestVM414689371c88843d65ec"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB: to.Ptr[int32](10),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079872+00:00"); return t }()),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDisks_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDisks_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a resource group."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInAResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.DiskList{
			Value: []*armcompute.Disk{
				{
					Name:     to.Ptr("myManagedDisk1"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("ManagedDisks"),
					},
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
							SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myManagedDisk2"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
						},
						DiskSizeGB: to.Ptr[int32](10),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872242+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myManagedDisk3"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("ManagedDisks"),
					},
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
							ImageReference: &armcompute.ImageDiskReference{
								ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
							},
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.3973934+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDisks_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a subscription."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.DiskList{
			Value: []*armcompute.Disk{
				{
					Name:     to.Ptr("myManagedDisk1"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("ManagedDisks"),
					},
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
							SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myManagedDisk2"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
						},
						DiskSizeGB: to.Ptr[int32](10),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872242+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myManagedDisk3"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk3"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("ManagedDisks"),
					},
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
							ImageReference: &armcompute.ImageDiskReference{
								ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
							},
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.3973934+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListManagedDisksInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDisks_GrantAccess() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDisks_RevokeAccess() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSnapshots_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from a different subscription."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot1",
		armcompute.Snapshot{
			Location: to.Ptr("West US"),
			Properties: &armcompute.SnapshotProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
					SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	// Response check
	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot1"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from the same subscription."},
	})
	client, err = armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot1",
		armcompute.Snapshot{
			Location: to.Ptr("West US"),
			Properties: &armcompute.SnapshotProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
					SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	// Response check
	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot1"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot from an existing snapshot in the same or a different subscription."},
	})
	client, err = armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot2",
		armcompute.Snapshot{
			Location: to.Ptr("West US"),
			Properties: &armcompute.SnapshotProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
					SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json")
	// Response check
	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSnapshots_Update() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSnapshots_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a snapshot."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySnapshot",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutASnapshot.json")
	// Response check
	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot"),
		Type:     to.Ptr("Microsoft.Compute/snapshots"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Snapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
				SourceUniqueID:   to.Ptr("d633885d-d102-4481-901e-5b2413d1a7be"),
			},
			DiskSizeGB: to.Ptr[int32](100),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSnapshots_Delete() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSnapshots_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a resource group."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInAResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.SnapshotList{
			Value: []*armcompute.Snapshot{
				{
					Name:     to.Ptr("mySnapshot"),
					Type:     to.Ptr("Microsoft.Compute/snapshots"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Snapshots"),
					},
					Properties: &armcompute.SnapshotProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
							SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SnapshotList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SnapshotList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSnapshots_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a subscription."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.SnapshotList{
			Value: []*armcompute.Snapshot{
				{
					Name:     to.Ptr("mySnapshot1"),
					Type:     to.Ptr("Microsoft.Compute/snapshots"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Snapshots"),
					},
					Properties: &armcompute.SnapshotProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
							SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.6630569+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("mySnapshot2"),
					Type:     to.Ptr("Microsoft.Compute/snapshots"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Snapshots"),
					},
					Properties: &armcompute.SnapshotProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
							SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
							StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.3247198+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SnapshotList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SnapshotList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListSnapshotsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSnapshots_GrantAccess() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestSnapshots_RevokeAccess() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestDiskEncryptionSets_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set with key vault from a different subscription."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSet{
			Location: to.Ptr("West US"),
			Identity: &armcompute.EncryptionSetIdentity{
				Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
			},
			Properties: &armcompute.EncryptionSetProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
				},
				EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json")
	// Response check
	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:   []*armcompute.KeyForDiskEncryptionSet{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set."},
	})
	client, err = armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSet{
			Location: to.Ptr("West US"),
			Identity: &armcompute.EncryptionSetIdentity{
				Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
			},
			Properties: &armcompute.EncryptionSetProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
					SourceVault: &armcompute.SourceVault{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json")
	// Response check
	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:   []*armcompute.KeyForDiskEncryptionSet{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskEncryptionSets_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Succeeded"},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSetUpdate{
			Identity: &armcompute.EncryptionSetIdentity{
				Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
			},
			Properties: &armcompute.DiskEncryptionSetUpdateProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				},
				EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
				RotationToLatestKeyVersionEnabled: to.Ptr(true),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json")
	// Response check
	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/KeyVersion2"),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079872+00:00"); return t }()),
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Updating"},
	})
	client, err = armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSetUpdate{
			Identity: &armcompute.EncryptionSetIdentity{
				Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
			},
			Properties: &armcompute.DiskEncryptionSetUpdateProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				},
				EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
				RotationToLatestKeyVersionEnabled: to.Ptr(true),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json")
	// Response check
	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion2"),
			},
			EncryptionType:           to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079872+00:00"); return t }()),
			PreviousKeys: []*armcompute.KeyForDiskEncryptionSet{
				{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				}},
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set."},
	})
	client, err = armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSetUpdate{
			Properties: &armcompute.DiskEncryptionSetUpdateProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
					SourceVault: &armcompute.SourceVault{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			},
			Tags: map[string]*string{
				"department": to.Ptr("Development"),
				"project":    to.Ptr("Encryption"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json")
	// Response check
	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType:           to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T04:41:35.079872+00:00"); return t }()),
			PreviousKeys:             []*armcompute.KeyForDiskEncryptionSet{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskEncryptionSets_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk encryption set."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskEncryptionSet.json")
	// Response check
	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskEncryptionSets_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk encryption set."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskEncryptionSet.json")
}

func (testsuite *MockTestSuite) TestDiskEncryptionSets_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a resource group."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.DiskEncryptionSetList{
			Value: []*armcompute.DiskEncryptionSet{
				{
					Name:     to.Ptr("myDiskEncryptionSet"),
					Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Encryption"),
					},
					Identity: &armcompute.EncryptionSetIdentity{
						Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
					},
					Properties: &armcompute.EncryptionSetProperties{
						ActiveKey: &armcompute.KeyForDiskEncryptionSet{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
						PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("myDiskEncryptionSet2"),
					Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Encryption"),
					},
					Identity: &armcompute.EncryptionSetIdentity{
						Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
					},
					Properties: &armcompute.EncryptionSetProperties{
						ActiveKey: &armcompute.KeyForDiskEncryptionSet{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
							},
						},
						EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
						PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskEncryptionSetList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskEncryptionSetList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDiskEncryptionSets_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a subscription."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.DiskEncryptionSetList{
			Value: []*armcompute.DiskEncryptionSet{
				{
					Name:     to.Ptr("myDiskEncryptionSet"),
					Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Encryption"),
					},
					Identity: &armcompute.EncryptionSetIdentity{
						Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
					},
					Properties: &armcompute.EncryptionSetProperties{
						ActiveKey: &armcompute.KeyForDiskEncryptionSet{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
						PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("myDiskEncryptionSet2"),
					Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Encryption"),
					},
					Identity: &armcompute.EncryptionSetIdentity{
						Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
					},
					Properties: &armcompute.EncryptionSetProperties{
						ActiveKey: &armcompute.KeyForDiskEncryptionSet{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
							},
						},
						EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
						PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskEncryptionSetList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskEncryptionSetList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDiskEncryptionSets_ListAssociatedResources() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetAssociatedResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all resources that are encrypted with this disk encryption set."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListAssociatedResourcesPager("myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetAssociatedResources.json")
		// Response check
		pagerExampleRes := armcompute.ResourceURIList{
			Value: []*string{
				to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
				to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceURIList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceURIList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskEncryptionSetAssociatedResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskAccess",
		armcompute.DiskAccess{
			Location: to.Ptr("West US"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json")
	// Response check
	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskAccessProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskAccess)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/CreateADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskAccess",
		armcompute.DiskAccessUpdate{
			Tags: map[string]*string{
				"department": to.Ptr("Development"),
				"project":    to.Ptr("PrivateEndpoints"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json")
	// Response check
	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskAccess)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/UpdateADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource with private endpoints."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json")
	// Response check
	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
		Properties: &armcompute.DiskAccessProperties{
			PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
				{
					Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
					Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
					Properties: &armcompute.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcompute.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskAccess)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource."},
	})
	client, err = armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccess.json")
	// Response check
	exampleRes = armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
		Properties: &armcompute.DiskAccessProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskAccess)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteADiskAccess.json")
}

func (testsuite *MockTestSuite) TestDiskAccesses_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a resource group."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInAResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.DiskAccessList{
			Value: []*armcompute.DiskAccess{
				{
					Name:     to.Ptr("myDiskAccess"),
					Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("PrivateEndpoints"),
					},
					Properties: &armcompute.DiskAccessProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myDiskAccess2"),
					Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("PrivateEndpoints"),
					},
					Properties: &armcompute.DiskAccessProperties{
						PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
							{
								Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
								Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
								Properties: &armcompute.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armcompute.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
									},
									PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-Approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskAccessList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskAccessList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a subscription."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.DiskAccessList{
			Value: []*armcompute.DiskAccess{
				{
					Name:     to.Ptr("myDiskAccess"),
					Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("PrivateEndpoints"),
					},
					Properties: &armcompute.DiskAccessProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myDiskAccess2"),
					Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("PrivateEndpoints"),
					},
					Properties: &armcompute.DiskAccessProperties{
						PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
							{
								Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
								Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
								Properties: &armcompute.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armcompute.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
									},
									PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-Approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskAccessList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskAccessList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskAccessesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_GetPrivateLinkResources() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskAccessPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all possible private link resources under disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetPrivateLinkResources(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskAccessPrivateLinkResources.json")
	// Response check
	exampleRes := armcompute.PrivateLinkResourceListResult{
		Value: []*armcompute.PrivateLinkResource{
			{
				Name: to.Ptr("disks"),
				Type: to.Ptr("Microsoft.Compute/diskAccesses/privateLinkResources"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateLinkResources/disks"),
				Properties: &armcompute.PrivateLinkResourceProperties{
					GroupID: to.Ptr("disks"),
					RequiredMembers: []*string{
						to.Ptr("diskAccess_1")},
					RequiredZoneNames: []*string{
						to.Ptr("privatelink.blob.core.windows.net")},
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskAccessPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_UpdateAPrivateEndpointConnection() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve a Private Endpoint Connection under a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdateAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		armcompute.PrivateEndpointConnection{
			Properties: &armcompute.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approving myPrivateEndpointConnection"),
					Status:      to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json")
	// Response check
	exampleRes := armcompute.PrivateEndpointConnection{
		Name: to.Ptr("myPrivateEndpointConnectionName"),
		Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnectionName"),
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcompute.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Approving myPrivateEndpointConnection"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ApprovePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_GetAPrivateEndpointConnection() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json")
	// Response check
	exampleRes := armcompute.PrivateEndpointConnection{
		Name: to.Ptr("myPrivateEndpointConnection"),
		Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcompute.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskAccesses_DeleteAPrivateEndpointConnection() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection under a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDeleteAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/DeleteAPrivateEndpointConnection.json")
}

func (testsuite *MockTestSuite) TestDiskAccesses_ListPrivateEndpointConnections() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPrivateEndpointConnectionsPager("myResourceGroup",
		"myDiskAccess",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json")
		// Response check
		pagerExampleRes := armcompute.PrivateEndpointConnectionListResult{
			Value: []*armcompute.PrivateEndpointConnection{
				{
					Name: to.Ptr("myPrivateEndpointConnection"),
					Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
					Properties: &armcompute.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcompute.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestDiskRestorePoint_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskRestorePointResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"rpc",
		"vmrp",
		"TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskRestorePointResources.json")
	// Response check
	exampleRes := armcompute.DiskRestorePoint{
		Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		Properties: &armcompute.DiskRestorePointProperties{
			FamilyID:         to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			OSType:           to.Ptr(armcompute.OperatingSystemTypesWindows),
			SourceResourceID: to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
			SourceUniqueID:   to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
			TimeCreated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskRestorePoint) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskRestorePoint)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/GetDiskRestorePointResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestDiskRestorePoint_ListByRestorePoint() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByRestorePointPager("myResourceGroup",
		"rpc",
		"vmrp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json")
		// Response check
		pagerExampleRes := armcompute.DiskRestorePointList{
			Value: []*armcompute.DiskRestorePoint{
				{
					Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
					Properties: &armcompute.DiskRestorePointProperties{
						FamilyID:         to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
						HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
						OSType:           to.Ptr(armcompute.OperatingSystemTypesWindows),
						SourceResourceID: to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
						SourceUniqueID:   to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
						TimeCreated:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079872+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskRestorePointList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskRestorePointList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestGalleries_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery with sharing profile."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.Gallery{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryProperties{
				Description: to.Ptr("This is the gallery description."),
				SharingProfile: &armcompute.SharingProfile{
					Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json")
	// Response check
	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
			SharingProfile: &armcompute.SharingProfile{
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryWithSharingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery."},
	})
	client, err = armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.Gallery{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryProperties{
				Description: to.Ptr("This is the gallery description."),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json")
	// Response check
	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleries_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.GalleryUpdate{
			Properties: &armcompute.GalleryProperties{
				Description: to.Ptr("This is the gallery description."),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json")
	// Response check
	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleries_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryWithSelectPermissions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery with select permissions."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		&armcompute.GalleriesClientGetOptions{Select: to.Ptr(armcompute.SelectPermissionsPermissions)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryWithSelectPermissions.json")
	// Response check
	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			SharingProfile: &armcompute.SharingProfile{
				Groups: []*armcompute.SharingProfileGroup{
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
						IDs: []*string{
							to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
							to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
					},
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
						IDs: []*string{
							to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
					}},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryWithSelectPermissions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err = armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		&armcompute.GalleriesClientGetOptions{Select: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGallery.json")
	// Response check
	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleries_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGallery.json")
}

func (testsuite *MockTestSuite) TestGalleries_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a resource group."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInAResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.GalleryList{
			Value: []*armcompute.Gallery{
				{
					Name:     to.Ptr("myGalleryName"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryProperties{
						Description: to.Ptr("This is the gallery description."),
						Identifier: &armcompute.GalleryIdentifier{
							UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
						},
						ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestGalleries_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a subscription."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInASubscription.json")
		// Response check
		pagerExampleRes := armcompute.GalleryList{
			Value: []*armcompute.Gallery{
				{
					Name:     to.Ptr("myGalleryName"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryProperties{
						Description: to.Ptr("This is the gallery description."),
						Identifier: &armcompute.GalleryIdentifier{
							UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
						},
						ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleriesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestGalleryImages_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery image."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		armcompute.GalleryImage{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageProperties{
				HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
				Identifier: &armcompute.GalleryImageIdentifier{
					Offer:     to.Ptr("myOfferName"),
					Publisher: to.Ptr("myPublisherName"),
					SKU:       to.Ptr("mySkuName"),
				},
				OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
				OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json")
	// Response check
	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImage)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryImages_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery image."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		armcompute.GalleryImageUpdate{
			Properties: &armcompute.GalleryImageProperties{
				HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
				Identifier: &armcompute.GalleryImageIdentifier{
					Offer:     to.Ptr("myOfferName"),
					Publisher: to.Ptr("myPublisherName"),
					SKU:       to.Ptr("mySkuName"),
				},
				OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
				OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json")
	// Response check
	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImage)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryImages_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImage.json")
	// Response check
	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImage)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryImages_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImage.json")
}

func (testsuite *MockTestSuite) TestGalleryImages_ListByGallery() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImagesInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery images in a gallery."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByGalleryPager("myResourceGroup",
		"myGalleryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImagesInAGallery.json")
		// Response check
		pagerExampleRes := armcompute.GalleryImageList{
			Value: []*armcompute.GalleryImage{
				{
					Name:     to.Ptr("myGalleryImageName"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryImageProperties{
						HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
						Identifier: &armcompute.GalleryImageIdentifier{
							Offer:     to.Ptr("myOfferName"),
							Publisher: to.Ptr("myPublisherName"),
							SKU:       to.Ptr("mySkuName"),
						},
						OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryImageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryImageList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImagesInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestGalleryImageVersions_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using VM as source."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json")
	// Response check
	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using managed image as source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using mix of disks and snapshots as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					DataDiskImages: []*armcompute.GalleryDataDiskImage{
						{
							HostCaching: to.Ptr(armcompute.HostCachingNone),
							Source: &armcompute.GalleryArtifactVersionSource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDiskImage: &armcompute.GalleryOSDiskImage{
						HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using shared image as source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using snapshots as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					DataDiskImages: []*armcompute.GalleryDataDiskImage{
						{
							HostCaching: to.Ptr(armcompute.HostCachingNone),
							Source: &armcompute.GalleryArtifactVersionSource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDiskImage: &armcompute.GalleryOSDiskImage{
						HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using vhd as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name:                 to.Ptr("East US"),
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					DataDiskImages: []*armcompute.GalleryDataDiskImage{
						{
							HostCaching: to.Ptr(armcompute.HostCachingNone),
							Source: &armcompute.GalleryArtifactVersionSource{
								ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
								URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDiskImage: &armcompute.GalleryOSDiskImage{
						HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryImageVersions_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version (Managed Image as source)."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersionUpdate{
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name:                 to.Ptr("East US"),
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json")
	// Response check
	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version without source id."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersionUpdate{
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name:                 to.Ptr("East US"),
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryImageVersionWithoutSourceId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryImageVersions_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with replication status."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientGetOptions{Expand: to.Ptr(armcompute.ReplicationStatusTypesReplicationStatus)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithReplicationStatus.json")
	// Response check
	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			ReplicationStatus: &armcompute.ReplicationStatus{
				AggregatedState: to.Ptr(armcompute.AggregatedReplicationStateCompleted),
				Summary: []*armcompute.RegionalReplicationStatus{
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("West US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					},
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("East US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithReplicationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with snapshots as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithSnapshotsAsSource.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source:      &armcompute.GalleryArtifactVersionSource{},
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source:      &armcompute.GalleryArtifactVersionSource{},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithVhdAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with vhd as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithVhdAsSource.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersionWithVhdAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersion.json")
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryImageVersions_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image version."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryImageVersion.json")
}

func (testsuite *MockTestSuite) TestGalleryImageVersions_ListByGalleryImage() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImageVersionsInAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery image versions in a gallery image definition."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByGalleryImagePager("myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImageVersionsInAGalleryImage.json")
		// Response check
		pagerExampleRes := armcompute.GalleryImageVersionList{
			Value: []*armcompute.GalleryImageVersion{
				{
					Name:     to.Ptr("1.0.0"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryImageVersionProperties{
						ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
						PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
							PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
							ReplicaCount:       to.Ptr[int32](1),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							TargetRegions: []*armcompute.TargetRegion{
								{
									Name: to.Ptr("West US"),
									Encryption: &armcompute.EncryptionImages{
										DataDiskImages: []*armcompute.DataDiskImageEncryption{
											{
												DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
												Lun:                 to.Ptr[int32](0),
											},
											{
												DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
												Lun:                 to.Ptr[int32](1),
											}},
										OSDiskImage: &armcompute.OSDiskImageEncryption{
											DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
										},
									},
									RegionalReplicaCount: to.Ptr[int32](1),
									StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
								},
								{
									Name:                 to.Ptr("East US"),
									RegionalReplicaCount: to.Ptr[int32](2),
									StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
								}},
						},
						StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
							DataDiskImages: []*armcompute.GalleryDataDiskImage{
								{
									HostCaching: to.Ptr(armcompute.HostCachingNone),
									SizeInGB:    to.Ptr[int32](10),
									Lun:         to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.GalleryOSDiskImage{
								HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
								SizeInGB:    to.Ptr[int32](10),
							},
							Source: &armcompute.GalleryArtifactVersionSource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryImageVersionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryImageVersionList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryImageVersionsInAGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestGalleryApplications_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		armcompute.GalleryApplication{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryApplicationProperties{
				Description:         to.Ptr("This is the gallery application description."),
				Eula:                to.Ptr("This is the gallery application EULA."),
				PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
				SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json")
	// Response check
	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Type:     to.Ptr("Microsoft.Compute/galleries"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplication)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryApplications_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		armcompute.GalleryApplicationUpdate{
			Properties: &armcompute.GalleryApplicationProperties{
				Description:         to.Ptr("This is the gallery application description."),
				Eula:                to.Ptr("This is the gallery application EULA."),
				PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
				SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json")
	// Response check
	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Type:     to.Ptr("Microsoft.Compute/galleries"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplication)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryApplications_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplication.json")
	// Response check
	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplication)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryApplications_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplication.json")
}

func (testsuite *MockTestSuite) TestGalleryApplications_ListByGallery() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationsInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Applications in a gallery."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByGalleryPager("myResourceGroup",
		"myGalleryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationsInAGallery.json")
		// Response check
		pagerExampleRes := armcompute.GalleryApplicationList{
			Value: []*armcompute.GalleryApplication{
				{
					Name:     to.Ptr("myGalleryApplicationName"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryApplicationProperties{
						Description:         to.Ptr("This is the gallery application description."),
						Eula:                to.Ptr("This is the gallery application EULA."),
						PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
						ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
						SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryApplicationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryApplicationList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationsInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestGalleryApplicationVersions_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application Version."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		armcompute.GalleryApplicationVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryApplicationVersionProperties{
				PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00Z"); return t }()),
					ReplicaCount:       to.Ptr[int32](1),
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
						}},
					ManageActions: &armcompute.UserArtifactManage{
						Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.Ptr("del C:\\package "),
					},
					Source: &armcompute.UserArtifactSource{
						MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json")
	// Response check
	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/CreateOrUpdateASimpleGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryApplicationVersions_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application Version."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		armcompute.GalleryApplicationVersionUpdate{
			Properties: &armcompute.GalleryApplicationVersionProperties{
				PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00Z"); return t }()),
					ReplicaCount:       to.Ptr[int32](1),
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
						}},
					ManageActions: &armcompute.UserArtifactManage{
						Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.Ptr("del C:\\package "),
					},
					Source: &armcompute.UserArtifactSource{
						MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json")
	// Response check
	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/UpdateASimpleGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryApplicationVersions_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersionWithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version with replication status."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		&armcompute.GalleryApplicationVersionsClientGetOptions{Expand: to.Ptr(armcompute.ReplicationStatusTypesReplicationStatus)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersionWithReplicationStatus.json")
	// Response check
	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			ReplicationStatus: &armcompute.ReplicationStatus{
				AggregatedState: to.Ptr(armcompute.AggregatedReplicationStateCompleted),
				Summary: []*armcompute.RegionalReplicationStatus{
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("West US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					}},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersionWithReplicationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version."},
	})
	client, err = armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		&armcompute.GalleryApplicationVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersion.json")
	// Response check
	exampleRes = armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetAGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestGalleryApplicationVersions_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application Version."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/DeleteAGalleryApplicationVersion.json")
}

func (testsuite *MockTestSuite) TestGalleryApplicationVersions_ListByGalleryApplication() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationVersionsInAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Application Versions in a gallery Application Definition."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByGalleryApplicationPager("myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationVersionsInAGalleryApplication.json")
		// Response check
		pagerExampleRes := armcompute.GalleryApplicationVersionList{
			Value: []*armcompute.GalleryApplicationVersion{
				{
					Name:     to.Ptr("1.0.0"),
					Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
					ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryApplicationVersionProperties{
						ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
						PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
							EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
							ExcludeFromLatest:  to.Ptr(false),
							PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
							ReplicaCount:       to.Ptr[int32](1),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							TargetRegions: []*armcompute.TargetRegion{
								{
									Name:                 to.Ptr("West US"),
									RegionalReplicaCount: to.Ptr[int32](1),
									StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
								}},
							EnableHealthCheck: to.Ptr(false),
							ManageActions: &armcompute.UserArtifactManage{
								Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
								Remove:  to.Ptr("del C:\\package "),
							},
							Source: &armcompute.UserArtifactSource{
								MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryApplicationVersionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryApplicationVersionList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListGalleryApplicationVersionsInAGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestGallerySharingProfile_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add sharing id to the sharing profile of a gallery."},
	})
	client, err := armcompute.NewGallerySharingProfileClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.SharingUpdate{
			Groups: []*armcompute.SharingProfileGroup{
				{
					Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
					IDs: []*string{
						to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
						to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
				},
				{
					Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
					IDs: []*string{
						to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
				}},
			OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesAdd),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json")
	// Response check
	exampleRes := armcompute.SharingUpdate{
		Groups: []*armcompute.SharingProfileGroup{
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
				IDs: []*string{
					to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
					to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
			},
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
				IDs: []*string{
					to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
			}},
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesAdd),
	}
	if !reflect.DeepEqual(exampleRes, res.SharingUpdate) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharingUpdate)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/AddToSharingProfileInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"reset sharing profile of a gallery."},
	})
	client, err = armcompute.NewGallerySharingProfileClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.SharingUpdate{
			OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesReset),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json")
	// Response check
	exampleRes = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesReset),
	}
	if !reflect.DeepEqual(exampleRes, res.SharingUpdate) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharingUpdate)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ResetSharingProfileInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSharedGalleries_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleries.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myLocation",
		&armcompute.SharedGalleriesClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleries.json")
		// Response check
		pagerExampleRes := armcompute.SharedGalleryList{
			Value: []*armcompute.SharedGallery{
				{
					Name:     to.Ptr("galleryUniqueName"),
					Location: to.Ptr("myLocation"),
					Identifier: &armcompute.SharedGalleryIdentifier{
						UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedGalleryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedGalleryList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleries.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSharedGalleries_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleriesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGallery.json")
	// Response check
	exampleRes := armcompute.SharedGallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedGallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedGallery)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSharedGalleryImages_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleryImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myLocation",
		"galleryUniqueName",
		&armcompute.SharedGalleryImagesClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImages.json")
		// Response check
		pagerExampleRes := armcompute.SharedGalleryImageList{
			Value: []*armcompute.SharedGalleryImage{
				{
					Name:     to.Ptr("myGalleryImageName"),
					Location: to.Ptr("myLocation"),
					Identifier: &armcompute.SharedGalleryIdentifier{
						UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
					},
					Properties: &armcompute.SharedGalleryImageProperties{
						HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
						Identifier: &armcompute.GalleryImageIdentifier{
							Offer:     to.Ptr("myOfferName"),
							Publisher: to.Ptr("myPublisherName"),
							SKU:       to.Ptr("mySkuName"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedGalleryImageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedGalleryImageList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSharedGalleryImages_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleryImagesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImage.json")
	// Response check
	exampleRes := armcompute.SharedGalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
		},
		Properties: &armcompute.SharedGalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedGalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedGalleryImage)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSharedGalleryImageVersions_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImageVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		&armcompute.SharedGalleryImageVersionsClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImageVersions.json")
		// Response check
		pagerExampleRes := armcompute.SharedGalleryImageVersionList{
			Value: []*armcompute.SharedGalleryImageVersion{
				{
					Name:     to.Ptr("myGalleryImageVersionName"),
					Location: to.Ptr("myLocation"),
					Identifier: &armcompute.SharedGalleryIdentifier{
						UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
					},
					Properties: &armcompute.SharedGalleryImageVersionProperties{
						EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28Z"); return t }()),
						PublishedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedGalleryImageVersionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedGalleryImageVersionList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/ListSharedGalleryImageVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSharedGalleryImageVersions_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		"myGalleryImageVersionName",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImageVersion.json")
	// Response check
	exampleRes := armcompute.SharedGalleryImageVersion{
		Name:     to.Ptr("myGalleryImageVersionName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
		},
		Properties: &armcompute.SharedGalleryImageVersionProperties{
			EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28Z"); return t }()),
			PublishedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28Z"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedGalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedGalleryImageVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2020-09-30/examples/GetASharedGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServiceRoleInstances_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json")
}

func (testsuite *MockTestSuite) TestCloudServiceRoleInstances_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServiceRoleInstancesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json")
	// Response check
	exampleRes := armcompute.RoleInstance{
		Name:     to.Ptr("{roleInstance-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.RoleInstanceProperties{
			NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
				NetworkInterfaces: []*armcompute.SubResource{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}/networkInterfaces/nic1"),
					}},
			},
		},
		SKU: &armcompute.InstanceSKU{
			Name: to.Ptr("Standard_D1_v2"),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RoleInstance) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RoleInstance)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServiceRoleInstances_GetInstanceView() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Instance View of Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetInstanceView(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json")
	// Response check
	exampleRes := armcompute.RoleInstanceView{
		PlatformFaultDomain:  to.Ptr[int32](0),
		PlatformUpdateDomain: to.Ptr[int32](0),
		PrivateID:            to.Ptr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e"),
		Statuses: []*armcompute.ResourceInstanceViewStatus{
			{
				Code:          to.Ptr("RoleState/RoleStateStarted"),
				DisplayStatus: to.Ptr("RoleStateStarted"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.RoleInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RoleInstanceView)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServiceRoleInstances_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Role Instances in a Cloud Service"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServiceRoleInstancesClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json")
		// Response check
		pagerExampleRes := armcompute.RoleInstanceListResult{
			Value: []*armcompute.RoleInstance{
				{
					Name:     to.Ptr("ContosoFrontend_IN_0"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.RoleInstanceProperties{
						NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
							NetworkInterfaces: []*armcompute.SubResource{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0/networkInterfaces/nic1"),
								}},
						},
					},
					SKU: &armcompute.InstanceSKU{
						Name: to.Ptr("Standard_D1_v2"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ContosoFrontend_IN_1"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.RoleInstanceProperties{
						NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
							NetworkInterfaces: []*armcompute.SubResource{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1/networkInterfaces/nic1"),
								}},
						},
					},
					SKU: &armcompute.InstanceSKU{
						Name: to.Ptr("Standard_D1_v2"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ContosoBackend_IN_0"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.RoleInstanceProperties{
						NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
							NetworkInterfaces: []*armcompute.SubResource{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0/networkInterfaces/nic1"),
								}},
						},
					},
					SKU: &armcompute.InstanceSKU{
						Name: to.Ptr("Standard_D1_v2"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ContosoBackend_IN_1"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.RoleInstanceProperties{
						NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
							NetworkInterfaces: []*armcompute.SubResource{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1/networkInterfaces/nic1"),
								}},
						},
					},
					SKU: &armcompute.InstanceSKU{
						Name: to.Ptr("Standard_D1_v2"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleInstanceListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCloudServiceRoleInstances_Restart() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRestart(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json")
}

func (testsuite *MockTestSuite) TestCloudServiceRoleInstances_Reimage() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginReimage(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json")
}

func (testsuite *MockTestSuite) TestCloudServiceRoleInstances_Rebuild() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRebuild(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json")
}

func (testsuite *MockTestSuite) TestCloudServiceRoleInstances_GetRemoteDesktopFile() {
	testsuite.T().Skip("Warning: No test steps for this operation!")
}

func (testsuite *MockTestSuite) TestCloudServiceRoles_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role"},
	})
	client, err := armcompute.NewCloudServiceRolesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"{role-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json")
	// Response check
	exampleRes := armcompute.CloudServiceRole{
		Name:     to.Ptr("{role-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/{role-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceRoleProperties{
			UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:{role-name}"),
		},
		SKU: &armcompute.CloudServiceRoleSKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudServiceRole) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudServiceRole)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServiceRoles_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Roles in a Cloud Service"},
	})
	client, err := armcompute.NewCloudServiceRolesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("ConstosoRG",
		"{cs-name}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json")
		// Response check
		pagerExampleRes := armcompute.CloudServiceRoleListResult{
			Value: []*armcompute.CloudServiceRole{
				{
					Name:     to.Ptr("ContosoFrontend"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoFrontend"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.CloudServiceRoleProperties{
						UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoFrontend"),
					},
					SKU: &armcompute.CloudServiceRoleSKU{
						Name:     to.Ptr("Standard_D1_v2"),
						Capacity: to.Ptr[int64](2),
						Tier:     to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ContosoBackend"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoBackend"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.CloudServiceRoleProperties{
						UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoBackend"),
					},
					SKU: &armcompute.CloudServiceRoleSKU{
						Name:     to.Ptr("Standard_D1_v2"),
						Capacity: to.Ptr[int64](2),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CloudServiceRoleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CloudServiceRoleListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCloudServices_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Multiple Roles"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		armcompute.CloudService{
			Location: to.Ptr("westus"),
			Properties: &armcompute.CloudServiceProperties{
				Configuration: to.Ptr("{ServiceConfiguration}"),
				NetworkProfile: &armcompute.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
						{
							Name: to.Ptr("contosolb"),
							Properties: &armcompute.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.Ptr("contosofe"),
										Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.Ptr("{PackageUrl}"),
				RoleProfile: &armcompute.CloudServiceRoleProfile{
					Roles: []*armcompute.CloudServiceRoleProfileProperties{
						{
							Name: to.Ptr("ContosoFrontend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						},
						{
							Name: to.Ptr("ContosoBackend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						}},
				},
				UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json")
	// Response check
	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("7f3edf91-cb34-4a3e-971a-177dc3dd43cb"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role"},
	})
	client, err = armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		armcompute.CloudService{
			Location: to.Ptr("westus"),
			Properties: &armcompute.CloudServiceProperties{
				Configuration: to.Ptr("{ServiceConfiguration}"),
				NetworkProfile: &armcompute.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
						{
							Name: to.Ptr("myLoadBalancer"),
							Properties: &armcompute.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.Ptr("myfe"),
										Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.Ptr("{PackageUrl}"),
				RoleProfile: &armcompute.CloudServiceRoleProfile{
					Roles: []*armcompute.CloudServiceRoleProfileProperties{
						{
							Name: to.Ptr("ContosoFrontend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						}},
				},
				UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json")
	// Response check
	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/5393f919-a68a-43d0-9063-4b2bda6bffdf/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("myLoadBalancer"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("myfe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("14d10b45-ced7-42ef-a406-50a3df2cea7d"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and Certificate from Key Vault"},
	})
	client, err = armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		armcompute.CloudService{
			Location: to.Ptr("westus"),
			Properties: &armcompute.CloudServiceProperties{
				Configuration: to.Ptr("{ServiceConfiguration}"),
				NetworkProfile: &armcompute.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
						{
							Name: to.Ptr("contosolb"),
							Properties: &armcompute.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.Ptr("contosofe"),
										Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &armcompute.CloudServiceOsProfile{
					Secrets: []*armcompute.CloudServiceVaultSecretGroup{
						{
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
							},
							VaultCertificates: []*armcompute.CloudServiceVaultCertificate{
								{
									CertificateURL: to.Ptr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
								}},
						}},
				},
				PackageURL: to.Ptr("{PackageUrl}"),
				RoleProfile: &armcompute.CloudServiceRoleProfile{
					Roles: []*armcompute.CloudServiceRoleProfileProperties{
						{
							Name: to.Ptr("ContosoFrontend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						}},
				},
				UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json")
	// Response check
	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{
					{
						SourceVault: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
						},
						VaultCertificates: []*armcompute.CloudServiceVaultCertificate{
							{
								CertificateURL: to.Ptr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
							}},
					}},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("60b6cd59-600b-4e02-b717-521b07aa94bf"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and RDP Extension"},
	})
	client, err = armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		armcompute.CloudService{
			Location: to.Ptr("westus"),
			Properties: &armcompute.CloudServiceProperties{
				Configuration: to.Ptr("{ServiceConfiguration}"),
				ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
					Extensions: []*armcompute.Extension{
						{
							Name: to.Ptr("RDPExtension"),
							Properties: &armcompute.CloudServiceExtensionProperties{
								Type:                    to.Ptr("RDP"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								ProtectedSettings:       to.Ptr("<PrivateConfig><Password>{password}</Password></PrivateConfig>"),
								Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
								Settings:                to.Ptr("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
								TypeHandlerVersion:      to.Ptr("1.2.1"),
							},
						}},
				},
				NetworkProfile: &armcompute.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
						{
							Name: to.Ptr("contosolb"),
							Properties: &armcompute.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.Ptr("contosofe"),
										Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.Ptr("{PackageUrl}"),
				RoleProfile: &armcompute.CloudServiceRoleProfile{
					Roles: []*armcompute.CloudServiceRoleProfileProperties{
						{
							Name: to.Ptr("ContosoFrontend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						}},
				},
				UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json")
	// Response check
	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProvisioningState:       to.Ptr("Succeeded"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							RolesAppliedTo: []*string{
								to.Ptr("*")},
							Settings:           to.Ptr("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
							TypeHandlerVersion: to.Ptr("1.2.1"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("c948cccb-bbfa-4516-a250-c28abc4d0c15"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServices_Update() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update existing Cloud Service to add tags"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		armcompute.CloudServiceUpdate{
			Tags: map[string]*string{
				"Documentation": to.Ptr("RestAPI"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json")
	// Response check
	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		Tags: map[string]*string{
			"Documentation": to.Ptr("RestAPI"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServices_Delete() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json")
}

func (testsuite *MockTestSuite) TestCloudServices_Get() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service with Multiple Roles and RDP Extension"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json")
	// Response check
	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProvisioningState:       to.Ptr("Succeeded"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							RolesAppliedTo: []*string{
								to.Ptr("*")},
							Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
							TypeHandlerVersion: to.Ptr("1.2.1"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServices_GetInstanceView() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Instance View with Multiple Roles"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetInstanceView(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json")
	// Response check
	exampleRes := armcompute.CloudServiceInstanceView{
		PrivateIDs: []*string{
			to.Ptr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e")},
		RoleInstance: &armcompute.InstanceViewStatusesSummary{
			StatusesSummary: []*armcompute.StatusCodeCount{
				{
					Code:  to.Ptr("ProvisioningState/succeeded"),
					Count: to.Ptr[int32](4),
				},
				{
					Code:  to.Ptr("PowerState/started"),
					Count: to.Ptr[int32](4),
				},
				{
					Code:  to.Ptr("RoleState/RoleStateStarted"),
					Count: to.Ptr[int32](4),
				}},
		},
		SdkVersion: to.Ptr("2.9.6496.3"),
		Statuses: []*armcompute.ResourceInstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T16:50:07.0953535+05:30"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/started"),
				DisplayStatus: to.Ptr("Started"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T16:50:07.0953535+05:30"); return t }()),
			},
			{
				Code:          to.Ptr("CurrentUpgradeDomain/-1"),
				DisplayStatus: to.Ptr("Current Upgrade Domain of cloud service is -1."),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			},
			{
				Code:          to.Ptr("MaxUpgradeDomain/1"),
				DisplayStatus: to.Ptr("Max Upgrade Domain of cloud service is 1."),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudServiceInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudServiceInstanceView)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServices_ListAll() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Subscription"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json")
		// Response check
		pagerExampleRes := armcompute.CloudServiceListResult{
			Value: []*armcompute.CloudService{
				{
					Name:     to.Ptr("{cs-name}"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.CloudServiceProperties{
						Configuration: to.Ptr("{ServiceConfiguration}"),
						ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
							Extensions: []*armcompute.Extension{
								{
									Name: to.Ptr("RDPExtension"),
									Properties: &armcompute.CloudServiceExtensionProperties{
										Type:                    to.Ptr("RDP"),
										AutoUpgradeMinorVersion: to.Ptr(false),
										ProvisioningState:       to.Ptr("Succeeded"),
										Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
										RolesAppliedTo: []*string{
											to.Ptr("*")},
										Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
										TypeHandlerVersion: to.Ptr("1.2.1"),
									},
								}},
						},
						NetworkProfile: &armcompute.CloudServiceNetworkProfile{
							LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
								{
									Name: to.Ptr("contosolb"),
									Properties: &armcompute.LoadBalancerConfigurationProperties{
										FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
											{
												Name: to.Ptr("contosofe"),
												Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
													PublicIPAddress: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
													},
												},
											}},
									},
								}},
						},
						OSProfile: &armcompute.CloudServiceOsProfile{
							Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						RoleProfile: &armcompute.CloudServiceRoleProfile{
							Roles: []*armcompute.CloudServiceRoleProfileProperties{
								{
									Name: to.Ptr("ContosoFrontend"),
									SKU: &armcompute.CloudServiceRoleSKU{
										Name:     to.Ptr("Standard_D1_v2"),
										Capacity: to.Ptr[int64](2),
										Tier:     to.Ptr("Standard"),
									},
								},
								{
									Name: to.Ptr("ContosoBackend"),
									SKU: &armcompute.CloudServiceRoleSKU{
										Name:     to.Ptr("Standard_D1_v2"),
										Capacity: to.Ptr[int64](2),
										Tier:     to.Ptr("Standard"),
									},
								}},
						},
						UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
						UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CloudServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CloudServiceListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCloudServices_List() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Resource Group"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("ConstosoRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json")
		// Response check
		pagerExampleRes := armcompute.CloudServiceListResult{
			Value: []*armcompute.CloudService{
				{
					Name:     to.Ptr("{cs-name}"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.CloudServiceProperties{
						Configuration: to.Ptr("{ServiceConfiguration}"),
						ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
							Extensions: []*armcompute.Extension{
								{
									Name: to.Ptr("RDPExtension"),
									Properties: &armcompute.CloudServiceExtensionProperties{
										Type:                    to.Ptr("RDP"),
										AutoUpgradeMinorVersion: to.Ptr(false),
										ProvisioningState:       to.Ptr("Succeeded"),
										Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
										RolesAppliedTo: []*string{
											to.Ptr("*")},
										Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
										TypeHandlerVersion: to.Ptr("1.2.1"),
									},
								}},
						},
						NetworkProfile: &armcompute.CloudServiceNetworkProfile{
							LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
								{
									Name: to.Ptr("contosolb"),
									Properties: &armcompute.LoadBalancerConfigurationProperties{
										FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
											{
												Name: to.Ptr("contosofe"),
												Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
													PublicIPAddress: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
													},
												},
											}},
									},
								}},
						},
						OSProfile: &armcompute.CloudServiceOsProfile{
							Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						RoleProfile: &armcompute.CloudServiceRoleProfile{
							Roles: []*armcompute.CloudServiceRoleProfileProperties{
								{
									Name: to.Ptr("ContosoFrontend"),
									SKU: &armcompute.CloudServiceRoleSKU{
										Name:     to.Ptr("Standard_D1_v2"),
										Capacity: to.Ptr[int64](2),
										Tier:     to.Ptr("Standard"),
									},
								},
								{
									Name: to.Ptr("ContosoBackend"),
									SKU: &armcompute.CloudServiceRoleSKU{
										Name:     to.Ptr("Standard_D1_v2"),
										Capacity: to.Ptr[int64](2),
										Tier:     to.Ptr("Standard"),
									},
								}},
						},
						UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
						UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CloudServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CloudServiceListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCloudServices_Start() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Cloud Service"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginStart(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json")
}

func (testsuite *MockTestSuite) TestCloudServices_PowerOff() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop or PowerOff Cloud Service"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginPowerOff(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json")
}

func (testsuite *MockTestSuite) TestCloudServices_Restart() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instances"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRestart(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginRestartOptions{Parameters: &armcompute.RoleInstances{
			RoleInstances: []*string{
				to.Ptr("ContosoFrontend_IN_0"),
				to.Ptr("ContosoBackend_IN_1")},
		},
		})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json")
}

func (testsuite *MockTestSuite) TestCloudServices_Reimage() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instances"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginReimage(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginReimageOptions{Parameters: &armcompute.RoleInstances{
			RoleInstances: []*string{
				to.Ptr("ContosoFrontend_IN_0"),
				to.Ptr("ContosoBackend_IN_1")},
		},
		})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json")
}

func (testsuite *MockTestSuite) TestCloudServices_Rebuild() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instances"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRebuild(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginRebuildOptions{Parameters: &armcompute.RoleInstances{
			RoleInstances: []*string{
				to.Ptr("ContosoFrontend_IN_0"),
				to.Ptr("ContosoBackend_IN_1")},
		},
		})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json")
}

func (testsuite *MockTestSuite) TestCloudServices_DeleteInstances() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instances"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDeleteInstances(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginDeleteInstancesOptions{Parameters: &armcompute.RoleInstances{
			RoleInstances: []*string{
				to.Ptr("ContosoFrontend_IN_0"),
				to.Ptr("ContosoBackend_IN_1")},
		},
		})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json")
}

func (testsuite *MockTestSuite) TestCloudServicesUpdateDomain_WalkUpdateDomain() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Cloud Service to specified Domain"},
	})
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginWalkUpdateDomain(ctx,
		"ConstosoRG",
		"{cs-name}",
		1,
		armcompute.UpdateDomain{},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json")
}

func (testsuite *MockTestSuite) TestCloudServicesUpdateDomain_GetUpdateDomain() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Update Domain"},
	})
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetUpdateDomain(ctx,
		"ConstosoRG",
		"{cs-name}",
		1,
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json")
	// Response check
	exampleRes := armcompute.UpdateDomain{
		Name: to.Ptr("1"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
	}
	if !reflect.DeepEqual(exampleRes, res.UpdateDomain) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.UpdateDomain)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServicesUpdateDomain_ListUpdateDomains() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Update Domains in Cloud Service"},
	})
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListUpdateDomainsPager("ConstosoRG",
		"{cs-name}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json")
		// Response check
		pagerExampleRes := armcompute.UpdateDomainListResult{
			Value: []*armcompute.UpdateDomain{
				{
					Name: to.Ptr("0"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/0"),
				},
				{
					Name: to.Ptr("1"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UpdateDomainListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UpdateDomainListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCloudServiceOperatingSystems_GetOSVersion() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Version"},
	})
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetOSVersion(ctx,
		"westus2",
		"WA-GUEST-OS-3.90_202010-02",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json")
	// Response check
	exampleRes := armcompute.OSVersion{
		Name:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
		Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
		Location: to.Ptr("westus2"),
		Properties: &armcompute.OSVersionProperties{
			Family:      to.Ptr("3"),
			FamilyLabel: to.Ptr("Windows Server 2012"),
			IsActive:    to.Ptr(true),
			IsDefault:   to.Ptr(true),
			Label:       to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
			Version:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OSVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OSVersion)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServiceOperatingSystems_ListOSVersions() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Versions in a subscription"},
	})
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListOSVersionsPager("westus2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json")
		// Response check
		pagerExampleRes := armcompute.OSVersionListResult{
			Value: []*armcompute.OSVersion{
				{
					Name:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
					Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
					Location: to.Ptr("westus2"),
					Properties: &armcompute.OSVersionProperties{
						Family:      to.Ptr("3"),
						FamilyLabel: to.Ptr("Windows Server 2012"),
						IsActive:    to.Ptr(true),
						IsDefault:   to.Ptr(true),
						Label:       to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
						Version:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
					},
				},
				{
					Name:     to.Ptr("WA-GUEST-OS-4.83_202010-02"),
					Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-4.83_202010-02"),
					Location: to.Ptr("westus2"),
					Properties: &armcompute.OSVersionProperties{
						Family:      to.Ptr("4"),
						FamilyLabel: to.Ptr("Windows Server 2012 R2"),
						IsActive:    to.Ptr(true),
						IsDefault:   to.Ptr(true),
						Label:       to.Ptr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
						Version:     to.Ptr("WA-GUEST-OS-4.83_202010-02"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OSVersionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OSVersionListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestCloudServiceOperatingSystems_GetOSFamily() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Family"},
	})
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.GetOSFamily(ctx,
		"westus2",
		"3",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json")
	// Response check
	exampleRes := armcompute.OSFamily{
		Name:     to.Ptr("3"),
		Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
		Location: to.Ptr("westus2"),
		Properties: &armcompute.OSFamilyProperties{
			Name:  to.Ptr("3"),
			Label: to.Ptr("Windows Server 2012"),
			Versions: []*armcompute.OSVersionPropertiesBase{
				{
					IsActive:  to.Ptr(true),
					IsDefault: to.Ptr(true),
					Label:     to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
					Version:   to.Ptr("WA-GUEST-OS-3.90_202010-02"),
				}},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OSFamily) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OSFamily)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestCloudServiceOperatingSystems_ListOSFamilies() {
	ctx := context.Background()
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Families in a subscription"},
	})
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListOSFamiliesPager("westus2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json")
		// Response check
		pagerExampleRes := armcompute.OSFamilyListResult{
			Value: []*armcompute.OSFamily{
				{
					Name:     to.Ptr("3"),
					Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
					Location: to.Ptr("westus2"),
					Properties: &armcompute.OSFamilyProperties{
						Name:  to.Ptr("3"),
						Label: to.Ptr("Windows Server 2012"),
						Versions: []*armcompute.OSVersionPropertiesBase{
							{
								IsActive:  to.Ptr(true),
								IsDefault: to.Ptr(true),
								Label:     to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
								Version:   to.Ptr("WA-GUEST-OS-3.90_202010-02"),
							}},
					},
				},
				{
					Name:     to.Ptr("4"),
					Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/4"),
					Location: to.Ptr("westus2"),
					Properties: &armcompute.OSFamilyProperties{
						Name:  to.Ptr("4"),
						Label: to.Ptr("Windows Server 2012 R2"),
						Versions: []*armcompute.OSVersionPropertiesBase{
							{
								IsActive:  to.Ptr(true),
								IsDefault: to.Ptr(true),
								Label:     to.Ptr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
								Version:   to.Ptr("WA-GUEST-OS-4.83_202010-02"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OSFamilyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OSFamilyListResult)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}
