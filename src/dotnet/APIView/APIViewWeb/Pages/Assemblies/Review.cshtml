@page "{id}/{revisionId?}"
@model APIViewWeb.Pages.Assemblies.ReviewPageModel
@{
    Layout = "ReviewLayout";
    ViewData["Title"] = Model.Review.DisplayName;
}

<div class="container-fluid">
    <div class="row mx-1 px-0 py-2 border-bottom">
        <div class="col-lg-12 d-flex px-0">
            @if (Model.Review.Language != null)
            {
                var imageSource = String.Empty;
                @switch (Model.Review.Language.ToLower())
                {
                    case "c#":
                        imageSource = "icons/csharp-original.svg";
                        break;
                    case "javascript":
                        imageSource = "icons/javascript-original.svg";
                        break;
                    case "python":
                        imageSource = "icons/python-original.svg";
                        break;
                    case "c":
                        imageSource = "icons/c-original.svg";
                        break;
                    case "c++":
                        imageSource = "icons/cplusplus-original.svg";
                        break;
                    case "go":
                        imageSource = "icons/go-original.svg";
                        break;
                    case "java":
                        imageSource = "icons/java-original.svg";
                        break;
                    case "swift":
                        imageSource = "icons/swift-original.svg";
                        break;
                    case "kotlin":
                        imageSource = "icons/kotlin-original.svg";
                        break;
                    case "json":
                        imageSource = "icons/json-original.svg";
                        break;
                    case "swagger":
                        imageSource = "icons/swagger-original.svg";
                        break;
                }
                if (String.IsNullOrEmpty(imageSource))
                {
                    <span class="badge badge-info"><em>@Model.Review.Language</em></span> 
                }
                else
                {
                    <span><img class="mr-2 mt-1 p-1 border rounded" src="~/@imageSource" width="34" alt="@Model.Review.Language" /></span>   
                } 
            }
            <p class="h6 mb-0 mr-auto">
                @if (Model.Review.ServiceName != null)
                {
                    @Model.Review.ServiceName
                }
                <br>
                <small class="text-muted">@Model.Review.PackageDisplayName</small>
            </p>
            <div class="my-1">
                @if (Model.Revision.Approvers.Count > 0)
                {
                    var approvers = String.Join(", ", Model.Revision.Approvers);
                    <button type="button" class="btn btn-sm shadow-sm btn-success" data-placement="bottom" data-trigger="focus" data-toggle="popover" data-title="Approvers" data-content="@approvers">
                        <i class="fas fa-check-circle"></i> APPROVED
                        <span class="badge badge-light">@Model.Revision.Approvers.Count</span>
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-light btn-sm shadow-sm">
                        PENDING
                    </button>
                }
            </div>
            <div class="my-1 ml-2">
                @{
                    var popOverContent = $"<b>{Model.ActiveConversations}</b> active revision threads.<br><b>{Model.TotalActiveConversations}</b> total active threads.<br>"
                    + $"<b>Current Revision:</b> <em>{@Model.Revision.DisplayName}</em>";
                        @if (Model.DiffRevisionId != null)
                    {
                        popOverContent += $"<br><b>Current Diff:</b> <em>{@Model.DiffRevision?.DisplayName}</em>";
                    }
                        <button type="button" class="btn btn-info btn-sm shadow-sm" data-placement="bottom" data-trigger="focus" data-toggle="popover" data-html="true" data-title="Page Info" data-content="@popOverContent">
                            <i class="far fa-comment-alt mr-2"></i><span class="badge badge-light">@Model.ActiveConversations / @Model.TotalActiveConversations</span>
                        </button>
                }
            </div>
            <div class="my-1">
                <form asp-resource="@Model.Review" class="form-inline" asp-page-handler="ToggleApproval" method="post" asp-requirement="@ApproverRequirement.Instance">
                    <input type="hidden" name="revisionId" value="@Model.Revision.RevisionId" />
                    @if (Model.DiffRevision == null || Model.DiffRevision.Approvers.Count > 0)
                    {
                        @if(Model.Revision.Approvers.Contains(User.GetGitHubLogin()))
                        {
                            <button type="submit" class="btn btn-sm shadow-sm btn-light ml-2">
                                <i class="fa fa-sm fa-undo" aria-hidden="true"></i>&nbsp;&nbsp;Revert Approval
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-sm shadow-sm btn-success ml-2">
                                <i class="far fa-thumbs-up" aria-hidden="true"></i>&nbsp;&nbsp;Approve
                            </button>
                        }
                    }
                    else
                    {
                        @if(Model.Revision.Approvers.Contains(User.GetGitHubLogin()))
                        {
                            <button type="submit" class="btn btn-sm shadow-sm btn-light ml-2" disabled data-placement="bottom" data-toggle="tooltip" title="API review cannot be approved when comparing against unapproved revision.">
                                <i class="fa fa-sm fa-thumbs-down" aria-hidden="true"></i>&nbsp;&nbsp;Revert Approval
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-sm shadow-sm btn-light ml-2" disabled data-placement="bottom" data-toggle="tooltip" title="API review cannot be approved when comparing against unapproved revision.">
                                <i class="far fa-thumbs-up" aria-hidden="true"></i>&nbsp;&nbsp;Approve
                            </button>
                        }
                    }
                </form>
            </div>
            <div class="dropdown d-inline-block my-1 ml-2">
                <a class="btn btn-light btn-sm border shadow-sm dropdown-toggle" href="#" role="button" data-toggle="dropdown">
                    <i class="fas fa-sm fa-sliders-h"></i>&nbsp;&nbsp;Options
                </a>
                <div class="dropdown-menu dropdown-menu-right">
                    <span class="dropdown-item checkbox">
                        <label>
                            <input type="checkbox" checked="checked" id="show-comments-checkbox">
                            &nbsp;Show Comments
                        </label>
                    </span>
                    <span class="dropdown-item checkbox">
                        <label>
                            <input type="checkbox" checked="checked" id="show-system-comments-checkbox">
                            &nbsp;Show System Comments
                        </label>
                    </span>
                    <span class="dropdown-item" id="show-documentation-component">
                        <input asp-for="@Model.ShowDocumentation" class="show-doc-checkbox">
                        <a class="text-dark show-document" asp-all-route-data=@Model.GetRoutingData(diffRevisionId: Model.DiffRevisionId, showDocumentation: !Model.ShowDocumentation, showDiffOnly: Model.ShowDiffOnly, revisionId: Model.Revision.RevisionId)>
                            <label>&nbsp;Show Documentation</label>
                        </a>
                    </span>
                    <span class="dropdown-item checkbox">
                        <label>
                            <input type="checkbox" id="hide-line-numbers">
                            &nbsp;Hide Line Number
                        </label>
                    </span>
                    <span class="dropdown-item checkbox">
                        <label>
                            <input type="checkbox" id="hide-left-navigation">
                            &nbsp;Hide Left Navigation
                        </label>
                    </span>
                    @if (!String.IsNullOrEmpty(Model.DiffRevisionId))
                    {
                        <span class="dropdown-item">
                            <input asp-for="@Model.ShowDiffOnly" class="show-diffonly-checkbox">
                            <a class="text-dark show-diffonly" asp-all-route-data=@Model.GetRoutingData(diffRevisionId: Model.DiffRevisionId, showDocumentation: Model.ShowDocumentation, showDiffOnly: !Model.ShowDiffOnly, revisionId: Model.Revision.RevisionId)>
                                <label>&nbsp;Show Only Diff</label>
                            </a>
                        </span>
                    }
                </div>
            </div>
            <div class="my-1 ml-2">
                <form asp-resource="@Model.Review" class="form-inline" method="post" asp-page-handler="ToggleSubscribed">
                    @if (Model.Review.GetUserEmail(User) != null)
                    {
                        if (Model.Review.IsUserSubscribed(User))
                        {
                            <button type="submit" class="btn border btn-sm shadow-sm btn-light">
                                <i class="far fa-minus-square" aria-hidden="true"></i>&nbsp;&nbsp;Unsubscribe
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn border btn-sm shadow-sm btn-light">
                                <i class="far fa-plus-square" aria-hidden="true"></i>&nbsp;&nbsp;Subscribe
                            </button>
                        }
                    }
                    else
                    {
                        <button type="submit" class="btn btn-sm shadow-sm btn-light" disabled data-placement="bottom" data-toggle="tooltip" title="Link a microsoft.com email to your Github account to subscribe">
                            <i class="fa fa-plus-square" aria-hidden="true"></i>&nbsp;&nbsp;Subscribe
                        </button>
                    }
                </form>
            </div>
            @if (Model.Review.FilterType != ReviewType.Automatic)
            {
                <div class="my-1 ml-2">
                    <form asp-resource="@Model.Review" class="form-inline" method="post" asp-page-handler="ToggleClosed">
                        @if (Model.Review.IsClosed)
                        {
                            <button type="submit" class="btn btn-sm border shadow-sm btn-light">
                                <i class="fa fa-sm fa-undo" aria-hidden="true"></i>&nbsp;&nbsp;Reopen
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-sm border shadow-sm btn-light">
                                <i class="far fa-window-close" aria-hidden="true"></i>&nbsp;&nbsp;Close
                            </button>
                        }
                    </form>
                </div>
            }
        </div>
    </div>
    <div class="row mx-1 px-0 pt-0 pb-2">
        <form>
          <div class="form-row">
            @* Hide until tags is implemented
            <div class="form-group col-md-4 mb-0">
                <label class="mb-0 ml-1"><small>REVIEW:</small></label>
                <select class="selectpicker show-tick show-menu-arrow shadow-sm" data-style="btn-light btn-sm border" data-selected-text-format="value" data-live-search="true" data-size="10" data-width="100%" data-container="body" id="review-bootstraps-select" data-tick-icon="fa-solid fa-check">
                    @foreach(var review in Model.ReviewsForPackage)
                    {
                        var urlValue = @Url.ActionLink("Review", "Assemblies", new {
                            id = review.ReviewId
                        });
                        if (review.ReviewId == Model.Review.ReviewId)
                        {
                            <option selected style="font-size: 0.8em;" value="@urlValue" data-subtext="Type: @review.FilterType | Language: @review.Language | Author: @review.Author">@review.DisplayName</option>
                        }
                        else
                        {
                            <option style="font-size: 0.8em;" value="@urlValue" data-subtext="Type: @review.FilterType | Language: @review.Language | Author: @review.Author">@review.DisplayName</option>
                        }
                    }
                </select>
            </div>
            *@
            <div class="form-group col-md-6 mb-0">
                <label class="mb-0 ml-1"><small>REVISION:</small></label>
                <select class="selectpicker show-tick show-menu-arrow shadow-sm" data-style="btn-light btn-sm border" data-selected-text-format="value" data-live-search="true" data-size="10" data-width="100%" data-container="body" id="revisions-bootstraps-select" data-tick-icon="fa-solid fa-check">
                    @foreach (var revision in Model.Review.Revisions.Reverse())
                    {
                        var approvedBadge = "<i class='fas fa-check-circle text-success ml-2'></i>";
                        var optionName = revision.IsApproved ? $"{@revision.DisplayName} {@approvedBadge}" : @revision.DisplayName;
                        var urlValue = @Url.ActionLink("Review", "Assemblies", new {
                            id = @Model.Review.ReviewId,
                            revisionId = @revision.RevisionId,
                            doc = @Model.ShowDocumentation
                        });
                        if (@revision.DisplayName == @Model.Revision.DisplayName)
                        {
                            <option selected style="font-size: 0.8em;" value="@urlValue" data-content="@optionName"></option>
                        }
                        else
                        {
                            <option style="font-size: 0.8em;" value="@urlValue" data-content="@optionName"></option>
                        }
                    }
                </select>
            </div>
            <div class="form-group col-md-6 mb-0">
                @if (@Model.PreviousRevisions.Any())
                {
                    @if (Model.DiffRevisionId != null)
                    {

                        var urlValue = @Url.ActionLink("Review", "Assemblies", new {
                            id = @Model.Review.ReviewId,
                            revisionId = @Model.Revision.RevisionId,
                            diffRevisionId = @Model.DiffRevisionId,
                            doc = @Model.ShowDocumentation,
                            diffOnly = @Model.ShowDiffOnly
                        });
                        <label class="mb-0 ml-1"><a href="@urlValue"><small>DIFF WITH:</small></a></label>
                    }
                    else
                    {
                        var urlValue = @Url.ActionLink("Review", "Assemblies", new {
                            id = @Model.Review.ReviewId,
                            revisionId = @Model.Revision.RevisionId,
                            diffRevisionId = @Model.PreviousRevisions.Last().RevisionId,
                            doc = @Model.ShowDocumentation,
                            diffOnly = @Model.ShowDiffOnly
                        });
                        <label class="mb-0 ml-1"><a href="@urlValue"><small>DIFF:</small></a></label>
                    }
                    <select class="selectpicker show-tick show-menu-arrow shadow-sm" data-style="btn-light btn-sm border border-left" data-size="10" data-width="100%" data-live-search="true" data-container="body" aria-label="Diff Review" id="diff-bootstraps-select" data-tick-icon="fa-solid fa-check">
                        if (@Model.DiffRevisionId == null)
                        {
                            <option style="font-size: 0.8em;" value="" selected></option>
                        }
                        @foreach (var revision in Model.PreviousRevisions.Reverse())
                        {
                            var approvedBadge = "<i class='fas fa-check-circle text-success ml-2'></i>";
                            var optionName = revision.IsApproved ? $"{@revision.DisplayName} {@approvedBadge}" : @revision.DisplayName;
                            var urlValue = @Url.ActionLink("Review", "Assemblies", new {
                                id = @Model.Review.ReviewId,
                                diffRevisionId = @revision.RevisionId,
                                doc = @Model.ShowDocumentation,
                                diffOnly = @Model.ShowDiffOnly,
                                revisionId = @Model.Revision.RevisionId
                            });
                            if (@Model.DiffRevisionId != null)
                            {
                                if (@Model.DiffRevisionId == @revision.RevisionId)
                                {
                                    <option style="font-size: 0.8em;" value="@urlValue" selected data-content="@optionName"></option>
                                }
                                else
                                {
                                    <option style="font-size: 0.8em;" value="@urlValue" data-content="@optionName"></option>
                                }
                            }
                            else
                            {
                                if (@Model.DiffRevisionId != @revision.RevisionId)
                                {
                                    <option style="font-size: 0.8em;" value="@urlValue" data-content="@optionName"></option>
                                }
                            }
                        }
                    </select>
                }
            </div>
          </div>
        </form>
    </div>
    <div class="row px-3" data-review-id="@Model.Review.ReviewId" data-revision-id="@Model.Revision.RevisionId" data-language="@Model.Review.Language">
        <div id="review-left" class="col-2 rounded-1 border">
            <div class="namespace-view">
                @if (Model.CodeFile != null)
                {
                    <partial name="Shared/Navigation" model=" Model.CodeFile.Navigation" />
                }
            </div>
        </div>

        <div id="review-right" class="col-10 rounded-1 border">
            <table class="code-window">
                <tbody>
                    @foreach (var line in Model.Lines)
                    {
                        <partial name="_CodeLine" model="@line" />
                    }
                </tbody>
            </table>
        </div>
    </div>
    <partial name="_CommentFormPartial" /> 
</div>