# Package is parsed using apiview-stub-generator(version:0.3.18), Python version: 3.10.16


namespace azure.keyvault.secrets
	
	class azure.keyvault.secrets.ApiVersion(str, Enum):
		V2016_10_01 = "2016-10-01"
		V7_0 = "7.0"
		V7_1 = "7.1"
		
		
	class azure.keyvault.secrets.DeletedSecret:
		property deleted_date: datetime    # Read-only
		property id: str    # Read-only
		property name: str    # Read-only
		property properties: SecretProperties    # Read-only
		property recovery_id: str    # Read-only
		property scheduled_purge_date: datetime    # Read-only
		
		def __init__(
			    self, 
			    properties: SecretProperties, 
			    deleted_date: Optional[datetime] = None, 
			    recovery_id: Optional[str] = None, 
			    scheduled_purge_date: Optional[datetime] = None
			) -> None
		
		def __repr__(self) -> str
		
		
	class azure.keyvault.secrets.KeyVaultSecret:
		property id: str    # Read-only
		property name: str    # Read-only
		property properties: SecretProperties    # Read-only
		property value: str    # Read-only
		
		def __init__(
			    self, 
			    properties, 
			    value
			) -> None
		
		def __repr__(self) -> str
		
		
	class azure.keyvault.secrets.SecretClient(KeyVaultClientBase): implements ContextManager 
		property vault_url: str    # Read-only
		
		def __init__(
			    self, 
			    vault_url: str, 
			    credential, 
			    *, 
			    api_version: ApiVersion = ..., 
			    transport: HttpTransport = ..., 
			    **kwargs
			) -> None
		
		@distributed_trace
		def backup_secret(
			    self, 
			    name: str, 
			    **kwargs
			) -> bytes
		
		@distributed_trace
		def begin_delete_secret(
			    self, 
			    name: str, 
			    **kwargs
			) -> DeletedSecret
		
		@distributed_trace
		def begin_recover_deleted_secret(
			    self, 
			    name: str, 
			    **kwargs
			) -> SecretProperties
		
		def close(self) -> None
		
		@distributed_trace
		def get_deleted_secret(
			    self, 
			    name: str, 
			    **kwargs
			) -> DeletedSecret
		
		@distributed_trace
		def get_secret(
			    self, 
			    name: str, 
			    version: str = None, 
			    **kwargs
			) -> KeyVaultSecret
		
		@distributed_trace
		def list_deleted_secrets(self, **kwargs) -> ItemPaged[DeletedSecret]
		
		@distributed_trace
		def list_properties_of_secret_versions(
			    self, 
			    name: str, 
			    **kwargs
			) -> ItemPaged[SecretProperties]
		
		@distributed_trace
		def list_properties_of_secrets(self, **kwargs) -> ItemPaged[SecretProperties]
		
		@distributed_trace
		def purge_deleted_secret(
			    self, 
			    name: str, 
			    **kwargs
			) -> None
		
		@distributed_trace
		def restore_secret_backup(
			    self, 
			    backup: bytes, 
			    **kwargs
			) -> SecretProperties
		
		@distributed_trace
		def set_secret(
			    self, 
			    name: str, 
			    value: str, 
			    *, 
			    content_type: Optional[str] = ..., 
			    enabled: Optional[bool] = ..., 
			    expires_on: Optional[datetime] = ..., 
			    not_before: Optional[datetime] = ..., 
			    tags: dict[str, str] = ..., 
			    **kwargs
			) -> KeyVaultSecret
		
		@distributed_trace
		def update_secret_properties(
			    self, 
			    name: str, 
			    version: str = None, 
			    *, 
			    content_type: Optional[str] = ..., 
			    enabled: Optional[bool] = ..., 
			    expires_on: Optional[datetime] = ..., 
			    not_before: Optional[datetime] = ..., 
			    tags: dict[str, str] = ..., 
			    **kwargs
			) -> SecretProperties
		
		
	class azure.keyvault.secrets.SecretProperties:
		property content_type: str    # Read-only
		property created_on: datetime    # Read-only
		property enabled: bool    # Read-only
		property expires_on: datetime    # Read-only
		property id: str    # Read-only
		property key_id: str    # Read-only
		property name: str    # Read-only
		property not_before: datetime    # Read-only
		property recoverable_days: Optional[int]    # Read-only
		property recovery_level: str    # Read-only
		property tags: Dict[str, str]    # Read-only
		property updated_on: datetime    # Read-only
		property vault_url: str    # Read-only
		property version: str    # Read-only
		
		def __init__(
			    self, 
			    attributes, 
			    vault_id, 
			    **kwargs
			) -> None
		
		def __repr__(self)
		
		
namespace azure.keyvault.secrets.aio
	
	class azure.keyvault.secrets.aio.SecretClient(AsyncKeyVaultClientBase): implements AsyncContextManager 
		property vault_url: str    # Read-only
		
		def __init__(
			    self, 
			    vault_url: str, 
			    credential: AsyncTokenCredential, 
			    *, 
			    api_version: ApiVersion = ..., 
			    transport: AsyncHttpTransport = ..., 
			    **kwargs: Any
			) -> None
		
		@distributed_trace_async
		async def backup_secret(
			    self, 
			    name: str, 
			    **kwargs: Any
			) -> bytes
		
		async def close(self) -> None
		
		@distributed_trace_async
		async def delete_secret(
			    self, 
			    name: str, 
			    **kwargs: Any
			) -> DeletedSecret
		
		@distributed_trace_async
		async def get_deleted_secret(
			    self, 
			    name: str, 
			    **kwargs: Any
			) -> DeletedSecret
		
		@distributed_trace_async
		async def get_secret(
			    self, 
			    name: str, 
			    version: Optional[str] = None, 
			    **kwargs: Any
			) -> KeyVaultSecret
		
		@distributed_trace
		def list_deleted_secrets(self, **kwargs: Any) -> AsyncIterable[DeletedSecret]
		
		@distributed_trace
		def list_properties_of_secret_versions(
			    self, 
			    name: str, 
			    **kwargs: Any
			) -> AsyncIterable[SecretProperties]
		
		@distributed_trace
		def list_properties_of_secrets(self, **kwargs: Any) -> AsyncIterable[SecretProperties]
		
		@distributed_trace_async
		async def purge_deleted_secret(
			    self, 
			    name: str, 
			    **kwargs: Any
			) -> None
		
		@distributed_trace_async
		async def recover_deleted_secret(
			    self, 
			    name: str, 
			    **kwargs: Any
			) -> SecretProperties
		
		@distributed_trace_async
		async def restore_secret_backup(
			    self, 
			    backup: bytes, 
			    **kwargs: Any
			) -> SecretProperties
		
		@distributed_trace_async
		async def set_secret(
			    self, 
			    name: str, 
			    value: str, 
			    *, 
			    content_type: Optional[str] = ..., 
			    enabled: Optional[bool] = ..., 
			    expires_on: Optional[datetime] = ..., 
			    not_before: Optional[datetime] = ..., 
			    tags: dict[str, str] = ..., 
			    **kwargs: Any
			) -> KeyVaultSecret
		
		@distributed_trace_async
		async def update_secret_properties(
			    self, 
			    name: str, 
			    version: Optional[str] = None, 
			    *, 
			    content_type: Optional[str] = ..., 
			    enabled: Optional[bool] = ..., 
			    expires_on: Optional[datetime] = ..., 
			    not_before: Optional[datetime] = ..., 
			    tags: dict[str, str] = ..., 
			    **kwargs: Any
			) -> SecretProperties
		
		