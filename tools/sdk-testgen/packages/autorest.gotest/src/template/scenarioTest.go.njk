//go:build go1.16
// +build go1.16

{{copyright}}

package {{testPackageName}}_test

import (
	"context"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
    "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/{{rpName}}/{{packageName}}/scenario_test"
)
{{imports}}

var (
	ctx            context.Context
	cred           azcore.TokenCredential
    pathToPackage  = "sdk/resourcemanager/{{rpName}}/{{packageName}}/scenario_test/{{testPackageName}}/testdata"
	options        *arm.ClientOptions
{%- if scope.toLowerCase() == 'resourcegroup'%}
	resourceGroup	*armresources.ResourceGroup
{%- endif %}
{%- for name, value in variables %}
{%- if value === "<newDefinedVariable>" %}
    {{name}} string
{%- else %}
    {{name}} = {{value}}
{%- endif %}
{%- endfor %}
{%- for variable, _ in requiredVariablesDefault %}
{%- if not variables.hasOwnProperty(variable) %}
    {%- if variable === "location" %}
    location = scenario_test.GetEnv("LOCATION", "eastus")
    {%- elif variable === "subscriptionId" %}
    subscriptionId = scenario_test.GetEnv("SUBSCRIPTION_ID", scenario_test.GetEnv("AZURE_SUBSCRIPTION_ID", ""))
    {%- else %}
    {{variable}} = scenario_test.GetEnv("{{jsFunc.toSnakeCase(variable).toUpperCase()}}", "{{requiredVariablesDefault['variable']}}")
    {%- endif %}
{%- endif %}
{%- endfor %}
)

func Test{{testCaseName}}(t *testing.T) {
    // Setup for test
	scenario_test.StartRecording(t, pathToPackage)
	ctx = context.Background()
	options = scenario_test.CreateArmOptions(t)
	cred = scenario_test.CreateCred(t, ctx, options)
    {%- if scope.toLowerCase() == 'resourcegroup'%}
	resourceGroup = scenario_test.CreateResourceGroup(t, ctx, cred, subscriptionId, location, options)
	resourceGroupName = *resourceGroup.Name
    {%- endif %}
	// Clenup for test
	t.Cleanup(func() {
        {%- if scope.toLowerCase() == 'resourcegroup'%}
		scenario_test.DeleteResourceGroup(t, ctx, cred, subscriptionId, resourceGroupName, options)
        {%- endif %}
		scenario_test.StopRecording(t)
	})
	prepare(t)
{%- for testScenario in scenarios %}
	scenario{{jsFunc.capitalize(jsFunc.toCamelCase(testScenario.scenario))}}(t)
{%- endfor %}
	cleanup(t)
}

func prepare(t *testing.T) {
	{%- set steps = prepareSteps %}
	{%- include "./scenarioContent.go.njk" %}
}

{% for testScenario in scenarios %}
func scenario{{jsFunc.capitalize(jsFunc.toCamelCase(testScenario.scenario))}}(t *testing.T) {
	{%- for variable, value in testScenario.requiredVariablesDefault %}
	{%- if not requiredVariablesDefault.hasOwnProperty(variable) %}
    {{variable}} := scenario_test.GetEnv("{{jsFunc.toSnakeCase(variable).toUpperCase()}}, "{{value}}")
	{%- endif %}
	{%- endfor %}
	{%- for name, value in testScenario.variables %}
    {%- if value === "<newDefinedVariable>" %}
    var {{name}} string
    {%- else %}
    {{name}} := {{value}}
    {%- endif %}
	{%- endfor %}
	
	{%- set steps = testScenario.steps %}
	{%- include "./scenarioContent.go.njk" %}
}
{%- endfor %}

func cleanup(t *testing.T) {
	{%- set steps = cleanUpSteps %}
	{%- include "./scenarioContent.go.njk" %}
}