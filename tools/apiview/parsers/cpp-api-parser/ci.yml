# NOTE: Please refer to https://aka.ms/azsdk/engsys/ci-yaml before editing this file.
trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - tools/apiview/parsers/cpp-api-parser

pr:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - tools/apiview/parsers/cpp-api-parser

variables:
  NodeVersion: '16.x'
  TypeScriptGeneratorDirectory: 'tools/apiview/parsers/js-api-parserts-genapi'
  ArtifactName: 'apiview'
  FeedRegistry: 'https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-cpp/'

stages:
  - stage: 'Prepare BUild'
    jobs:
      - job: 'vcpkg'
        pool:
          name: azsdk-pool-mms-win-2019-general
          vmImage: MMS2019

        steps:
          - pwsh: |
              Write-Host "git clone https://github.com/Microsoft/vcpkg"
              git clone https://github.com/Microsoft/vcpkg
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Unable to check out vcpkg fork repo"
                exit $LASTEXITCODE
              }
            displayName: Clone vcpkg 
          - pwsh: |
                ./vcpkg/bootstrap-vcpkg
            displayName: Bootstrap vcpkg.
          - pwsh: |
              $vcpkgRoot = Resolve-Path "${Build.SourcesDirectory}/vcpkg"
              Write-Host "Set VCPKG_ROOT: $vcpkgRoot"
              Write-Host "##vso[task.setvariable variable=VCPKG_ROOT]$vcpkgRoot"
            displayName: Set VCPKG_ROOT
      - job: 'cmake'
        pool:
          name: azsdk-pool-mms-win-2019-general
          vmImage: MMS2019
        steps:
          - pwsh: |
              cmake.exe -G "Ninja" -DCMAKE_C_COMPILER:STRING="cl.exe" -DCMAKE_CXX_COMPILER:STRING="cl.exe" -DCMAKE_CXX_STANDARD:STRING="20" -DCMAKE_TOOLCHAIN_FILE:STRING=${env:VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE:STRING="Release" -DMSVC_RUNTIME_LIBRARY:STRING="MultiThreadedDebug" -DVCPKG_TARGET_TRIPLET:STRING="x64-windows-static" -DCMAKE_INSTALL_PREFIX:PATH="$(Build.SourcesDirectory)/build" $(Build.SourcesDirectory)
            displayName: CMAKE GEnerate.
  - stage: 'Build'
    jobs:
      - job: 'Build'
        pool:
          name: azsdk-pool-mms-win-2019-general
          vmImage: MMS2019

        steps:
          - pwsh: |
              cmake.exe --build $(Build.SourcesDirectory)/build --config Release --target cpp-api-parser
            displayName: Build ApiView Parser.
          - pwsh: |
                $cppApiParser = Resolve-Path "${Build.SourcesDirectory}/build/bin/Release/cpp-api-parser.exe"
                Write-Host "Set CPP_API_PARSER: $cppApiParser"
                Write-Host "##vso[task.setvariable variable=CPP_API_PARSER]$cppApiParser"
  #- stage: 'Publish'
  #  jobs:
  #    - job: 'Build Prerequisites - cmake'
  #      pool:
  #        name: azsdk-pool-mms-win-2019-general
  #        vmImage: MMS2019
  #      steps:
  #        - task: PublishBuildArtifacts@1
  #          inputs:
  #            pathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #            artifactName: $(ArtifactName)

  - ${{if and(eq(variables['Build.Reason'], 'Manual'), eq(variables['System.TeamProject'], 'internal'))}}:
    - stage: 'Release'
      dependsOn: Build
      condition: Succeeded()
      jobs:
      - job: PublishPackage
        displayName: 'Publish ts-genapi package to devops feed'
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          vmImage: MMSUbuntu20.04
        steps:
        - checkout: none
        - download: current
        
        - pwsh: |
            $detectedPackageName=Get-ChildItem $(Pipeline.Workspace)/$(ArtifactName)/*.tgz
            Write-Host "Detected package name: $detectedPackageName"
            $registry="$(FeedRegistry)"
            $regAuth=$registry.replace("https:","")
            $npmReg = $regAuth.replace("registry/","");
            $env:NPM_TOKEN="$(azure-sdk-devops-npm-token)"
            Write-Host "Publishing to $($regAuth)"
            npm config set $regAuth`:username=azure-sdk
            npm config set $regAuth`:_password=`$`{NPM_TOKEN`}
            npm config set $regAuth`:email=not_set
            npm config set $npmReg`:username=azure-sdk
            npm config set $npmReg`:_password=`$`{NPM_TOKEN`}
            npm config set $npmReg`:email=not_set
            Write-Host "Publishing package"
            Write-Host "npm publish $detectedPackageName --registry=$registry --always-auth=true"
            npm publish $detectedPackageName --registry=$registry --always-auth=true
          displayName: Publish package
