{% import 'operation_tools.jinja2' as op_tools with context %}
{% macro paging_operation() %}
{% import 'keywords.jinja2' as keywords with context %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{% set request_builder = operation.request_builder %}
cls = kwargs.pop('cls', None)  {{ operation_serializer.cls_type_annotation(operation) }}
{{ op_tools.error_map(operation, code_model) }}
def prepare_request(next_link=None):
    if not next_link:
        {{ op_tools.serialize(operation_serializer.call_request_builder(operation)) | indent(8) }}
    else:
        {% set url = keywords.escape_str(operation.next_request_builder.url) if operation.next_request_builder else None %}
        {{ op_tools.serialize(operation_serializer.call_next_link_request_builder(operation)) | indent(8) }}
        {% if not operation.next_request_builder %}
            {% if operation.parameters.path %}
        {{ op_tools.path_format_arguments(operation.parameters.path)|indent(8) }}
            {% endif %}
        request.method = "GET"
        {% endif %}
    return request

{{ keywords.def }} extract_data(pipeline_response):
    {% set response = operation.responses[0] %}
    {% set deserialized_str = "self._deserialize('" + response.serialization_type + "', pipeline_response)" %}
    {% set list_of_elem_str = "deserialized." + operation.item_name %}
    {% set next_link_str = "deserialized." + operation.next_link_name + " or None" if operation.next_link_name else "None" %}
    deserialized = {{ deserialized_str }}
    list_of_elem = {{ list_of_elem_str }}
    if cls:
        list_of_elem = cls(list_of_elem)
    {% if async_mode %}
    return {{ next_link_str }}, AsyncList(list_of_elem)
    {% else %}
    return {{ next_link_str }}, iter(list_of_elem)
    {% endif %}

{{ keywords.def }} get_next(next_link=None):
    request = prepare_request(next_link)

    pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
    response = pipeline_response.http_response

    {{ op_tools.handle_error_response(code_model, operation) | indent(8) }}

    return pipeline_response
{%- endmacro -%}