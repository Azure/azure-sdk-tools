{
    "status": "Error",
    "violations": [
        {
            "rule_ids": [
                "python_design.html#python-client-naming",
                "python_design.html#python-namespaces-async",
                "python_design.html#python-client-separate-sync-async"
            ],
            "line_no": 30,
            "bad_code": "class azure.contoso.NoodleAsyncManager:",
            "suggestion": "Separate classes for sync and async operations.",
            "comment": "The class name should end with 'Client' and be in a namespace with '.aio' suffix. The class should be in a namespace with '.aio' suffix. Do not combine async and sync operations in the same class."
        },
        {
            "rule_ids": [
                "python_design.html#python-client-separate-sync-async"
            ],
            "line_no": 41,
            "bad_code": "async def get_noodles_async(self, options: dict) -> List[NoodleResponse]",
            "suggestion": "async def list_noodles_async(self, options: dict) -> List[NoodleResponse]",
            "comment": "Use 'list_' prefix for a collection."
        },
        {
            "rule_ids": [
                "python_design.html#python-client-naming"
            ],
            "line_no": 43,
            "bad_code": "class azure.contoso.NoodleManager:",
            "suggestion": "class azure.contoso.NoodleClient:",
            "comment": "The class name should end with 'Client'."
        },
        {
            "rule_ids": [
                "python_design.html#python-client-connection-string"
            ],
            "line_no": 49,
            "bad_code": "connection_string: Optional[str]",
            "suggestion": "Implement a separate factory method 'from_connection_string' to parse the connection string.",
            "comment": "The constructor should not accept a connection string as a parameter."
        },
        {
            "rule_ids": [],
            "line_no": 53,
            "bad_code": "def create_noodle(self, body: NoodleCreateRequest, **kwargs) -> NoodleResponse",
            "suggestion": "def create_noodle(self, body: Noodle, **kwargs) -> Noodle",
            "comment": "Avoid using terms like 'Request' and 'Response' in models. These are HTTP-specific."
        }
    ]
}