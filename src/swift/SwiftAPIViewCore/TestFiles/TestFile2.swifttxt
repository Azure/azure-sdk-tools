// --------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//
// The MIT License (MIT)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the ""Software""), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// --------------------------------------------------------------------------

import Foundation

public class Widget {
    public var delegate: WidgetDelegate?

    public let metadata: Dictionary<String, String?>?

    public init(fromDict: [String: String?]) {
        self.delegate = nil
        self.metadata = nil
    }

    public func someFunc(withCompletionHandler: @escaping (Result<Widget, Error>) -> Void) {}
}

public protocol WidgetDelegate {
    func widget(_: Widget, didUpdate: Any)
    func widget(_: Widget, didFailWithError: Error)
}

public class Cat {
    public class Personality {}
}

public class Dog {
    public class Personality {}
}

public class Owner {
    public let catPersonality: Cat.Personality
    public let dogPersonality: Dog.Personality
    public let myTuple: (String, Int)
    public let myNamedTuple: (name: String, age: Int)
    public let myCat: Cat!
    public let myDog: Dog!
    public let myCats: Array<Cat?>!
    public let myDogs: [Dog?]!

    public init() {
        self.catPersonality = Cat.Personality()
        self.dogPersonality = Dog.Personality()
        self.myTuple = ("", 0)
        self.myNamedTuple = (name: "Hi", age: 1)
        self.myCat = Cat()
        self.myDog = Dog()
        self.myCats = [Cat?]()
        self.myDogs = [Dog?]()
    }
}

public class AsyncEnabledObject {
    public func act(using data: Data?) -> String {
        return ""
    }

    public func act(using data: Data?, completionHandler handler: @escaping (String, Error?) -> Void) {
        handler(("", nil))
    }

    public func act(using data: Data?) async -> String {
        return ""
    }
}
