{
    "comments": [
        {
            "rule_ids": [],
            "line_no": 1,
            "bad_code": "",
            "suggestion": null,
            "comment": "Here is a summary of the service described by this APIView:\n\n**Purpose**  \nThis API provides a service for analyzing images by extracting structured insights such as captions, dense captions, detected objects and people, text recognition, smart cropping suggestions, and tags. Its functionality is centered on processing image content and returning rich analytical metadata.\n\n**API Version**  \nThe client classes accept an `api_version` parameter to specify the version of the service to use, with the latest version expected to be managed by the service endpoint.\n\n**Client Classes**  \nThe API exposes two primary client classes: the synchronous `azure.ai.vision.imageanalysis.ImageAnalysisClient` and the asynchronous `azure.ai.vision.imageanalysis.aio.ImageAnalysisClient`. Both clients offer equivalent functionality for submitting image analysis requests.\n\n**Functional Overview**  \nThe clients enable users to analyze images by either providing raw image bytes or specifying an image URL. They support a range of visual features invoked through the analysis operations, which perform actions akin to the read side of CRUD by interpreting and returning detailed image analysis results. Parameters exist to adjust options such as gender neutrality in captions, language, specific model versions, and custom aspect ratios for smart crops, while underlying methods handle HTTP request interactions with the service.",
            "source": "summary"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-optional-arguments-keyword-only"
            ],
            "line_no": 16,
            "bad_code": "def analyze(",
            "suggestion": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
            "comment": "The synchronous analyze method’s optional parameters should be keyword-only. Insert a '*' after the required parameters to enforce this.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-optional-arguments-keyword-only"
            ],
            "line_no": 28,
            "bad_code": "def analyze_from_url(",
            "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
            "comment": "The synchronous analyze_from_url method’s optional parameters should be keyword-only. Add a '*' to separate required parameters from the optional ones.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-optional-arguments-keyword-only"
            ],
            "line_no": 62,
            "bad_code": "async def analyze(",
            "suggestion": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
            "comment": "For the async analyze method, optional parameters must be keyword-only. Prepend a '*' after the required parameters.",
            "source": "guideline"
        },
        {
            "rule_ids": [
                "python_design.html#python-client-optional-arguments-keyword-only"
            ],
            "line_no": 74,
            "bad_code": "async def analyze_from_url(",
            "suggestion": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
            "comment": "The async analyze_from_url method’s optional parameters should be keyword-only. Adding '*' after required arguments will enforce this.",
            "source": "guideline"
        },
        {
            "rule_ids": [],
            "line_no": 166,
            "bad_code": "ivar list: List[DenseCaption]",
            "suggestion": "ivar captions: List[DenseCaption]",
            "comment": "Avoid using the built-in name 'list' for an attribute; use a more descriptive name like 'captions'.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 172,
            "bad_code": "        list: List[DenseCaption]",
            "suggestion": "        captions: List[DenseCaption]",
            "comment": "Rename parameter 'list' to 'captions' in the overload to prevent shadowing the built-in type.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 358,
            "bad_code": "ivar list: List[DetectedObject]",
            "suggestion": "ivar objects: List[DetectedObject]",
            "comment": "Rename attribute 'list' to 'objects' to clarify its content and avoid shadowing the built-in.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 364,
            "bad_code": "        list: List[DetectedObject]",
            "suggestion": "        objects: List[DetectedObject]",
            "comment": "Change parameter name from 'list' to 'objects' to avoid conflict with the built-in type.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 378,
            "bad_code": "ivar list: List[DetectedPerson]",
            "suggestion": "ivar people: List[DetectedPerson]",
            "comment": "Rename attribute 'list' to 'people' to better reflect its semantics and avoid using a built-in name.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 384,
            "bad_code": "        list: List[DetectedPerson]",
            "suggestion": "        people: List[DetectedPerson]",
            "comment": "Rename the parameter from 'list' to 'people' to prevent shadowing the built-in and improve clarity.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 418,
            "bad_code": "ivar list: List[CropRegion]",
            "suggestion": "ivar smart_crops: List[CropRegion]",
            "comment": "Use a more descriptive attribute name than 'list' (e.g. 'smart_crops') to avoid overriding the built-in.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 424,
            "bad_code": "        list: List[CropRegion]",
            "suggestion": "        smart_crops: List[CropRegion]",
            "comment": "Rename parameter 'list' to 'smart_crops' in the overload to avoid conflict with the built-in name.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 437,
            "bad_code": "ivar list: List[DetectedTag]",
            "suggestion": "ivar tags: List[DetectedTag]",
            "comment": "Replace the generic 'list' with 'tags' to better describe the content and avoid shadowing the built-in.",
            "source": "generic"
        },
        {
            "rule_ids": [],
            "line_no": 443,
            "bad_code": "        list: List[DetectedTag]",
            "suggestion": "        tags: List[DetectedTag]",
            "comment": "Change the parameter name from 'list' to 'tags' to prevent using the built-in name and improve readability.",
            "source": "generic"
        }
    ]
}