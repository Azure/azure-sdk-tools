# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from dataclasses import dataclass, make_dataclass, KW_ONLY, field
from typing import Any


@dataclass
class DataClassSimple:
    """ Class for testing @dataclass """
    name: str
    unit_price: float
    quantity_on_hand: int = 0

    def total_cost(self, **kwargs: Any) -> float:
        return self.unit_price * self.quantity_on_hand


@dataclass
class DataClassWithFields:
    """ Class for testing @dataclass with fields. """
    myint_plain: int
    myint_field: int = field(repr=False)
    myint_field_default: int = field(repr=False, default=10)
    mylist: list[int] = field(default_factory=list)


""" Test creating a dynamic data class. """
DataClassDynamic = make_dataclass('DataClassDynamic', [
        ("x", int),
        "y",
        ("z", int, field(default=5))
    ],
    namespace={'add_one': lambda self: self.x + 1}
)


@dataclass
class DataClassWithKeywordOnly:
    """ Class for testing @dataclass with KW_ONLY. """
    x: float
    _: KW_ONLY
    y: float
    z: float


@dataclass
class DataClassWithPostInit:
    """ Class for testing @dataclass with __post_init__ """
    a: float
    b: float
    c: float = field(init=False)

    def __post_init__(self):
        self.c = self.a + self.b
