# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - tools/sdk-generation-pipeline

pr:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - tools/sdk-generation-pipeline

variables:
  - template: ../../eng/pipelines/templates/variables/globals.yml
  - name: NodeVersion
    value: '14.x'
  - name: VAR_ARTIFACT_NAME
    value: 'packages'
  - name: VAR_DOCKER_IMAGE_ARTIFACT_NAME
    value: 'dockerImages'
  - name: VAR_BUILD_ARTIFACT_STAGING_DIRECTORY
    value: $(Build.ArtifactStagingDirectory)
  - template: ../../eng/pipelines/templates/variables/image.yml

pool:
  name: "$(LINUXPOOL)"
  image: "$(LINUXVMIMAGE)"
  os: linux

extends:
  template: /eng/pipelines/templates/stages/archetype-sdk-publish-js.yml
  parameters:
    BuildStageName: Test
    ArtifactName: packages
    BuildStages:
      - stage: Build
        jobs:
          - job: Build

            steps:
            - task: NodeTool@0
              inputs:
                versionSpec: '$(NodeVersion)'
              displayName: 'Install Node.js'

            - bash: |
                npm install -g @microsoft/rush
                npm install -g typescript@4.6.2
              displayName: 'Install dependencies'

            - script: |
                rush update
              displayName: 'rush update'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline

            - script: |
                rushx lint
              displayName: 'Lint @azure-tools/sdk-generation-lib'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline/packages/sdk-generation-lib

            - script: |
                rushx lint
              displayName: 'Lint @azure-tools/sdk-generation-cli'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline/packages/sdk-generation-cli

            - script: |
                rush build
              displayName: 'rush build'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline

            - script: |
                rushx pack
              displayName: 'Pack @azure-tools/sdk-generation-lib'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline/packages/sdk-generation-lib

            - script: |
                rushx pack
              displayName: 'Pack @azure-tools/sdk-generation-cli'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline/packages/sdk-generation-cli

            - script: |
                mkdir -p $(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/packages
                cp azure-tools-sdk-generation-lib-*.tgz $(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/packages/
              displayName: 'Copy @azure-tools/sdk-generation-lib to staging dir'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline/packages/sdk-generation-lib

            - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
              parameters:
                ArtifactName: '$(VAR_ARTIFACT_NAME)'
                ArtifactPath: '$(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/packages'

            - script: 'docker build -t sdkgeneration.azurecr.io/sdk-generation:$(Build.BuildId) .'
              displayName: 'Build docker image'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline

            - script: |
                mkdir -p $(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/docker-images
                docker image save sdkgeneration.azurecr.io/sdk-generation:$(Build.BuildId) -o $(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/docker-images/image.tar
              displayName: 'Save docker image'
              workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline

            - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
              parameters:
                ArtifactName: '$(VAR_DOCKER_IMAGE_ARTIFACT_NAME)'
                ArtifactPath: '$(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/docker-images'

      - stage: Test
        dependsOn: Build
        condition: succeeded()
        jobs:
          - job: UnitTestForCli
            displayName: Unit Test For Cli Package
            condition: always()
            steps:
              - task: NodeTool@0
                inputs:
                  versionSpec: '$(NodeVersion)'
                displayName: 'Install Node.js'

              - bash: |
                  npm install -g @microsoft/rush
                  npm install -g typescript@4.6.2
                displayName: 'Install dependencies'

              - script: |
                  rush update
                displayName: 'rush update'
                workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline

              - script: |
                  rush build
                displayName: 'rush build'
                workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline
                
              - script: |
                  npm i -g autorest
                  rushx test:unit
                displayName: 'Test @azure-tools/sdk-generation-cli'
                workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline/packages/sdk-generation-cli

          - job: IntegrationTest
            condition: always()
            displayName: Integration Test for
            strategy:
              matrix:
                JS:
                  sdkRepo: 'azure-sdk-for-js'
                JAVA:
                  sdkRepo: 'azure-sdk-for-java'
                PYTHON:
                  sdkRepo: 'azure-sdk-for-python'
                Net:
                  sdkRepo: 'azure-sdk-for-net'
            steps:
              - task: NodeTool@0
                inputs:
                  versionSpec: '$(NodeVersion)'
                displayName: 'Install Node.js'

              - bash: |
                  npm install -g @microsoft/rush
                  npm install -g typescript@4.6.2
                displayName: 'Install dependencies'

              - script: |
                  rush update
                displayName: 'rush update'
                workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline

              - script: |
                  rush build
                displayName: 'rush build'
                workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline

              - task: DownloadBuildArtifacts@0
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: '$(VAR_DOCKER_IMAGE_ARTIFACT_NAME)'
                  downloadPath: '$(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)'
                displayName: 'Download image'

              - bash: |
                  docker load --input $(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/$(VAR_DOCKER_IMAGE_ARTIFACT_NAME)/image.tar
                displayName: 'Docker Load'

              - bash: |
                  set -e
                  rushx test:integration --docker-image="sdkgeneration.azurecr.io/sdk-generation:$(Build.BuildId)" --sdk-repo=$(sdkRepo)
                displayName: 'Run integration test'
                workingDirectory: $(System.DefaultWorkingDirectory)/tools/sdk-generation-pipeline/packages/sdk-generation-cli
