parameters:
  - name: sdk
    type: string

  - name: service
    type: string

  - name: serviceType
    type: string

  - name: trigger
    type: string

  - name: sdkGenerationName
    type: string

  - name: triggerType
    type: string

steps:
  - bash: |
      echo "will parse task result"
      LOG_Dir="/tmp/output/"
      for TASK_NAME in "init" "generateAndBuild" "mockTest"
      do
        if [ ${TASK_NAME} = "mockTest" ]; then
          TASK_OUTPUT_PATH="/tmp/output/mockTestOutput.json"
        else
          TASK_OUTPUT_PATH=""
        fi

        generateResult \
          --buildId=$(Build.BuildId) \
          --taskName=${TASK_NAME} \
          --logfile="/tmp/output/${TASK_NAME}-task.log" \
          --resultOutputPath="/tmp/output/${TASK_NAME}-task-result.json" \
          --dockerResultFile="/tmp/output/taskResults.json" \
          --taskOutputPath="${TASK_OUTPUT_PATH}"
        if [ $? -ne 0 ]; then
            #TODO: when all language support mock test, set exit 1 for parse task result failed
            echo "wait all language support mock test"
            #exit 1
        fi
      done
    displayName: Parse task result
    condition: always()

  - bash: |
      #TODO: delete this bash
      ls -al /tmp/output/
      echo "show generateAndBuild-task-result.json"
      cat /tmp/output/generateAndBuild-task-result.json | echo "don't quite even failed"
    displayName: Check output dir
    condition: always()

  - bash: |
      #TODO: delete this bash
      echo "will show git info"
      git status
    displayName: Show git info
    workingDirectory: $(SDK_REPO)

  - bash: |
      echo "will create PR"
      git config --global user.email "$(GIT_USER_EMAIL)"
      git config --global user.name "$(GIT_USER_NAME)"

      #packages=`cat /tmp/output/generateAndBuildOutputJson.json| jq -c '.packages|.[]'`
      package=`cat /tmp/output/generateAndBuildOutputJson.json| jq -c '.packages|.[]'`
      #for package in ${packages}
      #do
        packageName=`echo ${package} | jq -r '.packageName'`
        paths=`echo ${package} | jq -r '.path|.[]'`
        for path in ${paths}
        do
            git add ${path}
        done
        git commit -m '[auto]create by sdk generation'
        if [ "${{ parameters.serviceType }}" = "resource-manager" ];then
          branchName=sdkGen/${{ parameters.sdkGenerationName }}/arm-${{ parameters.service }}-${packageName}
        else
          branchName=sdkGen/${{ parameters.sdkGenerationName }}/dpg-${{ parameters.service }}-${packageName}
        fi
        git checkout -b ${branchName}
        pushSdkRepoUrl=$(echo $(sdkRepoUrl) | sed "s#https://#https://$(REPO_OWNER):$(REPO_OWNER_ACCESSKEY)@#")
        #TODO: push PR to Azure if is release to Azure no Azure SDK
        pushSdkRepoUrl=$(echo ${pushSdkRepoUrl} | sed "s#$(SDK_OWNER)#$(SDK_PUSH_OWNER)#")
        git push ${pushSdkRepoUrl} --force
        echo "git push finished:$?"
        sdkRepoPullsApi=$(echo $(sdkRepoUrl) | sed "s#https://#https://api.#")
        sdkRepoPullsApi=$(echo ${sdkRepoPullsApi} | sed "s#$(SDK_OWNER)#repos/$(SDK_PUSH_OWNER)#")
        sdkRepoPullsApi=$(echo ${sdkRepoPullsApi} | sed "s#.git\$#/pulls#")
        echo "will use api:${sdkRepoPullsApi}"
        RESULT=$(curl \
          -u "$(REPO_OWNER)":"$(REPO_OWNER_ACCESSKEY)" \
          -H "Accept: application/vnd.github.v3+json" \
          -X POST \
          -d '{"title":"[AutoPR-${{ parameters.service }}]autogenerated","body":"","base":"'$(sdkMainBranch)'", "head":"$(SDK_PUSH_OWNER):'${branchName}'"}' \
          ${sdkRepoPullsApi})
        echo "creat pr finished:$?"

        prNumber=`echo ${RESULT} | jq -r '.number'`
        echo "##vso[task.setvariable variable=prNumber;]${prNumber}"
        prLink=`echo ${RESULT} | jq -r '.html_url'`
        echo "##vso[task.setvariable variable=prLink;]${prLink}"
        echo "##vso[task.setvariable variable=branchName;]${branchName}"
        echo "##vso[task.setvariable variable=packageName;]${packageName}"
        git reset HEAD~
      #done
    workingDirectory: $(SDK_REPO)
    displayName: Submit Pull Request

  - bash: |
      cp /tmp/output/docker.log $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-full.log
      cp /tmp/output/init-task.log $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-init.log
      cp /tmp/output/init-task-result.json $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-init-result.json
      cp /tmp/output/generateAndBuild-task.log $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-generateAndBuild.log
      cp /tmp/output/generateAndBuild-task-result.json $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-generateAndBuild-result.json
      cp /tmp/output/mockTest-task.log $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-mockTest.log | echo "wait all language support mock test"
      cp /tmp/output/mockTest-task-result.json $(System.ArtifactsDirectory)/logs/${{ parameters.sdkGenerationName }}-mockTest-result.json | echo "wait all language support mock test"
      prepareArtifactFiles \
        --pipelineStatus=completed \
        --artifactDir="$(System.ArtifactsDirectory)" \
        --buildId="$(Build.BuildId)" \
        --generateAndBuildOutputFile="/tmp/output/generateAndBuildOutputJson.json" \
        --trigger='${{ parameters.trigger }}' \
        --logPath="tmplogpath.com" \
        --language="${{ parameters.sdk }}" \
        --resultsPath='["/tmp/output/init-task-result.json",
          "/tmp/output/generateAndBuild-task-result.json",
          "/tmp/output/mockTest-task-result.json"]'

      #TODO: delete next line
      cat /tmp/output/generateAndBuild-task-result.json
      cat $(System.ArtifactsDirectory)/completed/result.json

      if [ -n "$(prLink)" ];then
        newtaskresult=$(cat $(System.ArtifactsDirectory)/completed/result.json | \
          jq --arg prNumber $(prNumber) --arg prLink $(prLink) --arg branchName $(branchName) \
          --arg packageName $(packageName) \
          '.result += {prNumber:$prNumber, prLink:$prLink, branchName:$branchName} |
          .package += [{packageName:$packageName}]' )
        echo ${newtaskresult} > $(System.ArtifactsDirectory)/completed/result.json
      fi

      #TODO: delete next line
      cat $(System.ArtifactsDirectory)/completed/result.json
    displayName: Prepare artifact
    workingDirectory: $(SDK_REPO)
    condition: always()

  - task: PublishPipelineArtifact@1
    displayName: Publish artifact
    inputs:
      targetPath: $(System.ArtifactsDirectory)/${{ parameters.sdk }}/artifact/
      artifactName: sdk-generation-artifact
    continueOnError: true

  - task: PublishPipelineArtifact@1
    displayName: Publish sourceCode
    inputs:
      targetPath: $(System.ArtifactsDirectory)/${{ parameters.sdk }}/sourceCode/
      artifactName: sdk-generation-sourceCode
    continueOnError: true

  - task: PublishPipelineArtifact@1
    displayName: Publish logs
    inputs:
      targetPath: $(System.ArtifactsDirectory)/logs/
      artifactName: sdk-generation-logs
    condition: always()

  - bash: |
      publishResult \
        --storageType=eventhub \
        --pipelineStatus=completed \
        --buildId="$(Build.BuildId)" \
        --trigger='${{ parameters.trigger }}' \
        --logPath="www.demoLogUrl.com" \
        --resultsPath='["/tmp/output/init-task-result.json",
          "/tmp/output/generateAndBuild-task-result.json",
          "/tmp/output/mockTest-task-result.json"]'
      if [ $? -ne 0 ]; then
          exit 1
      fi
    displayName: Publish status
    env:
      EVENTHUB_SAS_URL: $(EVENTHUB_SAS_URL)
    condition: and(always(), ne('${{ parameters.triggerType }}', 'release'))

  - task: PublishPipelineArtifact@1
    displayName: Publish status artifact
    inputs:
      targetPath: $(System.ArtifactsDirectory)/completed/
      artifactName: sdk-generation-completed-result
    condition: always()