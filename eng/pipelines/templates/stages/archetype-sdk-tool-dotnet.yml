resources:
  repositories:
    - repository: azure-sdk-build-tools
      type: git
      name: internal/azure-sdk-build-tools
      ref: refs/tags/azure-sdk-build-tools_20230221.1

parameters:
  - name: ToolDirectory
    type: string
    default: ''
  - name: PackageDirectory
    type: string
    default: ''
  - name: TestDirectory
    type: string
    default: ''
  - name: NoWarn
    type: boolean
    default: false
  - name: TestPostSteps
    type: object
    default: []
  - name: DockerDeployments
    type: object
    default: []
  - name: DockerTagPrefix
    type: string
    default: '1.0.0-dev'
  - name: ManifestDeployment
    type: object
    default: []
  - name: StandaloneExeMatrix
    type: object
    default: []
  - name: ReleaseBinaries
    type: boolean
    default: false

variables:
  - template: ../variables/globals.yml
  - name: Warn
    ${{ if parameters.NoWarn }}:
      value: ''
    ${{ if not(parameters.NoWarn) }}:
      value: -warnaserror
  # A path to directory to contain the output of "dotnet pack" call,
  # to be consumed as input by "publish" task.
  - name: packagesToPublishDir
    value: $(Build.ArtifactStagingDirectory)/packages

stages:
  - stage: BuildTestAndPackage

    pool:
      name: azsdk-pool-mms-ubuntu-2204-general
      vmImage: MMSUbuntu22.04

    jobs:
      - job: BuildAndPackage
        displayName: Build and Package

        steps:
          - template: /eng/pipelines/templates/steps/install-dotnet.yml

          - script: 'dotnet pack /p:ArtifactsPackagesDir=$(packagesToPublishDir) $(Warn) -c Release'
            displayName: 'Build and Package'
            workingDirectory: '${{ coalesce(parameters.PackageDirectory, parameters.ToolDirectory) }}'
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0

          # This step creates "$(packagesToPublishDir)" directory if it doesn't exist.
          # This step is necessary since migration to net6.0. This is because since net6.0, 
          # in case the "Build and Package" above would not output any packages to this directory, 
          # the "Publish to packages artifact" step below would fail on missing directory.
          - pwsh: |
              if (!(Test-Path -PathType container "$(packagesToPublishDir)")) {
                New-Item -ItemType Directory -Path "$(packagesToPublishDir)"
                Write-Host "Created directory ""$(packagesToPublishDir)"""
              } else {
                Write-Host "Directory ""$(packagesToPublishDir)"" already exists. Nothing to do."
                Write-Host "Directory ""$(packagesToPublishDir)"" contents:"
                Get-ChildItem $(packagesToPublishDir) | ForEach-Object { Write-Host $_ }
              }
            displayName: Create dir for packages to publish or list its contents

          - publish: $(packagesToPublishDir)
            displayName: Publish to packages artifact
            artifact: packages
            condition: succeededOrFailed()

      - job: Produce_Executables

        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-22.04'
              poolName: 'azsdk-pool-mms-ubuntu-2204-general'
              artifactName: 'linux_windows'
            mac:
              imageName: 'macos-11'
              poolName: 'Azure Pipelines'
              artifactName: 'mac'

        pool:
          name: $(poolName)
          vmImage: $(imageName)

        steps:
          - template: /eng/pipelines/templates/steps/install-dotnet.yml

          - template: /eng/pipelines/templates/steps/produce-net-standalone-packs.yml
            parameters:
              StagingDirectory: $(Build.ArtifactStagingDirectory)
              BuildMatrix: ${{ parameters.StandaloneExeMatrix }}
              TargetDirectory: '${{ coalesce(parameters.PackageDirectory, parameters.ToolDirectory) }}'

      - job: Test

        strategy:
          matrix:
            Windows:
              Pool: azsdk-pool-mms-win-2022-general
              Image: windows-2022
            Linux:
              Pool: azsdk-pool-mms-ubuntu-2204-general
              Image: MMSUbuntu22.04
            Mac:
              Pool: Azure Pipelines
              Image: macos-11

        pool:
          name: $(Pool)
          vmImage: $(Image)

        steps:
          - template: /eng/pipelines/templates/steps/install-dotnet.yml

          - script: 'dotnet test /p:ArtifactsPackagesDir=$(Build.ArtifactStagingDirectory) $(Warn) --logger trx'
            displayName: 'Test'
            workingDirectory: '${{ coalesce(parameters.TestDirectory, parameters.ToolDirectory) }}'
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0
          
          - ${{ parameters.TestPostSteps }}
          
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/*.trx'
              testRunTitle: $(System.JobDisplayName)
              testResultsFormat: 'VSTest'
              mergeTestResults: true

      - ${{ if not(eq(length(parameters.DockerDeployments), 0)) }}:
        - template: /eng/pipelines/publish-docker-image.yml
          parameters:
            DockerDeployments: ${{ parameters.DockerDeployments }}
            Publish: false
            ImageTag: "${{ parameters.DockerTagPrefix }}$(Build.BuildNumber)"

  - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
    - template: pipelines/stages/net-release-to-feed.yml@azure-sdk-build-tools
      parameters:
        # Publish to https://dev.azure.com/azure-sdk/public/_packaging?_a=feed&feed=azure-sdk-for-net
        DevOpsFeedId: '29ec6040-b234-4e31-b139-33dc4287b756/fa8c16a3-dbe0-4de2-a297-03065ec1ba3f'
        ExeMatrix: ${{ parameters.StandaloneExeMatrix }}
        ShouldPublishExecutables: ${{ parameters.ReleaseBinaries }}

  - ${{if and(not(eq(length(parameters.DockerDeployments), 0)), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
    - stage: PublishDockerImages
      displayName: Publish Docker Images
      dependsOn: BuildTestAndPackage
      jobs:
        - template: /eng/pipelines/publish-docker-image.yml
          parameters:
            DockerDeployments: ${{ parameters.DockerDeployments }}
            ManifestDeployment: ${{ parameters.ManifestDeployment }}
            ImageTag: "${{ parameters.DockerTagPrefix }}$(Build.BuildNumber)"
