parameters:
- name: DockerDeployments
  type: object
  default:
  - name: test_proxy_linux
    pool: 'ubuntu-20.04'
    dockerRepo: 'engsys/testproxy-lin'
    prepareScript: tools/test-proxy/docker/prepare.ps1
    dockerFile: 'tools/test-proxy/docker/dockerfile'
    stableTags:
    - 'latest'
  - name: mock_attestation
    pool: 'ubuntu-20.04'
    dockerRepo: 'keyvault-mock-attestation'
    dockerFile: 'tools/keyvault-mock-attestation/Dockerfile'
    stableTags:
    - 'latest'
  - name: test_proxy_windows
    pool: 'windows-2019'
    dockerRepo: 'engsys/testproxy-win'
    prepareScript: tools/test-proxy/docker/prepare.ps1
    dockerFile: 'tools/test-proxy/docker/dockerfile-win'
    stableTags:
    - 'latest'
  - name: stress_watcher
    pool: 'ubuntu-20.04'
    dockerRepo: 'stress/watcher'
    dockerFile: 'tools/stress-cluster/services/Stress.Watcher/Dockerfile'
    stableTags:
    - 'latest'
  - name: stress_deploy_test_resources
    pool: 'ubuntu-20.04'
    dockerRepo: 'stress/deploy-test-resources'
    prepareScript: tools/stress-cluster/cluster/kubernetes/stress-test-addons/images/test-resource-deployer/prepare.ps1
    dockerFile: 'tools/stress-cluster/cluster/kubernetes/stress-test-addons/images/test-resource-deployer/Dockerfile'
    stableTags:
    - 'latest'

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - eng/containers/
    - tools/test-proxy/docker/
    - tools/keyvault-mock-attestation/Dockerfile
    - tools/stress-cluster/services/Stress.Watcher/
    - tools/stress-cluster/cluster/kubernetes/stress-test-addons/images/test-resource-deployer/

pr:
  branches:
    include:
    - main
  paths:
    include:
    - eng/containers/
    - tools/test-proxy/docker/
    - tools/keyvault-mock-attestation/Dockerfile
    - tools/stress-cluster/services/Stress.Watcher/
    - tools/stress-cluster/cluster/kubernetes/stress-test-addons/images/test-resource-deployer/

variables:
  - name: containerRegistry
    value: 'azsdkengsys'
  - name: imageTag
    value: $(build.buildid)
  - template: ../pipelines/templates/variables/globals.yml

jobs:
  - ${{ each config in parameters.DockerDeployments }}:
    - job: container_build_${{ config.name }}
      displayName: Deploy ${{ config.name }} Image
      pool:
        vmImage: ${{ config.pool }}
      steps:
        - ${{ if config.prepareScript }}:
          - pwsh: |
              ./${{ config.prepareScript }}
            displayName: "Run prep script"

        - task: Docker@2
          displayName: Build ${{ config.name }}:$(imageTag)
          inputs:
            command: build
            Dockerfile: ${{ config.dockerFile }}
            tags: $(imageTag)
            arguments: '-t $(containerRegistry).azurecr.io/${{ config.dockerRepo }}:$(imageTag)'

        - task: Docker@2
          displayName: Push ${{ config.name }}:$(imageTag)
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          inputs:
            containerRegistry: $(containerRegistry)
            repository: ${{ config.dockerRepo }}
            command: push
            tags: $(imageTag)

        - ${{ each stableTag in config.stableTags }}:
          - task: Docker@2
            displayName: Build ${{ config.name }}:${{ stableTag }}
            inputs:
              command: build
              Dockerfile: ${{ config.dockerFile }}
              tags: ${{ stableTag }}
              arguments: '-t $(containerRegistry).azurecr.io/${{ config.dockerRepo }}:${{ stableTag }}'

          - task: Docker@2
            displayName: Push ${{ config.name }}:${{ stableTag }}
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

            inputs:
              containerRegistry: $(containerRegistry)
              repository: ${{ config.dockerRepo }}
              command: push
              tags: ${{ stableTag }}
