parameters:
  dependsOn: []
  ShouldTag: true
  Feed: 'public/azure-sdk-for-net'
  ShouldPublishExecutables: false
  RequireStrongNames: true
  PublishEnvironment: ''
  ExeMatrix: []
  VerifyChangelog: false
  ToolDirectory: ''
# Needs Github Release variable group linked.
# Needs AzureSDK Nuget Release Pipelines Secrets variable group linked.

stages:
- stage: Release
  dependsOn: ${{ parameters.dependsOn }}
  variables:
  - template: /eng/pipelines/templates/variables/globals.yml
  - template: /eng/pipelines/templates/variables/image.yml
  - name: Artifacts
    value: $(System.DefaultWorkingDirectory)/_artifacts/packages
  - name: Binaries
    value: $(System.DefaultWorkingDirectory)/_artifacts/binaries
  - name: BuildToolPath
    value: $(Pipeline.Workspace)/_azure-sdk-build-tools
  - name: BuildToolScripts
    value: $(BuildToolPath)/scripts
  - name: BuildToolTools
    value: $(BuildToolPath)/tools
  - name: ReleaseRepo
    value: azure/azure-sdk-tools

  jobs:
  - template: /eng/pipelines/templates/jobs/nuget-publish.yml
    parameters:
      ArtifactName: packages
      Feed: ${{ parameters.Feed }}
      VerifyChangelog: ${{ parameters.VerifyChangelog }}
      ${{ if parameters.PublishEnvironment }}:
        PublishEnvironment: ${{ parameters.PublishEnvironment }}

  - job: PostPackagePublish
    displayName: Post Package Publish
    dependsOn: PublishPackage

    pool:
      name: $(WINDOWSPOOL)
      image: $(WINDOWSVMIMAGE)
      os: windows

    steps:
      # github release and tagging uses a local script in the build tools repo, so we need to checkout that repo
      - checkout: azure-sdk-build-tools
        path: _azure-sdk-build-tools

      - checkout: self

      - task: DownloadPipelineArtifact@2
        displayName: Download Packages
        inputs:
          artifactName: packages-signed
          targetPath: $(Artifacts)

      - ${{ if eq(parameters.ShouldTag, 'true') }}:
        # sets output variable $(release)
        - task: PowerShell@2
          displayName: 'Verify Package Tags and Create Git Releases'
          inputs:
            targetType: filePath
            # This script is different from the azure-sdk-tools repo in that it A) doesn't need the eng/common $Language variable set
            # AND it sets an output variable for all the release names that were created. The output variable should be added to the eng/common
            # version and a basic override of $Language should be supported before we can remove this build-tools repo script.
            filePath: '$(BuildToolScripts)/create-tags-and-git-release.ps1'
            arguments: '-artifactLocation $(Artifacts) -workingDirectory $(System.DefaultWorkingDirectory) -packageRepository Nuget -releaseSha $(Build.SourceVersion) -repoId $(Build.Repository.Id)'
          env:
            GH_TOKEN: $(azuresdk-github-pat)

      - ${{ if and(eq(parameters.ShouldTag, 'true'), eq(parameters.ShouldPublishExecutables, 'true')) }}:
        - ${{ each target in parameters.ExeMatrix }}:
          - task: DownloadPipelineArtifact@2
            displayName: Download ${{ target.rid }} Binary
            inputs:
              artifact: standalone-${{ target.rid }}
              path: $(Binaries)
        - template: ../steps/platform-specific-signing.yml
          parameters:
            BinariesPath: $(Binaries)
            BuildScriptsPath: $(BuildToolScripts)
            ExeMatrix: ${{ parameters.ExeMatrix }}

        - task: PowerShell@2
          displayName: 'Post to github release'
          inputs:
            targetType: filePath
            # todo, move this local script from the build tools repo as well
            filePath: '$(Build.SourcesDirectory)/azure-sdk-tools/eng/pipelines/templates/scripts/post-files-to-git-release.ps1'
            arguments: '-TargetRelease "$(release)" -BinariesDirectory "$(Binaries)" -RepoId $(ReleaseRepo)'
            pwsh: true
          env:
            GH_TOKEN: $(azuresdk-github-pat)


      # if we are verifying the changelog, we should definitely submit an increment version + changelog update PR
      - ${{ if eq(parameters.VerifyChangelog, true) }}:
        - task: PowerShell@2 # will set runtime variable $(NewVersion)
          displayName: 'Increment version in csproj'
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/azure-sdk-tools/eng/scripts/Increment-dotnet-package.ps1'
            arguments: '-ToolDirectory "$(Build.SourcesDirectory)/azure-sdk-tools/${{ parameters.ToolDirectory }}"'
            pwsh: true

        - task: PowerShell@2
          displayName: 'Update Changelog'
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)/azure-sdk-tools/'
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/azure-sdk-tools/eng/common/scripts/Update-Changelog.ps1'
            # run this locally and figure out what the inputs should be
            arguments: '-Version $(NewVersion) -ChangelogPath "${{ parameters.ToolDirectory }}/CHANGELOG.md"'
            pwsh: true

        - template: /eng/common/pipelines/templates/steps/create-pull-request.yml
          parameters:
            RepoName: azure-sdk-tools
            PRBranchName: increment-package-version-${{ parameters.ToolDirectory }}-$(Build.BuildId)
            CommitMsg: "Increment package version after release of ${{ parameters.ToolDirectory }}"
            PRTitle: "Increment version for ${{ parameters.ToolDirectory }} releases"
            WorkingDirectory: $(Build.SourcesDirectory)/azure-sdk-tools/
            ScriptDirectory: azure-sdk-tools/eng/common/scripts/

      - task: 1ES.PublishPipelineArtifact@1
        displayName: 'Publish processed files'
        inputs:
          artifactName: processed-files
          targetPath: $(Artifacts)
        condition: always()
