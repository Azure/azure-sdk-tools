<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreBuildTargets>
      FindRPScopeFromPR;
      CategorizeProjects;
    </PreBuildTargets>
    <CleanTargetsDependsOn>
      $(PreBuildTargets);
      CleanProjects;
      CleanNugetPackages;
    </CleanTargetsDependsOn>
    <RestoreTargetsDependsOn>
      $(PreBuildTargets);
      RestoreProjects
    </RestoreTargetsDependsOn>
    <BuildTargetsDependsOn>
      $(RestoreTargetsDependsOn);
      BuildProjects;
      UpdateApiTagInfo
    </BuildTargetsDependsOn>
    <RunTestProjectsDependsOn>
      $(BuildTargetsDependsOn);
      ExecuteTests;
    </RunTestProjectsDependsOn>
     <CreateNugetPackageDependsOn>
      $(RunTestProjectsDependsOn);
      Package;
    </CreateNugetPackageDependsOn>
    <PublishNugetDependsOn>
      $(RunTestProjectsDependsOn);
      PublishingNuget;
      ArchiveSymbolsTarget
    </PublishNugetDependsOn>
    <UtilTargetsDependsOn>
      ExecUtil;
    </UtilTargetsDependsOn>
    <HelpDependsOn>
      DisplayHelp
    </HelpDependsOn>
  </PropertyGroup>

  <Target Name="GetBuildEnv">
    <Message Text="CISignRepo......$(CISignRepo)" Importance="Low" />
    <Message Text="OnPremiseBuild .... $(OnPremiseBuild)" Importance="Low" />
    <Message Text="CIToolsPath .... $(CIToolsPath)"  Importance="Low" />
    <Message Text="CodeSign .... $(CodeSign)"  Importance="Low" />
    <Message Text="PackageOutputPath .... $(PackageOutputPath)" Importance="Low" />
    <Message Text="Scope .... $(Scope)"  Importance="Low" />
    <Message Text="BuildInParallel .... $(BuildInParallel)"  Importance="Low" />
    <Message Text="LocalPublishNugetDir .... $(LocalPublishNugetDir)"  Importance="Low" />

    <Message Text="NetSdkBuildTargetsDir .... $(NetSdkBuildTargetsDir)"  Importance="Low" />
    <Message Text="NetSdkBuildToolsDir .... $(NetSdkBuildToolsDir)" Importance="Low" />
  </Target>

  <Target Name="CleanProjects" Condition=" '$(SkipClean)' != 'true' ">
    <Message Text="Target ==> Cleaning Initiated....." Importance="Low" />
    <PropertyGroup>
      <LatestProjectDefaultCleanTarget Condition=" '$(LatestProjectDefaultCleanTarget)' == '' ">Clean</LatestProjectDefaultCleanTarget>
    </PropertyGroup>
    <ItemGroup>
      <ProjectsToBeCleaned Include="@(CombineProjects)" />
    </ItemGroup>
	  <Message Text="Cleaning @(ProjectsToBeCleaned)" Condition=" '$(SkipClean)' != 'true' "/>

    <MSBuild Targets="$(LatestProjectDefaultCleanTarget)"
        Projects="@(ProjectsToBeCleaned)"
        Properties="PackageOutputPath=$(PackageOutputPath);Configuration=$(Configuration)"
        BuildInParallel="$(BuildInParallel)"
        ContinueOnError="ErrorAndStop" 
        Condition=" '$(WhatIf)' != 'true' " />
  </Target>

  <Target Name="CleanNugetPackages">
    <Message Text="Target ==> CleaningNugetPackages Initiated....." Importance="Low" />
    <ItemGroup>
      <_SDKPackageFilesToDelete Include="$(PackageOutputPath)\*.nupkg"/>
      <_SDKPackageFilesToDelete Include="$(PackageOutputPath)\*.$(SymbolPackageFormat)"/>
      <_SDKPackageFilesToDelete Include="$(BaseIntermediateOutputPath)\*.nuspec"/>
    </ItemGroup>
    <Message Text="Cleaning Packages..... @(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " />
    <Delete Files="@(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " ContinueOnError="true"/>    
    <CleanNugetPackagesTask 
            RestoreCacheLocations="$(RestorePackagesPath)" 
            PackageReferences="@(SdkPkgReferenceList)"
            WhatIf="$(WhatIf)"
            DebugMode="$(DebugMode)"
            Condition=" '$(WhatIf)' != 'true' "
            />
  </Target>

  <Target Name="RestoreProjects" Condition=" '$(SkipRestore)' != 'true' ">
    <Message Text="Target ==> Restoring Initiated....." Importance="Low" />
    
    <PropertyGroup>
      <LatestProjectDefaultRestoreTarget Condition=" '$(LatestProjectDefaultRestoreTarget)' == '' ">Restore</LatestProjectDefaultRestoreTarget>
    </PropertyGroup>
    <ItemGroup>
      <ProjectsToBeRestored Include="@(CombineProjects)" />
    </ItemGroup>
	  
    <Message Text="Now Restoring @(ProjectsToBeRestored)" Condition=" '@(ProjectsToBeRestored)' != '' OR '$(DebugTrace)' == 'true' "/>

    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
            Projects="@(ProjectsToBeRestored)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop" 
            Condition=" '$(WhatIf)' != 'true' " />
  </Target>

  <Target Name="BuildProjects" Condition=" '$(SkipBuild)' != 'true' ">
    <Message Text="Target ==> BuildProjects Initiated....." Importance="Low" />
    <Message Text="SDKProjects ....... %(SdkProjectsToBuild.Identity)" Condition=" ('$(DebugTrace)' == 'true') " Importance="High" />
    <Message Text="TargetFx ....... %(SdkProjectsToBuild.PlatformSpecificFx)" Condition=" '$(DebugTrace)' == 'true' " Importance="High" />

    <Message Text="TestProjects ....... %(TestProjectsToBuild.Identity)" Condition=" '$(DebugTrace)' == 'true' " Importance="High" />
    <Message Text="TargetFx ....... %(TestProjectsToBuild.PlatformSpecificFx)" Condition=" '$(DebugTrace)' == 'true' " Importance="High" />

    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(CombineProjects)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop"
             Condition=" '$(WhatIf)' != 'true' ">
      <Output TaskParameter="TargetOutputs" ItemName="builtAssemblies" />
    </MSBuild>
  </Target>

    <Target Name="ExecuteTests" Condition=" '$(SkipTests)' != 'true' ">
    <Message Text="Target ==> ExecuteTests Initiated....." Importance="Low" />
    <ItemGroup>
      <ExecuteTestSuite Include="@(TestToBeRun)" />
    </ItemGroup>

    <Message Text="Running Tests .... %(ExecuteTestSuite.Identity)" Condition=" '@(ExecuteTestSuite)' != '' " />
    <Message Text="Running Tests .... %(ExecuteTestSuite.PlatformSpecificFx)" Condition=" '@(ExecuteTestSuite)' != '' " />
    
    <Exec Command="dotnet test --no-restore --no-build %(ExecuteTestSuite.Identity) -f %(ExecuteTestSuite.PlatformSpecificFx) -l trx;LogFileName=$(pkg_root_RepoTestResultsDir)\%(ExecuteTestSuite.PlatformSpecificFx)\%(ExecuteTestSuite.Filename).trx" 
          Condition="( ('@(ExecuteTestSuite)' != '') AND ('$(WhatIf)' != 'true') )" ContinueOnError="false" WorkingDirectory="%(ExecuteTestSuite.RootDir)%(ExecuteTestSuite.Directory)" />
  </Target>

  <Target Name="Package" Condition=" '@(CombinedNugetPkgProjects)' != '' ">
    <Message Text="Target ==> Package Initiated....." Importance="Low" />
    <Message Text="Packaging..... @(CombinedNugetPkgProjects)" Importance="High" />
    <PropertyGroup> 
      <NugPkgOutPutDirPath>$(pkg_root_RepoNugPkgOutputDir)</NugPkgOutPutDirPath>
    </PropertyGroup>
    <ItemGroup>    
      <ProjectsToPackage Include="@(CombinedNugetPkgProjects)" />      
    </ItemGroup>
    
    <Message Text="Packaging..... @(ProjectsToPackage)" Condition=" '$(ProjectsToPackage)' != '' " />
    <Message Text="PackageOutputDir....... $(NugPkgOutPutDirPath)" Condition=" '$(NugPkgOutPutDirPath)' != '' " Importance="Low" />   
    <Message Text="Starting Packaging..... @(ProjectsToPackage)" Condition=" '@(ProjectsToPackage)' != '' "/>

    <MSBuild
        Projects="@(ProjectsToPackage)"
        Targets="Pack"
        Properties="Configuration=$(Configuration);
        VisualStudioVersion=$(VisualStudioVersion); 
        PackageOutputPath=$(NugPkgOutPutDirPath); 
        NoPackageAnalysis=true; 
        IncludeSymbols=true;
        SymbolPackageFormat=$(SymbolPackageFormat);
        IsPackable=true;
        NoBuild=true;" Condition=" ('@(ProjectsToPackage)' != '') OR ('$(WhatIf)' != 'true') ">
      <Output TaskParameter="TargetOutputs" ItemName="SdkNuGetPackages" />
    </MSBuild>
  </Target>

  
  <Target Name="CategorizeProjects">
    <Message Text="Target ==> CategorizeProjects Initiated....." Importance="Low" />
    <Message Text="Categorizing Target....." Condition=" '$(DebugTrace)' == 'true' " />
    <Message Text="RepoRoot..............$(RepoRoot)" Condition=" '$(DebugTrace)' == 'true' " />
    <Message Text="RootDir..............$(RootDir)" Condition=" '$(DebugTrace)' == 'true' " />
    <Message Text="RootDirNoTrailSepp..............$(RootDirNoTrailSepp)" Condition=" '$(DebugTrace)' == 'true' " />
    <Message Text="pkg_root_RepoRoot..............$(pkg_root_RepoRoot)" Condition=" '$(DebugTrace)' == 'true' " />
    <Message Text="pkg_root_RepoSrcDir..............$(pkg_root_RepoSrcDir)" Condition=" '$(DebugTrace)' == 'true' " />
    <Message Text="CatProj - Scope retrieved from PR......$(ScopeStringFromTask)" Importance="High" />

    <PropertyGroup>
      <BuildScopes Condition=" '$(ScopeStringFromTask)' != '' ">$(ScopeStringFromTask)</BuildScopes>
    </PropertyGroup>

    <CategorizeSDKProjectsTask
      BuildScope="$(Scope)"
      BuildScopes="$(BuildScopes)"  
      CmdLineIncludeScope="$(IncludeRPs)"
      CmdLineExcludeScope="$(ExcludeRPs)"
      DebugMode="$(DebugMode)"
      WhatIf="$(WhatIf)"
      ProjectType="$(ProjectType)"
      ProjectCategory="$(ProjectCategory)"
      UseLegacyDirStructure="$(UseLegacyDirStructure)"
      >
      <Output TaskParameter="SDK_Projects" ItemName="SDK_Projects" />
	    <Output TaskParameter="Test_Projects" ItemName="Test_Projects" />
      <Output TaskParameter="UnSupportedProjects" ItemName="UnSupportedProjects" />
      <Output TaskParameter="Test_ToBe_Run" ItemName="Test_ToBe_Run" />
      <Output TaskParameter="SdkPkgReferenceList" ItemName="SdkPkgReferenceList" />
    </CategorizeSDKProjectsTask>

    <ItemGroup>
      <SDKProjects Include="@(SDK_Projects)" />
      <SDKTestProjects Include="@(Test_Projects)" />
      <TestToBeRun Include="@(Test_ToBe_Run)" />
      <ProjectToScanDirs Include="%(SDK_Projects.RootDir)%(SDK_Projects.Directory)"/>
      <ProjectToScanDirs Include="%(Test_Projects.RootDir)%(Test_Projects.Directory)"/>
    </ItemGroup>

    <ItemGroup>
      <CombineProjects Include="@(SDKProjects);@(SDKTestProjects);@(UnSupportedProjects)" />
      <CombinedNugetPkgProjects Include="@(SDKProjects)" />
    </ItemGroup>

    <ItemGroup>
      <SdkProjectsToBuild Include="@(CombineProjects->'%(Identity)')">  
        <Properties>TargetFrameworks=%(PlatformSpecificFx)</Properties>
      </SdkProjectsToBuild> 
    </ItemGroup>

    <ItemGroup>
      <TestProjectsToBuild Include="@(SDKTestProjects->'%(Identity)')">  
        <Properties>TargetFrameworks=%(PlatformSpecificFx)</Properties>
      </TestProjectsToBuild> 
    </ItemGroup>
  </Target>

  <Target Name="DisplayHelp">
    <Message Text="msbuild build.proj /t:Build"/>
    <Message Text="---- will build and create nuget pacakge for the entire repo"/>
    <Message Text=" " />

    <Message Text="msbuild build.proj /t:Build /p:Scope=SDKs\Compute" />
    <Message Text="---- will build Microsoft.Azure.Management.Compute and Compute.Tests project and create nuget pacakge for Compute"/>
    <Message Text=" " />

    <Message Text="msbuild build.proj /t:RunTests /p:Scope=SDKs\Compute" />
    <Message Text="----- will Build Compute nuget package and run compute test" />
    <Message Text=" " />
    
    <Message Text="msbuild build.proj /t:CreateNugetPackage /p:Scope=SDKs\Compute" />
    <Message Text="----- will Build, RunTests and create nuget package for Compute" />
    <Message Text=" " />
  </Target>
  
  <!--Do not delete-->
  <Target Name="PreBuildStaticAnalysis" DependsOnTargets="$(PreBuildStaticAnalysisTargets)"/>  
  <Import Project="..\tasks\common.tasks" />
  <Import Project="utility.targets" />
</Project>