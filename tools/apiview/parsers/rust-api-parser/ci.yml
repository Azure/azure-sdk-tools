# NOTE: Please refer to https://aka.ms/azsdk/engsys/ci-yaml before editing this file.
trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - tools/apiview/parsers/rust-api-parser

pr:
  branches:
    include:
      - main
      - feature/*
      - release/*
      - hotfix/*
  paths:
    include:
      - tools/apiview/parsers/rust-api-parser

extends:
  template: /eng/pipelines/templates/stages/1es-redirect.yml
  parameters:
    stages:
      - stage: 'Build'
        variables:
          - template: /eng/pipelines/templates/variables/image.yml
          - name: NodeVersion
            value: '18.x'
          - name: ArtifactName
            value: 'apiview'
          - name: RustGeneratorDirectory
            value: 'tools/apiview/parsers/rust-api-parser'
        jobs:
          - job: 'Build'

            pool:
              name: $(LINUXNEXTPOOL)
              image: $(LINUXNEXTVMIMAGE)
              os: linux

            steps:
              - task: NodeTool@0
                inputs:
                  versionSpec: '$(NodeVersion)'
                displayName: 'Use NodeJS $(NodeVersion)'

              - script: |
                  npm install -g npm@8.16.0
                displayName: "Install npm 8.16.0"

              - script: |
                  npm install
                workingDirectory: $(RustGeneratorDirectory)
                displayName: "Install npm packages Rust generator"

              - script: |
                  npm run-script build
                workingDirectory: $(RustGeneratorDirectory)
                displayName: "Build Rust generator"

              - pwsh: |
                  npm pack $(RustGeneratorDirectory)
                  Copy-Item ./*.tgz $(Build.ArtifactStagingDirectory)
                displayName: "Pack Rust generator"

              - task: 1ES.PublishPipelineArtifact@1
                inputs:
                  targetPath: '$(Build.ArtifactStagingDirectory)'
                  artifactName: $(ArtifactName)

      - ${{if and(eq(variables['Build.Reason'], 'Manual'), eq(variables['System.TeamProject'], 'internal'))}}:
        - stage: 'Release'
          dependsOn: Build
          condition: Succeeded()
          variables:
            - template: /eng/pipelines/templates/variables/image.yml
            - name: ArtifactName
              value: 'apiview'
            - name: FeedRegistry
              value: 'https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-rust/npm/registry/'
          jobs:
          - job: PublishPackage
            displayName: 'Publish rust-genapi package to devops feed'
            pool:
              name: $(LINUXNEXTPOOL)
              image: $(LINUXNEXTVMIMAGE)
              os: linux
            steps:
            - checkout: none
            - download: current

            - pwsh: |
                $detectedPackageName=Get-ChildItem $(Pipeline.Workspace)/$(ArtifactName)/*.tgz
                Write-Host "Detected package name: $detectedPackageName"
                $registry="$(FeedRegistry)"
                $regAuth=$registry.replace("https:","")
                $npmReg = $regAuth.replace("registry/","");
                $env:NPM_TOKEN="$(azure-sdk-devops-npm-token)"
                Write-Host "Publishing to $($regAuth)"
                npm config set $regAuth`:username=azure-sdk
                npm config set $regAuth`:_password=`$`{NPM_TOKEN`}
                npm config set $regAuth`:email=not_set
                npm config set $npmReg`:username=azure-sdk
                npm config set $npmReg`:_password=`$`{NPM_TOKEN`}
                npm config set $npmReg`:email=not_set
                Write-Host "Publishing package"
                Write-Host "npm publish $detectedPackageName --registry=$registry --always-auth=true"
                npm publish $detectedPackageName --registry=$registry --always-auth=true
              displayName: Publish package