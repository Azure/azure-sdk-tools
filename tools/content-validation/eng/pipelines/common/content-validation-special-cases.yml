parameters:
- name: DotNetSdkVersion  
  type: string

jobs:
  - job: SpecialCasesTest
    displayName: Duplicate_Services_Testing
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: ${{ parameters.DotNetSdkVersion }}
        installationPath: $(Agent.ToolsDirectory)/dotnet 

    - task: DotNetCoreCLI@2
      displayName: New Manifest for tool
      inputs:
        command: custom
        custom: 'new '
        arguments: tool-manifest

    - task: DotNetCoreCLI@2
      displayName: Install Playwright CLI
      inputs:
        command: custom
        custom: 'tool '
        arguments: install Microsoft.Playwright.CLI

    - task: DotNetCoreCLI@2
      displayName: Build all projects and libraries
      inputs:
        command: 'build'
        projects: 'content-validation.sln'

    - task: DotNetCoreCLI@2
      displayName: Run Playwright Install
      inputs:
        command: custom
        custom: 'tool '
        arguments: run playwright install

    - task: DotNetCoreCLI@2
      displayName: Build test project
      inputs:
        command: 'build'
        projects: 'ContentValidation.Test/ContentValidation.Test.csproj'

    - task: DotNetCoreCLI@2
      displayName: Run test case
      inputs:
        command: 'test'
        projects: 'ContentValidation.Test/ContentValidation.Test.csproj'
        arguments: '-e BROWSER=chromium --filter Category=SpecialTest'
        testRunTitle: 'Content Validation Testing Start'
      continueOnError: true

    # - task: DownloadPipelineArtifact@2
    #   displayName: Download The Last Artifact issues-summary
    #   inputs:
    #     buildType: 'specific'
    #     project: 'content-validation-automation'
    #     pipeline: 'Content Validation For Python'
    #     buildVersionToDownload: 'latestFromBranch'
    #     allowPartiallySucceededBuilds: true
    #     allowFailedBuilds: false
    #     branchName: 'refs/heads/main'
    #     artifactName: 'issues-summary'
    #     downloadPath: '$(System.DefaultWorkingDirectory)/Artifacts'
    #   continueOnError: true

    # - task: DotNetCoreCLI@2
    #   displayName: Build report helper project
    #   inputs:
    #     command: 'build'
    #     projects: 'ReportHelper/ReportHelper.csproj'

    # - task: DotNetCoreCLI@2
    #   displayName: Resolve data by report helper
    #   env:
    #     PackageName: ${{ parameters.PackageName }}
    #   inputs:
    #     command: 'run'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/ReportHelper'

    # - task: PublishPipelineArtifact@1
    #   displayName: "Upload pipeline test data"
    #   inputs:
    #     targetPath: $(System.DefaultWorkingDirectory)/Reports
    #     artifactName: ${{ parameters.PackageName }}
    #     publishLocation: "pipeline"

    # - task: Bash@3
    #   displayName: 'Set Script Executable'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       chmod +x $(System.DefaultWorkingDirectory)/eng/scripts/create-github-issue.sh

    # - task: Bash@3
    #   displayName: 'Create GitHub Issue'
    #   inputs:
    #     targetType: 'filePath'
    #     filePath: '$(System.DefaultWorkingDirectory)/eng/scripts/create-github-issue.sh'
    #     arguments: >-
    #       ${{ parameters.PackageName }}
    #       ${{ parameters.GitHubPat }}
    #       ${{ parameters.GitHubOwner }}
    #       ${{ parameters.GitHubRepo }}
    #       ${{ parameters.OrganizationName }}
    #       ${{ parameters.ProjectName }}
    #       $(Build.BuildId)
    #       ${{ parameters.AzureDevOpsPat }}