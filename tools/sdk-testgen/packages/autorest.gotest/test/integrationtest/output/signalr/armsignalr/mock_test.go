//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsignalr_test

import (
	"context"
	"net/http"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr"
	"github.com/stretchr/testify/suite"
	"golang.org/x/net/http2"
)

type MockTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *MockTestSuite) SetupSuite() {
	mockHost := testutil.GetEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	err := http2.ConfigureTransport(tr)
	testsuite.Require().NoError(err, "Failed to configure http2 transport")
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	testsuite.cred = &testutil.FakeCredential{}

	testsuite.options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func TestMockTest(t *testing.T) {
	suite.Run(t, new(MockTestSuite))
}

func (testsuite *MockTestSuite) TestOperations_List() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	client, err := armsignalr.NewOperationsClient(testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json")
		// Response check
		pagerExampleRes := armsignalr.OperationList{
			Value: []*armsignalr.Operation{
				{
					Name: to.Ptr("Microsoft.SignalRService/SignalR/read"),
					Display: &armsignalr.OperationDisplay{
						Description: to.Ptr("View the resource settings and configurations in the management portal or through API"),
						Operation:   to.Ptr("Manage SignalR (read-only)"),
						Provider:    to.Ptr("Microsoft.SignalRService"),
						Resource:    to.Ptr("SignalR"),
					},
					IsDataAction: to.Ptr(false),
					Properties:   &armsignalr.OperationProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSignalR_CheckNameAvailability() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_CheckNameAvailability"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		armsignalr.NameAvailabilityParameters{
			Name: to.Ptr("mySignalRService"),
			Type: to.Ptr("Microsoft.SignalRService/SignalR"),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json")
	// Response check
	exampleRes := armsignalr.NameAvailability{
		Message:       to.Ptr("The name is already taken. Please try a different name."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr("AlreadyExists"),
	}
	if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.NameAvailability)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalR_ListBySubscription() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListBySubscription"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json")
		// Response check
		pagerExampleRes := armsignalr.ResourceInfoList{
			Value: []*armsignalr.ResourceInfo{
				{
					Name:     to.Ptr("mySignalRService"),
					Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Identity: &armsignalr.ManagedIdentity{
						Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					Kind: to.Ptr(armsignalr.ServiceKindSignalR),
					Properties: &armsignalr.Properties{
						Cors: &armsignalr.CorsSettings{
							AllowedOrigins: []*string{
								to.Ptr("https://foo.com"),
								to.Ptr("https://bar.com")},
						},
						DisableAADAuth:   to.Ptr(false),
						DisableLocalAuth: to.Ptr(false),
						ExternalIP:       to.Ptr("10.0.0.1"),
						Features: []*armsignalr.Feature{
							{
								Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
								Properties: map[string]*string{},
								Value:      to.Ptr("Serverless"),
							},
							{
								Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
								Properties: map[string]*string{},
								Value:      to.Ptr("True"),
							},
							{
								Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
								Properties: map[string]*string{},
								Value:      to.Ptr("False"),
							},
							{
								Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
								Properties: map[string]*string{},
								Value:      to.Ptr("False"),
							}},
						HostName: to.Ptr("mysignalrservice.service.signalr.net"),
						NetworkACLs: &armsignalr.NetworkACLs{
							DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
							PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
								{
									Allow: []*armsignalr.SignalRRequestType{
										to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
									Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								}},
							PublicNetwork: &armsignalr.NetworkACL{
								Allow: []*armsignalr.SignalRRequestType{
									to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
							},
						},
						PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
							{
								Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Properties: &armsignalr.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsignalr.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
									},
									PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
								},
								SystemData: &armsignalr.SystemData{
									CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									CreatedBy:          to.Ptr("string"),
									CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
									LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									LastModifiedBy:     to.Ptr("string"),
									LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
								},
							}},
						ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr("Enabled"),
						PublicPort:          to.Ptr[int32](443),
						ServerPort:          to.Ptr[int32](443),
						TLS: &armsignalr.TLSSettings{
							ClientCertEnabled: to.Ptr(true),
						},
						Upstream: &armsignalr.ServerlessUpstreamSettings{
							Templates: []*armsignalr.UpstreamTemplate{
								{
									URLTemplate: to.Ptr("http://foo.com"),
								}},
						},
						Version: to.Ptr("1.0"),
					},
					SKU: &armsignalr.ResourceSKU{
						Name:     to.Ptr("Standard_S1"),
						Capacity: to.Ptr[int32](1),
						Size:     to.Ptr("S1"),
						Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceInfoList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceInfoList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSignalR_ListByResourceGroup() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListByResourceGroup"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json")
		// Response check
		pagerExampleRes := armsignalr.ResourceInfoList{
			Value: []*armsignalr.ResourceInfo{
				{
					Name:     to.Ptr("mySignalRService"),
					Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
					},
					Identity: &armsignalr.ManagedIdentity{
						Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					Kind: to.Ptr(armsignalr.ServiceKindSignalR),
					Properties: &armsignalr.Properties{
						Cors: &armsignalr.CorsSettings{
							AllowedOrigins: []*string{
								to.Ptr("https://foo.com"),
								to.Ptr("https://bar.com")},
						},
						DisableAADAuth:   to.Ptr(false),
						DisableLocalAuth: to.Ptr(false),
						ExternalIP:       to.Ptr("10.0.0.1"),
						Features: []*armsignalr.Feature{
							{
								Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
								Properties: map[string]*string{},
								Value:      to.Ptr("Serverless"),
							},
							{
								Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
								Properties: map[string]*string{},
								Value:      to.Ptr("True"),
							},
							{
								Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
								Properties: map[string]*string{},
								Value:      to.Ptr("False"),
							},
							{
								Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
								Properties: map[string]*string{},
								Value:      to.Ptr("False"),
							}},
						HostName: to.Ptr("mysignalrservice.service.signalr.net"),
						NetworkACLs: &armsignalr.NetworkACLs{
							DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
							PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
								{
									Allow: []*armsignalr.SignalRRequestType{
										to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
									Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								}},
							PublicNetwork: &armsignalr.NetworkACL{
								Allow: []*armsignalr.SignalRRequestType{
									to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
							},
						},
						PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
							{
								Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
								Properties: &armsignalr.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsignalr.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
									},
									PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
								},
								SystemData: &armsignalr.SystemData{
									CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									CreatedBy:          to.Ptr("string"),
									CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
									LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
									LastModifiedBy:     to.Ptr("string"),
									LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
								},
							}},
						ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr("Enabled"),
						PublicPort:          to.Ptr[int32](443),
						ServerPort:          to.Ptr[int32](443),
						TLS: &armsignalr.TLSSettings{
							ClientCertEnabled: to.Ptr(true),
						},
						Upstream: &armsignalr.ServerlessUpstreamSettings{
							Templates: []*armsignalr.UpstreamTemplate{
								{
									URLTemplate: to.Ptr("http://foo.com"),
								}},
						},
						Version: to.Ptr("1.0"),
					},
					SKU: &armsignalr.ResourceSKU{
						Name:     to.Ptr("Standard_S1"),
						Capacity: to.Ptr[int32](1),
						Size:     to.Ptr("S1"),
						Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceInfoList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceInfoList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSignalR_Get() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Get"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json")
	// Response check
	exampleRes := armsignalr.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &armsignalr.ManagedIdentity{
			Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(armsignalr.ServiceKindSignalR),
		Properties: &armsignalr.Properties{
			Cors: &armsignalr.CorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*armsignalr.Feature{
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &armsignalr.NetworkACLs{
				DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
				PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
					{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &armsignalr.NetworkACL{
					Allow: []*armsignalr.SignalRRequestType{
						to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &armsignalr.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsignalr.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &armsignalr.TLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &armsignalr.ServerlessUpstreamSettings{
				Templates: []*armsignalr.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &armsignalr.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ResourceInfo)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalR_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_CreateOrUpdate"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySignalRService",
		armsignalr.ResourceInfo{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &armsignalr.ManagedIdentity{
				Type: to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
			},
			Kind: to.Ptr(armsignalr.ServiceKindSignalR),
			Properties: &armsignalr.Properties{
				Cors: &armsignalr.CorsSettings{
					AllowedOrigins: []*string{
						to.Ptr("https://foo.com"),
						to.Ptr("https://bar.com")},
				},
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				Features: []*armsignalr.Feature{
					{
						Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
						Properties: map[string]*string{},
						Value:      to.Ptr("Serverless"),
					},
					{
						Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
						Properties: map[string]*string{},
						Value:      to.Ptr("True"),
					},
					{
						Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
						Properties: map[string]*string{},
						Value:      to.Ptr("False"),
					},
					{
						Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
						Properties: map[string]*string{},
						Value:      to.Ptr("False"),
					}},
				NetworkACLs: &armsignalr.NetworkACLs{
					DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
					PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
						{
							Allow: []*armsignalr.SignalRRequestType{
								to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
							Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armsignalr.NetworkACL{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
					},
				},
				PublicNetworkAccess: to.Ptr("Enabled"),
				TLS: &armsignalr.TLSSettings{
					ClientCertEnabled: to.Ptr(false),
				},
				Upstream: &armsignalr.ServerlessUpstreamSettings{
					Templates: []*armsignalr.UpstreamTemplate{
						{
							Auth: &armsignalr.UpstreamAuthSettings{
								Type: to.Ptr(armsignalr.UpstreamAuthTypeManagedIdentity),
								ManagedIdentity: &armsignalr.ManagedIdentitySettings{
									Resource: to.Ptr("api://example"),
								},
							},
							CategoryPattern: to.Ptr("*"),
							EventPattern:    to.Ptr("connect,disconnect"),
							HubPattern:      to.Ptr("*"),
							URLTemplate:     to.Ptr("https://example.com/chat/api/connect"),
						}},
				},
			},
			SKU: &armsignalr.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json")
	// Response check
	exampleRes := armsignalr.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &armsignalr.ManagedIdentity{
			Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(armsignalr.ServiceKindSignalR),
		Properties: &armsignalr.Properties{
			Cors: &armsignalr.CorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*armsignalr.Feature{
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &armsignalr.NetworkACLs{
				DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
				PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
					{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &armsignalr.NetworkACL{
					Allow: []*armsignalr.SignalRRequestType{
						to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &armsignalr.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsignalr.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &armsignalr.TLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &armsignalr.ServerlessUpstreamSettings{
				Templates: []*armsignalr.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &armsignalr.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ResourceInfo)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalR_Delete() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Delete"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json")
}

func (testsuite *MockTestSuite) TestSignalR_Update() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Update"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"mySignalRService",
		armsignalr.ResourceInfo{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Identity: &armsignalr.ManagedIdentity{
				Type: to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
			},
			Kind: to.Ptr(armsignalr.ServiceKindSignalR),
			Properties: &armsignalr.Properties{
				Cors: &armsignalr.CorsSettings{
					AllowedOrigins: []*string{
						to.Ptr("https://foo.com"),
						to.Ptr("https://bar.com")},
				},
				DisableAADAuth:   to.Ptr(false),
				DisableLocalAuth: to.Ptr(false),
				Features: []*armsignalr.Feature{
					{
						Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
						Properties: map[string]*string{},
						Value:      to.Ptr("Serverless"),
					},
					{
						Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
						Properties: map[string]*string{},
						Value:      to.Ptr("True"),
					},
					{
						Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
						Properties: map[string]*string{},
						Value:      to.Ptr("False"),
					},
					{
						Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
						Properties: map[string]*string{},
						Value:      to.Ptr("False"),
					}},
				NetworkACLs: &armsignalr.NetworkACLs{
					DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
					PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
						{
							Allow: []*armsignalr.SignalRRequestType{
								to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
							Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armsignalr.NetworkACL{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
					},
				},
				PublicNetworkAccess: to.Ptr("Enabled"),
				TLS: &armsignalr.TLSSettings{
					ClientCertEnabled: to.Ptr(false),
				},
				Upstream: &armsignalr.ServerlessUpstreamSettings{
					Templates: []*armsignalr.UpstreamTemplate{
						{
							Auth: &armsignalr.UpstreamAuthSettings{
								Type: to.Ptr(armsignalr.UpstreamAuthTypeManagedIdentity),
								ManagedIdentity: &armsignalr.ManagedIdentitySettings{
									Resource: to.Ptr("api://example"),
								},
							},
							CategoryPattern: to.Ptr("*"),
							EventPattern:    to.Ptr("connect,disconnect"),
							HubPattern:      to.Ptr("*"),
							URLTemplate:     to.Ptr("https://example.com/chat/api/connect"),
						}},
				},
			},
			SKU: &armsignalr.ResourceSKU{
				Name:     to.Ptr("Standard_S1"),
				Capacity: to.Ptr[int32](1),
				Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json")
	// Response check
	exampleRes := armsignalr.ResourceInfo{
		Name:     to.Ptr("mySignalRService"),
		Type:     to.Ptr("Microsoft.SignalRService/SignalR"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key1": to.Ptr("value1"),
		},
		Identity: &armsignalr.ManagedIdentity{
			Type:        to.Ptr(armsignalr.ManagedIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Kind: to.Ptr(armsignalr.ServiceKindSignalR),
		Properties: &armsignalr.Properties{
			Cors: &armsignalr.CorsSettings{
				AllowedOrigins: []*string{
					to.Ptr("https://foo.com"),
					to.Ptr("https://bar.com")},
			},
			DisableAADAuth:   to.Ptr(false),
			DisableLocalAuth: to.Ptr(false),
			ExternalIP:       to.Ptr("10.0.0.1"),
			Features: []*armsignalr.Feature{
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsServiceMode),
					Properties: map[string]*string{},
					Value:      to.Ptr("Serverless"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableConnectivityLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("True"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableMessagingLogs),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				},
				{
					Flag:       to.Ptr(armsignalr.FeatureFlagsEnableLiveTrace),
					Properties: map[string]*string{},
					Value:      to.Ptr("False"),
				}},
			HostName: to.Ptr("mysignalrservice.service.signalr.net"),
			NetworkACLs: &armsignalr.NetworkACLs{
				DefaultAction: to.Ptr(armsignalr.ACLActionDeny),
				PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
					{
						Allow: []*armsignalr.SignalRRequestType{
							to.Ptr(armsignalr.SignalRRequestTypeServerConnection)},
						Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					}},
				PublicNetwork: &armsignalr.NetworkACL{
					Allow: []*armsignalr.SignalRRequestType{
						to.Ptr(armsignalr.SignalRRequestTypeClientConnection)},
				},
			},
			PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &armsignalr.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsignalr.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
			ProvisioningState:   to.Ptr(armsignalr.ProvisioningStateSucceeded),
			PublicNetworkAccess: to.Ptr("Enabled"),
			PublicPort:          to.Ptr[int32](443),
			ServerPort:          to.Ptr[int32](443),
			TLS: &armsignalr.TLSSettings{
				ClientCertEnabled: to.Ptr(true),
			},
			Upstream: &armsignalr.ServerlessUpstreamSettings{
				Templates: []*armsignalr.UpstreamTemplate{
					{
						URLTemplate: to.Ptr("http://foo.com"),
					}},
			},
			Version: to.Ptr("1.0"),
		},
		SKU: &armsignalr.ResourceSKU{
			Name:     to.Ptr("Standard_S1"),
			Capacity: to.Ptr[int32](1),
			Size:     to.Ptr("S1"),
			Tier:     to.Ptr(armsignalr.SignalRSKUTierStandard),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ResourceInfo)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalR_ListKeys() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListKeys"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.ListKeys(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json")
	// Response check
	exampleRes := armsignalr.Keys{}
	if !reflect.DeepEqual(exampleRes, res.Keys) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Keys)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalR_RegenerateKey() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_RegenerateKey"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRegenerateKey(ctx,
		"myResourceGroup",
		"mySignalRService",
		armsignalr.RegenerateKeyParameters{
			KeyType: to.Ptr(armsignalr.KeyTypePrimary),
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json")
}

func (testsuite *MockTestSuite) TestSignalR_Restart() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Restart"},
	})
	client, err := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json")
}

func (testsuite *MockTestSuite) TestUsages_List() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usages_List"},
	})
	client, err := armsignalr.NewUsagesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json")
		// Response check
		pagerExampleRes := armsignalr.UsageList{
			Value: []*armsignalr.Usage{
				{
					Name: &armsignalr.UsageName{
						LocalizedValue: to.Ptr("Usage1"),
						Value:          to.Ptr("Usage1"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage1"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr("Count"),
				},
				{
					Name: &armsignalr.UsageName{
						LocalizedValue: to.Ptr("Usage2"),
						Value:          to.Ptr("Usage2"),
					},
					CurrentValue: to.Ptr[int64](0),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage2"),
					Limit:        to.Ptr[int64](100),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSignalRPrivateEndpointConnections_List() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_List"},
	})
	client, err := armsignalr.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myResourceGroup",
		"mySignalRService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json")
		// Response check
		pagerExampleRes := armsignalr.PrivateEndpointConnectionList{
			Value: []*armsignalr.PrivateEndpointConnection{
				{
					Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
					Properties: &armsignalr.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsignalr.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
					},
					SystemData: &armsignalr.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSignalRPrivateEndpointConnections_Get() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Get"},
	})
	client, err := armsignalr.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json")
	// Response check
	exampleRes := armsignalr.PrivateEndpointConnection{
		Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Properties: &armsignalr.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armsignalr.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalRPrivateEndpointConnections_Update() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Update"},
	})
	client, err := armsignalr.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Update(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		armsignalr.PrivateEndpointConnection{
			Properties: &armsignalr.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsignalr.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json")
	// Response check
	exampleRes := armsignalr.PrivateEndpointConnection{
		Name: to.Ptr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
		Properties: &armsignalr.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armsignalr.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armsignalr.PrivateLinkServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armsignalr.ProvisioningStateSucceeded),
		},
		SystemData: &armsignalr.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			CreatedBy:          to.Ptr("string"),
			CreatedByType:      to.Ptr(armsignalr.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
			LastModifiedBy:     to.Ptr("string"),
			LastModifiedByType: to.Ptr(armsignalr.CreatedByTypeUser),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalRPrivateEndpointConnections_Delete() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Delete"},
	})
	client, err := armsignalr.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json")
}

func (testsuite *MockTestSuite) TestSignalRPrivateLinkResources_List() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateLinkResources_List"},
	})
	client, err := armsignalr.NewPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myResourceGroup",
		"mySignalRService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json")
		// Response check
		pagerExampleRes := armsignalr.PrivateLinkResourceList{
			Value: []*armsignalr.PrivateLinkResource{
				{
					Name: to.Ptr("myPrivateLink"),
					Type: to.Ptr("privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateLinkResources/myPrivateLink"),
					Properties: &armsignalr.PrivateLinkResourceProperties{
						GroupID: to.Ptr("signalr"),
						RequiredMembers: []*string{
							to.Ptr("signalr")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.service.signalr.net")},
						ShareablePrivateLinkResourceTypes: []*armsignalr.ShareablePrivateLinkResourceType{
							{
								Name: to.Ptr("site"),
								Properties: &armsignalr.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.Web/sites"),
									Description: to.Ptr("Azure App Service can be used as an upstream"),
									GroupID:     to.Ptr("sites"),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSignalRSharedPrivateLinkResources_List() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_List"},
	})
	client, err := armsignalr.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	pager := client.NewListPager("myResourceGroup",
		"mySignalRService",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json")
		// Response check
		pagerExampleRes := armsignalr.SharedPrivateLinkResourceList{
			Value: []*armsignalr.SharedPrivateLinkResource{
				{
					Name: to.Ptr("upstream"),
					Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
					Properties: &armsignalr.SharedPrivateLinkResourceProperties{
						GroupID:               to.Ptr("sites"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
						ProvisioningState:     to.Ptr(armsignalr.ProvisioningStateSucceeded),
						RequestMessage:        to.Ptr("Please approve"),
						Status:                to.Ptr(armsignalr.SharedPrivateLinkResourceStatusApproved),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedPrivateLinkResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedPrivateLinkResourceList)
			testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func (testsuite *MockTestSuite) TestSignalRSharedPrivateLinkResources_Get() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_Get"},
	})
	client, err := armsignalr.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	res, err := client.Get(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json")
	// Response check
	exampleRes := armsignalr.SharedPrivateLinkResource{
		Name: to.Ptr("upstream"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
		Properties: &armsignalr.SharedPrivateLinkResourceProperties{
			GroupID:               to.Ptr("sites"),
			PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
			ProvisioningState:     to.Ptr(armsignalr.ProvisioningStateSucceeded),
			RequestMessage:        to.Ptr("Please approve"),
			Status:                to.Ptr(armsignalr.SharedPrivateLinkResourceStatusApproved),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalRSharedPrivateLinkResources_CreateOrUpdate() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_CreateOrUpdate"},
	})
	client, err := armsignalr.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		armsignalr.SharedPrivateLinkResource{
			Properties: &armsignalr.SharedPrivateLinkResourceProperties{
				GroupID:               to.Ptr("sites"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				RequestMessage:        to.Ptr("Please approve"),
			},
		},
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json")
	// Response check
	exampleRes := armsignalr.SharedPrivateLinkResource{
		Name: to.Ptr("upstream"),
		Type: to.Ptr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
		Properties: &armsignalr.SharedPrivateLinkResourceProperties{
			GroupID:               to.Ptr("sites"),
			PrivateLinkResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
			ProvisioningState:     to.Ptr(armsignalr.ProvisioningStateSucceeded),
			RequestMessage:        to.Ptr("Please approve"),
			Status:                to.Ptr(armsignalr.SharedPrivateLinkResourceStatusApproved),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
		testsuite.Failf("Failed to validate response", "Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func (testsuite *MockTestSuite) TestSignalRSharedPrivateLinkResources_Delete() {
	ctx := context.Background()
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_Delete"},
	})
	client, err := armsignalr.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &testsuite.options)
	testsuite.Require().NoError(err, "Failed to create client")
	poller, err := client.BeginDelete(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json")
}
