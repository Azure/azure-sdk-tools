Package parsed using Swift APIView (version 0.2.2)


package GenericsTestFile.swifttxt {
    public func swapTwoValues<T>(_ a: inout T, _ b: inout T)

    public struct Stack<Element> {
        public var items: [Element] = []
        public mutating func push(_ item: Element)
        public mutating func pop() -> Element
    }

    public extension Stack {
        var topItem: Element?
    }

    public func findIndex<T: Equatable>(of valueToFind: T, in array:[T]) -> Int?

    public struct ContainerStack<Element: Equatable>: Container

    public protocol Container {
        associatedtype Item: Equatable
        mutating func append(_ item: Item)
        var count: Int { get }
        subscript(i: Int) -> Item { get }
    }

    public struct IntContainerStack: Container {
        var items: [Int] = []
        mutating func push(_ item: Int)
        mutating func pop() -> Int
        public typealias Item = Int
        public mutating func append(_ item: Int)
        public var count: Int
        public subscript(i: Int) -> Int
    }

    public protocol SuffixableContainer: Container {
        associatedtype Suffix: SuffixableContainer where Suffix.Item == Item
        func suffix(_ size: Int) -> Suffix
    }

    extension ContainerStack: SuffixableContainer {
        public func suffix(_ size: Int) -> ContainerStack
    }

    extension IntContainerStack: SuffixableContainer {
        public func suffix(_ size: Int) -> ContainerStack<Int>
    }

    public func allItemsMatch<C1: Container, C2: Container>
        (_ someContainer: C1, _ anotherContainer: C2) -> Bool
        where C1.Item == C2.Item, C1.Item: Equatable

    public extension Container where Item: Equatable {
        func startsWith(_ item: Item) -> Bool
    }

    public extension Container where Item == Double {
        func average() -> Double
    }

    public extension Container {
        func average() -> Double where Item == Int
        func endsWith(_ item: Item) -> Bool where Item: Equatable
    }

    public protocol ContainerAlt {
        associatedtype Item
        mutating func append(_ item: Item)
        var count: Int { get }
        subscript(i: Int) -> Item { get }

        associatedtype Iterator: IteratorProtocol where Iterator.Element == Item
        func makeIterator() -> Iterator
    }

    public extension Container {
        subscript<Indices: Sequence>(indices: Indices) -> [Item]
            where Indices.Iterator.Element == Int
    }

    public protocol Shape {
        func draw() -> String
    }

    public struct Square: Shape {
        public var size: Int
        public func draw() -> String
    }

    public func makeTrapezoid() -> some Shape
}
