[
  {
    "id": "rust_implementation.html#rust-safety-debug-derive",
    "category": "Debug Trait {#rust-safety-debug}",
    "text": "YOU MAY derive or implement Debug on types as long as you guarantee no PII may be leaked.\n\nTo elide some fields from Debug output, you may use finish_non_exhaustive() like so:\n\n```rust\nuse std::fmt;\n\nimpl fmt::Debug for MyModel {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        f.debug_struct(\"MyModel\")\n            .field(\"id\", &amp;self.id)\n            .finish_non_exhaustive()\n    }\n}\n\n```"
  },
  {
    "id": "rust_implementation.html#rust-safety-debug-safedebug",
    "category": "Debug Trait {#rust-safety-debug}",
    "text": "YOU SHOULD derive or implement azure_core::fmt::SafeDebug on types if you need a Debug implementation but cannot reasonably guarantee no PII may be leaked.\n\nSafeDebug will only output the name of the type or, if information is available in TypeSpec, show only fields that have been declared safe from leaking PII.\n\nImplementation details of service clients.\n\nMost service client crates are generated from TypeSpec (https://aka.ms/typespec)  Clients that want to provide convenience methods can choose any or all of the options as appropriate:"
  },
  {
    "id": "rust_implementation.html#rust-client-convenience-separate",
    "category": "Convenience Clients {#rust-client-convenience}",
    "text": "YOU MAY implement a separate client that provides features not described in a service specification."
  },
  {
    "id": "rust_implementation.html#rust-client-convenience-wrap",
    "category": "Convenience Clients {#rust-client-convenience}",
    "text": "YOU MAY implement a client which wraps a generated client e.g., using [newtype][rust-lang-newtype], and exposes necessary methods from the underlying client as well as any convenience methods. You might consider this approach if you want to effectively hide most generated methods and define replacements. You are responsible for transposing documentation and following all guidelines herein."
  },
  {
    "id": "rust_implementation.html#rust-client-convenience-extension",
    "category": "Convenience Clients {#rust-client-convenience}",
    "text": "YOU MAY define [extension methods][rust-lang-extension-methods] in a trait that call existing public methods or directly on the pipeline, e.g.,\n\n```rust\npub trait SecretClientExt {\n    async fn deserialize_secret&lt;T: serde::de::DeserializeOwned&gt;(\n        &amp;self,\n        name: impl AsRef&lt;str&gt;,\n        version: Option&lt;impl AsRef&lt;str&gt;&gt;,\n    ) -&gt; Result&lt;Response&lt;T&gt;&gt;;\n}\n\nimpl SecretClientExt for SecretClient {\n    async fn deserialize_secret&lt;T: serde::de::DeserializeOwned&gt;(\n        &amp;self,\n        name: impl AsRef&lt;str&gt;,\n        version: Option&lt;impl AsRef&lt;str&gt;&gt;,\n    ) -&gt; Result&lt;T&gt; {\n        let value = self.get_secret(name, version).await?;\n        serde_json::from_str(&amp;value).map_err(Error::from)\n    }\n}\n\n```\nThe trait MUST be exported from the crate root.\nThe trait MUST use the name of the client it extends with an \"Ext\" suffix e.g., \"SecretClientExt\".\n\nYou might consider this approach if the generated methods are sufficient but you want to add convenience methods.\n\nIn all options above except if merely re-exposing public APIs without alteration:"
  },
  {
    "id": "rust_implementation.html#rust-client-convenience-telemetry-telemeter",
    "category": "Convenience Client Telemetry {#rust-client-convenience-telemetry}",
    "text": "DO telemeter the convenience client methods just like any service client methods.\n\nWe will implement tests [idiomatically with cargo][rust-lang-tests]."
  },
  {
    "id": "rust_implementation.html#rust-client-tests-unit-location",
    "category": "Unit tests {#rust-client-tests-unit}",
    "text": "DO include unit tests in the module containing the subject being tested."
  },
  {
    "id": "rust_implementation.html#rust-client-tests-unit-directory",
    "category": "Unit tests {#rust-client-tests-unit}",
    "text": "YOU MAY separate unit tests in a separate file named tests.rs under a separate directory with the same name as the module you're testing e.g., tests may go into foo/tests.rs to test module foo. Module foo would then include $[cfg(test)] mod tests;. This is useful if your module contains a lot of code and you have a lot of tests that make maintaining and reviewing the source file more difficult."
  },
  {
    "id": "rust_implementation.html#rust-client-tests-unit-module",
    "category": "Unit tests {#rust-client-tests-unit}",
    "text": "YOU SHOULD put all tests into a tests submodule."
  },
  {
    "id": "rust_implementation.html#rust-client-tests-unit-prefix",
    "category": "Unit tests {#rust-client-tests-unit}",
    "text": "YOU SHOULD preface tests with \"test_\" unless you need to disambiguate with the function being tested.\n\nPutting these requirements together, you should have code similar to:\n\n```rust\npub fn hello() -&gt; String {\n    todo!()\n}\n\npub async fn read_config() -&gt; azure_core::Result&lt;Configuration&gt; {\n    todo!()\n}\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn test_hello() {\n        assert_eq!(hello(), String::from(\"Hello, world!\"));\n    }\n\n    #[tokio::test]\n    async fn reads_config() -&gt; azure_core::Result&lt;Configuration&gt; {\n        let config = read_config().await?;\n        assert_eq!(config.id, 1234);\n        assert_eq!(config.sections.len(), 3);\n    }\n}\n\n```"
  },
  {
    "id": "rust_implementation.html#rust-client-tests-integration-location",
    "category": "Integration tests {#rust-client-tests-integration}",
    "text": "DO include integration tests under the tests/ subdirectory of your crate."
  },
  {
    "id": "rust_implementation.html#rust-client-tests-integration-recorded",
    "category": "Integration tests {#rust-client-tests-integration}",
    "text": "YOU SHOULD write integration tests as [recorded tests][general-recorded-tests]."
  },
  {
    "id": "rust_implementation.html#rust-client-tests-examples-location",
    "category": "Examples {#rust-client-tests-examples}",
    "text": "YOU SHOULD include examples under the examples/ subdirectory for primary use cases. These are written as standalone executables but may include shared code modules.\n\nIn addition to Cargo's [project layout][rust-lang-project-layout], service clients' source files should be laid out in the following manner:\n\n```text\nAzure/azure-sdk-for-rust/\n\u251c\u2500 .vscode/cspell.json\n\u251c\u2500 doc/ # general documentation\n\u251c\u2500 eng/ # engineering system pipeline, scripts, etc.\n\u2514\u2500 sdk/\n   \u2514\u2500 {service directory}/ # example: keyvault\n      \u251c\u2500 .dict.txt\n      \u2514\u2500 {service client crate}/ # example: azure_security_keyvault_secrets\n         \u251c\u2500 assets.json # best location for most crates, or in {service directory} for all crates\n         \u251c\u2500 examples/\n         \u2502  \u251c\u2500 {optional shared code}/\n         \u2502  \u251c\u2500 example1.rs\n         \u2502  \u2514\u2500 example2.rs\n         \u251c\u2500 src/\n         \u2502  \u251c\u2500 generated/\n         \u2502  \u2502  \u251c\u2500 clients/\n         \u2502  \u2502  \u2502  \u251c\u2500 foo.rs\n         \u2502  \u2502  \u2502  \u2514\u2500 bar.rs\n         \u2502  \u2502  \u251c\u2500 enums.rs\n         \u2502  \u2502  \u2514\u2500 models.rs\n         \u2502  \u251c\u2500 lib.rs\n         \u2502  \u251c\u2500 models.rs\n         \u2502  \u2514\u2500 {other modules}\n         \u251c\u2500 tests/\n         \u2502  \u251c\u2500 {shared code}/\n         \u2502  \u251c\u2500 integration_test1.rs\n         \u2502  \u2514\u2500 integration_test2.rs\n         \u2514\u2500 Cargo.toml\n\n```\n\nRust modules should be defined such that:\nAll clients and their client options that the user can create are exported from the crate root e.g., azure_security_keyvault_secrets.\nAll subclients and their client options that can only be created from other clients should only be exported from the clients submodule e.g., azure_security_keyvault_secrets::clients.\nAll client method options are exported from the models module e.g., azure_security_keyvault_secrets::models.\nExtension methods on clients should be exported from the same module(s) from which their associated clients are exported.\nExtension methods on models should be exported from the same module(s) from which their associated models are exported.\n\nEffectively, export creatable clients from the root and keep associated items together. These creatable types are often the only types that users will need to reference by name so we want them easily discoverable.\nAll clients will be exported from a clients submodule so they are easy to find, but creatable clients would be re-exported from the crate root e.g.,\n\n```rust\n// lib.rs\nmod generated;\nmod helpers;\n\npub use generated::*;\npub use helpers::*;\n\n// generated/mod.rs\npub mod clients;\npub mod models;\npub use clients::{SecretClient, SecretClientOptions};\n\n```\n\nIf you need to define clients or models in addition to those generated e.g., you want to wrap generated clients instead of exposing them directly,\nyou can create your own clients and models modules and re-export generated::clients::* and generated::models::*, respectively, from there.\n\n```rust\n// lib.rs\npub mod clients;\npub mod models;\npub use clients::{SecretClient, SecretClientOptions};\n\n// clients/mod.rs\nuse crate::generated::clients::SecretClient as GeneratedSecretClient;\npub use crate::generated::SecretClientOptions;\n\npub struct SecretClient {\n    client: GeneratedSecretClient,\n} // ...\n\n// models/mod.rs\npub use crate::generated::models::*;\n\n#[derive(SafeDebug)]\npub struct ExtraModel {\n    // ...\n}\n\n```"
  },
  {
    "id": "rust_implementation.html#rust-miscellaneous-spelling-general",
    "category": "Spelling {#rust-miscellaneous-spelling}",
    "text": "YOU SHOULD put general words used across different services and client libraries in the .vscode/cspell.json file."
  },
  {
    "id": "rust_implementation.html#rust-miscellaneous-spelling-specific",
    "category": "Spelling {#rust-miscellaneous-spelling}",
    "text": "YOU SHOULD put words specific to a service or otherwise limited use in a .dict.txt file in the {service directory} as shown in the directory layout.\nIf you're creating this file, add an entry to .vscode/cspell.json as shown below:\n\n```json\n{\n  \"dictionaryDefinitions\": [\n    {\n      \"name\": \"service-name\",\n      \"path\": \"../sdk/service-directory/.dict.txt\",\n      \"noSuggest\": true\n    }\n  ],\n  \"overrides\": [\n    {\n      \"filename\": \"sdk/service-directory/**\",\n      \"dictionaries\": [\n        \"crates\",\n        \"rust-custom\",\n        \"service-name\"\n      ]\n    }\n  ]\n}\n\n```\n\n<!-- General Rust Language links should start with \"rust-lang-\" -->\n<!-- Links within site -->\n<p>[general-design-namespaces]: {{ site.baseurl }}{% link docs/general/design.md %}#namespaces\n[general-recorded-tests]: {{ site.baseurl }}{% link docs/general/implementation.md %}#recorded-tests\n[registered package list]: {{ site.baseurl }}{% link docs/tables/registered_namespaces.md %}\n[rust-client-convenience]: {{ site.baseurl }}{% link docs/rust/implementation.md %}#rust-client-convenience\n[rust-directories]: {{ site.baseurl }}{% link docs/rust/implementation.md %}#rust-directories\n[rust-safety-debug]: {{ site.baseurl }}{% link docs/rust/implementation.md %}#rust-safety-debug\n[rust-modules]: {{ site.baseurl }}{% link docs/rust/implementation.md %}#rust-modules</p>\n"
  }
]