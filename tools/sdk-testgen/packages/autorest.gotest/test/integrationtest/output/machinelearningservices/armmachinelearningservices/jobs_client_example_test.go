//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningservices_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningservices/armmachinelearningservices"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/list.json
func ExampleJobsClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("test-rg",
		"my-aml-workspace",
		&armmachinelearningservices.JobsClientListOptions{Skip: nil,
			JobType:      nil,
			Tag:          nil,
			ListViewType: nil,
			Scheduled:    nil,
			ScheduleID:   nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/delete.json
func ExampleJobsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/get.json
func ExampleJobsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/AutoMLJob/createOrUpdate.json
func ExampleJobsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		armmachinelearningservices.JobBaseData{
			Properties: &armmachinelearningservices.AutoMLJob{
				Description: to.Ptr("string"),
				Properties: map[string]*string{
					"string": to.Ptr("string"),
				},
				Tags: map[string]*string{
					"string": to.Ptr("string"),
				},
				ComputeID:      to.Ptr("string"),
				DisplayName:    to.Ptr("string"),
				ExperimentName: to.Ptr("string"),
				Identity: &armmachinelearningservices.AmlToken{
					IdentityType: to.Ptr(armmachinelearningservices.IdentityConfigurationTypeAMLToken),
				},
				IsArchived: to.Ptr(false),
				JobType:    to.Ptr(armmachinelearningservices.JobTypeAutoML),
				Schedule: &armmachinelearningservices.CronSchedule{
					EndTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					ScheduleStatus: to.Ptr(armmachinelearningservices.ScheduleStatusDisabled),
					ScheduleType:   to.Ptr(armmachinelearningservices.ScheduleTypeCron),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:34:56.999Z"); return t }()),
					TimeZone:       to.Ptr("string"),
					Expression:     to.Ptr("string"),
				},
				Services: map[string]*armmachinelearningservices.JobService{
					"string": &armmachinelearningservices.JobService{
						Endpoint:       to.Ptr("string"),
						JobServiceType: to.Ptr("string"),
						Port:           to.Ptr[int32](1),
						Properties: map[string]*string{
							"string": to.Ptr("string"),
						},
					},
				},
				EnvironmentID: to.Ptr("string"),
				EnvironmentVariables: map[string]*string{
					"string": to.Ptr("string"),
				},
				Outputs: map[string]armmachinelearningservices.JobOutputClassification{
					"string": &armmachinelearningservices.URIFileJobOutput{
						Mode:          to.Ptr(armmachinelearningservices.OutputDeliveryModeReadWriteMount),
						URI:           to.Ptr("string"),
						Description:   to.Ptr("string"),
						JobOutputType: to.Ptr(armmachinelearningservices.JobOutputTypeURIFile),
					},
				},
				Resources: &armmachinelearningservices.ResourceConfiguration{
					InstanceCount: to.Ptr[int32](1),
					InstanceType:  to.Ptr("string"),
					Properties: map[string]interface{}{
						"string": map[string]interface{}{
							"9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": nil,
						},
					},
				},
				TaskDetails: &armmachinelearningservices.ImageClassification{
					TaskType: to.Ptr(armmachinelearningservices.TaskTypeImageClassification),
					DataSettings: &armmachinelearningservices.ImageVerticalDataSettings{
						TargetColumnName: to.Ptr("string"),
						TrainingData: &armmachinelearningservices.TrainingDataSettings{
							Data: &armmachinelearningservices.MLTableJobInput{
								URI:          to.Ptr("string"),
								JobInputType: to.Ptr(armmachinelearningservices.JobInputTypeMLTable),
							},
						},
					},
					LimitSettings: &armmachinelearningservices.ImageLimitSettings{
						MaxTrials: to.Ptr[int32](2),
					},
					ModelSettings: &armmachinelearningservices.ImageModelSettingsClassification{
						ValidationCropSize: to.Ptr[int32](2),
					},
					SearchSpace: []*armmachinelearningservices.ImageModelDistributionSettingsClassification{
						{
							ValidationCropSize: to.Ptr("choice(2, 360)"),
						}},
				},
			},
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/Job/cancel.json
func ExampleJobsClient_Cancel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client, err := armmachinelearningservices.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Cancel(ctx,
		"test-rg",
		"my-aml-workspace",
		"string",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}
