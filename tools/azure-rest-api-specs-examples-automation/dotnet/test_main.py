import unittest
import parameterized
from main import (
    break_down_aggregated_dotnet_example,
    find_dotnet_examples_paths,
    format_dotnet,
    get_dotnet_using_statements,
)
from typing import List
from unittest.mock import patch
import os


class TestMain(unittest.TestCase):
    @parameterized.parameterized.expand(
        [
            """// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.ContainerInstance;
using Azure.ResourceManager.ContainerInstance.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.ContainerInstance.Samples
{
    public partial class Sample_ContainerGroupCollection
    {
        // ContainerGroupsListByResourceGroup
        [Test]
        [Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ContainerGroupsListByResourceGroup()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsListByResourceGroup.json
            // this example is just showing the usage of "ContainerGroups_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation and iterate over the result
            await foreach (ContainerGroupResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ContainerGroupData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ContainerGroupsGet_Failed
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ContainerGroupsGetFailed()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Failed.json
            // this example is just showing the usage of "ContainerGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            ContainerGroupResource result = await collection.GetAsync(containerGroupName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ContainerGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ContainerGroupsGet_Failed
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ContainerGroupsGetFailed()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Failed.json
            // this example is just showing the usage of "ContainerGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            bool result = await collection.ExistsAsync(containerGroupName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ContainerGroupsGet_Succeeded
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ContainerGroupsGetSucceeded()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Succeeded.json
            // this example is just showing the usage of "ContainerGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            ContainerGroupResource result = await collection.GetAsync(containerGroupName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ContainerGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ContainerGroupsGet_Succeeded
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ContainerGroupsGetSucceeded()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsGet_Succeeded.json
            // this example is just showing the usage of "ContainerGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            bool result = await collection.ExistsAsync(containerGroupName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ContainerGroupsCreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ContainerGroupsCreateOrUpdate()
        {
            // Generated from example definition: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsCreateOrUpdate.json
            // this example is just showing the usage of "ContainerGroups_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subid";
            string resourceGroupName = "demo";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ContainerGroupResource
            ContainerGroupCollection collection = resourceGroupResource.GetContainerGroups();

            // invoke the operation
            string containerGroupName = "demo1";
            ContainerGroupData data = new ContainerGroupData(new AzureLocation("west us"), new ContainerInstanceContainer[]
            {
new ContainerInstanceContainer("demo1","nginx",new ContainerResourceRequirements(new ContainerResourceRequestsContent(1.5,1)
{
Gpu = new ContainerGpuResourceInfo(1,ContainerGpuSku.K80),
}))
{
Command =
{
},
Ports =
{
new ContainerPort(80)
},
EnvironmentVariables =
{
},
VolumeMounts =
{
new ContainerVolumeMount("volume1","/mnt/volume1")
{
IsReadOnly = false,
},new ContainerVolumeMount("volume2","/mnt/volume2")
{
IsReadOnly = false,
},new ContainerVolumeMount("volume3","/mnt/volume3")
{
IsReadOnly = true,
}
},
}
            }, ContainerInstanceOperatingSystemType.Linux)
            {
                Identity = new ManagedServiceIdentity("SystemAssigned, UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name")] = new UserAssignedIdentity(),
},
                },
                ImageRegistryCredentials =
{
},
                IPAddress = new ContainerGroupIPAddress(new ContainerGroupPort[]
            {
new ContainerGroupPort(80)
{
Protocol = ContainerGroupNetworkProtocol.Tcp,
}
            }, ContainerGroupIPAddressType.Public)
                {
                    DnsNameLabel = "dnsnamelabel1",
                    DnsNameLabelReusePolicy = AutoGeneratedDomainNameLabelScope.Unsecure,
                },
                Volumes =
{
new ContainerVolume("volume1")
{
AzureFile = new ContainerInstanceAzureFileVolume("shareName","accountName")
{
StorageAccountKey = "accountKey",
},
},new ContainerVolume("volume2")
{
EmptyDir = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
},new ContainerVolume("volume3")
{
Secret =
{
["secretKey1"] = "SecretValue1InBase64",
["secretKey2"] = "SecretValue2InBase64",
},
}
},
                DiagnosticsLogAnalytics = new ContainerGroupLogAnalytics("workspaceid", "workspaceKey")
                {
                    LogType = ContainerGroupLogAnalyticsLogType.ContainerInsights,
                    Metadata =
{
["test-key"] = "test-metadata-value",
},
                    WorkspaceResourceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/microsoft.operationalinsights/workspaces/workspace"),
                },
                SubnetIds =
{
new ContainerGroupSubnetId(new ResourceIdentifier("[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"))
},
                DnsConfig = new ContainerGroupDnsConfiguration(new string[]
            {
"1.1.1.1"
            })
                {
                    SearchDomains = "cluster.local svc.cluster.local",
                    Options = "ndots:2",
                },
            };
            ArmOperation<ContainerGroupResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, containerGroupName, data);
            ContainerGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ContainerGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
"""
        ]
    )
    def test_break_down_aggregated_dotnet_example(self, file_content: str):
        lines = file_content.splitlines(keepends=True)
        examples = break_down_aggregated_dotnet_example(lines)
        self.assertIsNotNone(examples.class_opening)
        for example_method in examples.methods:
            self.assertIsNotNone(example_method.content)

        for dotnet_example_method in examples.methods:
            example_lines = examples.class_opening + format_dotnet(dotnet_example_method.content)
            example_content = "".join(example_lines)
            self.assertIsNotNone(example_content)

    @parameterized.parameterized.expand(
        [
            (
                """// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Samples
{
}""",
                [
                    "using System;\n",
                    "using System.Threading.Tasks;\n",
                    "using Azure;\n",
                    "using Azure.Core;\n",
                    "using Azure.Identity;\n",
                    "using Azure.ResourceManager;\n",
                    "using Azure.ResourceManager.Compute;\n",
                    "using Azure.ResourceManager.Compute.Models;\n",
                    "using Azure.ResourceManager.Resources;\n",
                    "using Azure.ResourceManager.Resources.Models;\n",
                ],
            )
        ]
    )
    def test_example_usings(self, content: str, expected_usings: List[str]):
        lines = content.splitlines(keepends=True)
        usings = get_dotnet_using_statements(lines)

        self.assertSetEqual(set(expected_usings), set(usings))


class TestDotNetExamplesPathDiscovery(unittest.TestCase):
    """Test cases for the dotnet examples path discovery logic."""

    def setUp(self):
        """Set up test fixtures."""
        self.sdk_path = "/path/to/sdk"
        self.module_relative_path = "sdk/testservice/Azure.ResourceManager.TestService"

    @patch("os.path.exists")
    @patch("os.listdir")  # , return_value=["MySql", "MySqlFlexibleServer", "Scenarios", "Unit"]
    @patch("os.path.isdir")
    def test_when_there_is_only_one_sample_directory(self, mock_isdir, mock_listdir, mock_exists):
        """Test when only one sample directory is found."""

        # Setup
        def mock_exists_side_effect(path_arg):
            normPath = os.path.normpath(path_arg)
            if normPath == os.path.normpath(
                "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Generated/Samples"
            ):
                return True
            if normPath == os.path.normpath(
                "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Scenarios"
            ):
                return True
            return False

        mock_exists.side_effect = mock_exists_side_effect
        mock_listdir.return_value = ["Scenarios", "Unit", "Generated"]
        mock_isdir.return_value = True

        # Execute the path discovery logic
        dotnet_examples_paths = find_dotnet_examples_paths(self.sdk_path, self.module_relative_path)

        # Assert
        self.assertEqual(len(dotnet_examples_paths), 1)
        self.assertEqual(
            os.path.normpath(dotnet_examples_paths[0]),
            os.path.normpath("/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Generated/Samples"),
        )
        mock_listdir.assert_not_called()  # Should not reach fallback logic

    @patch("os.path.exists")
    @patch("os.listdir")
    @patch("os.path.isdir")
    def test_when_there_are_multiple_sample_directories(self, mock_isdir, mock_listdir, mock_exists):
        """Test when multiple sample directories are found."""

        # Setup
        def mock_exists_side_effect(path_arg):
            normPath = os.path.normpath(path_arg)
            if normPath == os.path.normpath(
                "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Generated/Samples"
            ):
                return False  # the primary sample directory does not exist
            elif normPath == os.path.normpath("/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests"):
                return True
            elif normPath == os.path.normpath(
                "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/MySql/Generated/Samples"
            ):
                return True  # we have two secondary sample directories
            elif normPath == os.path.normpath(
                "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/MySqlFlexibleServer/Generated/Samples"
            ):
                return True  # we have two secondary sample directories
            elif normPath == os.path.normpath(
                "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/Scenarios"
            ):
                return True
            return False

        mock_exists.side_effect = mock_exists_side_effect
        mock_listdir.return_value = ["Scenarios", "MySql", "MySqlFlexibleServer"]
        mock_isdir.return_value = True  # we did not include mock data of files in any directory, therefore we just let it return True for everything which asserts they are directories.

        # Execute the path discovery logic
        dotnet_examples_paths = find_dotnet_examples_paths(self.sdk_path, self.module_relative_path)

        # Assert
        self.assertEqual(len(dotnet_examples_paths), 2)
        self.assertEqual(
            os.path.normpath(dotnet_examples_paths[0]),
            os.path.normpath(
                "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/MySql/Generated/Samples"
            ),
        )
        self.assertEqual(
            os.path.normpath(dotnet_examples_paths[1]),
            os.path.normpath(
                "/path/to/sdk/sdk/testservice/Azure.ResourceManager.TestService/tests/MySqlFlexibleServer/Generated/Samples"
            ),
        )

    @patch("os.path.exists")
    @patch("os.listdir")
    @patch("os.path.isdir")
    def test_when_no_examples_found(self, mock_isdir, mock_listdir, mock_exists):
        """Test when no example directories are found."""

        # Setup
        def mock_exists_side_effect(path_arg):
            if "Generated" in path_arg:
                return False
            return True

        mock_exists.side_effect = mock_exists_side_effect
        mock_listdir.return_value = ["Scenario"]
        mock_isdir.return_value = True

        # Execute the path discovery logic
        dotnet_examples_paths = find_dotnet_examples_paths(self.sdk_path, self.module_relative_path)

        # Assert
        self.assertEqual(len(dotnet_examples_paths), 0)

    @patch("os.path.exists")
    @patch("os.listdir")
    @patch("os.path.isdir")
    def test_tests_directory_not_exists(self, mock_isdir, mock_listdir, mock_exists):
        """Test when the tests directory itself doesn't exist."""

        # Setup
        def mock_exists_side_effect(path_arg):
            if "tests" in path_arg:
                return False
            return True

        mock_exists.side_effect = mock_exists_side_effect

        # Execute the path discovery logic
        dotnet_examples_paths = find_dotnet_examples_paths(self.sdk_path, self.module_relative_path)

        # Assert
        self.assertEqual(len(dotnet_examples_paths), 0)
        mock_listdir.assert_not_called()  # Should not be called if tests dir doesn't exist
