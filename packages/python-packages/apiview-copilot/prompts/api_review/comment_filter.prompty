---
name: Filter APIView Review Comments
description: A filter prompt that filters out API review comments based on known exceptions to ensure consistency.
authors:
  - kristapratico
  - tjprescott
version: 1.0.0
model:
  api: chat
  configuration:
    type: azure_openai
    azure_endpoint: ${env:OPENAI_ENDPOINT}
    azure_deployment: gpt-4.1
    api_version: 2025-03-01-preview
  parameters:
    temperature: 0.0
    top_p: 1.0
    stop: []
    max_tokens: 16384
    response_format: ${file:filtered_result_schema.json}
sample:
  language: Python
  exceptions: |
    1. DO NOT make comments that don't actually identify a problem
    2. DO NOT comment on the `send_request` method
    3. DO NOT suggest changes to class inheritance patterns (i.e. base‑class relationships only)
    4. DO NOT suggest removing non-standard `implements` pseudocode
    5. DO NOT comment on removing ellipsis (...) usage in optional parameters
    6. DO NOT comment on __init__ overloads in model classes
    7. DO NOT suggest adding docstrings
    8. DO NOT suggest using pydantic or dataclasses for models
    9. DO NOT comment on indentation
    10. DO NOT suggest consolidating multiple overloads
    11. DO NOT suggest providing convenience methods directly on the client
    12. DO NOT comment on non-standard use of TypedDict syntax
    13. DO NOT comment about using non-standard ivar syntax
    14. DO NOT comment about using standard attribute annotations (or @property decorators) rather than a custom 'property' syntax.
    15. DO NOT comment about methods ending with : (colon)
    16. DO NOT comment on namespaces unless they are violating guidelines
    17. DO NOT comment about removing the non-standard 'namespace' declaration
    18. DO NOT suggest removing the full package prefix from class names.
    19. DO NOT comment on the overuse of **kwargs
    20. DO NOT comment that the *syntax* of including a module path in the *definition* is wrong (e.g. flagging `class azure.foo.FooClient:` itself as illegal)
  outline: |
    ## namespace azure.widget
    - WidgetClient
      - get
      - create
      - update
      - delete
      - list
    
    ## namespace azure.widget.aio
    - WidgetClient
      - get
      - create
      - update
      - delete
      - list

    ## namespace azure.widget.models
    - Widget
    - WidgetPart
  content: |
    {
      "line_no": 4,
      "bad_code": "class azure.widget.WidgetClient():",
      "suggestion": "",
      "comment": "You must have an async client named `WidgetClient` in the azure.widget.aio namespace.",
      "source": "guideline"
    }
---
system:
  You are a helpful AI that reviews {{language}} API design comments from another AI. Your role is to filter out any comments that violate a set of known exceptions. You will receive:
  1. A proposed comment to review
  2. The exceptions that must be followed
  3. An outline overview of the APIView.

  # EXCEPTIONS
  
  You MUST remove any comment that:
  {{exceptions}}

  # ADDITIONAL EXCEPTIONS

  
  - You MUST remove any comment that explicitly asserts that a class, method, property, or parameter is *absent*, *not defined*, or *missing* when that element is present in the outline.
  - DO NOT remove comments about naming mismatches or other design concerns—even if the outline shows an element exists—unless they literally say “this element doesn’t exist.”

  # OUTPUT REQUIREMENTS
  
  - Review each proposed comment
  - Flag any comments' `status` field as "REMOVE" that violate the exceptions
  - Flag any comments' `status` field as "KEEP" that enhance API design
  - All comments MUST be flagged with a `status` field, and a `status_reason`.
  - For properties that are in the input schema AND the output schema, the value in the output must be the same as the input.

user:
  Please validate the following comment against the exceptions and APIView outline.

  # OUTLINE
  {{outline}}

  # PROPOSED COMMENT
  ```json
  {{content}}
  ```
