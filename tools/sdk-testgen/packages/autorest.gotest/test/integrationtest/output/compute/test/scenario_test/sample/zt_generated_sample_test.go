//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package sample_test

import (
	"context"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager//test/scenario_test"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
)

var (
	ctx               context.Context
	cred              azcore.TokenCredential
	pathToPackage     = "sdk/resourcemanager//test/scenario_test/sample/testdata"
	options           *arm.ClientOptions
	resourceGroup     *armresources.ResourceGroup
	fakeStepVar       = "signalrswaggertest4"
	resourceName      = "signalrswaggertest4"
	location          = scenario_test.GetEnv("LOCATION", "eastus")
	resourceGroupName = scenario_test.GetEnv("RESOURCE_GROUP_NAME", "")
	subscriptionId    = scenario_test.GetEnv("SUBSCRIPTION_ID", scenario_test.GetEnv("AZURE_SUBSCRIPTION_ID", ""))
)

func TestSample(t *testing.T) {
	// Setup for test
	scenario_test.StartRecording(t, pathToPackage)
	ctx = context.Background()
	options = scenario_test.CreateArmOptions(t)
	cred = scenario_test.CreateCred(t, ctx, options)
	resourceGroup = scenario_test.CreateResourceGroup(t, ctx, cred, subscriptionId, location, options)
	resourceGroupName = *resourceGroup.Name
	// Clenup for test
	t.Cleanup(func() {
		scenario_test.DeleteResourceGroup(t, ctx, cred, subscriptionId, resourceGroupName, options)
		scenario_test.StopRecording(t)
	})
	prepare(t)
	scenarioMicrosoftSignalrserviceBasicCrud(t)
	scenarioMicrosoftSignalrserviceDeleteonly(t)
	cleanup(t)
}

func prepare(t *testing.T) {
	// From step Delete-proximity-placement-group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, options)
	{
		_, err := proximityPlacementGroupsClient.Delete(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
	}
}

func scenarioMicrosoftSignalrserviceBasicCrud(t *testing.T) {
	fakeScenarioVar := "signalrswaggertest5"
	resourceName := resourceName
	// From step Generate_Unique_Name
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"outputs": map[string]interface{}{
				"name": map[string]interface{}{
					"type":  "string",
					"value": "[variables('name').value]",
				},
				"resourceName": map[string]interface{}{
					"type":  "string",
					"value": "[variables('name').value]",
				},
			},
			"resources": []interface{}{},
			"variables": map[string]interface{}{
				"name": map[string]interface{}{
					"type": "string",
					"metadata": map[string]interface{}{
						"description": "Name of the SignalR service.",
					},
					"value": "[concat('sw',uniqueString(resourceGroup().id))]",
				},
			},
		}
		params := map[string]interface{}{}
		deploymentExtend, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "Generate_Unique_Name", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
		name = deploymentExtend.Properties.Outputs["name"].(map[string]interface{})["value"].(string)
		resourceName = deploymentExtend.Properties.Outputs["resourceName"].(map[string]interface{})["value"].(string)
	}

	// From step Create-or-Update-a-proximity-placement-group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, options)
	{
		proximityPlacementGroupsClientCreateOrUpdateResponse, err := proximityPlacementGroupsClient.CreateOrUpdate(ctx,
			resourceGroupName,
			resourceName,
			test.ProximityPlacementGroup{
				Location: to.StringPtr(location),
				Properties: &test.ProximityPlacementGroupProperties{
					ProximityPlacementGroupType: test.ProximityPlacementGroupTypeStandard.ToPtr(),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", proximityPlacementGroupsClientCreateOrUpdateResponse.ProximityPlacementGroupsClientCreateOrUpdateResult)
		fakeScenarioVar = *proximityPlacementGroupsClientCreateOrUpdateResponse.ID
	}

	// From step Delete-proximity_placement_group
	{
		_, err := proximityPlacementGroupsClient.Delete(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
	}

	// From step Create_a_vm_with_Host_Encryption_using_encryptionAtHost_property
	virtualMachinesClient := test.NewVirtualMachinesClient(subscriptionId, cred, options)
	{
		fakeStepVar := "signalrswaggertest6"
		virtualMachinesClientCreateOrUpdatePollerResponse, err := virtualMachinesClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			"myVM",
			test.VirtualMachine{
				Location: to.StringPtr(location),
				Plan: &test.Plan{
					Name:      to.StringPtr(fakeStepVar),
					Product:   to.StringPtr("windows-data-science-vm"),
					Publisher: to.StringPtr("microsoft-ads"),
				},
				Properties: &test.VirtualMachineProperties{
					HardwareProfile: &test.HardwareProfile{
						VMSize: test.VirtualMachineSizeTypesStandardDS1V2.ToPtr(),
					},
					NetworkProfile: &test.NetworkProfile{
						NetworkInterfaces: []*test.NetworkInterfaceReference{
							{
								ID: to.StringPtr("/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
								Properties: &test.NetworkInterfaceReferenceProperties{
									Primary: to.BoolPtr(true),
								},
							}},
					},
					OSProfile: &test.OSProfile{
						AdminPassword: to.StringPtr("{your-password}"),
						AdminUsername: to.StringPtr("{your-username}"),
						ComputerName:  to.StringPtr("myVM"),
					},
					SecurityProfile: &test.SecurityProfile{
						EncryptionAtHost: to.BoolPtr(true),
					},
					StorageProfile: &test.StorageProfile{
						ImageReference: &test.ImageReference{
							Offer:     to.StringPtr("windows-data-science-vm"),
							Publisher: to.StringPtr(fakeScenarioVar),
							SKU:       to.StringPtr("windows2016"),
							Version:   to.StringPtr("latest"),
						},
						OSDisk: &test.OSDisk{
							Name:         to.StringPtr("myVMosdisk"),
							Caching:      test.CachingTypesReadOnly.ToPtr(),
							CreateOption: test.DiskCreateOptionTypesFromImage.ToPtr(),
							ManagedDisk: &test.ManagedDiskParameters{
								StorageAccountType: test.StorageAccountTypesStandardLRS.ToPtr(),
							},
						},
					},
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response test.VirtualMachinesClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = virtualMachinesClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if virtualMachinesClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = virtualMachinesClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = virtualMachinesClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.VirtualMachinesClientCreateOrUpdateResult)
	}
}
func scenarioMicrosoftSignalrserviceDeleteonly(t *testing.T) {
	// From step Delete_proximity_placement_group
	proximityPlacementGroupsClient := test.NewProximityPlacementGroupsClient(subscriptionId, cred, options)
	{
		_, err := proximityPlacementGroupsClient.Delete(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
	}
}

func cleanup(t *testing.T) {
}
