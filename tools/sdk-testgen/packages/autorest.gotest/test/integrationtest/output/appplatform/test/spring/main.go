//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package main

import (
	"context"
	"fmt"
	"math/rand"
	"os"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
)

var (
	err                        error
	ctx                        context.Context
	cred                       azcore.TokenCredential
	appName                    = "app01"
	ascDomainName              = ".azuremicroservices.io"
	dnsCname                   = "asc"
	insightsInstrumentationKey string
	serviceName                = "test-scenario-instance"
	blobUrl                    = getEnv("BLOB_URL", "")
	customDomainName           = getEnv("CUSTOM_DOMAIN_NAME", "")
	dnsResourceGroup           = getEnv("DNS_RESOURCE_GROUP", "")
	dnsSubscriptionId          = getEnv("DNS_SUBSCRIPTION_ID", "")
	location                   = getEnv("LOCATION", "eastus")
	mysqlKey                   = getEnv("MYSQL_KEY", "")
	resourceGroupName          = getEnv("RESOURCE_GROUP_NAME", "")
	subscriptionId             = getEnv("AZURE_SUBSCRIPTION_ID", "")
	userAssignedIdentity       = getEnv("USER_ASSIGNED_IDENTITY", "")
)

func main() {
	ctx = context.Background()
	cred, err = azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		panic(err)
	}
	createResourceGroup()
	prepare()
	springSample()
	cleanup()
	deleteResourceGroup()
}

func prepare() {
	// From step Generate_Unique_ServiceName
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"outputs": map[string]interface{}{
			"serviceName": map[string]interface{}{
				"type":  "string",
				"value": "[substring(variables('serviceNameLong'), 0, 12)]",
			},
		},
		"parameters": map[string]interface{}{
			"serviceNamePrefix": map[string]interface{}{
				"type":         "string",
				"defaultValue": "asc-",
			},
		},
		"resources": []interface{}{},
		"variables": map[string]interface{}{
			"serviceNameLong": "[concat(parameters('serviceNamePrefix'), uniqueString(resourceGroup().id))]",
		},
	}
	params := map[string]interface{}{}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       armresources.DeploymentModeIncremental.ToPtr(),
		},
	}
	deploymentExtend := createDeployment("Generate_Unique_ServiceName", &deployment)
	serviceName = deploymentExtend.Properties.Outputs["serviceName"].(map[string]interface{})["value"].(string)

	// From step Create_Application_Insight_Instance
	template = map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"outputs": map[string]interface{}{
			"insightsInstrumentationKey": map[string]interface{}{
				"type":  "string",
				"value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2014-04-01').InstrumentationKey]",
			},
		},
		"parameters": map[string]interface{}{
			"name": map[string]interface{}{
				"type":         "string",
				"defaultValue": "asc-api-ai-instance",
				"metadata": map[string]interface{}{
					"description": "Name of Application Insights resource.",
				},
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "[parameters('name')]",
				"type":       "microsoft.insights/components",
				"apiVersion": "2014-04-01",
				"location":   "eastus",
				"properties": map[string]interface{}{
					"ApplicationId":    "[parameters('name')]",
					"Application_Type": "web",
					"Flow_Type":        "Redfield",
					"Request_Source":   "CustomDeployment",
				},
				"tags": map[string]interface{}{},
			},
		},
	}
	params = map[string]interface{}{}
	deployment = armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       armresources.DeploymentModeIncremental.ToPtr(),
		},
	}
	deploymentExtend = createDeployment("Create_Application_Insight_Instance", &deployment)
	insightsInstrumentationKey = deploymentExtend.Properties.Outputs["insightsInstrumentationKey"].(map[string]interface{})["value"].(string)

	// From step Add_Dns_Cname_Record
	template = map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"parameters": map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{
				"type":         "string",
				"defaultValue": "$(userAssignedIdentity)",
			},
			"utcValue": map[string]interface{}{
				"type":         "string",
				"defaultValue": "[utcNow()]",
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "Add_Dns_Cname_Record",
				"type":       "Microsoft.Resources/deploymentScripts",
				"apiVersion": "2020-10-01",
				"identity": map[string]interface{}{
					"type": "UserAssigned",
					"userAssignedIdentities": map[string]interface{}{
						"[parameters('userAssignedIdentity')]": map[string]interface{}{},
					},
				},
				"kind":     "AzurePowerShell",
				"location": "[resourceGroup().location]",
				"properties": map[string]interface{}{
					"azPowerShellVersion": "6.2",
					"cleanupPreference":   "OnSuccess",
					"environmentVariables": []interface{}{
						map[string]interface{}{
							"name":  "resourceGroupName",
							"value": dnsResourceGroup,
						},
						map[string]interface{}{
							"name":  "dnsZoneName",
							"value": customDomainName,
						},
						map[string]interface{}{
							"name":  "dnsCname",
							"value": "asc",
						},
						map[string]interface{}{
							"name":  "dnsCnameAlias",
							"value": serviceName + ".azuremicroservices.io",
						},
					},
					"forceUpdateTag":    "[parameters('utcValue')]",
					"retentionInterval": "P1D",
					"scriptContent":     "# Copyright (c) 2021 Microsoft Corporation\n# \n# This software is released under the MIT License.\n# https://opensource.org/licenses/MIT\n$resourceGroupName = ${Env:resourceGroupName}\n$dnsCname = ${Env:dnsCname}\n$dnsZoneName = ${Env:dnsZoneName}\n$dnsCnameAlias = ${Env:dnsCnameAlias}\nConnect-AzAccount -Identity\nNew-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ZoneName $dnsZoneName -ResourceGroupName $resourceGroupName -Ttl 3600 -DnsRecords (New-AzDnsRecordConfig -Cname $dnsCnameAlias) -Overwrite\n$RecordSet = Get-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ResourceGroupName $resourceGroupName -ZoneName $dnsZoneName\n$RecordSet",
					"timeout":           "PT1H",
				},
			},
		},
	}
	params = map[string]interface{}{
		"userAssignedIdentity": map[string]interface{}{"value": userAssignedIdentity},
	}
	deployment = armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       armresources.DeploymentModeIncremental.ToPtr(),
		},
	}
	_ = createDeployment("Add_Dns_Cname_Record", &deployment)
}

func springSample() {
	var relativePath string
	var uploadUrl string
	// From step Services_CheckNameAvailability
	servicesClient := test.NewServicesClient(subscriptionId, cred, nil)
	_, err = servicesClient.CheckNameAvailability(ctx,
		location,
		test.NameAvailabilityParameters{
			Name: to.StringPtr(serviceName),
			Type: to.StringPtr("Microsoft.AppPlatform/Spring"),
		},
		nil)
	if err != nil {
		panic(err)
	}

	// From step Services_CreateOrUpdate
	servicesClientCreateOrUpdatePollerResponse, err := servicesClient.BeginCreateOrUpdate(ctx,
		resourceGroupName,
		serviceName,
		test.ServiceResource{
			Location: to.StringPtr(location),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &test.ClusterResourceProperties{},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = servicesClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Services_Get
	_, err = servicesClient.Get(ctx,
		resourceGroupName,
		serviceName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Services_Update
	servicesClientUpdatePollerResponse, err := servicesClient.BeginUpdate(ctx,
		resourceGroupName,
		serviceName,
		test.ServiceResource{
			Tags: map[string]*string{
				"created-by": to.StringPtr("api-test"),
				"hello":      to.StringPtr("world"),
			},
			SKU: &test.SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = servicesClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Services_DisableTestEndpoint
	_, err = servicesClient.DisableTestEndpoint(ctx,
		resourceGroupName,
		serviceName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Services_EnableTestEndpoint
	_, err = servicesClient.EnableTestEndpoint(ctx,
		resourceGroupName,
		serviceName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Services_RegenerateTestKey
	_, err = servicesClient.RegenerateTestKey(ctx,
		resourceGroupName,
		serviceName,
		test.RegenerateTestKeyRequestPayload{
			KeyType: test.TestKeyTypePrimary.ToPtr(),
		},
		nil)
	if err != nil {
		panic(err)
	}

	// From step Services_ListTestKeys
	_, err = servicesClient.ListTestKeys(ctx,
		resourceGroupName,
		serviceName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Certificates_CreateOrUpdate
	certificatesClient := test.NewCertificatesClient(subscriptionId, cred, nil)
	certificateName := "asc-certificate"
	certificatesClientCreateOrUpdatePollerResponse, err := certificatesClient.BeginCreateOrUpdate(ctx,
		resourceGroupName,
		serviceName,
		certificateName,
		test.CertificateResource{
			Properties: &test.CertificateProperties{
				KeyVaultCertName: to.StringPtr("pfx-cert"),
				VaultURI:         to.StringPtr("https://integration-test-prod.vault.azure.net/"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = certificatesClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Certificates_Get
	certificateName = "asc-certificate"
	_, err = certificatesClient.Get(ctx,
		resourceGroupName,
		serviceName,
		certificateName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Certificates_List
	certificatesClientListPager := certificatesClient.List(resourceGroupName,
		serviceName,
		nil)
	for certificatesClientListPager.NextPage(ctx) {
		err = certificatesClientListPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range certificatesClientListPager.PageResponse().Value {
			_ = v
		}
	}

	// From step ConfigServers_Validate
	configServersClient := test.NewConfigServersClient(subscriptionId, cred, nil)
	configServersClientValidatePollerResponse, err := configServersClient.BeginValidate(ctx,
		resourceGroupName,
		serviceName,
		test.ConfigServerSettings{
			GitProperty: &test.ConfigServerGitProperty{
				Label: to.StringPtr("master"),
				SearchPaths: []*string{
					to.StringPtr("/")},
				URI: to.StringPtr("https://github.com/VSChina/asc-config-server-test-public.git"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = configServersClientValidatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step ConfigServers_UpdatePut
	configServersClientUpdatePutPollerResponse, err := configServersClient.BeginUpdatePut(ctx,
		resourceGroupName,
		serviceName,
		test.ConfigServerResource{
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						Label: to.StringPtr("master"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("https://github.com/VSChina/asc-config-server-test-public.git"),
					},
				},
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = configServersClientUpdatePutPollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step ConfigServers_UpdatePatch
	configServersClientUpdatePatchPollerResponse, err := configServersClient.BeginUpdatePatch(ctx,
		resourceGroupName,
		serviceName,
		test.ConfigServerResource{
			Properties: &test.ConfigServerProperties{
				ConfigServer: &test.ConfigServerSettings{
					GitProperty: &test.ConfigServerGitProperty{
						URI: to.StringPtr("https://github.com/azure-samples/spring-petclinic-microservices-config"),
					},
				},
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = configServersClientUpdatePatchPollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step ConfigServers_Get
	_, err = configServersClient.Get(ctx,
		resourceGroupName,
		serviceName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step MonitoringSettings_UpdatePut
	monitoringSettingsClient := test.NewMonitoringSettingsClient(subscriptionId, cred, nil)
	monitoringSettingsClientUpdatePutPollerResponse, err := monitoringSettingsClient.BeginUpdatePut(ctx,
		resourceGroupName,
		serviceName,
		test.MonitoringSettingResource{
			Properties: &test.MonitoringSettingProperties{
				AppInsightsInstrumentationKey: to.StringPtr(insightsInstrumentationKey),
				AppInsightsSamplingRate:       to.Float64Ptr(50),
				TraceEnabled:                  to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = monitoringSettingsClientUpdatePutPollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step MonitoringSettings_Get
	_, err = monitoringSettingsClient.Get(ctx,
		resourceGroupName,
		serviceName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step MonitoringSettings_UpdatePatch
	monitoringSettingsClientUpdatePatchPollerResponse, err := monitoringSettingsClient.BeginUpdatePatch(ctx,
		resourceGroupName,
		serviceName,
		test.MonitoringSettingResource{
			Properties: &test.MonitoringSettingProperties{
				AppInsightsSamplingRate: to.Float64Ptr(100),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = monitoringSettingsClientUpdatePatchPollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Apps_Create
	appsClient := test.NewAppsClient(subscriptionId, cred, nil)
	appsClientCreateOrUpdatePollerResponse, err := appsClient.BeginCreateOrUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		test.AppResource{
			Identity: &test.ManagedIdentityProperties{
				Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("principalid"),
				TenantID:    to.StringPtr("tenantid"),
			},
			Location: to.StringPtr(location),
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("mydeployment1"),
				EnableEndToEndTLS:    to.BoolPtr(false),
				Fqdn:                 to.StringPtr(appName + ".mydomain.com"),
				HTTPSOnly:            to.BoolPtr(false),
				Public:               to.BoolPtr(false),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = appsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Apps_Get
	_, err = appsClient.Get(ctx,
		resourceGroupName,
		serviceName,
		appName,
		&test.AppsClientGetOptions{SyncStatus: nil})
	if err != nil {
		panic(err)
	}

	// From step Deployments_CreateOrUpdate_Default
	deploymentsClient := test.NewDeploymentsClient(subscriptionId, cred, nil)
	deploymentName := "default"
	deploymentsClientCreateOrUpdatePollerResponse, err := deploymentsClient.BeginCreateOrUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		deploymentName,
		test.DeploymentResource{
			Properties: &test.DeploymentResourceProperties{
				DeploymentSettings: &test.DeploymentSettings{
					CPU: to.Int32Ptr(1),
					EnvironmentVariables: map[string]*string{
						"env": to.StringPtr("test"),
					},
					JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Int32Ptr(3),
					RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
				},
				Source: &test.UserSourceInfo{
					Type:             test.UserSourceTypeJar.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr("<default>"),
					Version:          to.StringPtr("1.0"),
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("S0"),
				Capacity: to.Int32Ptr(1),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = deploymentsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Deployments_Get
	deploymentName = "default"
	_, err = deploymentsClient.Get(ctx,
		resourceGroupName,
		serviceName,
		appName,
		deploymentName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Apps_Update_ActiveDeployment
	appsClientUpdatePollerResponse, err := appsClient.BeginUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		test.AppResource{
			Identity: &test.ManagedIdentityProperties{
				Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("principalid"),
				TenantID:    to.StringPtr("tenantid"),
			},
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("default"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = appsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Apps_Update_Disk
	appsClientUpdatePollerResponse, err = appsClient.BeginUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		test.AppResource{
			Identity: &test.ManagedIdentityProperties{
				Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("principalid"),
				TenantID:    to.StringPtr("tenantid"),
			},
			Properties: &test.AppResourceProperties{
				PersistentDisk: &test.PersistentDisk{
					MountPath: to.StringPtr("/data"),
					SizeInGB:  to.Int32Ptr(10),
				},
				TemporaryDisk: &test.TemporaryDisk{
					MountPath: to.StringPtr("/tmpdisk"),
					SizeInGB:  to.Int32Ptr(3),
				},
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = appsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Apps_List
	appsClientListPager := appsClient.List(resourceGroupName,
		serviceName,
		nil)
	for appsClientListPager.NextPage(ctx) {
		err = appsClientListPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range appsClientListPager.PageResponse().Value {
			_ = v
		}
	}

	// From step Bindings_Create
	bindingsClient := test.NewBindingsClient(subscriptionId, cred, nil)
	bindingName := "mysql-binding"
	bindingsClientCreateOrUpdatePollerResponse, err := bindingsClient.BeginCreateOrUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		bindingName,
		test.BindingResource{
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"databaseName": "mysqldb",
					"username":     "test",
				},
				Key:        to.StringPtr(mysqlKey),
				ResourceID: to.StringPtr("/subscriptions/b46590cb-a111-4b84-935f-c305aaf1f424/resourceGroups/mary-west/providers/Microsoft.DBforMySQL/servers/fake-sql"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = bindingsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Bindings_Update
	bindingName = "mysql-binding"
	bindingsClientUpdatePollerResponse, err := bindingsClient.BeginUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		bindingName,
		test.BindingResource{
			Properties: &test.BindingResourceProperties{
				BindingParameters: map[string]interface{}{
					"databaseName": "mysqldb2",
					"username":     "test2",
				},
				Key:        to.StringPtr(mysqlKey),
				ResourceID: to.StringPtr("/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = bindingsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Bindings_Get
	bindingName = "mysql-binding"
	_, err = bindingsClient.Get(ctx,
		resourceGroupName,
		serviceName,
		appName,
		bindingName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Bindings_List
	bindingsClientListPager := bindingsClient.List(resourceGroupName,
		serviceName,
		appName,
		nil)
	for bindingsClientListPager.NextPage(ctx) {
		err = bindingsClientListPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range bindingsClientListPager.PageResponse().Value {
			_ = v
		}
	}

	// From step Bindings_Delete
	bindingName = "mysql-binding"
	bindingsClientDeletePollerResponse, err := bindingsClient.BeginDelete(ctx,
		resourceGroupName,
		serviceName,
		appName,
		bindingName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = bindingsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Apps_ValidateDomain
	_, err = appsClient.ValidateDomain(ctx,
		resourceGroupName,
		serviceName,
		appName,
		test.CustomDomainValidatePayload{
			Name: to.StringPtr(customDomainName),
		},
		nil)
	if err != nil {
		panic(err)
	}

	// From step CustomDomains_CreateOrUpdate
	customDomainsClient := test.NewCustomDomainsClient(subscriptionId, cred, nil)
	domainName := dnsCname + "." + customDomainName
	customDomainsClientCreateOrUpdatePollerResponse, err := customDomainsClient.BeginCreateOrUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		domainName,
		test.CustomDomainResource{
			Properties: &test.CustomDomainProperties{
				CertName: to.StringPtr("asc-certificate"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = customDomainsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step CustomDomains_Update
	domainName = dnsCname + "." + customDomainName
	customDomainsClientUpdatePollerResponse, err := customDomainsClient.BeginUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		domainName,
		test.CustomDomainResource{
			Properties: &test.CustomDomainProperties{
				CertName: to.StringPtr("asc-certificate"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = customDomainsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step CustomDomains_Get
	domainName = dnsCname + "." + customDomainName
	_, err = customDomainsClient.Get(ctx,
		resourceGroupName,
		serviceName,
		appName,
		domainName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step CustomDomains_List
	customDomainsClientListPager := customDomainsClient.List(resourceGroupName,
		serviceName,
		appName,
		nil)
	for customDomainsClientListPager.NextPage(ctx) {
		err = customDomainsClientListPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range customDomainsClientListPager.PageResponse().Value {
			_ = v
		}
	}

	// From step Apps_GetResourceUploadUrl
	appsClientGetResourceUploadURLResponse, err := appsClient.GetResourceUploadURL(ctx,
		resourceGroupName,
		serviceName,
		appName,
		nil)
	if err != nil {
		panic(err)
	}
	relativePath = *appsClientGetResourceUploadURLResponse.RelativePath
	uploadUrl = *appsClientGetResourceUploadURLResponse.UploadURL

	// From step Upload_File
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"parameters": map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{
				"type":         "string",
				"defaultValue": "$(userAssignedIdentity)",
			},
			"utcValue": map[string]interface{}{
				"type":         "string",
				"defaultValue": "[utcNow()]",
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "Upload_File",
				"type":       "Microsoft.Resources/deploymentScripts",
				"apiVersion": "2020-10-01",
				"identity": map[string]interface{}{
					"type": "UserAssigned",
					"userAssignedIdentities": map[string]interface{}{
						"[parameters('userAssignedIdentity')]": map[string]interface{}{},
					},
				},
				"kind":     "AzurePowerShell",
				"location": "[resourceGroup().location]",
				"properties": map[string]interface{}{
					"azPowerShellVersion": "6.2",
					"cleanupPreference":   "OnSuccess",
					"environmentVariables": []interface{}{
						map[string]interface{}{
							"name":        "uploadUrl",
							"secureValue": uploadUrl,
						},
						map[string]interface{}{
							"name":        "blobUrl",
							"secureValue": blobUrl,
						},
					},
					"forceUpdateTag":    "[parameters('utcValue')]",
					"retentionInterval": "P1D",
					"scriptContent": "$uploadUri = ${Env:uploadUrl}\n$blobUri = ${Env:blobUrl}\n$localFilePath = '/tmp/temp.file'\nfunction DownloadJarFromBlob([string]$blobUri, [string]$localOutputFilePath) {\n	$BlobFile = [Microsoft.WindowsAzure.Storage.Blob.CloudBlob]::new($blobUri)\n	$DownLoadTask = $BlobFile.DownloadToFileAsync($localOutputFilePath, 4)\n	$DownLoadTask\n}\n\nfunction UploadToFileShare([string]$uploadUri, [string]$localFilePath) {\n	$CloudFile = [Microsoft.WindowsAzure.Storage.File.CloudFile]::New($uploadUri)\n	$UploadTask = $CloudFile.UploadFromFileAsync($localFilePath)\n	$UploadTask\n}\n\nConnect-AzAccount -Identity\nDownloadJarFromBlob $blobUri $localFilePath\nUploadToFileShare $uploadUri $localFilePath",
					"timeout": "PT1H",
				},
			},
		},
	}
	params := map[string]interface{}{
		"userAssignedIdentity": map[string]interface{}{"value": userAssignedIdentity},
	}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       armresources.DeploymentModeIncremental.ToPtr(),
		},
	}
	_ = createDeployment("Upload_File", &deployment)

	// From step Deployments_CreateOrUpdate
	deploymentName = "blue"
	deploymentsClientCreateOrUpdatePollerResponse, err = deploymentsClient.BeginCreateOrUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		deploymentName,
		test.DeploymentResource{
			Properties: &test.DeploymentResourceProperties{
				DeploymentSettings: &test.DeploymentSettings{
					CPU: to.Int32Ptr(1),
					EnvironmentVariables: map[string]*string{
						"env": to.StringPtr("test"),
					},
					JvmOptions:     to.StringPtr("-Xms1G -Xmx3G"),
					MemoryInGB:     to.Int32Ptr(3),
					RuntimeVersion: test.RuntimeVersionJava8.ToPtr(),
				},
				Source: &test.UserSourceInfo{
					Type:             test.UserSourceTypeJar.ToPtr(),
					ArtifactSelector: to.StringPtr("sub-module-1"),
					RelativePath:     to.StringPtr(relativePath),
					Version:          to.StringPtr("1.0"),
				},
			},
			SKU: &test.SKU{
				Name:     to.StringPtr("S0"),
				Capacity: to.Int32Ptr(2),
				Tier:     to.StringPtr("Standard"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = deploymentsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Apps_Update
	appsClientUpdatePollerResponse, err = appsClient.BeginUpdate(ctx,
		resourceGroupName,
		serviceName,
		appName,
		test.AppResource{
			Identity: &test.ManagedIdentityProperties{
				Type:        test.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("principalid"),
				TenantID:    to.StringPtr("tenantid"),
			},
			Properties: &test.AppResourceProperties{
				ActiveDeploymentName: to.StringPtr("blue"),
			},
		},
		nil)
	if err != nil {
		panic(err)
	}
	_, err = appsClientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Deployments_Restart
	deploymentName = "blue"
	deploymentsClientRestartPollerResponse, err := deploymentsClient.BeginRestart(ctx,
		resourceGroupName,
		serviceName,
		appName,
		deploymentName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = deploymentsClientRestartPollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Deployments_Stop
	deploymentName = "blue"
	deploymentsClientStopPollerResponse, err := deploymentsClient.BeginStop(ctx,
		resourceGroupName,
		serviceName,
		appName,
		deploymentName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = deploymentsClientStopPollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Deployments_Start
	deploymentName = "blue"
	deploymentsClientStartPollerResponse, err := deploymentsClient.BeginStart(ctx,
		resourceGroupName,
		serviceName,
		appName,
		deploymentName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = deploymentsClientStartPollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Deployments_GetLogFileUrl
	deploymentName = "blue"
	_, err = deploymentsClient.GetLogFileURL(ctx,
		resourceGroupName,
		serviceName,
		appName,
		deploymentName,
		nil)
	if err != nil {
		panic(err)
	}

	// From step Deployments_List
	deploymentsClientListPager := deploymentsClient.List(resourceGroupName,
		serviceName,
		appName,
		&test.DeploymentsClientListOptions{Version: []string{}})
	for deploymentsClientListPager.NextPage(ctx) {
		err = deploymentsClientListPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range deploymentsClientListPager.PageResponse().Value {
			_ = v
		}
	}

	// From step Deployments_ListForCluster
	deploymentsClientListForClusterPager := deploymentsClient.ListForCluster(resourceGroupName,
		serviceName,
		&test.DeploymentsClientListForClusterOptions{Version: []string{}})
	for deploymentsClientListForClusterPager.NextPage(ctx) {
		err = deploymentsClientListForClusterPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range deploymentsClientListForClusterPager.PageResponse().Value {
			_ = v
		}
	}

	// From step Services_List
	servicesClientListPager := servicesClient.List(resourceGroupName,
		nil)
	for servicesClientListPager.NextPage(ctx) {
		err = servicesClientListPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range servicesClientListPager.PageResponse().Value {
			_ = v
		}
	}

	// From step Services_ListBySubscription
	servicesClientListBySubscriptionPager := servicesClient.ListBySubscription(nil)
	for servicesClientListBySubscriptionPager.NextPage(ctx) {
		err = servicesClientListBySubscriptionPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range servicesClientListBySubscriptionPager.PageResponse().Value {
			_ = v
		}
	}

	// From step Deployments_Delete
	deploymentName = "blue"
	deploymentsClientDeletePollerResponse, err := deploymentsClient.BeginDelete(ctx,
		resourceGroupName,
		serviceName,
		appName,
		deploymentName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = deploymentsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step CustomDomains_Delete
	domainName = dnsCname + "." + customDomainName
	customDomainsClientDeletePollerResponse, err := customDomainsClient.BeginDelete(ctx,
		resourceGroupName,
		serviceName,
		appName,
		domainName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = customDomainsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Apps_Delete
	appName := "app01"
	appsClientDeletePollerResponse, err := appsClient.BeginDelete(ctx,
		resourceGroupName,
		serviceName,
		appName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = appsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Certificates_Delete
	certificateName = "asc-certificate"
	certificatesClientDeletePollerResponse, err := certificatesClient.BeginDelete(ctx,
		resourceGroupName,
		serviceName,
		certificateName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = certificatesClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Services_Delete
	servicesClientDeletePollerResponse, err := servicesClient.BeginDelete(ctx,
		resourceGroupName,
		serviceName,
		nil)
	if err != nil {
		panic(err)
	}
	_, err = servicesClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}

	// From step Skus_List
	sKUsClient := test.NewSKUsClient(subscriptionId, cred, nil)
	sKUsClientListPager := sKUsClient.List(nil)
	for sKUsClientListPager.NextPage(ctx) {
		err = sKUsClientListPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range sKUsClientListPager.PageResponse().Value {
			_ = v
		}
	}

	// From step Operations_List
	operationsClient := test.NewOperationsClient(cred, nil)
	operationsClientListPager := operationsClient.List(nil)
	for operationsClientListPager.NextPage(ctx) {
		err = operationsClientListPager.Err()
		if err != nil {
			panic(err)
		}
		for _, v := range operationsClientListPager.PageResponse().Value {
			_ = v
		}
	}
}

func cleanup() {
	// From step delete_cname_record
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"parameters": map[string]interface{}{
			"userAssignedIdentity": map[string]interface{}{
				"type":         "string",
				"defaultValue": "$(userAssignedIdentity)",
			},
			"utcValue": map[string]interface{}{
				"type":         "string",
				"defaultValue": "[utcNow()]",
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "delete_cname_record",
				"type":       "Microsoft.Resources/deploymentScripts",
				"apiVersion": "2020-10-01",
				"identity": map[string]interface{}{
					"type": "UserAssigned",
					"userAssignedIdentities": map[string]interface{}{
						"[parameters('userAssignedIdentity')]": map[string]interface{}{},
					},
				},
				"kind":     "AzurePowerShell",
				"location": "[resourceGroup().location]",
				"properties": map[string]interface{}{
					"azPowerShellVersion": "6.2",
					"cleanupPreference":   "OnSuccess",
					"environmentVariables": []interface{}{
						map[string]interface{}{
							"name":  "resourceGroupName",
							"value": dnsResourceGroup,
						},
						map[string]interface{}{
							"name":  "dnsCname",
							"value": "asc",
						},
						map[string]interface{}{
							"name":  "dnsZoneName",
							"value": customDomainName,
						},
					},
					"forceUpdateTag":    "[parameters('utcValue')]",
					"retentionInterval": "P1D",
					"scriptContent":     "$resourceGroupName = ${Env:resourceGroupName}\n$dnsCNAME = ${Env:dnsCname}\n$dnsZoneName = ${Env:dnsZoneName}\n\nConnect-AzAccount -Identity\n\n$RecordSet = Get-AzDnsRecordSet -Name $dnsCname -RecordType CNAME -ResourceGroupName $resourceGroupName -ZoneName $dnsZoneName\n$Result = Remove-AzDnsRecordSet -RecordSet $RecordSet\n$Result",
					"timeout":           "PT1H",
				},
			},
		},
	}
	params := map[string]interface{}{
		"userAssignedIdentity": map[string]interface{}{"value": userAssignedIdentity},
	}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       armresources.DeploymentModeIncremental.ToPtr(),
		},
	}
	_ = createDeployment("delete_cname_record", &deployment)
}

func createResourceGroup() error {
	rand.Seed(time.Now().UnixNano())
	resourceGroupName = fmt.Sprintf("go-sdk-sample-%d", rand.Intn(1000))
	rgClient := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)
	param := armresources.ResourceGroup{
		Location: to.StringPtr(location),
	}
	_, err := rgClient.CreateOrUpdate(ctx, resourceGroupName, param, nil)
	if err != nil {
		panic(err)
	}
	return nil
}

func deleteResourceGroup() error {
	resourceGroup := armresources.NewResourceGroupsClient(subscriptionId, cred, nil)
	pollerResponse, err := resourceGroup.BeginDelete(ctx, resourceGroupName, nil)
	if err != nil {
		panic(err)
	}
	_, err = pollerResponse.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}
	return nil
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func createDeployment(deploymentName string, deployment *armresources.Deployment) *armresources.DeploymentExtended {
	deployClient := armresources.NewDeploymentsClient(subscriptionId, cred, nil)
	poller, err := deployClient.BeginCreateOrUpdate(
		ctx,
		resourceGroupName,
		deploymentName,
		*deployment,
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{},
	)
	if err != nil {
		panic(err)
	}
	res, err := poller.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		panic(err)
	}
	return &res.DeploymentExtended
}
