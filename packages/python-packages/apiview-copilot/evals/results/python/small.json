[
    {
        "testcase": "few_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the __init__ constructor and instead provide a separate factory classmethod (e.g. from_connection_string) that creates an instance from a connection string.",
                    "comment": "The constructor of ImageAnalysisClient in the sync namespace accepts a connection_string argument, which violates the guideline that the __init__ method must not take a connection string."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Remove duplicate model definitions in the aio sub-namespace. The PeopleResult model should be defined only once (in the root models namespace) and reused in both sync and async clients.",
                    "comment": "Defining PeopleResult in the azure.ai.vision.imageanalysis.models.aio namespace duplicates models between sync and async packages, which violates the guideline against duplicating models between the root and aio namespaces."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the 'connection_string' parameter from the __init__ method and instead implement a separate from_connection_string factory classmethod.",
                    "comment": "Per the guideline 'python_design.html#python-client-connection-string', the constructor must not accept a connection string."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 92,
                    "bad_code": "def send_request(",
                    "suggestion": "Declare this method using the async/await syntax (i.e. use 'async def send_request(...') to ensure proper async behavior.",
                    "comment": "Async client methods should use async/await as required by the guideline 'python_design.html#python-client-async-keywords'."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 382,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Remove the duplicate PeopleResult model from the aio namespace and share the model from the common models namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespaces, as specified in 'python_design.html#python-models-async'."
                }
            ]
        },
        "total_violations": 2,
        "violations_found": 3,
        "true_positives": 2,
        "false_positives": 1,
        "false_negatives": 0,
        "percent_coverage": 100,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 3,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded in the CONTEXT, accurately identifying and addressing all the guidelines mentioned without introducing unsupported information or omitting any critical details.",
        "overall_score": 85
    },
    {
        "testcase": "many_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the constructor and implement a separate factory method (e.g. from_connection_string) to create the client using a connection string.",
                    "comment": "The constructor must not accept a connection string; using a factory method for connection string support is required by the guidelines."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-same-name-sync-async"
                    ],
                    "line_no": 53,
                    "bad_code": "class azure.ai.vision.imageanalysis.aio.AsyncImageAnalysisClient(ImageAnalysisClient): implements AsyncContextManager",
                    "suggestion": "Rename the async client to ImageAnalysisClient (i.e. without the 'Async' prefix) and keep it under the 'azure.ai.vision.imageanalysis.aio' namespace so that both sync and async clients share the same client name.",
                    "comment": "Async and sync clients must share the same client name; adding an 'Async' prefix violates this guideline."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-async"
                    ],
                    "line_no": 432,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.aio.PeopleResult(MutableMapping[str, Any]):",
                    "suggestion": "Move PeopleResult to the common models namespace (azure.ai.vision.imageanalysis.models) instead of duplicating it in the aio sub-namespace.",
                    "comment": "Models should not be duplicated between the root and aio namespaces."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "tags = \"tags\"",
                    "suggestion": "Rename the enum member to use UPPERCASE (e.g., TAGS = \"tags\") in accordance with the guidelines.",
                    "comment": "Enum member names must be in UPPERCASE to comply with naming conventions."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace the get_result/set_result methods with a property (with a getter and setter) to expose the result, for example, using @property and @result.setter.",
                    "comment": "Simple getter and setter functions are discouraged; properties should be used instead."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 413,
                    "bad_code": "def set_result(self, obj) -> None",
                    "suggestion": "Replace the set_result method with a property setter (e.g., @result.setter def result(self, value): ...).",
                    "comment": "Simple setter methods should be implemented as property setters."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to DetectedPerson (using PascalCase) to adhere to type naming conventions.",
                    "comment": "Type names should be in PascalCase; 'detectedPerson' violates this guideline."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-static-methods"
                    ],
                    "line_no": 88,
                    "bad_code": "@staticmethod",
                    "suggestion": "Remove the staticmethod decorator and refactor send_request as an instance method or a module-level function.",
                    "comment": "Static methods are discouraged; module-level functions or instance methods should be used instead."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 30,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "Insert a '*' after the required positional parameters so that all optional parameters are keyword-only. For example:\n\n  def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional operation\u2010specific parameters must be keyword-only."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-constructor-api-version-argument-1"
                    ],
                    "line_no": 54,
                    "bad_code": "def __init__(\n        self, \n        endpoint: str, \n        credential: Union[AzureKeyCredential, AsyncTokenCredential], \n    ) -> None",
                    "suggestion": "Add an optional keyword-only api_version parameter to the async client __init__ signature, for example: \n    def __init__(self, endpoint: str, credential: Union[AzureKeyCredential, AsyncTokenCredential], *, api_version: str = ..., **kwargs: Any) -> None",
                    "comment": "The async client constructor is missing the optional api_version parameter required by the guidelines."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-connection-string"
                    ],
                    "line_no": 10,
                    "bad_code": "connection_string: Optional[str] = None,",
                    "suggestion": "Remove the connection_string parameter from the constructor and provide a separate from_connection_string factory method if connection string support is needed.",
                    "comment": "The client constructor must not accept a connection string as an argument, per the guideline 'python_design.html#python-client-connection-string'."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 34,
                    "bad_code": "        gender_neutral_caption: Optional[bool] = ...,",
                    "suggestion": "Insert a '*' in the parameter list of analyze_from_url (after the required parameters) to enforce that optional parameters are keyword-only.",
                    "comment": "Optional operation-specific arguments should be keyword-only per 'python_design.html#python-client-optional-arguments-keyword-only'."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-static-methods"
                    ],
                    "line_no": 88,
                    "bad_code": "@staticmethod",
                    "suggestion": "Remove the static method declaration and convert send_request to an instance method (or a module-level function) to conform to the guidelines.",
                    "comment": "Static methods should be avoided; prefer instance methods or module-level functions as described in 'python_implementation.html#python-codestyle-static-methods'."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-type-naming"
                    ],
                    "line_no": 209,
                    "bad_code": "class azure.ai.vision.imageanalysis.models.detectedPerson(MutableMapping[str, Any]):",
                    "suggestion": "Rename the class to 'DetectedPerson' so that it uses PascalCase.",
                    "comment": "Type names should be in PascalCase, as required by 'python_implementation.html#python-codestyle-type-naming'."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 411,
                    "bad_code": "def get_result(self) -> ObjectsResult",
                    "suggestion": "Replace the get_result method with a property to expose the result.",
                    "comment": "Simple getter methods should be implemented as properties, as outlined in 'python_implementation.html#python-codestyle-properties'."
                },
                {
                    "rule_ids": [
                        "python_implementation.html#python-codestyle-properties"
                    ],
                    "line_no": 413,
                    "bad_code": "def set_result(self, obj) -> None",
                    "suggestion": "Replace the set_result method with a property setter to modify the result.",
                    "comment": "Simple setter methods should be implemented as properties, as specified in 'python_implementation.html#python-codestyle-properties'."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-models-enum-name-uppercase"
                    ],
                    "line_no": 517,
                    "bad_code": "    tags = 'tags'",
                    "suggestion": "Rename the enum member to 'TAGS = 'tags'' so that it is in ALL CAPS.",
                    "comment": "Enum member names should use uppercase letters as specified in 'python_design.html#python-models-enum-name-uppercase'."
                }
            ]
        },
        "total_violations": 10,
        "violations_found": 7,
        "true_positives": 6,
        "false_positives": 0,
        "false_negatives": 3,
        "percent_coverage": 60,
        "rule_matches_wrong_line": 1,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [
            [
                [
                    "python_design.html#python-client-optional-arguments-keyword-only"
                ],
                30,
                34
            ]
        ],
        "similarity": 4,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is fully grounded and complete, accurately reflecting the guidelines provided in the CONTEXT without introducing unsupported information or omitting critical details.",
        "overall_score": 75
    },
    {
        "testcase": "no_violations",
        "expected": {
            "status": "Success",
            "violations": []
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 91,
                    "bad_code": "def send_request(",
                    "suggestion": "Change the method definition to use async/await. For example:\n\nasync def send_request(self, request: HttpRequest, *, stream: bool = False, **kwargs: Any) -> Awaitable[AsyncHttpResponse]",
                    "comment": "All asynchronous client methods must be declared with async/await. In the async client (in the .aio namespace) the send_request method is defined as a regular def even though it returns an Awaitable, which violates the guideline in python_design.html#python-client-async-keywords."
                }
            ]
        },
        "total_violations": 0,
        "violations_found": 1,
        "true_positives": 0,
        "false_positives": 1,
        "false_negatives": 0,
        "percent_coverage": 0,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 1,
        "groundedness": 1,
        "groundedness_reason": "The RESPONSE is completely ungrounded because there is no CONTEXT provided to support any part of the RESPONSE.",
        "overall_score": 0.0
    },
    {
        "testcase": "multiple_same_violations",
        "expected": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 16,
                    "bad_code": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional operation-specific parameters should be provided as keyword-only arguments. Inserting the '*' after the required parameters forces callers to use parameter names."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 28,
                    "bad_code": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be keyword-only; add '*' after required parameters in the method signature."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 62,
                    "bad_code": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "For async methods, optional parameters must also be keyword-only. Insert '*' to force keyword-only usage."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 74,
                    "bad_code": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "suggestion": "async def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be made keyword-only by inserting '*' after the required parameters."
                }
            ]
        },
        "actual": {
            "status": "Error",
            "violations": [
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 16,
                    "bad_code": "def analyze(",
                    "suggestion": "Insert a '*' after the required parameters so that the optional parameters become keyword-only. For example:\n\ndef analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional operation-specific arguments must be keyword-only as per guideline python_design.html#python-client-optional-arguments-keyword-only to avoid misuse by passing them positionally."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 28,
                    "bad_code": "def analyze_from_url(",
                    "suggestion": "Insert a '*' after the required parameters to force the following optional parameters to be specified as keyword-only. For example:\n\ndef analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be declared as keyword-only in accordance with guideline python_design.html#python-client-optional-arguments-keyword-only."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 62,
                    "bad_code": "async def analyze(",
                    "suggestion": "Modify the method signature to include a '*' after the required parameters so that the optional ones are keyword-only. For example:\n\nasync def analyze(self, image_data: bytes, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Even in async clients, optional parameters must be keyword-only as specified by guideline python_design.html#python-client-optional-arguments-keyword-only."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-optional-arguments-keyword-only"
                    ],
                    "line_no": 74,
                    "bad_code": "async def analyze_from_url(",
                    "suggestion": "Update the signature by inserting a '*' after the required parameters. For example:\n\nasync def analyze_from_url(self, image_url: str, visual_features: List[VisualFeatures], *, gender_neutral_caption: Optional[bool] = ..., language: Optional[str] = ..., model_version: Optional[str] = ..., smart_crops_aspect_ratios: Optional[List[float]] = ..., **kwargs: Any) -> ImageAnalysisResult",
                    "comment": "Optional parameters should be keyword-only to prevent accidental positional binding, as required by guideline python_design.html#python-client-optional-arguments-keyword-only."
                },
                {
                    "rule_ids": [
                        "python_design.html#python-client-async-keywords"
                    ],
                    "line_no": 87,
                    "bad_code": "def send_request(",
                    "suggestion": "In the async client, all service operations must use async/await. Change the method definition to 'async def send_request(' so that it properly supports asynchronous behavior.",
                    "comment": "The asynchronous client must use async/await keywords for its operations, as specified by guideline python_design.html#python-client-async-keywords."
                }
            ]
        },
        "total_violations": 4,
        "violations_found": 5,
        "true_positives": 4,
        "false_positives": 1,
        "false_negatives": 0,
        "percent_coverage": 100,
        "rule_matches_wrong_line": 0,
        "wrong_rule_details": [],
        "line_matches_wrong_rule": 0,
        "wrong_line_details": [],
        "similarity": 4,
        "groundedness": 5,
        "groundedness_reason": "The RESPONSE is entirely based on the CONTEXT, accurately conveying all essential information without introducing unsupported details or omitting critical points.",
        "overall_score": 91
    },
    {
        "average_score": 62.75,
        "total_evals": 4
    }
]