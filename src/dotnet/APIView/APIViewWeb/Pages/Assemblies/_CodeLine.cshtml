@using ApiView
@using APIView.Model
@using APIView.DIff
@using System.Text.RegularExpressions
@using APIViewWeb.Models;
@using System.Text
@model APIViewWeb.Models.CodeLineModel
@functions
{
    public static string RemoveMultipleSpaces(string str)
    {
        return String.Join(" ", str.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));
    }
}
@{
    bool isRemoved = Model.Kind == DiffLineKind.Removed;
    string lineClass = Model.Kind switch
    {
        DiffLineKind.Removed => "code-removed",
        DiffLineKind.Added => "code-added",
        _ => ""
    };

    bool isSectionHeading = false;
    bool isSubSectionHeading = false;
    string headingClass = String.Empty;
    string documentationRow = String.Empty;
    string codeLineDisplay = String.Empty;
    string codeLineClass = (!String.IsNullOrWhiteSpace(Model.CodeLine.LineClass)) ? Model.CodeLine.LineClass.Trim() : String.Empty;

    if (Model.CodeLine.SectionKey != null )
    {
        isSectionHeading = true;
        headingClass = $"code-line-section-heading-{Model.CodeLine.SectionKey}";
    }

    if(Model.CodeLine.IsDocumentation)
    {
        documentationRow = "code-line-documentation";
        codeLineDisplay = "hidden-row";
    }

    if (Regex.IsMatch(codeLineClass, @".*lvl_[0-9]+_parent.*"))
    {
        isSubSectionHeading = true;
    }
    var userPreference = TempData["UserPreference"] as UserPreferenceModel ?? new UserPreferenceModel();
    var rowClass = RemoveMultipleSpaces($"code-line {headingClass} {codeLineClass} {lineClass} {codeLineDisplay} {documentationRow}");
    var lineDetailsClass = RemoveMultipleSpaces($"line-details-button-cell {lineClass}");
    var codeClass = RemoveMultipleSpaces($"code {lineClass}");
    var cellContent = String.Empty;
    for (int i = 0; i < Model.CodeLine.Indent; i++)
    {
        if ((isSectionHeading || isSubSectionHeading) && (i == Model.CodeLine.Indent - 1))
        {
            cellContent += @"<svg height='23' width='23'>
                                <line x1='0' y1='50%' x2='90%' y2='50%' style='stroke:rgb(217,217,214);stroke-width:1' />
                                <line x1='0' y1='0' x2='0' y2='100%' style='stroke:rgb(217,217,214);stroke-width:1.5' />
                            </svg>";
        }else
        {
            cellContent += @"<svg height='23' width='23'>
                                <line x1='0' y1='0' x2='0' y2='100%' style='stroke:rgb(217,217,214);stroke-width:1.5' />
                            </svg>";
        }
    }
    cellContent += Model.CodeLine.DisplayString;
}

<tr class="@rowClass" data-line-id="@(isRemoved ? string.Empty : Model.CodeLine.ElementId)">
    <td class="line-details">
        <table>
            <tr>
                @if(userPreference.HideLineNumbers == true)
                {
                    var lineNumberClass = RemoveMultipleSpaces($"line-number d-none {lineClass}");
                    <td class="@lineNumberClass"><span>@Model.LineNumber</span></td>
                }
                else
                {
                    var lineNumberClass = RemoveMultipleSpaces($"line-number {lineClass}");
                    if (Model.CodeLine.IsDocumentation)
                    {
                        <td class="@lineNumberClass invisible"><span></span></td>
                    }
                    else
                    {
                        <td class="@lineNumberClass"><span>@Model.LineNumber</span></td>
                    }
                }
                <td class="@lineDetailsClass comment-icon-cell">
                    @if (!isRemoved && Model.CodeLine.ElementId != null)
                    {
                        <a class="line-comment-button">+</a>
                    }
                    else
                    {
                        <a class="line-comment-button invisible">+</a>// Added for visual consistency
                    }
                </td>
                <td class="@lineDetailsClass">
                    @if(Model.DocumentedByLines?.Length  > 0)
                    {
                        <span class="line-toggle-documentation-button" data-documented-by="[@String.Join(",",Model.DocumentedByLines)]">
                            <svg height='23' width='23' class="invisible">
                                <line x1='52%' y1='0' x2='52%' y2='30%' style='stroke:rgb(255,140,0);stroke-width:1.2' />
                            </svg>
                            <i class="fa-regular fa-square-plus"></i>
                        </span>
                    }
                    @if (Model.CodeLine.IsDocumentation)
                    {
                        <span>
                            <svg height='23' width='23'>
                                <line x1='52%' y1='0' x2='52%' y2='100%' style='stroke:rgb(255,140,0);stroke-width:1.2' />
                            </svg>
                        </span>
                    }
                </td>
                <td class="@lineDetailsClass">
                    @if (isSectionHeading || isSubSectionHeading)
                    {
                        <span class="row-fold-caret"><i class="fa-solid fa-angle-right"></i></span>
                    }
                </td>
            </tr>
        </table>
    </td>
    <td class="@codeClass">
        @{
            string collapseMenu = (isSectionHeading || isSubSectionHeading) ? "<span class='row-fold-elipsis'><i class='fa-solid fa-ellipsis'></i></span>" : "";
        }
        @if (Model.Kind == DiffLineKind.Removed)
        {
            var codeRemovedSign = @"<svg height='23' width='23'>
                                    <text x='40%' y='70%'>-</text>
                                </svg>";
            <div class="code-inner">@Html.Raw(codeRemovedSign)@Html.Raw(cellContent)</div>
        }
        else if(Model.Kind == DiffLineKind.Added)
        {
            var codeAddedSign = @"<svg height='23' width='23'>
                                        <text x='40%' y='70%'>+</text>
                                    </svg>";
            <div class="code-inner">@Html.Raw(codeAddedSign)@Html.Raw(cellContent)</div>
        }
        else 
        {
            var initialIndent = "<svg height='23' width='23'></svg>";
            <div class="code-inner">@Html.Raw(initialIndent)@Html.Raw(cellContent)@Html.Raw(collapseMenu)</div> 
        }
    </td>
</tr>
@if (isSectionHeading)
{
    <partial name="_CodeLinePartial" model="@Model.CodeLine.SectionKey" />
}
@if (Model.Diagnostics.Any())
{
    var errorDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Default || d.Level == APIView.CodeDiagnosticLevel.Error);
    var warningDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Warning);
    var infoDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Info);
    <tr class="code-diagnostics" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@errorDiags" />
    </tr>
    <tr class="code-diagnostics" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@warningDiags" />
    </tr>
    <tr class="code-diagnostics" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@infoDiags" />
    </tr>
}

@if (Model.CommentThread != null)
{
    <partial name="_CommentThreadPartial" model="@Model.CommentThread" />
}